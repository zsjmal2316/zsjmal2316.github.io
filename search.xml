<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo搭建静态博客</title>
      <link href="2021/01/25/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/01/25/Hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用melody主题搭建博客"><a href="#Hexo使用melody主题搭建博客" class="headerlink" title="Hexo使用melody主题搭建博客"></a>Hexo使用melody主题搭建博客</h1><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo是一个快速、简洁且高效的博客框架，可以通过Markdown解析语法，生成对应的html，安装Hexo只需要几分钟时间，如果只是单单写自己的文章，很推荐使用Hexo</p><p>Hexo基础很搭建容易，只需要几个步骤，但后续的其他（评论设置、搜索设置以及搬迁到自己的个人域名等…）还是需要花一些时间去操作，并没有想象的简单。</p><p>melody是简洁美观的主题，而且支持很多功能，只需要套用即可，当然Hexo也有好多<a href="https://hexo.io/themes/">主题</a>，操作步骤跟melody主题也是相差不多。</p><blockquote><p>hexo-theme-melody主题下载：<a href="https://github.com/Molunerfinn/hexo-theme-melody">https://github.com/Molunerfinn/hexo-theme-melody</a></p><p>hexo-thmem-melody主题文档：<a href="https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html">https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124150916.png" alt="image-20210124150916213"></p><h2 id="下载-git和node"><a href="#下载-git和node" class="headerlink" title="下载 git和node"></a>下载 git和node</h2><p>Hexo是基于与node.js和git来搭建，所以需要安装这些应用程序（下述基于Linux搭建，Windows和Mac都差不多）</p><p><strong>下载git</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y git</span><br></pre></td></tr></table></figure><p><strong>下载node</strong></p><blockquote><p>下载官方地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p></blockquote><p><img src="https://i.loli.net/2021/01/12/hIud9SVUMOB3tRf.png" alt="image-20210112202942057"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://npm.taobao.org/mirrors/node/v14.<span class="number">15.4</span>/node-v14.<span class="number">15.4</span>-linux-x64.tar.xz</span><br><span class="line">$ tar xf node-v14.<span class="number">15.4</span>-linux-x64.tar.xz           //下载之后解压</span><br><span class="line">$ mv node-v14.<span class="number">15.4</span>-linux-x64 /usr/local           //将解药的包移动到/usr/local</span><br><span class="line">$ cd /usr/local</span><br><span class="line">$ ln -s node-v14.<span class="number">15.4</span>-linux-x64 node              //建立软链接</span><br></pre></td></tr></table></figure><p><strong>Linux会默认有安装node，将旧版本的删除，安装最新的</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /usr/bin/node &amp;&amp; rm -rf /usr/bin/npm</span><br><span class="line">$ ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">$ ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><p><strong>设置淘宝的cnpm加速源，通过cnpm下载hexo会更加快速</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">$ ln -s /usr/local/node/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><strong>安装hexo并初始化目录</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br><span class="line">$ ln -s /usr/local/node/bin/hexo /usr/bin/hexo</span><br><span class="line"></span><br><span class="line">$ mkdir /blog</span><br><span class="line">$ hexo init /blog      //初始化文件夹</span><br></pre></td></tr></table></figure><p><strong>初始化目录下的文件如下，文件下的内容可以参考中文官网的解释<a href="https://hexo.io/zh-cn/docs/setup">Setup</a></strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config<span class="selector-class">.yml</span></span><br><span class="line">├── package<span class="selector-class">.json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><blockquote><p>_config.yml：网站的配置信息，大部分配置都会在这个文件</p><p>package.json：应用程序信息，可以移除自己安装的一些插件</p><p>scaffolads：模板目录，可通过模板改变你每次生成的文章内容</p><p>source：用户资源存放的地址，如（文档、分类、标签）</p><p>themes：主题目录，根据不同的主题来生成静态页面</p></blockquote><p><strong>生成一个页面，并发布到本地</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;新的页面&quot;             <span class="comment">//新建一个页面，会放入到source/_posts/下</span></span><br><span class="line">$ hexo g                        <span class="comment">//构建静态文件</span></span><br><span class="line">$ hexo s                        <span class="comment">//启动服务，默认情况下，访问地址为：http://localhost:4000/</span></span><br></pre></td></tr></table></figure><p><strong>浏览器输入http:localhost:4000，搭建成功</strong></p><blockquote><p>我使用的是购买服务器地址来访问，不是在本地localhost，但操作都是一样的</p><p>注意：记得在安全组放通4000端口即可</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124164935.png" alt="image-20210124164935572"></p><h3 id="hexo的命令说明"><a href="#hexo的命令说明" class="headerlink" title="hexo的命令说明"></a>hexo的命令说明</h3><p><strong>这里只列出了一些常用的指令，如果想更详细的说明，可到中文官网查看<a href="https://hexo.io/zh-cn/docs/commands">Commands</a></strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>hexo init [folder]</td><td>初始化一个网站目录，如果没有指明目录，则在当前目录下生成</td></tr><tr><td>hexo new [layout] <title></td><td>新建一篇文章</td></tr><tr><td>hexo g或generate</td><td>生成静态文件</td></tr><tr><td>hexo s或server</td><td>启动服务，通过浏览器访问地址</td></tr><tr><td>hexo d或deploy</td><td>部署网站，可以部署到GitHub或Coding上</td></tr><tr><td>hexo clean</td><td>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</td></tr><tr><td>hexo publish [layout] <filename></td><td>发表草稿</td></tr><tr><td>hexo list</td><td>列出网站资料</td></tr><tr><td>hexo version</td><td>显示hexo版本</td></tr></tbody></table><h2 id="使用melody主题"><a href="#使用melody主题" class="headerlink" title="使用melody主题"></a>使用melody主题</h2><p><strong>下载melody主题和渲染插件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone -<span class="selector-tag">b</span> master https://github.com/Longlongyu/hexo-theme-Cxo themes/Cxo</span><br><span class="line">$ cnpm install hexo-renderer-pug hexo-renderer-stylus</span><br><span class="line"></span><br><span class="line">$ vim /blog/_config.xml     //hexo初始的目录修改配置文件</span><br><span class="line">theme: melody               //改成melody</span><br></pre></td></tr></table></figure><p><strong>主题有两个hexo版本，对应你的版本进行下载和生成对应的文件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124170458.png" alt="image-20210124170458079"></p><blockquote><p>如果时跟着笔者操作部署的，那么版本应该是4.2.0版本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">hexo-cli: <span class="number">4.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>按照文档的配置说明，Hexo低于5.0的，推荐将**<code>./node_modules/hexo-theme-melody/_config.yml</code><strong>复制到hexo工作目录下</strong><code>source/_data/melody.yml</code><strong>，如果不存在</strong><code>source/_data</code>**目录，则自己创建一个</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog/source/</span><br><span class="line">$ mkdir _data</span><br><span class="line">$ cp ./node_modules/hexo-theme-melody/_config.yml /blog/source/_data/melody.yml</span><br></pre></td></tr></table></figure><h3 id="主题页面和主题功能配置"><a href="#主题页面和主题功能配置" class="headerlink" title="主题页面和主题功能配置"></a>主题页面和主题功能配置</h3><p>标签页、分类页、幻听片Slides页面、相册、404页面配置，通过作者<a href="https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html">主题文档</a>来一步步操作，添加自己需要的页面，过程很简单只需要跟着操作就行</p><p>主题功能配置有语言、社交图标、导航菜单、文章版权、友链、鼠标点击特效等，需要自己花时间去操作添加，因为每个人的需求都不一样，所以这里就不再操作演示</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p><strong>创建一个仓库，名称为：用户名+github.io，这样github才知道你是要部署静态页面</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124170624.png" alt="image-20210124170624553"></p><p><strong>编辑初始目录下的_config.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git                                                        </span><br><span class="line">  repo: https://github.com/zsjmal2316/zsjmal2316.github.io.git      </span><br><span class="line">  branch: master                                                 </span><br></pre></td></tr></table></figure><blockquote><p>type：部署的类型为git</p><p>repo：仓库地址</p><p>branch：分支默认为master即可</p></blockquote><p><strong>通过命令部署上github</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d          <span class="comment">//因为设置了_config.yml文件，所以会自动部署到github</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如果出现部署错误，可能是没有定义用户邮箱和用户名（邮箱不是随意的，而是绑定你的github，可以充当账号登录的邮箱）</p><ul><li><p>git config –global user.email “用户邮箱”</p></li><li><p>git config –global user.name “用户名”</p></li></ul></li><li><p>如果已经设置，此时会让你输入账号和密码，输入之后即部署上你的仓库中</p></li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124231724.png" alt="image-20210124231724336"></p><h2 id="通过SSH免密钥部署Github"><a href="#通过SSH免密钥部署Github" class="headerlink" title="通过SSH免密钥部署Github"></a>通过SSH免密钥部署Github</h2><p><strong>生成非对称密钥rsa</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-<span class="selector-tag">keygen</span> -t rsa -D &quot;随意写&quot;        <span class="comment">//接下来的全部回车即可</span></span><br></pre></td></tr></table></figure><p><strong>查看密钥生成的公钥</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124171727.png" alt="image-20210124171727851"></p><p><strong>复制公钥到仓库中</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124171930.png" alt="image-20210124171930323"></p><blockquote><p>Title：可以自己随意起</p><p>Allow write access：需要勾选</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124172039.png" alt="image-20210124172039786"></p><p><strong>编辑初始目录下的_config.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:zsjmal2316/zsjmal2316.github.io.git    //改成ssh地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p><strong>PS：后续的部署就不需要再输入用户名和密码了</strong></p></blockquote><h2 id="个人域名托管至GitHub"><a href="#个人域名托管至GitHub" class="headerlink" title="个人域名托管至GitHub"></a>个人域名托管至GitHub</h2><p>个人域名可以托管到GitHub中，然后就可以通过自己的购买的域名进行访问，当然不使用自己的域名，用GitHub上的（用户名.github.io）访问也没有问题，如果有自己域名的还是推荐使用自己的域名，方便记忆</p><p>笔者的域名是在腾讯云买的，所以下述的域名解析是腾讯云的，当然其他平台购买的域名也都是这么操作</p><p><strong>域名解析，通过CNAME记录将github默认的域名指向自己的域名</strong></p><blockquote><p>注意：添加解析之后，需要一段时间才能访问自己的网站，可能要10个小时或更久，如果你网页显示的是503错误（表示：服务器当前忙，暂时无法响应服务器），代表是服务解析的还没成功，需要等待！</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124204240.png" alt="image-20210124204240204"></p><p><strong>在初始目录下source目录中添加CNAME文件</strong></p><blockquote><p>CNAME：内容是自己的域名</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd source/</span><br><span class="line">$ ls</span><br><span class="line">404  categories  CNAME  _posts  tags</span><br><span class="line"></span><br><span class="line">$ cat CNAME </span><br><span class="line">myboke<span class="selector-class">.ink</span></span><br></pre></td></tr></table></figure><p><strong>部署上github</strong></p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>查看是否部署成功，仓库–&gt;settings</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124205127.png" alt="image-20210124205127101"></p><h2 id="分享系统"><a href="#分享系统" class="headerlink" title="分享系统"></a>分享系统</h2><p>通过Share.js进行分享链接，可参考文档<a href="https://github.com/overtrue/share.js/">Share.js</a></p><p><strong>安装Share.js</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install social-share<span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启sharejs</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  disabled_sites:   //过滤不分享的站点</span><br></pre></td></tr></table></figure><p><strong>浏览结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124230345.png" alt="image-20210124230345301"></p><h2 id="评论系统Gitalk"><a href="#评论系统Gitalk" class="headerlink" title="评论系统Gitalk"></a>评论系统Gitalk</h2><p>melody主题（第三方）支持很多评论系统，我选择的是<a href="https://github.com/gitalk/gitalk">Gitalk</a>系统，也是部署在GitHub上，通过github Oauth应用的client id和secret值进行连接.</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124205524.png" alt="image-20210124205524135"></p><p><strong>进入个人设置，选择Developer settings–&gt;OAuth Apps–&gt;New OAuth APP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210228.png" alt="image-20210124210228138"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210432.png" alt="image-20210124210432721"></p><blockquote><p>Application name：可以自己随意起名</p><p>Homepage URL：填写github默认的域名</p><p>Application description：应用描述，可以自己随意</p><p>Authorization callback URL：回调的网址，就写自己的个人域名</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210538.png" alt="image-20210124210538191"></p><p><strong>在source/_data/melody.yml下开启Gitalk</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog/source/_data</span><br><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  client_id: <span class="string">&#x27;创建的client_id&#x27;</span></span><br><span class="line">  client_secret: <span class="string">&#x27;创建的client_secret&#x27;</span></span><br><span class="line">  repo: <span class="string">&#x27;你的网站仓库名&#x27;</span></span><br><span class="line">  owner: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">  admin: [ <span class="string">&#x27;用户名&#x27;</span> ]</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211239.png" alt="image-20210124211239130"></p><p><strong>浏览自己的网站进行测试，登录成功之后，没有报错则成功部署Gitalk</strong></p><blockquote><p>如果出现Not found或其他问题，请确认自己域名设置和仓库名以及用户名有没有填写错误</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211501.png" alt="image-20210124211501200"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211845.png" alt="image-20210124211845084"></p><h2 id="搜索功能Algolia与local-search"><a href="#搜索功能Algolia与local-search" class="headerlink" title="搜索功能Algolia与local search "></a>搜索功能Algolia与local search </h2><p>melody主题提供了两种搜索功能，一个是Algolia，一个是local search。这里推荐使用local search，一是方便且也快速，二是相对简单。Algolia虽也快，但毕竟是国外的，搜索过程中需要初始化一些时间。</p><h3 id="algolia设置"><a href="#algolia设置" class="headerlink" title="algolia设置"></a>algolia设置</h3><p>algolia是一家为网站与移动应用提供托管式搜索API的初创企业，网站或移动应用只需嵌入简单代码数分钟就可以实现搜索功能</p><p>algolia有两种安装，即<a href="https://github.com/oncletom/hexo-algolia">hexo-algolia</a>和<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch</a>，我使用的是后者，其实两者都相差不多</p><p><strong>登录<a href="https://www.algolia.com/users/sign_in%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87github%E5%92%8CGoogle%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95">https://www.algolia.com/users/sign_in，可以通过github和Google账号登录</a></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124220640.png" alt="image-20210124220640741"></p><p><strong>登录后，创建一个index，可以随意起名</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221025.png" alt="image-20210124221025028"></p><p><strong>选择侧边栏的API Keys</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221121.png" alt="image-20210124221121846"></p><p><strong>选择All API Keys，然后新建一个API Key</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221701.png" alt="image-20210124221700953"></p><p><strong>安装hexo-algoliasearch</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加hexo-algoliasearch插件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">plugins:</span><br><span class="line">  - hexo-algoliasearch</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加algolia配置</strong></p><blockquote><p>在你的Your API Keys中，都有以下的参数，其余配置说明可以到<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch</a>查看</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">algolia:</span><br><span class="line">  appId: <span class="string">&quot;Application ID&quot;</span></span><br><span class="line">  apiKey: <span class="string">&quot;选择你创建的API Key&quot;</span></span><br><span class="line">  adminApiKey: <span class="string">&quot;Admin API Key&quot;</span></span><br><span class="line">  chunkSize: <span class="number">5000</span></span><br><span class="line">  indexName: <span class="string">&quot;创建的index名称&quot;</span></span><br><span class="line">  fields:</span><br><span class="line">    - content:strip</span><br><span class="line">    - slug</span><br><span class="line">    - tags</span><br><span class="line">    - title</span><br><span class="line">    - path</span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启algolia</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">algolia_search:</span><br><span class="line">  enable: true                                //开启algolia搜索</span><br><span class="line">  hits:                                       //每次搜索显示的页面</span><br><span class="line">    per_page: <span class="number">10</span></span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts      </span><br><span class="line">    hits_empty: <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> # if there are no result</span><br><span class="line">    hits_stats: <span class="string">&quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span></span><br></pre></td></tr></table></figure><p><strong>部署上algolia，需要将文件的索引上传到algolia，这样才能搜索的到文章标题</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g </span><br><span class="line">$ hexo algolia</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Testing HEXO_ALGOLIA_INDEXING_KEY permissions.</span><br><span class="line">INFO start processing</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> 30 records to index (post, page).</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Indexing chunk 1 of 1 (29 records).</span><br><span class="line">............</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Indexing done.</span><br></pre></td></tr></table></figure><blockquote><p>如果出现报错，则添加HEXO_ALGOLIA_INDEXING_KEY=API Key（你创建的Key）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export HEXO_ALGOLIA_INDEXING_KEY=API Key</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure><p><strong>浏览algolia，查看是否成功</strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124223447.png" alt="image-20210124223447588"></p><h3 id="local-search设置"><a href="#local-search设置" class="headerlink" title="local search设置"></a>local search设置</h3><p>local search在本地，所以搜索站点上的标题内容会更加快速</p><p><strong>安装hexo-generator-search</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加hexo-generator-search参数</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启local search</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>部署上网站</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>查看搜索结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124225045.png" alt="image-20210124225045285"></p><h2 id="消除图片的标签"><a href="#消除图片的标签" class="headerlink" title="消除图片的标签"></a>消除图片的标签</h2>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo+图床</title>
      <link href="2021/01/23/Typora-PicGo-%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/01/23/Typora-PicGo-%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-PicGo-图床"><a href="#Typora-PicGo-图床" class="headerlink" title="Typora+PicGo+图床"></a>Typora+PicGo+图床</h1><h2 id="Typora介绍"><a href="#Typora介绍" class="headerlink" title="Typora介绍"></a>Typora介绍</h2><p>对于Typora的介绍，首先你得知道什么是Markdown？</p><blockquote><p>Markdown是一种轻量标记语言，通过简单的语法，使用普通文本的得到一定的格式，可以很容易就上手写笔记，比如通过#号代表的是一级标题，通过##号代表的是二级标记，现今很多的文章都基于Markdown来写，统一的格式，不管在哪里写文章，都可以完美的呈现出来</p><p>学习Markdown：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a></p><p>学习Typora：<a href="https://www.typora.io/">官网</a></p><p>Typora下载地址：<a href="https://www.typora.io/#windows%EF%BC%88%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%AE%89%E8%A3%85%E9%83%BD%E6%98%AF%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%8D%B3%E5%8F%AF%EF%BC%89">https://www.typora.io/#windows（根据自己的系统下载，安装都是下一步即可）</a></p></blockquote><p>Typora是一款简洁的Markdown编辑器，它提供了实时预览功能，可以帮助你在写文档的时候专注于内容的本身，支持<a href="https://support.typora.io/Auto-Numbering/">标题自动编号</a>，支持<a href="https://support.typora.io/Resize-Image/">图片缩放</a>，<strong>还有该文章要说明的图床功能，typora都支持</strong>，当然包括你想要的写法，typora几乎都有，这里就不一一介绍了</p><p>除了这些，typora也有许多绚丽的<a href="https://theme.typora.io/">主题</a>，可以实时时刻的渲染。不过我觉得不好的一点是，创建图表功能，内面的内容不能回车写，希望后续能出现这个功能</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123173250.png"></p><h2 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h2><p>PicGo是一款图床工具，就是可以把本地图片转换成URL链接上传到图床中，它是一款用Electron-vue开发的软件，支持七牛云、腾讯云COS、GitHub、Gitee、SM.MS、阿里云OSS等图床，简洁又易用，功能也十分强大。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123174143.png"></p><blockquote><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases%EF%BC%88%E6%A0%B9%E6%8D%AE%E7%9A%84%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%EF%BC%89">https://github.com/Molunerfinn/PicGo/releases（根据的自己的系统下载）</a></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123175343.png"></p><p><strong>注意：安装的第二步，选择位置不要选择默认的位置，否则可能会导致权限的问题</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123175938.png"></p></blockquote><h2 id="配置SM-MS、GitHub与阿里云OSS图床"><a href="#配置SM-MS、GitHub与阿里云OSS图床" class="headerlink" title="配置SM.MS、GitHub与阿里云OSS图床"></a>配置SM.MS、GitHub与阿里云OSS图床</h2><h3 id="SM-MS图床配置"><a href="#SM-MS图床配置" class="headerlink" title="SM.MS图床配置"></a>SM.MS图床配置</h3><p>PicGo默认的图床，在我看来，SM.MS是最简单的图床，只需要配置一个Token（令牌）就可以了，也是一个免费的图床，上传的速度也还可以，图床也有5G存储空间，一般的图片也才几十KB或者几百KB，所以图片存储一般足够用了（注意：每张图片大小有5M的限制，每次最多上传10张图片）。</p><p>当然有一个弊端，就是它是国外图床，访问图片需要基于你的网络才能看到（如果网络不好可能会导致看不到图片），当然要看你是写的文章是在本地，还是在你购买的服务器上，如果你购买的服务器能够访问得到SM.MS，那么观看文章图片应该是没有问题的</p><p><strong>SM.MS注册</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182052.png"></p><p><strong>进入视图，获取Token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182202.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182230.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182251.png"></p><p><strong>打开PicGo图床工具，将复制的Token粘贴到设定的Token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182438.png"></p><p><strong>配置Typora</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182931.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123183401.png"></p><p><strong>点击图片右键上传即可上传到SM.MS图床，当然如果想要全部上传则选择格式–&gt;图像–&gt;上传本地所有图片</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123211805.png"></p><h3 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h3><p>GitHub也可以当做图床使用，同样是一个免费的，配置比SM.MS麻烦些，相信大家在想使用GitHub图床时折腾不少时间（包括我自己），主要是要在PicGo配置正确，简单是简单，但是出现问题可能就需要花一些时间了</p><p>GitHub也有一个弊端，因为也是在国外的，不使用它的原因就是因为它很慢，当然可能也有加速的方法，只是我不知道罢了</p><p><strong>创建一个创库</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123200935.png"></p><p><strong>点击自己的头像，选择Settings</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201247.png"></p><p><strong>选择Developer settings，点击Personal Access tokens，然后创建token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201457.png"></p><p><strong>创建token，名字可以随机起，但是一定要勾选repo可访问的范围</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201610.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201654.png"></p><p><strong>打开PicGo图床工具，将复制的Token粘贴到设定的Token</strong></p><blockquote><p><strong>设定的仓库名：</strong>用户名/仓库名（一定要知道你的用户名是哪个，别填写错误了，你可以点击自己的头像，就可以看到自己的用户名）</p><p><strong>设定分支名：</strong>默认master就好（当然你也可以自己再创建其他分支，然后填写即可）</p><p><strong>设定的Token：</strong>就是上述创建的token（只有一次显示机会）</p><p><strong>指定存储路径：</strong>可填可不填（如果不填所有图片存储在当前目录/，如果填写img/，PicGo会自动帮你在GitHub上创建img文件夹，并存储在img/下）</p><p><strong>设定自定义域名：</strong><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123202148.png"></p><p><strong>Typora设置与上述SM.MS设置是一样的</strong></p><h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p>阿里云的对象存储是收费的，不过价格并不是很贵，价格的计算包括存储费用、流量费用和请求费用，如果不差钱的朋友，对于上述两个图床来说<strong>建议选择OSS</strong>，按套餐来可以选择一年40G也才9快钱，当然也有按量计费，看自己的需求选择</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204119.png"></p><p><strong>购买OSS</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204439.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204605.png"></p><p><strong>支付成功后，移动到自己的头像，选择访问控制</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204709.png"></p><p><strong>创建一个用户，输入登录名称和显示名称，点击确认，要求手机验证</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204856.png"></p><p><strong>选择权限管理，点击授权–&gt;新增授权</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204947.png"></p><p><strong>选择认证管理，创建AccessKey，会生成AccessKeyID和AccessKeySecret，AccessKeySecret是无法找回的，一定要保存好，后续还要用来配置PicGo</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205052.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205111.png"></p><p><strong>进入到OSS控制台<a href="https://oss.console.aliyun.com/overview%EF%BC%8C%E5%88%9B%E5%BB%BABucket">https://oss.console.aliyun.com/overview，创建Bucket</a></strong></p><blockquote><ol><li>Bucket名称要全局唯一</li><li>区域最好选择离自己近的</li><li>权限选择公有图，图片才能让其他人访问的到</li></ol><p>上传的文件链接格式为：https://[Bucket].[地区].aliyuncs.com/文件目录及名称</p><p>比如我的：<a href="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png">https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png"></p><p><strong>打开PicGo图床工具，将AccessKey复制到阿里云图床中</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123210746.png"></p><h2 id="其他图床"><a href="#其他图床" class="headerlink" title="其他图床"></a>其他图床</h2><p>七牛云存储也是挺好，新用户可以有一个月的体验，提供100年免费10G空间，不过一个月后需要绑定自己的域名，而且是要备案过的，有兴趣的朋友可以去试试</p><p>Gitee和GitHub差不多，不过需要安装一个gitee插件，其余的配置跟GitHub差不多</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123213003.png"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firewalld应用操作</title>
      <link href="2021/01/21/firewalld%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/21/firewalld%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Firewalld防火墙"><a href="#Firewalld防火墙" class="headerlink" title="Firewalld防火墙"></a>Firewalld防火墙</h1><h2 id="Firewalld基本概述"><a href="#Firewalld基本概述" class="headerlink" title="Firewalld基本概述"></a>Firewalld基本概述</h2><p>RHEL/CentOS系统中继承了多款防火墙管理工具，其中Firewalld（Dynamic Firewall Manager of Linux systems, Linux系统的动态防护墙管理器）服务是默认的防火墙配置管理工具，它拥有基于CLI（命令行界面）和基于GUI（图形界面）的两种管理方式</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121155052.png"></p><h2 id="Firewalld与Iptables的不同点"><a href="#Firewalld与Iptables的不同点" class="headerlink" title="Firewalld与Iptables的不同点"></a>Firewalld与Iptables的不同点</h2><blockquote><ol><li>Firewalld可以动态修改单挑规则，而不需要想iptables那样，在修改了规则必须得全部刷新才可以生效</li><li>Firewalld在使用上要比iptables人性化很多，即使不明白“四表五链”，且对TCP/IP协议不理解的也可以实现大部分功能</li><li>Firewalld跟iptables比起来，每个服务器都需要去设置才能放行，因为默认是拒绝，而iptables里默认是每个服务是允许，需要拒绝的才去限制</li><li>Firewalld加入了区域（zone）的概念</li></ol></blockquote><h2 id="Firewalld区域概述"><a href="#Firewalld区域概述" class="headerlink" title="Firewalld区域概述"></a>Firewalld区域概述</h2><p>简单说，区域就是Firewalld预先准备了几套防火墙策略集合（策略模板），用户可以根据生产场景不同而选择适合的策略集合，从而实现防火墙策略之间的快速切换</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121155707.png"></p><p><strong>区域默认规则策略表</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121164357.png"></p><blockquote><p><strong>注意</strong></p><ul><li>一个zone区域仅能绑定一个网卡，设定不同的匹配规则</li><li>一个zone区域又可以针对不同的源地址设定不同的规则</li></ul></blockquote><h2 id="Firewalld的命令参数"><a href="#Firewalld的命令参数" class="headerlink" title="Firewalld的命令参数"></a>Firewalld的命令参数</h2><p><strong>1. 查看firewalld的有哪些配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qc firewalld</span><br><span class="line">/etc/dbus-1/system.d/FirewallD.conf</span><br><span class="line">/etc/firewalld/firewalld.conf</span><br><span class="line">/etc/firewalld/lockdown-whitelist.xml</span><br><span class="line">/etc/sysconfig/firewalld</span><br></pre></td></tr></table></figure><p><strong>2. firewalld区域模板文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/lib/firewalld/zones/</span><br><span class="line">$ ls</span><br><span class="line">block<span class="selector-class">.xml</span>  drop<span class="selector-class">.xml</span>      home<span class="selector-class">.xml</span>      public<span class="selector-class">.xml</span>   work<span class="selector-class">.xml</span></span><br><span class="line">dmz<span class="selector-class">.xml</span>    external<span class="selector-class">.xml</span>  internal<span class="selector-class">.xml</span>  trusted<span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure><p><strong>3. firewalld的规则分两种状态</strong></p><blockquote><ol><li>runtime（运行是）：修改规则马上生效，但是临时生效（不建议）</li><li>permanent（持久配置）：修改后需要reload重载才会生效（推荐）</li></ol></blockquote><h3 id="Firewalld-cmd命令分类"><a href="#Firewalld-cmd命令分类" class="headerlink" title="Firewalld-cmd命令分类"></a>Firewalld-cmd命令分类</h3><p><strong>zone区域相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–get-default-zone</td><td>查询默认的区域名称</td></tr><tr><td>–set-default-zone=&lt;区域名称&gt;</td><td>设置默认的区域，使其永久生效</td></tr><tr><td>–get-active-zones</td><td>显示当前正在使用的区域与网卡名称</td></tr><tr><td>–get-zones</td><td>显示总共可用的区域</td></tr><tr><td>–new-zone=&lt;区域名称&gt;</td><td>新增区域</td></tr></tbody></table><p><strong>services服务相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–get-services</td><td>显示预先定义的服务</td></tr><tr><td>–add-service=&lt;服务名&gt;</td><td>设置默认区域允许该服务的流量</td></tr><tr><td>–remove-service=&lt;服务名&gt;</td><td>设置默认区域不在允许该服务的流量</td></tr></tbody></table><p><strong>POST端口相关命令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–add-port=&lt;端口号/协议&gt;</td><td>设置默认区域允许端口的流量</td></tr><tr><td>–remove-port=&lt;端口/协议&gt;</td><td>设置默认区域不再允许端口的流量</td></tr></tbody></table><p><strong>Interface网卡相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–add-interface=&lt;网卡名称&gt;</td><td>将源自该网卡的所有流量都导向某个指定区域</td></tr><tr><td>–change-interface=&lt;网卡名称&gt;</td><td>将某个网卡与区域进行关联</td></tr></tbody></table><p><strong>其他相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–list-all</td><td>显示当前区域的网卡配置参数，资源，端口以及服务</td></tr><tr><td>–reload</td><td>让”持久生效”的配置规则立即生效，并覆盖当前的配置规则</td></tr></tbody></table><h2 id="防火墙区域配置策略"><a href="#防火墙区域配置策略" class="headerlink" title="防火墙区域配置策略"></a>防火墙区域配置策略</h2><p>为了能正常使用Firewalld服务和相关工具去管理防护墙，必须启动Firewalld服务，同时关闭以前旧防火墙相关服务</p><p><strong>1. 禁止传统防火墙服务</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="attribute">mask</span> iptables                  <span class="comment">//禁止iptables</span></span><br><span class="line">Created symlink from /etc/systemd/system/iptables.service to /dev/null.</span><br><span class="line">$ systemctl <span class="attribute">mask</span> ip6tables                 <span class="comment">//禁止ip6tables</span></span><br><span class="line">Created symlink from /etc/systemd/system/ip6tables.service to /dev/null.</span><br><span class="line">$ systemctl <span class="attribute">mask</span> ebtables                  <span class="comment">//禁止ebtables</span></span><br><span class="line">Created symlink from /etc/systemd/system/ebtables.service to /dev/null.</span><br></pre></td></tr></table></figure><p><strong>2. 启动Firewalld防火墙，并加入开机自启动服务</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start firewalld</span><br><span class="line">$ systemctl enable firewalld</span><br></pre></td></tr></table></figure><p><strong>3. 备份Firewalld相关配置文件（重要）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -a /etc/firewalld/ /etc/firewalld_backup</span><br></pre></td></tr></table></figure><h3 id="zone区域配置"><a href="#zone区域配置" class="headerlink" title="zone区域配置"></a>zone区域配置</h3><p><strong>1. 查看当前默认区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-default-zone</span><br><span class="line">public</span><br></pre></td></tr></table></figure><p><strong>2. 查看当前活跃的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">public</span><br><span class="line">  interfaces: eth0 eth1</span><br></pre></td></tr></table></figure><h3 id="配置默认区域并设置白名单"><a href="#配置默认区域并设置白名单" class="headerlink" title="配置默认区域并设置白名单"></a>配置默认区域并设置白名单</h3><blockquote><ol><li>设定默认区域为drop（拒绝所有）</li><li>设置白名单IP访问，将源10.0.0.0/24网段加入trusted区域</li></ol></blockquote><p><strong>1. 将当前默认区域修改drop</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --set-default-zone=drop </span><br><span class="line">$ firewall-cmd –reload</span><br><span class="line"><span class="comment">//设置默认区域不需要加--permanent参数，重载之后就可以永久生效</span></span><br></pre></td></tr></table></figure><p><strong>2. 将网络接口关联至drop区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：不指定区域，则默认会加入到public区域</span></span><br><span class="line">$ firewall-cmd --add-interface=eth0 --add-interface=eth1 --zone=drop  --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然如果指定错误，可以使用--change-interface参数指定回其他区域</span></span><br><span class="line">$ firewall-cmd --change-interface=eth0 --zone=drop  --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新加载才能永久生效</span></span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 将10.0.0.0/24网段加入trusted白名单</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=10.0.0.0/24 --zone=trusted  --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>4. 查看当前处于活动的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">drop</span><br><span class="line">  interfaces: eth0 eth1</span><br><span class="line">trusted</span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="允许IP地址访问http、ssh服务"><a href="#允许IP地址访问http、ssh服务" class="headerlink" title="允许IP地址访问http、ssh服务"></a>允许IP地址访问http、ssh服务</h3><blockquote><ol><li>设定来源IP，172.16.1.0/24网段允许访问http</li><li>设定来源IP，10.0.0.0/24仅允许访问ssh服务</li><li>其他网段走默认区域</li></ol></blockquote><p><strong>1. 允许10.0.0.0/24的IP地址访问ssh</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=10.0.0.0/24 --permanent --zone=public</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 将172.16.1.0/24网段加入白名单</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=172.16.1.0/24 --permanent --zone=trusted</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 查看活动的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">public</span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.1</span>/<span class="number">24</span></span><br><span class="line">trusted</span><br><span class="line">  sources: <span class="number">172.16</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><p><strong><code>PS：设置到了trusted区域是可以访问HTTP的，但是trusted区域还能访问所有的服务，所以设定在trusted区域是可以解决问题，但是安全性却不高了</code></strong></p><blockquote><p>如何实现172.16.1.0/24网段只能访问HTTP</p><ul><li><p>方法一：新建区域（不建议）</p></li><li><p>方法二：使用富规则（推荐，下述章节有讲解）</p></li></ul></blockquote><h3 id="防火墙端口访问策略"><a href="#防火墙端口访问策略" class="headerlink" title="防火墙端口访问策略"></a>防火墙端口访问策略</h3><p><strong>1. 配置防火墙，访问80/tcp(http)，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=80/tcp --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 访问80/tcp(http)，161/upd(snmp)端口的流量策略，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=80/tcp --add-port=161/udp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-ports       <span class="comment">//查看端口</span></span><br><span class="line">80/tcp 161/udp</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --list-all         <span class="comment">//查看默认区域的全部配置</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br><span class="line">  services: ssh dhcpv6-client</span><br><span class="line">  ports: <span class="number">80</span>/tcp <span class="number">161</span>/udp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><p><strong>3. 允许请求HTTP与 HTTPS协议的流量设置为永久允许，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-service=http --add-service=https –zone=public</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-services      <span class="comment">//查看服务</span></span><br><span class="line">ssh dhcpv6-client http https</span><br></pre></td></tr></table></figure><p><strong>4. 允许请求php-fpm服务的流量设置为永久允许，并立即生效</strong></p><blockquote><p>方法一：添加端口就可以并重载</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=9000/tcp --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>方法二：复制一个service目录的模板，修改名字跟协议</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/usr/lib/firewalld/services </span><br><span class="line"></span><br><span class="line">$ cp http<span class="selector-class">.xml</span> php-fpm<span class="selector-class">.xml</span></span><br><span class="line">$ cat php-fpm<span class="selector-class">.xml</span>                        <span class="comment">//查看修改后的结果</span></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;service&gt;</span><br><span class="line">  &lt;short&gt;php-fpm&lt;/short&gt;</span><br><span class="line">  &lt;description&gt;php-fpm is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. This option is not required for viewing pages locally or developing Web pages.&lt;/description&gt;</span><br><span class="line">  &lt;port protocol=&quot;tcp&quot; port=&quot;9000&quot;/&gt;</span><br><span class="line">&lt;/service&gt;</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=php-fpm --zone=public --permanent   //设定服务php-fpm</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-all                                       <span class="comment">//查看</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br><span class="line">  services: ssh dhcpv6-client http https php-fpm</span><br><span class="line">  ports: <span class="number">80</span>/tcp <span class="number">161</span>/udp <span class="number">9000</span>/tcp</span><br></pre></td></tr></table></figure></blockquote><h2 id="Firewalld端口转发策略"><a href="#Firewalld端口转发策略" class="headerlink" title="Firewalld端口转发策略"></a>Firewalld端口转发策略</h2><p>端口转发是指传统的目标地址映射，实现外网访问内网资源</p><p><strong>转发命令格式为</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd -pernanent -zone=&lt;区域&gt; --add-forward-port=port=&lt;源端口&gt;:proto=&lt;协议&gt;:toport=&lt;目标端口号&gt;:toadd=&lt;目标ip地址&gt;</span><br></pre></td></tr></table></figure><p><strong>1. 转发本机555/tcp端口的流量至22/tcp端口，要求当前和长期有效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-forward-port=555:proto=tcp:toport=22:toaddr=10.0.0.7 --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 移除本机转发的555/tcp端口策略，要求当前和长期有效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --remove-forward-port=555:proto=tcp:toport=22:toaddr=10.0.0.7 --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 如果需要将本地的10.0.0.7:6666端口转发至后端10.0.0.8:22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要开启IP伪装</span></span><br><span class="line">$ firewall-cmd --add-masquerade --permanent</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-forward-port=port=6666:proto=tcp:toport=22:toaddr=10.0.0.8 --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Firewalld富规则策略"><a href="#Firewalld富规则策略" class="headerlink" title="Firewalld富规则策略"></a>Firewalld富规则策略</h2><p>Firewalld中的富规则可以设置的更细致、更详细的策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更优针对性的策略配置</p><p><strong>1. 富规则手册</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//富规则通用结构</span></span><br><span class="line">$ man firewalld<span class="selector-class">.richlanguage</span></span><br><span class="line">rule</span><br><span class="line">    <span class="selector-attr">[source]</span></span><br><span class="line">    <span class="selector-attr">[destination]</span></span><br><span class="line">    service|port|protocol|icmp-block|icmp-type|masquerade|forward-port|source-port</span><br><span class="line">    <span class="selector-attr">[log]</span></span><br><span class="line">    <span class="selector-attr">[audit]</span></span><br><span class="line">    <span class="selector-attr">[accept|reject|drop|mark]</span></span><br><span class="line"></span><br><span class="line">rule <span class="selector-attr">[family=&quot;ipv4|ipv6&quot;]</span></span><br><span class="line">source [not] address=&quot;address[/mask]&quot;|mac=&quot;mac-address&quot;|ipset=&quot;ipset&quot;</span><br><span class="line">destination [not] address=&quot;address[/mask]&quot;</span><br><span class="line">service name=&quot;service name&quot;</span><br><span class="line">protocol value=&quot;protocol value&quot;</span><br><span class="line">icmp-block name=&quot;icmptype name&quot;</span><br><span class="line">forward-port port=&quot;port value&quot; protocol=&quot;tcp|udp&quot; to-port=&quot;port value&quot; to-addr=&quot;address&quot;</span><br><span class="line">log <span class="selector-attr">[prefix=&quot;prefix text&quot;]</span> <span class="selector-attr">[level=&quot;log level&quot;]</span> <span class="selector-attr">[limit value=&quot;rate/duration&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>2. 富规则则按先后顺序配置，按先匹配到的规则生效</strong></p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">–add-rich-rule=’<RULE>‘</td><td align="left">在指定的区添加一条富规则</td></tr><tr><td align="left">–remove-rich-rule=’<RULE>‘</td><td align="left">在指定的区删除一条富规则</td></tr><tr><td align="left">–list-rich-rules</td><td align="left">列出指定去里的所有富规则</td></tr><tr><td align="left">–list-all 和 –list-all-zone</td><td align="left">也能列出存在的富规则</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>1. 允许10.0.0.0/24网段中10.0.0.1主机访问http服务，其他网络无法访问，当前和永久生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10.0.0.0/24所有主机至public区域</span></span><br><span class="line">$ firewall-cmd --permanent --add-source=10.0.0.0/24 --zone=public</span><br><span class="line"><span class="comment">//仅允许public中的10.0.0.1主机访问http</span></span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 port port=80 protocol=tcp accept&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 拒绝10.0.0.0/24网段中的10.0.0.8主机发起的ssh请求，当前和永久生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.8 port port=22 protocol=tcp drop&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 将远程10.0.0.1主机请求firewalld的5555端口，转发至firewalld防火墙的22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 forward-port port=5555 protocol=tcp to-port=22&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>4. 将远程10.0.0.1主机请求firewalld的6666端口，转发至后端主机10.0.0.9的22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 forward-port port=6666 protocol=tcp to-port=22 to-addr=10.0.0.9&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Firewalld实现共享上网"><a href="#Firewalld实现共享上网" class="headerlink" title="Firewalld实现共享上网"></a>Firewalld实现共享上网</h2><p>指定带有公网IP的实例上操作，启动NAT网关的SNAT源地址转换功能</p><p><strong>Firewalld防火墙开启IP伪装，实现地址转换</strong></p><blockquote><ol><li><p>网卡默认是在public的zones内，也是默认zones，永久添加源地址转换功能</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-masquerade</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>客户端配置共享上网</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在配置之前，需要配置DNS，否则无法找到IP地址</span></span><br><span class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-eth1</span><br><span class="line">DNS1=223.5.5.5</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后配置网关</span></span><br><span class="line">route add default gw 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span>                  <span class="comment">//临时配置</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth1   //永久配置</span><br><span class="line">  GETEWAY=172.16.1.7</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启网卡</span></span><br><span class="line">$ nmcli connection reload</span><br><span class="line">$ nmcli connection down eth1 &amp;&amp; nmcli connection up eth1</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewalld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables应用操作</title>
      <link href="2021/01/21/iptables%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/21/iptables%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="iptables防火墙简介"><a href="#iptables防火墙简介" class="headerlink" title="iptables防火墙简介"></a>iptables防火墙简介</h2><p>Netfilter/iptables（以下简称iptables）是UNIX/Linux自带的一款优秀且开放源代码、完全自由是<strong>基于包过滤的防火墙</strong>工具，功能十分强大，且可以灵活应用，对流入/出服务器的数据报进行精细的控制</p><p>iptables是Linux2.4及2.6内核中继承的服务，主要工作在OSI七层中的二三四层，如果重新编译内核，iptables也可以支持7层控制（squid+iptables）</p><h2 id="iptables应用场景"><a href="#iptables应用场景" class="headerlink" title="iptables应用场景"></a>iptables应用场景</h2><p><strong>iptables（生产中看情况，内网关闭，外网打开）</strong></p><blockquote><p>大并发的情况，不能开iptables，会影响性能，使用硬件防火墙</p></blockquote><p><strong>iptables使用场景</strong></p><blockquote><ol><li>主机防火墙（filter表的INPUT链）</li><li>局域网共享上网（nat表的POSTROUTING链），NAT功能</li><li>端口/IP映射（nat表的PREROUTING链）</li><li>IP 一对一映射</li><li>IP 一对多映射</li></ol></blockquote><h2 id="iptables工作流程"><a href="#iptables工作流程" class="headerlink" title="iptables工作流程"></a>iptables工作流程</h2><p><strong>iptables是采用数据包过滤机制工作的，所以它会对请求的数据包的包头进行分析，并根据预先设定的规则进行匹配来决定是否可以被允许进入主机</strong></p><blockquote><ol><li>防护墙是一层层过滤的，实际匹配是从上到下进行过滤</li><li>如果匹配了规则，不管是阻止还是通过，数据包则不会继续往下匹配新的规则</li><li>如果所有规则中没有明确是阻止或通过，则匹配默认规则accept（iptables的默认规则）</li><li>对于防火墙的默认规则，是所有的对应链的规则执行完之后才会执行（是最后执行的规则）</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120141141.png"></p><h2 id="iptables四表五链"><a href="#iptables四表五链" class="headerlink" title="iptables四表五链"></a>iptables四表五链</h2><blockquote><ol><li>什么是表（tables）？<ul><li>表（tables）是链的容器，即所有的链（chains）都属于其对应的表</li></ul></li><li>什么是链（chains）？<ul><li>链（chains）是规则（policy）的容器</li></ul></li><li>什么是规则（policy）？<ul><li>规则（policy）就是iptables一系列过滤信息的规范和具体方法条款</li></ul></li></ol></blockquote><p><strong>iptables包含4张表和五个链，但使用最多两张表示filter和nat表</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120182209.png"></p><h3 id="FILTER表"><a href="#FILTER表" class="headerlink" title="FILTER表"></a>FILTER表</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120183921.png"></p><table><thead><tr><th>filter表</th><th>真正负责主机防火墙功能（过滤流入/出主机的数据包）</th></tr></thead><tbody><tr><td>INPUT链</td><td>负责过滤所有目标进入主机的数据包</td></tr><tr><td>FORWRAD链</td><td>负责转发流经主机的数据包，起转发的左右(net.ipv4.ip_forward=0)</td></tr><tr><td>OUTPUT链</td><td>负责处理从主机发出去的数据包</td></tr></tbody></table><h3 id="NAT表"><a href="#NAT表" class="headerlink" title="NAT表"></a>NAT表</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120183916.png"></p><table><thead><tr><th>NAT表</th><th>负责网络地址转换，即源/目ip地址和端口转换；和主机本身无关，用于局域网共享上网或者特殊的端口转换服务器相关</th></tr></thead><tbody><tr><td>OUTPUT</td><td>和主机放出去的数据包有关，改变主机发出数据包的目的地址</td></tr><tr><td>PREROUTING</td><td>在数据包到达防火墙时，判断路由之前执行的规则，作用是改变数据包的目的地址、目的端口</td></tr><tr><td>POSTROUTING</td><td>在数据包离开防火墙时，判断路由之后执行的规则，作用是改变