<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL分布式解决方案-11</title>
      <link href="2021/08/10/MySQL%E5%88%86%E5%B8%83%E5%BC%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-11/"/>
      <url>2021/08/10/MySQL%E5%88%86%E5%B8%83%E5%BC%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-11/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL中间件"><a href="#MySQL中间件" class="headerlink" title="MySQL中间件"></a>MySQL中间件</h1><h2 id="MySQL常用的中间件"><a href="#MySQL常用的中间件" class="headerlink" title="MySQL常用的中间件"></a>MySQL常用的中间件</h2><p><strong>MySQL Fabric、MySQL Router和MySQLProxy</strong></p><p>Fabric能提供MySQL HA和Sharding方案，但需要应用端来适配改造。MySQL Router是官方轻量级的中间件，用来实现高可用和扩展性，官网已经推出InnoDB Cluster，Router其中的一个重要部件。MySQL proxy目前已经无法下载了，主要推出的都是测试版本，所以在功能上多多少少会有些问题</p><p><strong>360 Atlas</strong></p><p>Atlas是国内360公司推出的一个中间件方案，是由mysql-proxy 0.8.2版本的基础上进行了优化，增加了一些新的功能特性</p><p><strong>Mycat</strong></p><p>Mycat也是国内的一个中间件方案，基于阿里开源的Cobar产品而研发。官方链接是：<a href="http://dl.mycat.io/">http://dl.mycat.io/</a></p><h1 id="Atlas-中间件"><a href="#Atlas-中间件" class="headerlink" title="Atlas-中间件"></a>Atlas-中间件</h1><ul><li>Atlas是由 Qihoo 360，Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。</li><li>它是在mysql-proxy 0.8.2版本的基础上，对其进行了优化，增加了一些新的功能特性。</li><li>360内部使用Atlas运行的mysql业务，每天承载的读写请求数达几十亿条。</li><li>下载地址：<a href="https://github.com/Qihoo360/Atlas/releases">https://github.com/Qihoo360/Atlas/releases</a></li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210810143939473.png"></p><blockquote><p>注意：Atlas只能安装运行在64位的系统上，Centos 5.X安装 Atlas-XX.el5.x86_64.rpm，Centos 6.X安装Atlas-XX.el6.x86_64.rpm。后端mysql版本应大于5.1，建议使用Mysql 5.6以上</p></blockquote><h2 id="Atlas-安装配置-mysql-3MHA管理端"><a href="#Atlas-安装配置-mysql-3MHA管理端" class="headerlink" title="Atlas-安装配置(mysql-3MHA管理端)"></a>Atlas-安装配置(mysql-3MHA管理端)</h2><h3 id="Atlas-上传软件安装并备份"><a href="#Atlas-上传软件安装并备份" class="headerlink" title="Atlas-上传软件安装并备份"></a>Atlas-上传软件安装并备份</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rz -E</span><br><span class="line">$ rpm -ivh Atlas-2.2.1.el6.x86_64.rpm </span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/mysql-proxy/conf</span><br><span class="line">$ cp test.cnf&#123;,.bak&#125;</span><br></pre></td></tr></table></figure><h3 id="Atlas-编写配置文件"><a href="#Atlas-编写配置文件" class="headerlink" title="Atlas-编写配置文件"></a>Atlas-编写配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vi test.cnf</span><br><span class="line"><span class="selector-attr">[mysql-proxy]</span></span><br><span class="line">admin-username = user                       //管理员用户</span><br><span class="line">admin-password = pwd                        //管理员密码</span><br><span class="line">proxy-backend-addresses = 10.0.0.52:3306    //主库的ip地址</span><br><span class="line">proxy-read-only-backend-addresses = 10.0.0.51:3306,10.0.0.53:3306   //只读的主机</span><br><span class="line">pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=   //用户密码</span><br><span class="line">daemon = true</span><br><span class="line">keepalive = true                            //开启VIP功能</span><br><span class="line">event-threads = 8                           //并发多少个线程进行工作</span><br><span class="line">log-level = message                         //日志的级别              </span><br><span class="line">log-path = /usr/local/mysql-proxy/log       //日志的存储位置</span><br><span class="line">sql-log=ON</span><br><span class="line">proxy-address = 0.0.0.0:33060               //代理地址</span><br><span class="line">admin-address = 0.0.0.0:2345                //管理员的代理地址</span><br><span class="line">charset=utf8</span><br></pre></td></tr></table></figure><h3 id="Atlas启动"><a href="#Atlas启动" class="headerlink" title="Atlas启动"></a>Atlas启动</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/mysql-proxy/bin/mysql-proxyd test start</span><br><span class="line">$ ss -lnp|grep proxy</span><br><span class="line">tcp    LISTEN     0      128       *:33060                 *:*                   users:((&quot;mysql-proxy&quot;,pid=3162,fd=10))</span><br><span class="line">tcp    LISTEN     0      128       *:2345                  *:*                   users:((&quot;mysql-proxy&quot;,pid=3162,fd=9))</span><br></pre></td></tr></table></figure><h2 id="Atlas功能测试"><a href="#Atlas功能测试" class="headerlink" title="Atlas功能测试"></a>Atlas功能测试</h2><h3 id="测试读操作"><a href="#测试读操作" class="headerlink" title="测试读操作"></a>测试读操作</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -umha -pmha -h 10.0.0.53 -P 33060 </span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|          51 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|          53 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><h3 id="测试写操作"><a href="#测试写操作" class="headerlink" title="测试写操作"></a>测试写操作</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; begin;</span><br><span class="line">Query OK, 0 rows affected (0<span class="selector-class">.00</span> sec)</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server</span>_id;</span><br><span class="line">+-------------+</span><br><span class="line">| @@server_id |</span><br><span class="line">+-------------+</span><br><span class="line">|          52 |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">&gt; commit;</span><br><span class="line">OK, 0 rows affected (0<span class="selector-class">.01</span> sec)</span><br></pre></td></tr></table></figure><h2 id="Atlas生产用户要求"><a href="#Atlas生产用户要求" class="headerlink" title="Atlas生产用户要求"></a>Atlas生产用户要求</h2><h3 id="创建应用用户"><a href="#创建应用用户" class="headerlink" title="创建应用用户"></a>创建应用用户</h3><p>开发人员申请一个应用用户app(select update insert)，密码123456，通过10网段</p><h4 id="主库创建用户"><a href="#主库创建用户" class="headerlink" title="主库创建用户"></a>主库创建用户</h4><p>在主库创建用户后，该用户还是不能使用，只能生成加密密码，然后加入到atlas的配置文件中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grant select,update,insert on *.* to app@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h4 id="在atlas中添加生产用户（所有主机）"><a href="#在atlas中添加生产用户（所有主机）" class="headerlink" title="在atlas中添加生产用户（所有主机）"></a>在atlas中添加生产用户（所有主机）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/mysql-proxy/bin/encrypt 123456</span><br><span class="line">/iZxz+0GRoA=</span><br><span class="line">$ vi /usr/local/mysql-proxy/conf/test.cnf</span><br><span class="line">pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=,app:/iZxz+0GRoA=</span><br></pre></td></tr></table></figure><h4 id="重启之后登陆测试"><a href="#重启之后登陆测试" class="headerlink" title="重启之后登陆测试"></a>重启之后登陆测试</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/mysql-proxy/bin/mysql-proxyd test restart</span><br><span class="line">$ mysql -uapp -p123456  -h 10.0.0.53 -P 33060</span><br></pre></td></tr></table></figure><h2 id="Atlas基本管理"><a href="#Atlas基本管理" class="headerlink" title="Atlas基本管理"></a>Atlas基本管理</h2><p>登陆管理员账户</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uuser -ppwd -h127.0.0.1 -P2345</span><br></pre></td></tr></table></figure><p>查看有哪些功能</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">help</span>;</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">---------------------------------------------------------</span>+</span><br><span class="line">| command                    | description                                             |</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">---------------------------------------------------------</span>+</span><br><span class="line">| SELECT * FROM help         | shows this help                                         |</span><br><span class="line">| SELECT * FROM backends     | lists the backends and their state                      |</span><br><span class="line">| SET OFFLINE $backend_id    | offline backend server, $backend_id is backend_ndx&#x27;s id |</span><br><span class="line">| SET ONLINE $backend_id     | online backend server, ...                              |</span><br><span class="line">| ADD MASTER $backend        | example: &quot;add master 127.0.0.1:3306&quot;, ...               |</span><br><span class="line">| ADD SLAVE $backend         | example: &quot;add slave 127.0.0.1:3306&quot;, ...                |</span><br><span class="line">| REMOVE BACKEND $backend_id | example: &quot;remove backend 1&quot;, ...                        |</span><br><span class="line">| SELECT * FROM clients      | lists the clients                                       |</span><br><span class="line">| ADD CLIENT $client         | example: &quot;add client 192.168.1.2&quot;, ...                  |</span><br><span class="line">| REMOVE CLIENT $client      | example: &quot;remove client 192.168.1.2&quot;, ...               |</span><br><span class="line">| SELECT * FROM pwds         | lists the pwds                                          |</span><br><span class="line">| ADD PWD $pwd               | example: &quot;add pwd user:raw_password&quot;, ...               |</span><br><span class="line">| ADD ENPWD $pwd             | example: &quot;add enpwd user:encrypted_password&quot;, ...       |</span><br><span class="line">| REMOVE PWD $pwd            | example: &quot;remove pwd user&quot;, ...                         |</span><br><span class="line">| SAVE CONFIG                | save the backends to config file                        |</span><br><span class="line">| SELECT VERSION             | display the version of Atlas                            |</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">---------------------------------------------------------</span>+</span><br></pre></td></tr></table></figure><p>查看连接主从的读写情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">backends</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           1 | 10.0.0.52:3306 | up    | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | up    | ro   |</span><br><span class="line">|           3 | 10.0.0.53:3306 | up    | ro   |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>在线关闭连接的主机</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">offline</span> 2;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state   | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           2 | 10.0.0.51:3306 | offline | ro   |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">backends</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state   | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           1 | 10.0.0.52:3306 | up      | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | offline | ro   |</span><br><span class="line">|           3 | 10.0.0.53:3306 | up      | ro   |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>在线开启连接的主机</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">online</span> 2;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state   | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           2 | 10.0.0.51:3306 | online | ro   |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>在线移除主机</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">remove</span> <span class="selector-tag">backend</span> 3;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">backends</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           1 | 10.0.0.52:3306 | up    | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | up    | ro   |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>在线添加主机</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">add</span> <span class="selector-tag">slave</span> 10.0.0.53<span class="selector-pseudo">:3306</span></span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">backends</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| backend_ndx | address        | state | type |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|           1 | 10.0.0.52:3306 | up    | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | up    | ro   |</span><br><span class="line">|           3 | 10.0.0.53:3306 | up    | ro   |</span><br></pre></td></tr></table></figure><p>在线添加用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">add</span> <span class="selector-tag">pwd</span> <span class="selector-tag">app1</span><span class="selector-pseudo">:123456</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">pwds</span>;</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+</span><br><span class="line">| username | password     |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+</span><br><span class="line">| repl     | 3yb5jEku5h4= |</span><br><span class="line">| mha      | O2jBXONX098= |</span><br><span class="line">| app      | /iZxz+0GRoA= |</span><br><span class="line">| app1     | /iZxz+0GRoA= |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+</span><br></pre></td></tr></table></figure><blockquote><p>PS：注意上述的操作都是在一个shell中执行的，并没有保存在配置文件中，可使用下面的命令来提交到配置文件中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">save</span> <span class="selector-tag">config</span>;</span><br></pre></td></tr></table></figure><h1 id="MyCAT-中间件"><a href="#MyCAT-中间件" class="headerlink" title="MyCAT-中间件"></a>MyCAT-中间件</h1></blockquote><h2 id="Mycat环境准备"><a href="#Mycat环境准备" class="headerlink" title="Mycat环境准备"></a>Mycat环境准备</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1）两台虚拟机 mysql-1 mysql-2</span><br><span class="line">2）每台创建四个mysql实例：3307 3308 3309 3310</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20200913223826709.png"></p><h2 id="MySQL环境部署"><a href="#MySQL环境部署" class="headerlink" title="MySQL环境部署"></a>MySQL环境部署</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pkill mysqld</span><br><span class="line">$ \cp /etc/my.cnf&#123;,.bak&#125;</span><br><span class="line">$ mkdir /data/33&#123;07..10&#125;/data -p</span><br><span class="line">$ rm -rf /data/33&#123;07..10&#125;/*</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/application/mysql</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/application/mysql</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/application/mysql</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3310/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure><h2 id="MySQL准备配置文件"><a href="#MySQL准备配置文件" class="headerlink" title="MySQL准备配置文件"></a>MySQL准备配置文件</h2><h3 id="mysql-1"><a href="#mysql-1" class="headerlink" title="mysql-1"></a>mysql-1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;/data/3307/my.cnf&lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">port=3307</span><br><span class="line">log-error=/data/3307/mysql.log</span><br><span class="line">log_bin=/data/3307/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">skip-name-resolve</span><br><span class="line">server-id=7</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ cp /data/3307/my.cnf /data/3308/my.cnf</span><br><span class="line">$ cp /data/3307/my.cnf /data/3309/my.cnf</span><br><span class="line">$ cp /data/3307/my.cnf /data/3310/my.cnf</span><br><span class="line">$ sed -i &#x27;s#7#8#g&#x27; /data/3308/my.cnf </span><br><span class="line">$ sed -i &#x27;s#7#8#g&#x27; /data/3309/my.cnf </span><br><span class="line">$ sed -i &#x27;s#07#10#g&#x27; /data/3310/my.cnf &amp;&amp; sed -i &#x27;s#=7#=10#g&#x27; /data/3310/my.cnf </span><br></pre></td></tr></table></figure><h3 id="mysql-2"><a href="#mysql-2" class="headerlink" title="mysql-2"></a>mysql-2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;/data/3307/my.cnf&lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">port=3307</span><br><span class="line">log-error=/data/3307/mysql.log</span><br><span class="line">log_bin=/data/3307/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="selector-tag">skip-name-resolve</span></span><br><span class="line">server-id=17</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line"><span class="selector-tag">EOF</span></span><br><span class="line"></span><br><span class="line">$ cp /data/3307/my.cnf /data/3308/my.cnf</span><br><span class="line">$ cp /data/3307/my.cnf /data/3309/my.cnf</span><br><span class="line">$ cp /data/3307/my.cnf /data/3310/my.cnf</span><br><span class="line">$ sed -i &#x27;s#07#08#g&#x27; /data/3308/my.cnf &amp;&amp; sed -i &#x27;s#=17#=18#g&#x27; /data/3308/my.cnf </span><br><span class="line">$ sed -i &#x27;s#07#09#g&#x27; /data/3309/my.cnf &amp;&amp; sed -i &#x27;s#=17#=19#g&#x27; /data/3309/my.cnf </span><br><span class="line">$ sed -i &#x27;s#07#10#g&#x27; /data/3310/my.cnf &amp;&amp; sed -i &#x27;s#=17#=20#g&#x27; /data/3310/my.cnf </span><br></pre></td></tr></table></figure><h2 id="MySQL准备启动脚本"><a href="#MySQL准备启动脚本" class="headerlink" title="MySQL准备启动脚本"></a>MySQL准备启动脚本</h2><h3 id="mysql-1-1"><a href="#mysql-1-1" class="headerlink" title="mysql-1"></a>mysql-1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;/etc/systemd/system/mysqld3307.service&lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[Unit]</span></span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"><span class="selector-attr">[Install]</span></span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="selector-attr">[Service]</span></span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br><span class="line"><span class="selector-tag">EOF</span></span><br><span class="line"></span><br><span class="line">$ cp /etc/systemd/system/mysqld3307.service /etc/systemd/system/mysqld3308.service</span><br><span class="line">$ cp /etc/systemd/system/mysqld3307.service /etc/systemd/system/mysqld3309.service</span><br><span class="line">$ cp /etc/systemd/system/mysqld3307.service /etc/systemd/system/mysqld3310.service</span><br><span class="line">$ sed -i &#x27;s#7#8#g&#x27; /etc/systemd/system/mysqld3308.service </span><br><span class="line">$ sed -i &#x27;s#7#8#g&#x27; /etc/systemd/system/mysqld3309.service </span><br><span class="line">$ sed -i &#x27;s#07#10#g&#x27; /etc/systemd/system/mysqld3310.service </span><br></pre></td></tr></table></figure><h3 id="mysql-2-1"><a href="#mysql-2-1" class="headerlink" title="mysql-2"></a>mysql-2</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ scp /etc/systemd/system/mysqld3307.service root@10.0.0.51:/etc/systemd/system/mysqld3307.service</span><br><span class="line">$ scp /etc/systemd/system/mysqld3308.service root@10.0.0.51:/etc/systemd/system/mysqld3308.service</span><br><span class="line">$ scp /etc/systemd/system/mysqld3309.service root@10.0.0.51:/etc/systemd/system/mysqld3309.service</span><br><span class="line">$ scp /etc/systemd/system/mysqld3310.service root@10.0.0.51:/etc/systemd/system/mysqld3310.service</span><br></pre></td></tr></table></figure><h2 id="MySQL权限修改并启动多实例"><a href="#MySQL权限修改并启动多实例" class="headerlink" title="MySQL权限修改并启动多实例"></a>MySQL权限修改并启动多实例</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R mysql.mysql /data/*</span><br><span class="line">$ systemctl start mysqld3307 &amp;&amp; systemctl start mysqld3308</span><br><span class="line">$ systemctl start mysqld3309 &amp;&amp; systemctl start mysqld3310</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查每个端口是否开启</span></span><br><span class="line">ss -lntup|egrep &#x27;330*|3310&#x27;</span><br><span class="line">tcp    LISTEN     0      80     <span class="selector-attr">[::]</span>:<span class="number">3307</span>               [::]:*                   users:((<span class="string">&quot;mysqld&quot;</span>,pid=<span class="number">7538</span>,fd=<span class="number">22</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">80</span>     [::]:<span class="number">3308</span>               [::]:*                   users:((<span class="string">&quot;mysqld&quot;</span>,pid=<span class="number">7573</span>,fd=<span class="number">22</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">80</span>     [::]:<span class="number">3309</span>               [::]:*                   users:((<span class="string">&quot;mysqld&quot;</span>,pid=<span class="number">7607</span>,fd=<span class="number">22</span>))</span><br><span class="line">tcp    LISTEN     <span class="number">0</span>      <span class="number">80</span>     [::]:<span class="number">3310</span>               [::]:*                   users:((<span class="string">&quot;mysqld&quot;</span>,pid=<span class="number">7614</span>,fd=<span class="number">22</span>))</span><br><span class="line"></span><br><span class="line">//检查每个检点</span><br><span class="line">$ mysql -S /data/<span class="number">3307</span>/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">$ mysql -S /data/<span class="number">3308</span>/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">$ mysql -S /data/<span class="number">3309</span>/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">$ mysql -S /data/<span class="number">3310</span>/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="MySQL节点与分片主从规划"><a href="#MySQL节点与分片主从规划" class="headerlink" title="MySQL节点与分片主从规划"></a>MySQL节点与分片主从规划</h2><ul><li><p>第一组10.0.0.51/52主机上3307实例为主库，3309实例为从库</p></li><li><p>第二组10.0.0.51/52主机上3308实例为主库，3310位从库</p></li><li><p>箭头指向谁，谁就是主库</p><p>  10.0.0.51:3307    &lt;—–&gt;  10.0.0.52:3307<br>  10.0.0.51:3309    ——&gt;  10.0.0.51:3307<br>  10.0.0.52:3309    ——&gt;  10.0.0.52:3307</p><p>  10.0.0.52:3308    &lt;—–&gt;    10.0.0.51:3308<br>  10.0.0.52:3310    —–&gt;     10.0.0.52:3308<br>  10.0.0.51:3310    —–&gt;     10.0.0.51:3308</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shard1：</span><br><span class="line">    Master：10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.51</span>:<span class="number">3307</span></span><br><span class="line">    slave1：<span class="number">10.0</span>.<span class="number">0.51</span>:<span class="number">3309</span></span><br><span class="line">    Standby Master：<span class="number">10.0</span>.<span class="number">0.52</span>:<span class="number">3307</span></span><br><span class="line">    slave2：<span class="number">10.0</span>.<span class="number">0.52</span>:<span class="number">3309</span></span><br><span class="line"></span><br><span class="line">shard2：</span><br><span class="line">    Master：<span class="number">10.0</span>.<span class="number">0.52</span>:<span class="number">3308</span></span><br><span class="line">    slave1：<span class="number">10.0</span>.<span class="number">0.52</span>:<span class="number">3310</span></span><br><span class="line">    Standby Master：<span class="number">10.0</span>.<span class="number">0.51</span>:<span class="number">3308</span></span><br><span class="line">    slave2：<span class="number">10.0</span>.<span class="number">0.51</span>:<span class="number">3310</span></span><br></pre></td></tr></table></figure><h2 id="MySQL配置主从分组"><a href="#MySQL配置主从分组" class="headerlink" title="MySQL配置主从分组"></a>MySQL配置主从分组</h2></li></ul><h3 id="第一组四节点结构配置"><a href="#第一组四节点结构配置" class="headerlink" title="第一组四节点结构配置"></a>第一组四节点结构配置</h3><h4 id="10-0-0-51-3307-lt-—–-gt-10-0-0-52-3307"><a href="#10-0-0-51-3307-lt-—–-gt-10-0-0-52-3307" class="headerlink" title="10.0.0.51:3307 &lt;—–&gt; 10.0.0.52:3307"></a>10.0.0.51:3307 &lt;—–&gt; 10.0.0.52:3307</h4><p><strong>mysql-1/2</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;grant all on *.* to root@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;  with grant option;&quot;</span><br></pre></td></tr></table></figure><p><strong>mysql-1</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><p><strong>mysql-2</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3307/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h4 id="10-0-0-51-3309-——-gt-10-0-0-51-3307"><a href="#10-0-0-51-3309-——-gt-10-0-0-51-3307" class="headerlink" title="10.0.0.51:3309 ——&gt; 10.0.0.51:3307"></a>10.0.0.51:3309 ——&gt; 10.0.0.51:3307</h4><p><strong>mysql-1</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h4 id="10-0-0-52-3309-——-gt-10-0-0-52-3307"><a href="#10-0-0-52-3309-——-gt-10-0-0-52-3307" class="headerlink" title="10.0.0.52:3309 ——&gt; 10.0.0.52:3307"></a>10.0.0.52:3309 ——&gt; 10.0.0.52:3307</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3307, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3309/mysql.sock  -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h3 id="第二组四节点结构配置"><a href="#第二组四节点结构配置" class="headerlink" title="第二组四节点结构配置"></a>第二组四节点结构配置</h3><h4 id="10-0-0-52-3308-lt-—–-gt-10-0-0-51-3308"><a href="#10-0-0-52-3308-lt-—–-gt-10-0-0-51-3308" class="headerlink" title="10.0.0.52:3308 &lt;—–&gt; 10.0.0.51:3308"></a>10.0.0.52:3308 &lt;—–&gt; 10.0.0.51:3308</h4><p><strong>mysql-1/2</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;grant all  on *.* to root@&#x27;10.0.0.%&#x27; identified by &#x27;123&#x27;  with grant option;&quot;</span><br></pre></td></tr></table></figure><p><strong>mysql-1</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><p><strong>mysql-2</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3308/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h4 id="10-0-0-52-3310-—–-gt-10-0-0-52-3308"><a href="#10-0-0-52-3310-—–-gt-10-0-0-52-3308" class="headerlink" title="10.0.0.52:3310 —–&gt; 10.0.0.52:3308"></a>10.0.0.52:3310 —–&gt; 10.0.0.52:3308</h4><p><strong>mysql-1</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><p><strong>mysql-2</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.51&#x27;, MASTER_PORT=3308, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;&quot;</span><br><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">$ mysql  -S /data/3310/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h2 id="MySQL检查主从状态"><a href="#MySQL检查主从状态" class="headerlink" title="MySQL检查主从状态"></a>MySQL检查主从状态</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line">$ mysql -S /data/3309/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br><span class="line">$ mysql -S /data/3310/mysql.sock -e &quot;show slave status\G&quot;|grep Yes</span><br></pre></td></tr></table></figure><p>如果中间出现错误，在每个节点进行执行以下命令，然后从1.9步重新开始即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;stop slave; reset slave all;&quot;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;stop slave; reset slave all;&quot;</span><br><span class="line">$ mysql -S /data/3309/mysql.sock -e &quot;stop slave; reset slave all;&quot;</span><br><span class="line">$ mysql -S /data/3310/mysql.sock -e &quot;stop slave; reset slave all;&quot;</span><br></pre></td></tr></table></figure><h2 id="Mycat安装"><a href="#Mycat安装" class="headerlink" title="Mycat安装"></a>Mycat安装</h2><p><strong>预先安装JAVA运行环境</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y java</span><br></pre></td></tr></table></figure><p><strong>下载Mycat包地址：</strong><a href="http://dl.mycat.io/">http://dl.mycat.io/</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Mycat-server-xxxxx.linux.tar.gz</span><br></pre></td></tr></table></figure><p><strong>解压文件并查看软件目录结构</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tar xf Mycat-server-1.6.7.1-release-20190627191042-linux.tar.gz -C /application/</span><br><span class="line">$ ll mycat</span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span> 2 <span class="selector-tag">root</span> <span class="selector-tag">root</span>  190 <span class="selector-tag">Mar</span>  7 22<span class="selector-pseudo">:18</span> <span class="selector-tag">bin</span></span><br><span class="line"><span class="selector-tag">drwxrwxrwx</span> 2 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    6 <span class="selector-tag">Jun</span> 24  2019 <span class="selector-tag">catlet</span></span><br><span class="line"><span class="selector-tag">drwxrwxrwx</span> 4 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 4096 <span class="selector-tag">Mar</span>  7 22<span class="selector-pseudo">:18</span> <span class="selector-tag">conf</span></span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span> 2 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 4096 <span class="selector-tag">Mar</span>  7 22<span class="selector-pseudo">:18</span> <span class="selector-tag">lib</span></span><br><span class="line"><span class="selector-tag">drwxrwxrwx</span> 2 <span class="selector-tag">root</span> <span class="selector-tag">root</span>    6 <span class="selector-tag">Jun</span> 26  2019 <span class="selector-tag">logs</span></span><br><span class="line"><span class="selector-tag">-rwxrwxrwx</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>  227 <span class="selector-tag">Jun</span> 27  2019 <span class="selector-tag">version</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p><strong>配置环境变量</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export PATH=/application/mycat/bin:$PATH&quot; &gt;&gt;/etc/profile</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><p><strong>启动mycat，并查看端口</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mycat start</span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">Mycat-server</span>...</span><br><span class="line">$ ss -lnp|grep 8066</span><br><span class="line"><span class="selector-tag">tcp</span>    <span class="selector-tag">LISTEN</span>     0      100      :<span class="selector-pseudo">::8066</span>                 :::*                   <span class="selector-tag">users</span>:</span><br></pre></td></tr></table></figure><p><strong>连接mycat</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h 127.0.0.1 -P8066  </span><br></pre></td></tr></table></figure><h2 id="Mycat数据库分布式架构方式"><a href="#Mycat数据库分布式架构方式" class="headerlink" title="Mycat数据库分布式架构方式"></a>Mycat数据库分布式架构方式</h2><p>其实对于分片的规则设置，基本上是两种思路来划分，一种是就数据库，一种是基于表。基于数据库的划分是偏系统层面的，需要明确系统的边界和支撑能力。而对于表的设计偏重于业务层面上，需要根据不同的业务场景进行划分设计</p><p>下图就是通过中间件进行的分片过程，基本的拆分都是垂直拆分，当业务读写量都繁忙时，为了减轻数据库的压力，可使用分表的方式。如将orders（订单表）、users（用户表）、goods（商品表）拆分到三个MySQL节点。</p><p>当order表是承载最多压力时，还可以通过水平拆分，将表通过算法再次拆分成多个表。如有：range，取模，枚    举，hash，时间，等等</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210810162737226.png"></p><h2 id="Mycat基础应用"><a href="#Mycat基础应用" class="headerlink" title="Mycat基础应用"></a>Mycat基础应用</h2><h3 id="主要配置文件介绍"><a href="#主要配置文件介绍" class="headerlink" title="主要配置文件介绍"></a>主要配置文件介绍</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /application/mycat/conf</span><br><span class="line"><span class="selector-tag">rule</span><span class="selector-class">.xml</span>//分片策略定义</span><br><span class="line"><span class="selector-tag">schema</span><span class="selector-class">.xml</span>  //主配置文件</span><br><span class="line"><span class="selector-tag">server</span><span class="selector-class">.xml</span>//<span class="selector-tag">mycat</span>服务有关</span><br><span class="line"><span class="selector-tag">log4j2</span><span class="selector-class">.xml</span>  //记录日志有关</span><br><span class="line">*<span class="selector-class">.txt</span>       //一些分片规则</span><br></pre></td></tr></table></figure><h3 id="用户创建及数据库导入"><a href="#用户创建及数据库导入" class="headerlink" title="用户创建及数据库导入"></a>用户创建及数据库导入</h3><p><strong>mysql-1</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock </span><br><span class="line">&gt; grant all on *.* to root@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&gt; source /tmp/world.sql</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock </span><br><span class="line">&gt; grant all on *.* to root@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&gt; source /tmp/world.sql</span><br></pre></td></tr></table></figure><h3 id="配置文件结构介绍"><a href="#配置文件结构介绍" class="headerlink" title="配置文件结构介绍"></a>配置文件结构介绍</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cd /application/mycat/conf  </span><br><span class="line">$ cp schema.xml&#123;,.bak&#125; </span><br><span class="line">$ vi schema.xml</span><br><span class="line">//头部信息</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span> <span class="selector-tag">SYSTEM</span> &quot;<span class="selector-tag">schema</span><span class="selector-class">.dtd</span>&quot;&gt;  </span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">mycat</span>逻辑库定义:</span><br><span class="line">&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;sh1&quot;&gt;  </span><br><span class="line">&lt;/<span class="selector-tag">schema</span>&gt; </span><br><span class="line"></span><br><span class="line">//数据节点定义:</span><br><span class="line">&lt;dataNode name=&quot;sh1&quot; dataHost=&quot;word1&quot; database= &quot;world&quot; /&gt;   </span><br><span class="line"></span><br><span class="line">//后端主机定义:</span><br><span class="line">        &lt;dataHost name=&quot;word1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot;  dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt;    </span><br><span class="line">         &lt;<span class="selector-tag">heartbeat</span>&gt;<span class="selector-tag">select</span> <span class="selector-tag">user</span>()&lt;/<span class="selector-tag">heartbeat</span>&gt;  </span><br><span class="line">        &lt;writeHost host=&quot;db1&quot; url=&quot;10.0.0.51:3307&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;   //用户密码是对应上述创建的</span><br><span class="line">                   &lt;readHost host=&quot;db2&quot; url=&quot;10.0.0.51:3309&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt;   </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">dataHost</span>&gt;  </span><br><span class="line">&lt;/<span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="实现1主1从读写分离"><a href="#实现1主1从读写分离" class="headerlink" title="实现1主1从读写分离"></a>实现1主1从读写分离</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim schema.xml</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span> <span class="selector-tag">SYSTEM</span> &quot;<span class="selector-tag">schema</span><span class="selector-class">.dtd</span>&quot;&gt;  </span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;sh1&quot;&gt; </span><br><span class="line">&lt;/<span class="selector-tag">schema</span>&gt;  </span><br><span class="line">        &lt;dataNode name=&quot;sh1&quot; dataHost=&quot;word1&quot; database= &quot;world&quot; /&gt;         </span><br><span class="line">        &lt;dataHost name=&quot;word1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot;  dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt;    </span><br><span class="line">                &lt;<span class="selector-tag">heartbeat</span>&gt;<span class="selector-tag">select</span> <span class="selector-tag">user</span>()&lt;/<span class="selector-tag">heartbeat</span>&gt;  </span><br><span class="line">        &lt;writeHost host=&quot;db1&quot; url=&quot;10.0.0.51:3307&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;</span><br><span class="line">                        &lt;readHost host=&quot;db2&quot; url=&quot;10.0.0.51:3309&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">dataHost</span>&gt;  </span><br><span class="line">&lt;/<span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>重启mycat</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mycat restart</span><br></pre></td></tr></table></figure><p><strong>测试读写分离</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">mysql</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-p123456</span> <span class="selector-tag">-h</span> 10.0.0.50 <span class="selector-tag">-P8066</span></span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|           9 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">    </span><br><span class="line">&gt; <span class="selector-tag">begin</span>;<span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;<span class="selector-tag">commit</span>;</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.00 <span class="selector-tag">sec</span>)</span><br><span class="line"></span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|           7 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">1 <span class="selector-tag">row</span> <span class="selector-tag">in</span> <span class="selector-tag">set</span> (0.01 <span class="selector-tag">sec</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.00 <span class="selector-tag">sec</span>)</span><br></pre></td></tr></table></figure><h2 id="Mycat高可用-读写分离"><a href="#Mycat高可用-读写分离" class="headerlink" title="Mycat高可用+读写分离"></a>Mycat高可用+读写分离</h2><p><strong>重新编写配置文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ cp schema<span class="selector-class">.xml</span> schema<span class="selector-class">.xml</span><span class="selector-class">.1_read_write</span></span><br><span class="line">$ vim schema<span class="selector-class">.xml</span> </span><br><span class="line">&lt;!DOCTYPE mycat:schema SYSTEM <span class="string">&quot;schema.dtd&quot;</span>&gt;  </span><br><span class="line">&lt;mycat:schema xmlns:mycat=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span><br><span class="line">&lt;schema name=<span class="string">&quot;TESTDB&quot;</span> checkSQLschema=<span class="string">&quot;false&quot;</span> sqlMaxLimit=<span class="string">&quot;100&quot;</span> dataNode=<span class="string">&quot;sh1&quot;</span>&gt; </span><br><span class="line">&lt;/schema&gt;  </span><br><span class="line">        &lt;dataNode name=<span class="string">&quot;sh1&quot;</span> dataHost=<span class="string">&quot;word1&quot;</span> database= <span class="string">&quot;world&quot;</span> /&gt;         </span><br><span class="line">        &lt;dataHost name=<span class="string">&quot;word1&quot;</span> maxCon=<span class="string">&quot;1000&quot;</span> minCon=<span class="string">&quot;10&quot;</span> balance=<span class="string">&quot;1&quot;</span>  writeType=<span class="string">&quot;0&quot;</span> dbType=<span class="string">&quot;mysql&quot;</span>  dbDriver=<span class="string">&quot;native&quot;</span> switchType=<span class="string">&quot;1&quot;</span>&gt;    </span><br><span class="line">                &lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  </span><br><span class="line">        &lt;writeHost host=<span class="string">&quot;db1&quot;</span> url=<span class="string">&quot;10.0.0.51:3307&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">                        &lt;readHost host=<span class="string">&quot;db2&quot;</span> url=<span class="string">&quot;10.0.0.51:3309&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123&quot;</span> /&gt; </span><br><span class="line">        &lt;/writeHost&gt; </span><br><span class="line"> &lt;writeHost host=<span class="string">&quot;db3&quot;</span> url=<span class="string">&quot;10.0.0.52:3307&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123&quot;</span>&gt;</span><br><span class="line">                        &lt;readHost host=<span class="string">&quot;db4&quot;</span> url=<span class="string">&quot;10.0.0.52:3309&quot;</span> user=<span class="string">&quot;root&quot;</span> password=<span class="string">&quot;123&quot;</span> /&gt; </span><br><span class="line">        &lt;/writeHost&gt; </span><br><span class="line">        &lt;/dataHost&gt;  </span><br><span class="line">&lt;/mycat:schema&gt;</span><br><span class="line">=======================================</span><br></pre></td></tr></table></figure><p><strong>节点说明</strong></p><p>第一个：whost：10.0.0.51:3307 真正的写节点，负责写操作</p><p>第二个：whost: 10.0.0.52:3307 写节备用点，负责读，当10.0.0.51:3307宕机，会切换为真正的写节点</p><p><strong>重启mycat</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mycat restart</span><br></pre></td></tr></table></figure><p><strong>测试读写分离</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h 10.0.0.51 -P 8066</span><br><span class="line"></span><br><span class="line">//读主机：（17，9,19）</span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|          17 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">    </span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|           9 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">    </span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|          19 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//写主机：</span><br><span class="line">&gt; <span class="selector-tag">begin</span>;<span class="selector-tag">select</span> @<span class="keyword">@server_id</span>;<span class="selector-tag">commit</span>;</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.01 <span class="selector-tag">sec</span>)</span><br><span class="line"></span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|           7 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p><strong>第一个whost：宕机测试</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop mysqld3307              //停止主写10.0.0.51:3307</span><br><span class="line">$ mysql -uroot -p123456 -h 10.0.0.50 -P8066</span><br><span class="line">$ begin;select @@server_id;commit        //会有延时，查看之后只有一台读一台写</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@server_id |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|          17 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line"></span><br><span class="line">$ systemctl start mysqld3307             //开启10.0.0.51:3307</span><br></pre></td></tr></table></figure><blockquote><p>PS：开启之后会自动加入集群，但是会成为备用写节点，而10.0.52:3307会成为写节点</p></blockquote><h2 id="Mycat配置中的属性介绍（高级）"><a href="#Mycat配置中的属性介绍（高级）" class="headerlink" title="Mycat配置中的属性介绍（高级）"></a>Mycat配置中的属性介绍（高级）</h2><p><strong>配置参数说明</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataHost name=&quot;word1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt; </span><br></pre></td></tr></table></figure><h3 id="balance属性"><a href="#balance属性" class="headerlink" title="balance属性"></a>balance属性</h3><p>负载均衡类型，目前的取值有3种：</p><ul><li><p>balance=”0”，不开启读写分离机制，所有读操作都发送到当前可用的writeHost上 </p></li><li><p>balance=”1”，全部的readHost与standby writeHost参与select语句的负载均衡</p><p>简单的说，当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与M2互为主备)，正常情况下，M2，S1，S2都参与select语句的负载均衡，就是我们上述操作的模式</p></li><li><p>balance=”2”，所有读操作都随机的在writeHost、readhost上分发</p></li></ul><h3 id="writeType属性"><a href="#writeType属性" class="headerlink" title="writeType属性"></a>writeType属性</h3><p>负载均衡类型，目前的取值有2种：</p><ul><li><p>writeType=”0”，所有写操作发送到配置的第一个writeHost</p><p>第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为主，切换记录在配置文件中<code>dnindex.properties</code> </p></li><li><p>writeType=“1”，所有写操作都随机的发送到配置的writeHost，但不推荐使用</p></li></ul><h3 id="switchType属性"><a href="#switchType属性" class="headerlink" title="switchType属性"></a>switchType属性</h3><ul><li>-1 表示不自动切换</li><li>1 默认值，自动切换 </li><li>2 基于MySQL主从同步的状态决定是否切换 ，心跳语句为 show slave status </li></ul><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><ul><li>maxCon=”1000”：最大的并发连接数</li><li>minCon=”10” ：mycat在启动之后，会在后端节点上自动开启的连接线程</li><li>tempReadHostAvailable=”1”：这个一主一从时（1个writehost，1个readhost时），可以开启这个参数，如果2个writehost，2个readhost时<heartbeat>select user()</heartbeat> 监测心跳</li></ul><h2 id="Mycat高级应用-分布式解决方案"><a href="#Mycat高级应用-分布式解决方案" class="headerlink" title="Mycat高级应用-分布式解决方案"></a>Mycat高级应用-分布式解决方案</h2><h3 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ cp schema.xml schema.xml.2_read_write</span><br><span class="line">$ vi schema.xml</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span> <span class="selector-tag">SYSTEM</span> &quot;<span class="selector-tag">schema</span><span class="selector-class">.dtd</span>&quot;&gt;  </span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;sh1&quot;&gt; </span><br><span class="line">&lt;table name=&quot;user&quot; dataNode=&quot;sh1&quot;/&gt;</span><br><span class="line">&lt;table name=&quot;order_t&quot; dataNode=&quot;sh2&quot;/&gt;</span><br><span class="line">&lt;/<span class="selector-tag">schema</span>&gt;  </span><br><span class="line">        &lt;dataNode name=&quot;sh1&quot; dataHost=&quot;word1&quot; database= &quot;taobao&quot; /&gt;         </span><br><span class="line">        &lt;dataNode name=&quot;sh2&quot; dataHost=&quot;word2&quot; database= &quot;taobao&quot; /&gt;         </span><br><span class="line">        &lt;dataHost name=&quot;word1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot;  dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt;    </span><br><span class="line">                &lt;<span class="selector-tag">heartbeat</span>&gt;<span class="selector-tag">select</span> <span class="selector-tag">user</span>()&lt;/<span class="selector-tag">heartbeat</span>&gt;  </span><br><span class="line">        &lt;writeHost host=&quot;mysql-1&quot; url=&quot;10.0.0.51:3307&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;</span><br><span class="line">                        &lt;readHost host=&quot;mysql-2&quot; url=&quot;10.0.0.51:3309&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line"> &lt;writeHost host=&quot;mysql-3&quot; url=&quot;10.0.0.52:3307&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;</span><br><span class="line">                        &lt;readHost host=&quot;mysql-4&quot; url=&quot;10.0.0.52:3309&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">dataHost</span>&gt;  </span><br><span class="line"></span><br><span class="line">        &lt;dataHost name=&quot;word2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot;  dbDriver=&quot;native&quot; switchType=&quot;1&quot;&gt;    </span><br><span class="line">                &lt;<span class="selector-tag">heartbeat</span>&gt;<span class="selector-tag">select</span> <span class="selector-tag">user</span>()&lt;/<span class="selector-tag">heartbeat</span>&gt;  </span><br><span class="line">        &lt;writeHost host=&quot;mysql-1&quot; url=&quot;10.0.0.51:3308&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;</span><br><span class="line">                        &lt;readHost host=&quot;mysql-2&quot; url=&quot;10.0.0.51:3310&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line"> &lt;writeHost host=&quot;mysql-3&quot; url=&quot;10.0.0.52:3308&quot; user=&quot;root&quot; password=&quot;123&quot;&gt;</span><br><span class="line">                        &lt;readHost host=&quot;mysql-4&quot; url=&quot;10.0.0.52:3310&quot; user=&quot;root&quot; password=&quot;123&quot; /&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">writeHost</span>&gt; </span><br><span class="line">        &lt;/<span class="selector-tag">dataHost</span>&gt;  </span><br><span class="line">&lt;/<span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="创建测试库和表"><a href="#创建测试库和表" class="headerlink" title="创建测试库和表"></a>创建测试库和表</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;create database taobao charset utf8;&quot;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;create database taobao charset utf8;&quot;</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;create table taobao.user(id int,name varchar(20));&quot;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;create table taobao.order_t(id int,name varchar(20));&quot;</span><br></pre></td></tr></table></figure><p><strong>重启Mycat</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mycat restart</span><br></pre></td></tr></table></figure><p><strong>测试功能</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; show databases;</span><br><span class="line">+----------+</span><br><span class="line">| DATABASE |</span><br><span class="line">+----------+</span><br><span class="line">| TESTDB   |</span><br><span class="line"></span><br><span class="line">&gt; use TESTDB;</span><br><span class="line">&gt; show tables;</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_taobao |</span><br><span class="line">+------------------+</span><br><span class="line">| order_t          |</span><br><span class="line">| user             |</span><br><span class="line">+------------------+</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入两行数据</span></span><br><span class="line">&gt; insert into user(id ,name ) values(1,&#x27;a&#x27;),(2,&#x27;b&#x27;);</span><br><span class="line">&gt; commit;</span><br><span class="line"></span><br><span class="line">&gt; insert into order_t(id ,name ) values(1,&#x27;c&#x27;),(2,&#x27;d&#x27;);</span><br><span class="line">&gt; commit;</span><br></pre></td></tr></table></figure><p><strong>查看数据是否分开</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;select * from taobao.user;&quot;</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|    1 | a    |</span><br><span class="line">|    2 | b    |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;select * from taobao.order_t;&quot;</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|    1 | c    |</span><br><span class="line">|    2 | d    |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><h2 id="Mycat分布式-水平拆分（分片）介绍"><a href="#Mycat分布式-水平拆分（分片）介绍" class="headerlink" title="Mycat分布式-水平拆分（分片）介绍"></a>Mycat分布式-水平拆分（分片）介绍</h2><ul><li><p>分片：对于“data(大表)”，比如是t1表</p><p>行数非常多：800W</p><p>访问非常频繁</p></li><li><p>分片的目的</p><p>将大数据量进行分布存储</p><p>提供均匀的访问路由</p></li><li><p>分片策略</p><p>范围：range 800W ，可以1-400w 400w-800w</p><p>取模：mod 取余数（1或者2）</p><p>枚举：可以自己指定键</p><p>哈希 hash</p><p>时间：流水</p></li><li><p>优化关联查询</p><p>全局表</p><p>ER分片</p></li></ul><h3 id="Mycat分布式-范围分片"><a href="#Mycat分布式-范围分片" class="headerlink" title="Mycat分布式-范围分片"></a>Mycat分布式-范围分片</h3><p>行数非常多，2000w（1-1000w:sh1   1000w01-2000w:sh2）。访问非常频繁，用户访问较离散</p><p><strong>编辑配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cp schema.xml schema.xml.vertical</span><br><span class="line">$ vi schema.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!<span class="selector-tag">DOCTYPE</span> <span class="selector-tag">mycat</span><span class="selector-pseudo">:schema</span> <span class="selector-tag">SYSTEM</span> &quot;<span class="selector-tag">schema</span><span class="selector-class">.dtd</span>&quot;&gt;</span><br><span class="line">&lt;mycat:schema xmlns:mycat=&quot;http://io.mycat/&quot;&gt;</span><br><span class="line">&lt;schema name=&quot;TESTDB&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot; dataNode=&quot;sh1&quot;&gt;</span><br><span class="line">    &lt;table name=&quot;t3&quot; dataNode=&quot;sh1,sh2&quot; rule=&quot;auto-sharding-long&quot; /&gt;  //删除之前的两行，添加这行信息</span><br><span class="line">&lt;/<span class="selector-tag">schema</span>&gt;</span><br><span class="line">    &lt;dataNode name=&quot;sh1&quot; dataHost=&quot;wuwei1&quot; database= &quot;taobao&quot; /&gt;</span><br><span class="line">    &lt;dataNode name=&quot;sh2&quot; dataHost=&quot;wuwei2&quot; database= &quot;taobao&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>rule（auto-sharding-log）的规则</strong></p><p>通过查询rule.xml文件，找到auto-sharding-log，在通过rang-long找到配置规则的文件autopartition-long.txt</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vi rule.xml </span><br><span class="line">&lt;tableRule name=&quot;auto-sharding-long&quot;&gt;</span><br><span class="line">   &lt;<span class="selector-tag">rule</span>&gt;</span><br><span class="line">       &lt;<span class="selector-tag">columns</span>&gt;<span class="selector-tag">id</span>&lt;/<span class="selector-tag">columns</span>&gt;</span><br><span class="line">       &lt;<span class="selector-tag">algorithm</span>&gt;<span class="selector-tag">rang-long</span>&lt;/<span class="selector-tag">algorithm</span>&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">rule</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">tableRule</span>&gt;</span><br><span class="line"></span><br><span class="line">//找到设定规则的文件<span class="selector-tag">rang-long</span></span><br><span class="line">&lt;function name=&quot;rang-long&quot;</span><br><span class="line">        class=&quot;io.mycat.route.function.AutoPartitionByLong&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;mapFile&quot;&gt;autopartition-long.txt&lt;/property&gt;</span><br><span class="line">&lt;/<span class="selector-tag">function</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>编辑该规则autopartition-long.txt</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cp autopartition-long<span class="selector-class">.txt</span>&#123;,<span class="selector-class">.bak</span>&#125; </span><br><span class="line">$ vim autopartition-long<span class="selector-class">.txt</span></span><br><span class="line"># range start-end ,data node index</span><br><span class="line"># K=1000,M=10000.                   //使用id字段进行分类</span><br><span class="line">1-10=0    ---&gt;   &gt;=1 &lt;=10</span><br><span class="line">10-20=1   ---&gt;   &lt;1= &lt;=20</span><br></pre></td></tr></table></figure><p><strong>创建测试表</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;use taobao;create table t1 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock  -e &quot;use taobao;create table t1 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br></pre></td></tr></table></figure><p><strong>重启</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mycat restart</span><br></pre></td></tr></table></figure><p><strong>登录mycat，并插入数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h 127.0.0.1 -P 8066 </span><br><span class="line">insert into t1(id,name) values(1,&#x27;a&#x27;);</span><br><span class="line">insert into t1(id,name) values(2,&#x27;b&#x27;);</span><br><span class="line">insert into t1(id,name) values(3,&#x27;c&#x27;);</span><br><span class="line">insert into t1(id,name) values(10,&#x27;d&#x27;);</span><br><span class="line">insert into t1(id,name) values(11,&#x27;aa&#x27;);</span><br><span class="line">insert into t1(id,name) values(12,&#x27;bb&#x27;);</span><br><span class="line">insert into t1(id,name) values(13,&#x27;cc&#x27;);</span><br><span class="line">insert into t1(id,name) values(14,&#x27;dd&#x27;);</span><br><span class="line">insert into t1(id,name) values(20,&#x27;dd&#x27;);</span><br></pre></td></tr></table></figure><p><strong>使用3307和3308测试</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;select * from taobao.t1;&quot;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id | name |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|  1 | a    |</span><br><span class="line">|  2 | b    |</span><br><span class="line">|  3 | c    |</span><br><span class="line">| 10 | d    |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;select * from taobao.t1;&quot;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id | name |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| 11 | aa   |</span><br><span class="line">| 12 | bb   |</span><br><span class="line">| 13 | cc   |</span><br><span class="line">| 14 | dd   |</span><br><span class="line">| 20 | dd   |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><h3 id="取模分片（mod-long"><a href="#取模分片（mod-long" class="headerlink" title="取模分片（mod-long)"></a>取模分片（mod-long)</h3><p>取余分片方式：分片键（一个列）与节点数量进行取余，得到余数，将数据写入对应节点</p><p><strong>编写配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim schema.xml</span><br><span class="line">&lt;table name=&quot;t2&quot; dataNode=&quot;sh1,sh2&quot; rule=&quot;mod-long&quot; /&gt; //使用取模分片</span><br></pre></td></tr></table></figure><p><strong>编辑规则</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim rule.xml</span><br><span class="line">&lt;property name=&quot;count&quot;&gt;2&lt;/property&gt;</span><br></pre></td></tr></table></figure><p><strong>创建测试表</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;use taobao;create table t2 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;use taobao;create table t2 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br></pre></td></tr></table></figure><p><strong>重启Mycat</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mycat restart </span><br></pre></td></tr></table></figure><p><strong>登录插入表格，然后测试</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h10.0.0.51 -P8066</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">TESTDB</span></span><br><span class="line">insert into t2(id,name) values(1,&#x27;a&#x27;);</span><br><span class="line">insert into t2(id,name) values(2,&#x27;b&#x27;);</span><br><span class="line">insert into t2(id,name) values(3,&#x27;c&#x27;);</span><br><span class="line">insert into t2(id,name) values(4,&#x27;d&#x27;);</span><br></pre></td></tr></table></figure><p><strong>分别登录后端节点查询数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;select * from taobao.t2;&quot;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;select * from taobao.t2;&quot;</span><br></pre></td></tr></table></figure><h3 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a>枚举分片</h3><p><strong>编辑配置文件，添加枚举分片</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim schema.xml</span><br><span class="line">&lt;table name=&quot;t5&quot; dataNode=&quot;sh1,sh2&quot; rule=&quot;sharding-by-intfile&quot; /&gt;</span><br></pre></td></tr></table></figure><p><strong>查看rule函数规则</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim rule.xml</span><br><span class="line">   &lt;tableRule name=&quot;sharding-by-intfile&quot;&gt;</span><br><span class="line">         &lt;<span class="selector-tag">rule</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">columns</span>&gt;<span class="selector-tag">sharding_id</span>&lt;/<span class="selector-tag">columns</span>&gt;</span><br><span class="line">                &lt;<span class="selector-tag">algorithm</span>&gt;<span class="selector-tag">hash-int</span>&lt;/<span class="selector-tag">algorithm</span>&gt;</span><br><span class="line">         &lt;/<span class="selector-tag">rule</span>&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">tableRule</span>&gt;</span><br><span class="line"></span><br><span class="line">//找到设定规则的文件<span class="selector-tag">hash-int</span></span><br><span class="line">   &lt;function name=&quot;hash-int&quot;</span><br><span class="line">         class=&quot;io.mycat.route.function.PartitionByFileMap&quot;&gt;</span><br><span class="line">         &lt;property name=&quot;mapFile&quot;&gt;partition-hash-int.txt&lt;/property&gt;</span><br><span class="line">   &lt;/<span class="selector-tag">function</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>修改规则</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim partition-hash-int.txt </span><br><span class="line">bj=0 </span><br><span class="line">sh=1</span><br><span class="line">DEFAULT_NODE=1 </span><br></pre></td></tr></table></figure><p>columns 标识将要分片的表字段，algorithm 分片函数， 其中分片函数配置中，mapFile标识配置文件名称</p><p><strong>准备测试表</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line"></span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line"></span><br><span class="line">$ mycat restart</span><br></pre></td></tr></table></figure><p><strong>登录插入表格，进行测试</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h10.0.0.51 -P8066</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">TESTDB</span></span><br><span class="line">insert into t5(id,name) values(1,&#x27;bj&#x27;);</span><br><span class="line">insert into t5(id,name) values(2,&#x27;sh&#x27;);</span><br><span class="line">insert into t5(id,name) values(3,&#x27;bj&#x27;);</span><br><span class="line">insert into t5(id,name) values(4,&#x27;sh&#x27;);</span><br><span class="line">insert into t5(id,name) values(5,&#x27;tj&#x27;);</span><br></pre></td></tr></table></figure><p><strong>分别登录后端节点查询数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;select * from taobao.t5;&quot;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &quot;select * from taobao.t5;&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高可用MHA-9</title>
      <link href="2021/08/09/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8MHA-9/"/>
      <url>2021/08/09/MySQL%E9%AB%98%E5%8F%AF%E7%94%A8MHA-9/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL高可用"><a href="#MySQL高可用" class="headerlink" title="MySQL高可用"></a>MySQL高可用</h1><h2 id="MySQL高可用方案"><a href="#MySQL高可用方案" class="headerlink" title="MySQL高可用方案"></a>MySQL高可用方案</h2><p>对于高可用使用，行业里有一个基本标准和明确的衡量方式，如下表所示</p><table><thead><tr><th>高可用性指标</th><th>业务不可用时长</th></tr></thead><tbody><tr><td>99%</td><td>3.65 days</td></tr><tr><td>99.50%</td><td>1.83 days</td></tr><tr><td>99.90%</td><td>8.76 hours</td></tr><tr><td>99.99%</td><td>52.56 minutes</td></tr><tr><td>99.999%</td><td>5.25 minutes</td></tr><tr><td>99.9999%</td><td>31.5 seconds</td></tr></tbody></table><p>计算方式是，如高可用为99%，则不可用时长为：1%*365=3.65 days，以此类推。MySQL高可用方案及其对应的高可用率，如下表</p><table><thead><tr><th>高可用率</th><th>MySQL高可用方案</th></tr></thead><tbody><tr><td>98-99.9%</td><td>原生复制</td></tr><tr><td>99%</td><td>双主模式</td></tr><tr><td>99.5-99.9%</td><td>SAN</td></tr><tr><td>99.9%</td><td>DRBD，MHA</td></tr><tr><td>99.999%</td><td>NDB Cluster，Galera Cluster</td></tr></tbody></table><h2 id="MySQL高可用方案说明"><a href="#MySQL高可用方案说明" class="headerlink" title="MySQL高可用方案说明"></a>MySQL高可用方案说明</h2><p>数据库的高可用架构应用有如下特征：</p><ul><li>数据库对前端业务是透明的，业务不会因为数据库的故障而停止向外提供</li><li>主从之间的数据保持强一致或是最终一致</li><li>当业务因高可用机制发生数据库切换，切换的过程数据库内容应当一致，不会因为数据缺失或者数据不一致而影响业务</li></ul><p>MySQL高可用选择方向有很多，典型的高可用有如下几种</p><ul><li>原生、半同步和主主复制：通过依赖MySQL本身的复制，Master制作一个或多个Slave。在Master故障时，可以将服务自动切换到Slave，由Slave担当Master，到达高可用的效果</li><li>MHA+多节点集群：基于MHA的集群方案，通常和第三方方案组合实现</li><li>分布式协议：基于分布式协议的高可用方案，常见的有Galera Cluster，PXC和MGR等</li><li>基于共享存储：如SAN存储，这种方案实现网络中不同服务器的数据共享，共享存储能够为数据库服务器和存储解耦</li><li>基于磁盘复制：如DRDB，它是一个以Linux内核模块方式实现的块级别同步复制技术。它通过网卡将主服务器的每个块复制到另外一台服务器块的设备上，并在主设备提交块之前记录下来，类似共享存储解决方案</li></ul><h2 id="MySQL高可用——MHA"><a href="#MySQL高可用——MHA" class="headerlink" title="MySQL高可用——MHA"></a>MySQL高可用——MHA</h2><p>MHA（Master High Availability）流行的方案之一。它可以在0-30秒内平滑的完成数据故障的自动切换，并在一主多从的环境中实现数据补录和复制关系重建。MHA是基于Perl语句开发，目前最新的版本是0.58。它从设计上划分了两个部署，[Manager][<a href="https://github.com/yoshinorim/mha4mysql-manager]%E5%92%8C[Node][https://github.com/yoshinorim/mha4mysql-node]%E3%80%82">https://github.com/yoshinorim/mha4mysql-manager]和[Node][https://github.com/yoshinorim/mha4mysql-node]。</a></p><h3 id="MHA原理与架构"><a href="#MHA原理与架构" class="headerlink" title="MHA原理与架构"></a>MHA原理与架构</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210518120350048.png"></p><p>Manager节点和Node节点是一对多，Manager节点是一个核心调度器，它可以调度多套环境。但是本身也是单点的，所以可以设置两套MHA Manager节点做冗余。</p><p>Node节点是客户端节点，在需要管理的MySQL环境中都需要统一部署（就是Manager端也需要安装node节点）。可以先看看Manager和Node节点之间的职责</p><p>服务端Manager节点相关的脚本，如下表</p><table><thead><tr><th>相关脚本</th><th>作用</th></tr></thead><tbody><tr><td>masterha_check_ssh</td><td>检查MHA的SSH配置状况</td></tr><tr><td>masterha_check_repl</td><td>检查MySQL复制状况</td></tr><tr><td>masterha_manger</td><td>启动MHA</td></tr><tr><td>masterha_check_status</td><td>检测当前MHA运行状态</td></tr><tr><td>masterha_master_switch</td><td>控制故障转移（自动或者手动）</td></tr><tr><td>masterha_master_monitor</td><td>检查master是否宕机</td></tr><tr><td>masterha_conf_host</td><td>添加或删除配置的server信息</td></tr></tbody></table><p>客户端Node节点相关的脚本如下表</p><table><thead><tr><th>相关脚本</th><th>作用</th></tr></thead><tbody><tr><td>save_binary_logs</td><td>转储和复制master的二进制日志</td></tr><tr><td>apply_diff_relay_logs</td><td>识别差异的中继日志事件并将其差异的时间应用于其他的Slave</td></tr><tr><td>purge_relay_logs</td><td>清除中继日志（不会阻塞SQL线程）</td></tr></tbody></table><p>通过上述相关脚本信息，MHA的Node节点是承接了差异数据的转储与补录，这是MHA保持一致性的核心。差异化的数据转储是上面save_binary_logs要完成的事情，如何做到补录其他节点，需MHA保证各个节点之间通过免密码的SSH登录方式，从而保证数据的差异转储和补录，也就是上述apply_diff_relay_logs要完成的事情</p><p>可以看出Manager也需要Node节点的转存和补录，所以Manager也需要安装Node节点，如果把Node节点的逻辑放到Manager节点上，就不需要部署Node节点了，也不需要配置SSH免密码登录了</p><p>MHA其实只是负责数据层面的高可用，所以通常需要和其他方案组合起来，目前比较常见的有以下几种</p><ul><li>MHA+VIP模式</li><li>MHA+KeepAlive</li><li>MHA+Zookeeper</li><li>MHA+consul</li></ul><h2 id="Sandbox快速部署安装MHA"><a href="#Sandbox快速部署安装MHA" class="headerlink" title="Sandbox快速部署安装MHA"></a>Sandbox快速部署安装MHA</h2><p>通过sandbox，秒级搭建主从环境，而且会自动生成完整的管理脚本。Sandbox的部署相对简单，如果有网络环境，直接cpan命令接口。或者是用wget的方式来安装。如下述命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cpan MySQL::Sandbox   <span class="comment"># 全程回车就好</span></span></span><br></pre></td></tr></table></figure><blockquote><p>PS：如没有cpan指令，可使用哦下述指令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y cpan</span></span><br></pre></td></tr></table></figure><p>默认回车之后会输出一些日志提示安装成功，在<code>/usr/local/bin/</code>下面就会有make_sanbox的相关命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll /usr/<span class="built_in">local</span>/bin/make*</span></span><br><span class="line">-r-xr-xr-x. 1 root root  8766 May 19 00:52 /usr/local/bin/make_multiple_custom_sandbox</span><br><span class="line">-r-xr-xr-x. 1 root root 13947 May 19 00:52 /usr/local/bin/make_multiple_sandbox</span><br><span class="line">-r-xr-xr-x. 1 root root 22345 May 19 00:52 /usr/local/bin/make_replication_sandbox</span><br><span class="line">-r-xr-xr-x. 1 root root 11584 May 19 00:52 /usr/local/bin/make_sandbox</span><br><span class="line">-r-xr-xr-x. 1 root root  5055 May 19 00:52 /usr/local/bin/make_sandbox_from_installed</span><br><span class="line">-r-xr-xr-x. 1 root root  7728 May 19 00:52 /usr/local/bin/make_sandbox_from_source</span><br><span class="line">-r-xr-xr-x. 1 root root  5857 May 19 00:52 /usr/local/bin/make_sandbox_from_url</span><br></pre></td></tr></table></figure><p>另外一种是通过安装包的方式，可以通过编译安装完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://launchpad.net/mysql-sandbox/mysql-sandbox-3/mysql-sandbox-3/+download/MySQL-Sandbox-3.0.66.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xf MySQL-Sandbox-3.0.66.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make $$ make install</span></span><br></pre></td></tr></table></figure><h3 id="Sandbox配置MySQL环境"><a href="#Sandbox配置MySQL环境" class="headerlink" title="Sandbox配置MySQL环境"></a>Sandbox配置MySQL环境</h3><p>给定一个二进制安装包，直接make_sandbox即可安装，如下述命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make_sandbox /server/soft/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz <span class="comment"># 自行上传或下载</span></span></span><br><span class="line">MySQL Sandbox should not run as root</span><br><span class="line"></span><br><span class="line">If you know what you are doing and want to</span><br><span class="line"> run as root nonetheless, please set the environment</span><br><span class="line">variable &#x27;SANDBOX_AS_ROOT&#x27; to a nonzero value</span><br></pre></td></tr></table></figure><p>但是因为使用root用户比较敏感，会显示警告。所以就特别提示，需要设置一个变量值，确认之后才可以</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export SANDBOX_AS_ROOT=1&#x27;</span> &gt;&gt; /etc/profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> <span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><p>设置之后再重新执行上述的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make_sandbox /server/soft/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span> </span><br><span class="line">unpacking /server/soft/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">Executing low_level_make_sandbox --basedir=/server/soft/5.7.26 \</span><br><span class="line">--sandbox_directory=msb_5_7_26 \</span><br><span class="line">--install_version=5.7 \</span><br><span class="line">--sandbox_port=5726 \</span><br><span class="line">--no_ver_after_name \</span><br><span class="line">--my_clause=log-error=msandbox.err</span><br><span class="line">    The MySQL Sandbox,  version 3.2.18</span><br><span class="line">...</span><br><span class="line">do you agree? ([Y],n) y      </span><br><span class="line"><span class="meta">#</span><span class="bash"> Starting server</span></span><br><span class="line">.. sandbox server started</span><br><span class="line"><span class="meta">#</span><span class="bash"> Loading grants</span></span><br><span class="line">Your sandbox server was installed in $HOME/sandboxes/msb_5_7_26</span><br></pre></td></tr></table></figure><p>一套数据库环境就自动部署完成了，这里的数据库安装目录是<code>/root/sandboxes</code>，数据文件都在<code>msb_5_7_26</code>目录下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /root/sandboxes/msb_5_7_26/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 108</span><br><span class="line">-rwxr-xr-x. 1 root root 1329 May 19 01:05 add_option</span><br><span class="line">-rwxr-xr-x. 1 root root 1807 May 19 01:05 change_paths</span><br><span class="line">...</span><br><span class="line">-rwxr-xr-x. 1 root root 2878 May 19 01:05 start</span><br><span class="line">-rwxr-xr-x. 1 root root 1276 May 19 01:05 status</span><br><span class="line">-rwxr-xr-x. 1 root root 1871 May 19 01:05 stop</span><br><span class="line">drwxr-xr-x. 2 root root    6 May 19 01:05 tmp</span><br><span class="line">-rwxr-xr-x. 1 root root 2052 May 19 01:05 use</span><br><span class="line">-rw-r--r--. 1 root root   88 May 19 01:05 USING</span><br></pre></td></tr></table></figure><p>连接数据使用一个use命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./use</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 4</span><br><span class="line">Server version: 5.7.26 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql [localhost] &#123;msandbox&#125; ((none)) &gt; </span><br></pre></td></tr></table></figure><p>需要搭建主从环境，也只需要通过一个脚本即可。比如指定一个<code>已经解压的二进制目录5.7.26</code>，就会默认创建一主两从的环境，如下述所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压的目录在使用make_sandbox命令部署时就已经由了，比如我解压目录在/server/soft</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make_replication_sandbox /server/soft/5.7.26    <span class="comment"># 不加斜杠</span></span></span><br><span class="line">installing and starting master</span><br><span class="line">installing slave 1</span><br><span class="line">installing slave 2</span><br><span class="line">starting slave 1</span><br><span class="line">.. sandbox server started</span><br><span class="line">starting slave 2</span><br><span class="line">.. sandbox server started</span><br><span class="line">initializing slave 1</span><br><span class="line">initializing slave 2</span><br><span class="line">replication directory installed in $HOME/sandboxes/rsandbox_5_7_26</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以指定参数，如</span></span><br><span class="line">make_replication_sandbox --gtid --how_many_slave=1 /server/soft/5.7.26</span><br><span class="line"><span class="meta">#</span><span class="bash"> --gtid：使用gtid特性构建主从</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --how_many_slave=1：需要构建从库的数量，默认是2，一主两从</span></span><br></pre></td></tr></table></figure><p>根据结果提示，去到创建主从目录的路径<code>$HOME/sandboxes/rsandbox_5_7_26</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /root/sandboxes/rsandbox_5_7_26/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">check_slaves             enable_gtid        n1     node2        s2             stop_all</span><br><span class="line">clear_all                initialize_slaves  n2     README       send_kill_all  test_replication</span><br><span class="line">connection.json          m                  n3     restart_all  start_all      use_all</span><br><span class="line">default_connection.json  master             node1  s1           status_all</span><br></pre></td></tr></table></figure><p>master与node目录是主库和从库的数据库目录，m和n1都是登录主库的命令，s1和s2是登录从库的命令。其他的都可以根据文件名来知道用途。其中test_replication和check_slaves两个功能类似，都是检查slave的状态。check_slaves会调用<code>show slave status\G</code>，而test_replication只返回<code>ok选项+注释</code>。如下述所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./check_slaves</span> </span><br><span class="line">...</span><br><span class="line">slave # 1</span><br><span class="line">port: 22002</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 10732</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">          Exec_Master_Log_Pos: 10732</span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">slave # 2</span><br><span class="line">port: 22003</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 10732</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">          Exec_Master_Log_Pos: 10732</span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ ./test_replication </span><br><span class="line"># <span class="selector-tag">Master</span> <span class="selector-tag">log</span>: <span class="selector-tag">mysql-bin</span>.000001 <span class="selector-tag">-</span> <span class="selector-tag">Position</span>: 10732 <span class="selector-tag">-</span> <span class="selector-tag">Rows</span>: 20</span><br><span class="line"># <span class="selector-tag">Testing</span> <span class="selector-tag">slave</span> <span class="selector-id">#1</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#1</span> <span class="selector-tag">acknowledged</span> <span class="selector-tag">reception</span> <span class="selector-tag">of</span> <span class="selector-tag">transactions</span> <span class="selector-tag">from</span> <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#1</span> <span class="selector-tag">IO</span> <span class="selector-tag">thread</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#1</span> <span class="selector-tag">SQL</span> <span class="selector-tag">thread</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Table</span> <span class="selector-tag">t1</span> <span class="selector-tag">found</span> <span class="selector-tag">on</span> <span class="selector-tag">slave</span> <span class="selector-id">#1</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Table</span> <span class="selector-tag">t1</span> <span class="selector-tag">has</span> 20 <span class="selector-tag">rows</span> <span class="selector-tag">on</span> <span class="selector-id">#1</span></span><br><span class="line"># <span class="selector-tag">Testing</span> <span class="selector-tag">slave</span> <span class="selector-id">#2</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#2</span> <span class="selector-tag">acknowledged</span> <span class="selector-tag">reception</span> <span class="selector-tag">of</span> <span class="selector-tag">transactions</span> <span class="selector-tag">from</span> <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#2</span> <span class="selector-tag">IO</span> <span class="selector-tag">thread</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Slave</span> <span class="selector-id">#2</span> <span class="selector-tag">SQL</span> <span class="selector-tag">thread</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Table</span> <span class="selector-tag">t1</span> <span class="selector-tag">found</span> <span class="selector-tag">on</span> <span class="selector-tag">slave</span> <span class="selector-id">#2</span></span><br><span class="line"><span class="selector-tag">ok</span> <span class="selector-tag">-</span> <span class="selector-tag">Table</span> <span class="selector-tag">t1</span> <span class="selector-tag">has</span> 20 <span class="selector-tag">rows</span> <span class="selector-tag">on</span> <span class="selector-id">#2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>而查看主从的状态，使用status_all即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./status_all</span> </span><br><span class="line">msb_5_7_26 on</span><br><span class="line">REPLICATION rsandbox_5_7_26</span><br><span class="line">master on</span><br><span class="line">port: 22001</span><br><span class="line">node1 on</span><br><span class="line">port: 22002</span><br><span class="line">node2 on</span><br><span class="line">port: 22003</span><br></pre></td></tr></table></figure><h2 id="MHA-手动搭建"><a href="#MHA-手动搭建" class="headerlink" title="MHA-手动搭建"></a>MHA-手动搭建</h2><h3 id="MHA环境准备"><a href="#MHA环境准备" class="headerlink" title="MHA环境准备"></a>MHA环境准备</h3><p>上述的快速搭建通过一台主机即可搭建，现在通过手动搭建布置三台主机，让实验增加难度也更接近生产些。下述列出需要的主机和主机名，以及使用的版本和主从描述</p><table><thead><tr><th>主机/主机名</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>10.0.0.51/mysql-1</td><td>5.7.26</td><td>主</td></tr><tr><td>10.0.0.52/mysql-2</td><td>5.7.26</td><td>从</td></tr><tr><td>10.0.0.53/mysql-3</td><td>5.7.26</td><td>从</td></tr></tbody></table><ul><li>三台虚拟机（mysql-1,mysql-2,mysql-3)，装好MySQL5.7单实例（MHA不支持多实例），并且启动</li><li>三台虚拟机安装perl的软件包</li><li>mysql-3安装MHA-Manager，mysql-1，mysql-2，mysql-3都安装MHA-Node软件</li><li>使用GTID复制关系搭建1主2从</li></ul><h3 id="MHA-配置软连接与互信"><a href="#MHA-配置软连接与互信" class="headerlink" title="MHA-配置软连接与互信"></a>MHA-配置软连接与互信</h3><p>软连接：这是MHA要求文件位置需要在/usr/bin/，所以我们要做软链接实现构建</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /application/mysql/bin/mysqlbinlog /usr/bin/mysqlbinlog</span><br><span class="line">$ ln -s /application/mysql/bin/mysql /usr/bin/mysql</span><br></pre></td></tr></table></figure><p>对于MHA，上述原理与架构已经说明，主从联通是一定要免交互的，所以需配置SSH共享秘钥方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//主</span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ cd /root/.ssh</span><br><span class="line">$ ls</span><br><span class="line"><span class="selector-tag">id_rsa</span>  <span class="selector-tag">id_rsa</span><span class="selector-class">.pub</span></span><br><span class="line">$ mv id_rsa.pub authorized_keys</span><br><span class="line">$ scp -rp /root/.ssh/* 10.0.0.52:/root/.ssh</span><br><span class="line">$ scp -rp /root/.ssh/*  10.0.0.53:/root/.ssh</span><br></pre></td></tr></table></figure><p>各节点验证</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//<span class="selector-tag">mysql-1</span>:</span><br><span class="line">$ ssh 10.0.0.51 date</span><br><span class="line">$ ssh 10.0.0.52 date</span><br><span class="line">$ ssh 10.0.0.53 date</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">mysql-2</span>:</span><br><span class="line">$ ssh 10.0.0.51 date</span><br><span class="line">$ ssh 10.0.0.52 date</span><br><span class="line">$ ssh 10.0.0.53 date</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">mysql-3</span>:</span><br><span class="line">$ ssh 10.0.0.51 date</span><br><span class="line">$ ssh 10.0.0.52 date</span><br><span class="line">$ ssh 10.0.0.53 date</span><br></pre></td></tr></table></figure><h3 id="MAH-安装软件包和创建用户"><a href="#MAH-安装软件包和创建用户" class="headerlink" title="MAH-安装软件包和创建用户"></a>MAH-安装软件包和创建用户</h3><p>所有主机主机上安装per-DBD-MySQL包，以及安装node节点包。[github下载][<a href="https://github.com/yoshinorim/mha4mysql-manager]">https://github.com/yoshinorim/mha4mysql-manager]</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install perl-DBD-MySQL -y</span><br><span class="line">$ rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm     //自行上传</span><br></pre></td></tr></table></figure><p>Manager管理端软件安装（mysql-3）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm</span></span><br></pre></td></tr></table></figure><p>主库创建MHA需要的用户（mysql-1）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">grant</span> <span class="selector-tag">all</span> <span class="selector-tag">privileges</span> <span class="selector-tag">on</span> *.* <span class="selector-tag">to</span> <span class="selector-tag">mha</span>@&#x27;10.0.0.%&#x27; identified by <span class="string">&#x27;mha&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Manager端配置MHA文件"><a href="#Manager端配置MHA文件" class="headerlink" title="Manager端配置MHA文件"></a>Manager端配置MHA文件</h3><p>创建配置文件目录和日志目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/mha</span><br><span class="line">$ mkdir -p /var/log/mha/app1</span><br></pre></td></tr></table></figure><p>编辑mha配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/mha/app1.cnf &lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[server default]</span></span><br><span class="line">manager_log=/var/log/mha/app1/manager        </span><br><span class="line">manager_workdir=/var/log/mha/app1            </span><br><span class="line">master_binlog_dir=/data/binlog       </span><br><span class="line">user=mha                                   </span><br><span class="line">password=mha                               </span><br><span class="line">ping_interval=2</span><br><span class="line">repl_password=123</span><br><span class="line">repl_user=repl</span><br><span class="line">ssh_user=root                               </span><br><span class="line"><span class="selector-attr">[server1]</span>                                   </span><br><span class="line">hostname=10.0.0.51</span><br><span class="line">port=3306                                  </span><br><span class="line"><span class="selector-attr">[server2]</span>            </span><br><span class="line">hostname=10.0.0.52</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-attr">[server3]</span></span><br><span class="line">hostname=10.0.0.53</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-tag">EOF</span></span><br></pre></td></tr></table></figure><h3 id="Manager端状态检查"><a href="#Manager端状态检查" class="headerlink" title="Manager端状态检查"></a>Manager端状态检查</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_check_ssh  --conf=/etc/mha/app1.cnf           //检查MHA主从SSH连接状态</span><br><span class="line"><span class="selector-tag">Sat</span> <span class="selector-tag">Mar</span>  6 21<span class="selector-pseudo">:32</span><span class="selector-pseudo">:03</span> 2021 <span class="selector-tag">-</span> <span class="selector-attr">[info]</span> <span class="selector-tag">All</span> <span class="selector-tag">SSH</span> <span class="selector-tag">connection</span> <span class="selector-tag">tests</span> <span class="selector-tag">passed</span> <span class="selector-tag">successfully</span>.</span><br><span class="line"></span><br><span class="line">$ masterha_check_repl  --conf=/etc/mha/app1.cnf          //检查MHA主从复制健康状态</span><br><span class="line"><span class="selector-tag">MySQL</span> <span class="selector-tag">Replication</span> <span class="selector-tag">Health</span> <span class="selector-tag">is</span> <span class="selector-tag">OK</span>.</span><br><span class="line"></span><br><span class="line">$ masterha_check_status --conf=/etc/mha/app1.cnf         //检查MHA监控主库的状态</span><br><span class="line"><span class="selector-tag">app1</span> (<span class="selector-tag">pid</span><span class="selector-pseudo">:4087)</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span>(0<span class="selector-pseudo">:PING_OK)</span>, <span class="selector-tag">master</span><span class="selector-pseudo">:10.0.0.50</span></span><br></pre></td></tr></table></figure><h3 id="Manager端启动与关闭"><a href="#Manager端启动与关闭" class="headerlink" title="Manager端启动与关闭"></a>Manager端启动与关闭</h3><p>启动MHA</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>停止MHA</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_stop --conf=/etc/mha/app1.cnf</span><br></pre></td></tr></table></figure><p>mha4mysql-manager-0.56-0.el6.noarch.rpm</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">masterha_manger</span>             //启动<span class="selector-tag">MHA</span> </span><br><span class="line"><span class="selector-tag">masterha_check_ssh</span>      //检查<span class="selector-tag">MHA</span>的<span class="selector-tag">SSH</span>配置状况 </span><br><span class="line"><span class="selector-tag">masterha_check_repl</span>         //检查<span class="selector-tag">MySQL</span>复制状况 </span><br><span class="line"><span class="selector-tag">masterha_master_monitor</span>     //检测<span class="selector-tag">master</span>是否宕机 </span><br><span class="line"><span class="selector-tag">masterha_check_status</span>       //检测当前<span class="selector-tag">MHA</span>运行状态 </span><br><span class="line"><span class="selector-tag">masterha_master_switch</span>  //控制故障转移（自动或者手动）</span><br><span class="line"><span class="selector-tag">masterha_conf_host</span>      //添加或删除配置的<span class="selector-tag">server</span>信息</span><br></pre></td></tr></table></figure><h2 id="MHA-FailOver过程详解"><a href="#MHA-FailOver过程详解" class="headerlink" title="MHA FailOver过程详解"></a>MHA FailOver过程详解</h2><h3 id="Failover手动如何实现"><a href="#Failover手动如何实现" class="headerlink" title="Failover手动如何实现"></a>Failover手动如何实现</h3><ul><li>快速监控到主库宕机</li><li>选着新主</li><li>数据补录</li><li>解除从库身份</li><li>剩余从库和新主库构建主从关系</li><li>应用透明（VIP）如：keepalive</li><li>故障节点自愈（待开发）</li><li>故障提醒</li></ul><h3 id="MHA是如何实现Failover"><a href="#MHA是如何实现Failover" class="headerlink" title="MHA是如何实现Failover"></a>MHA是如何实现Failover</h3><p><strong>从启动—&gt;故障—&gt;转移—&gt;业务恢复</strong></p><ul><li>MHA通过masterha_manger脚本启动MHA的功能</li><li>在manager启动之前，会自动检查SSH互信（masterha_check_ssh）和主从状态（masterha_check_repl）</li><li>MHA-manager通过masterha_master_monitor脚本（每隔ping_interval秒）</li><li>masterha_master_monitor探测主库三次无心跳之后，就会认为主库宕机</li><li>MHA选主过程</li><li>数据补偿</li><li>解除从库身份剩余从库和新主库构建主从关系</li><li>应用透明（VIP）如：keepalive</li><li>故障节点自愈（待开发）</li><li>故障提醒</li><li>提供额外的数据补偿的功能</li></ul><h4 id="MHA选主的过程说明"><a href="#MHA选主的过程说明" class="headerlink" title="MHA选主的过程说明"></a>MHA选主的过程说明</h4><p>前三个自动检查、监控、探测是通过都是通过脚本实现，不在说明，从第四点开始选主说明</p><p>MHA选主算法一：读取配置文件中是否有强制选主的参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">candidate_master=1   # 强制选主</span><br><span class="line">check_repl_delay=0   # 默认选主，如果一个slave落后master 100M的relaylog，MHA将不会选择该slave作为一个master，因为对于slave的恢复需要花费更长的时间。另外通过设置check_repl_delay=0，MHA触发选择一个新的master的时候将会忽略复制延时，参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span><br></pre></td></tr></table></figure><p>MHA选主算法二：自动判断所有从库的日志量，将最接近主库数据的从库作为新主</p><p>MHA选主算法三：如果日志量都一致，按照配置文件先后顺序进行选新主</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[server1]</span></span><br><span class="line">hostname=10.0.0.51</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-attr">[server2]</span></span><br><span class="line">hostname=10.0.0.52</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-attr">[server3]</span></span><br><span class="line">hostname=10.0.0.53</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><h4 id="MHA数据补偿说明"><a href="#MHA数据补偿说明" class="headerlink" title="MHA数据补偿说明"></a>MHA数据补偿说明</h4><p>情况一：调用save_binary_logs脚本，立即保存缺失部分的binlog到各个从节点，然后进行恢复</p><p>情况二：调用apply_diff_relay_logs脚本，计算从库relaylog的差异，恢复到2号从库</p><h4 id="MHA应用透明演示VIP"><a href="#MHA应用透明演示VIP" class="headerlink" title="MHA应用透明演示VIP"></a>MHA应用透明演示VIP</h4><p>mysql-3（Manager管理端），脚本如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">$ vi master_ip_failover.txt</span><br><span class="line">#!/<span class="selector-tag">usr</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">env</span> <span class="selector-tag">perl</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">strict</span>;</span><br><span class="line">use warnings FATAL =&gt; &#x27;all&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">Getopt</span><span class="selector-pseudo">::Long</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">my</span> (</span><br><span class="line">    $command,          $ssh_user,        $orig_master_host, $orig_master_ip,</span><br><span class="line">    $orig_master_port, $new_master_host, $new_master_ip,    $new_master_port</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">my $vip = &#x27;10.0.0.55/24&#x27;;</span><br><span class="line">my $key = &#x27;1&#x27;;</span><br><span class="line">my $ssh_start_vip = &quot;/sbin/ifconfig eth1:$key $vip&quot;;</span><br><span class="line">my $ssh_stop_vip = &quot;/sbin/ifconfig eth1:$key down&quot;;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">GetOptions</span>(</span><br><span class="line">    &#x27;command=s&#x27;          =&gt; \$command,</span><br><span class="line">    &#x27;ssh_user=s&#x27;         =&gt; \$ssh_user,</span><br><span class="line">    &#x27;orig_master_host=s&#x27; =&gt; \$orig_master_host,</span><br><span class="line">    &#x27;orig_master_ip=s&#x27;   =&gt; \$orig_master_ip,</span><br><span class="line">    &#x27;orig_master_port=i&#x27; =&gt; \$orig_master_port,</span><br><span class="line">    &#x27;new_master_host=s&#x27;  =&gt; \$new_master_host,</span><br><span class="line">    &#x27;new_master_ip=s&#x27;    =&gt; \$new_master_ip,</span><br><span class="line">    &#x27;new_master_port=i&#x27;  =&gt; \$new_master_port,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">exit</span> &amp;<span class="selector-tag">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">main</span> &#123;</span><br><span class="line"></span><br><span class="line">    print &quot;\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n&quot;;</span><br><span class="line"></span><br><span class="line">    if ( $command eq &quot;stop&quot; || $command eq &quot;stopssh&quot; ) &#123;</span><br><span class="line"></span><br><span class="line">        my $exit_code = 1;</span><br><span class="line">        <span class="selector-tag">eval</span> &#123;</span><br><span class="line">            print &quot;Disabling the VIP on old master: $orig_master_host \n&quot;;</span><br><span class="line">            &amp;<span class="selector-tag">stop_vip</span>();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn &quot;Got Error: $@\n&quot;;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( $command eq &quot;start&quot; ) &#123;</span><br><span class="line"></span><br><span class="line">        my $exit_code = 10;</span><br><span class="line">        <span class="selector-tag">eval</span> &#123;</span><br><span class="line">            print &quot;Enabling the VIP - $vip on the new master - $new_master_host \n&quot;;</span><br><span class="line">            &amp;<span class="selector-tag">start_vip</span>();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn $@;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="selector-tag">exit</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">else</span> &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        <span class="selector-tag">exit</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">start_vip</span>() &#123;</span><br><span class="line">    `ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">stop_vip</span>() &#123;</span><br><span class="line">     return 0  unless  ($ssh_user);</span><br><span class="line">    `ssh $ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">usage</span> &#123;</span><br><span class="line">    print</span><br><span class="line">    &quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --o</span><br><span class="line">rig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">--</span> <span class="selector-tag">VISUAL</span> <span class="selector-tag">BLOCK</span> <span class="selector-tag">--</span></span><br><span class="line">        <span class="selector-tag">eval</span> &#123;</span><br><span class="line">            print &quot;Disabling the VIP on old master: $orig_master_host \n&quot;;</span><br><span class="line">            &amp;<span class="selector-tag">stop_vip</span>();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn &quot;Got Error: $@\n&quot;;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( $command eq &quot;start&quot; ) &#123;</span><br><span class="line"></span><br><span class="line">        my $exit_code = 10;</span><br><span class="line">        <span class="selector-tag">eval</span> &#123;</span><br><span class="line">            print &quot;Enabling the VIP - $vip on the new master - $new_master_host \n&quot;;</span><br><span class="line">            &amp;<span class="selector-tag">start_vip</span>();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn $@;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( $command eq &quot;status&quot; ) &#123;</span><br><span class="line">        <span class="selector-tag">print</span> &quot;<span class="selector-tag">Checking</span> <span class="selector-tag">the</span> <span class="selector-tag">Status</span> <span class="selector-tag">of</span> <span class="selector-tag">the</span> <span class="selector-tag">script</span>.. <span class="selector-tag">OK</span> \<span class="selector-tag">n</span>&quot;;</span><br><span class="line">        <span class="selector-tag">exit</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">else</span> &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        <span class="selector-tag">exit</span> 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">start_vip</span>() &#123;</span><br><span class="line">    `ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">stop_vip</span>() &#123;</span><br><span class="line">     return 0  unless  ($ssh_user);</span><br><span class="line">    `ssh $ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> <span class="selector-tag">usage</span> &#123;</span><br><span class="line">    print</span><br><span class="line">    &quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip</span><br><span class="line">=ip --new_master_port=port\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将脚本拷贝到/usr/local/bin/目录，并添加权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp master_ip_failover /usr/local/bin/master_ip_failover/</span><br><span class="line">$ chmod +x /usr/local/bin/master_ip_failover</span><br></pre></td></tr></table></figure><p>在配置文件加上该你脚本文件的路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/mha/app1.conf</span><br><span class="line">master_ip_failover_script=/usr/local/bin/master_ip_failover</span><br></pre></td></tr></table></figure><p>Node节点手工添加VIP（mysql-1）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig eth0:1 10.0.0.55/24</span><br></pre></td></tr></table></figure><p>重启MHA（mysql-3）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line">$ nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>检查主库是否没有问题（mysql-3）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line"><span class="selector-tag">app1</span> (<span class="selector-tag">pid</span><span class="selector-pseudo">:4087)</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span>(0<span class="selector-pseudo">:PING_OK)</span>, <span class="selector-tag">master</span><span class="selector-pseudo">:10.0.0.51</span></span><br></pre></td></tr></table></figure><h4 id="MHA故障提醒演示"><a href="#MHA故障提醒演示" class="headerlink" title="MHA故障提醒演示"></a>MHA故障提醒演示</h4><p>上传email压缩包，然后进行解压（mysql-3），下载链接链接：<a href="https://pan.baidu.com/s/1GKfrUBDfznsfbjaQaNKWEQ">https://pan.baidu.com/s/1GKfrUBDfznsfbjaQaNKWEQ</a> 提取码：crud </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ unzip email.zip </span><br><span class="line">$ cp -a email/* /usr/local/bin/</span><br><span class="line">$ cd /usr/local/bin/</span><br><span class="line">$ chmod +x send sendEmail testpl </span><br></pre></td></tr></table></figure><p>先使用testpl进行测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim testpl</span><br><span class="line">/usr/local/bin/sendEmail -o tls=no -f 自己qq邮箱 -t 自己的qq邮箱 -s smtp.qq.com:25 -xu 自己的qq邮箱 -xp 授权码 -u &quot;MHA Waring&quot; -m &quot;YOUR MHA MAY BE FAILOVER&quot; &amp;&gt;/tmp/sendmail.log</span><br><span class="line"></span><br><span class="line">//执行</span><br><span class="line">$ testpl</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sendEmail -o tls=no -f 邮箱地址 -t 邮箱地址 -s smtp.qq.com:25 -xu 邮箱地址 -xp 授权码 -u &quot;MHA Waring&quot; -m &quot;YOUR MHA MAY BE FAILOVER&quot; &amp;&gt;/tmp/sendmail.log</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210518184549713.png"></p><h4 id="MHA额外的数据补偿（binlog-server"><a href="#MHA额外的数据补偿（binlog-server" class="headerlink" title="MHA额外的数据补偿（binlog_server)"></a>MHA额外的数据补偿（binlog_server)</h4><p>找一台额外的机器，必须要有5.6以上的版本，支持gtid并开启，直接用的第二个slave（mysql03）</p><p>创建目录并修改权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/mysql/binlog</span><br><span class="line">$ chown -R mysql.mysql /data/*</span><br></pre></td></tr></table></figure><p>拉取主库binlog日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/mysql/binlog/</span><br><span class="line">$ mysqlbinlog -R --host=10.0.0.51 --user=mha --password=mha --raw --stop-never mysql-bin.000001 &amp;</span><br></pre></td></tr></table></figure><p>重启MHA-manager</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line">$ nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h2 id="MHA故障模拟及故障处理"><a href="#MHA故障模拟及故障处理" class="headerlink" title="MHA故障模拟及故障处理"></a>MHA故障模拟及故障处理</h2><h3 id="Node节点宕机（mysql-1）数据库"><a href="#Node节点宕机（mysql-1）数据库" class="headerlink" title="Node节点宕机（mysql-1）数据库"></a>Node节点宕机（mysql-1）数据库</h3><p>mysql主库宕机，MHA也会跟着宕掉，接着我们用mysql-2从库来代替主库，从而恢复MHA</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br></pre></td></tr></table></figure><h3 id="Node节点恢复故障"><a href="#Node节点恢复故障" class="headerlink" title="Node节点恢复故障"></a>Node节点恢复故障</h3><p>启动故障节点主库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><p>Manager端查看现在以谁为主库：由于mysql-1宕机了，所以MHA默认将mysql-2提升为主库，但是没有1主2从，所以现在的MHA还是不可用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;CHANGE MASTER TO&quot;  /var/log/mha/app1/manager</span><br><span class="line">Sat Mar  6 23:05:05 2021 - [info]  All other slaves should start replication from here. Statement should be: CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;xxx&#x27;;</span><br></pre></td></tr></table></figure><p>进入mysql-1，设置参数，以mysql-2为主库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; CHANGE MASTER TO MASTER_HOST=&#x27;10.0.0.52&#x27;, MASTER_PORT=3306, MASTER_AUTO_POSITION=1, MASTER_USER=&#x27;repl&#x27;, MASTER_PASSWORD=&#x27;123&#x27;;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br></pre></td></tr></table></figure><p>Manager端恢复配置文件：当mysql-1宕机时，MHA会自动删除配置文件中的[server1]，所以恢复了mysql-1，还需在配置文件添加配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/mha/app1.conf</span><br><span class="line"><span class="selector-attr">[server1]</span></span><br><span class="line">hostname=10.0.0.51</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-attr">[server2]</span></span><br><span class="line">hostname=10.0.0.52</span><br><span class="line">port=3306</span><br><span class="line"><span class="selector-attr">[server3]</span></span><br><span class="line">hostname=10.0.0.53</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><p>Manager端在配置文件设置报警的文件位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">report_script=/usr/local/bin/send</span><br></pre></td></tr></table></figure><p>mysql-1恢复binlog，连接主库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/mysql/binlog/</span><br><span class="line">$ ls</span><br><span class="line"><span class="selector-tag">mysql-bin</span>.000001  <span class="selector-tag">mysql-bin</span>.000002  <span class="selector-tag">mysql-bin</span>.000003</span><br><span class="line">$ rm -rf *      //可删可不删</span><br><span class="line">$ mysqlbinlog  -R --host=10.0.0.52 --user=mha --password=mha --raw  --stop-never mysql-bin.000001 &amp;    //拉去mysql-2主库的binlog日志</span><br></pre></td></tr></table></figure><p>Manager端重启MHA</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line">$ nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>Manager端检查主从关系并在MHA查看是否成功故障转移</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; mysql -S /tmp/mysql.sock -e &#x27;show slave status\G;&#x27; |grep Slave</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><p>Manager端检查状态是否运行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ masterha_check_status --conf=/etc/mha/app1.cnf</span><br><span class="line"><span class="selector-tag">app1</span> (<span class="selector-tag">pid</span><span class="selector-pseudo">:9208)</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span>(0<span class="selector-pseudo">:PING_OK)</span>, <span class="selector-tag">master</span><span class="selector-pseudo">:10.0.0.52</span></span><br></pre></td></tr></table></figure><h2 id="MHA的缺点和局限性"><a href="#MHA的缺点和局限性" class="headerlink" title="MHA的缺点和局限性"></a>MHA的缺点和局限性</h2><p>MHA本身存在一些潜在的缺点和局限性，比如以下几个</p><ul><li>必须要在各个节点联通SSH，达成信任关系。如果端口使用的是22，存储安全的隐患，需要做调整</li><li>无法保证强一致性，MHA基于MySQL原生态的复制机制，主从之间数据是异步形式，所以可能会产生不一致的情况</li><li>采用的是中心化管理，当中心节点宕机将无法保证高可用</li><li>基于Perl开发，如果需要定制，需熟悉Perl、MHA逻辑以及其他开发技能</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高可用InnoDB Cluster-10</title>
      <link href="2021/08/09/MySQL-MHA%E9%AB%98%E5%8F%AF%E7%94%A8-9/"/>
      <url>2021/08/09/MySQL-MHA%E9%AB%98%E5%8F%AF%E7%94%A8-9/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL高可用-InnoDB-Cluster"><a href="#MySQL高可用-InnoDB-Cluster" class="headerlink" title="MySQL高可用-InnoDB Cluster"></a>MySQL高可用-InnoDB Cluster</h1><h2 id="InnoDB-Cluster三大件"><a href="#InnoDB-Cluster三大件" class="headerlink" title="InnoDB Cluster三大件"></a>InnoDB Cluster三大件</h2><p>InnoDB Cluster的三大件MySQL Shell、MySQL Router和MGR（MySQL Group Replication），其中MGR是InnoDB Cluster方案中的一个重要组件。如下MySQL官方给出的结构图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210519111917493.png"></p><p>MySQL的这个高可用方案是一个share nothing的架构，这样也就是使得整个架构有强一致性的设计方式，自然会用到组播的方式</p><h2 id="MRG插件结构"><a href="#MRG插件结构" class="headerlink" title="MRG插件结构"></a>MRG插件结构</h2><p>MySQL Group Replication是一个MySQL插件，它基于现有的MySQL复制基础结构，利用二进制日志，基于行的日志记录和全局事务标识符等功能。它与当前的MySQL框架集成，如性能模式或插件和服务基础设施。下图提供了一个框图，描述了MySQL组复制的总体体系结构</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210525193056668.png"></p><ul><li>API层：MySQL Group Replication插件包括一组用于Capture（捕获）、Applier（应用）和Lifecycle（生命周期）的api，这些api控制插件如何与MySQL服务器交互，得到Server的状态，完成事务的管理。有接口使信息从服务器流向插件，反之亦然</li></ul><ul><li>组件层：当通知被路由时到组成员时，成员会做出反应。capture负责跟踪与正在执行事务相关的上下文信息；applier负责在数据库上执行远程事务；recovery负责管理分布式恢复</li><li>复制层：包含复制协议的特定逻辑。它处理冲突检测，并接收事务并将事务传播到组</li><li>通信层：组复制插件架构的最后两层是组通信系统(GCS) API，基于paxos的组通信引擎(XCom)的实现。GCS API是一个高级API，它抽象了构建复制状态机所需的属性。因此，它将消息层的实现与插件的其余上层解耦，组的通信引擎处理与复制组成员之间的通信</li></ul><p>可以看出，MGR是一个标准的分布式架构设计，基于Paxos的组通信引擎（XCom）的实现</p><h2 id="Sandbox快速部署InnoDB-CLuster"><a href="#Sandbox快速部署InnoDB-CLuster" class="headerlink" title="Sandbox快速部署InnoDB CLuster"></a>Sandbox快速部署InnoDB CLuster</h2><p>安装InnoDB Cluster环境的一个基本要求就是python，Centos7系统默认就是使用python2.7，所以我们可以不需要安装python，直接安装其他环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python -V</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><h3 id="安装sandbox"><a href="#安装sandbox" class="headerlink" title="安装sandbox"></a>安装sandbox</h3><p>只需要下载cpan指令，然后通过一条命令即可下载了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y cpan</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cpan MySQL::Sandbox   //输出的信息，全部回车即可</span></span><br></pre></td></tr></table></figure><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>可以参考我的另一篇文章，关于MySQL安装的，这里不在演示步骤。安装MySQL[链接][<a href="https://myboke.ink/2021/02/20/MySQL%E6%A6%82%E8%BF%B0%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85-1/#MySQL%E4%BB%8B%E7%BB%8D]">https://myboke.ink/2021/02/20/MySQL%E6%A6%82%E8%BF%B0%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85-1/#MySQL%E4%BB%8B%E7%BB%8D]</a></p><h3 id="安装MySQL-Shell和Router"><a href="#安装MySQL-Shell和Router" class="headerlink" title="安装MySQL Shell和Router"></a>安装MySQL Shell和Router</h3><ul><li>[官方MySQL Shell下载][<a href="https://downloads.mysql.com/archives/shell/]">https://downloads.mysql.com/archives/shell/]</a></li><li>[官方MySQL Router下载][<a href="https://downloads.mysql.com/archives/router/]">https://downloads.mysql.com/archives/router/]</a></li></ul><p>可通过Linux的wget命令下载，也可以在本地上传，然后上传解压</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://downloads.mysql.com/archives/get/p/43/file/mysql-shell-8.0.25-linux-glibc2.12-x86-64bit.tar.gz</span><br><span class="line">$ wget https://downloads.mysql.com/archives/get/p/41/file/mysql-router-8.0.25-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">$ mkdir /mysql-tools</span><br><span class="line">$ tar xf mysql-router-8.0.20-linux-glibc2.12-x86_64.tar.xz -C /mysql-tools</span><br><span class="line">$ tar xf mysql-shell-8.0.20-linux-glibc2.12-x86-64bit.tar.gz -C /mysql-tools</span><br></pre></td></tr></table></figure><h3 id="创建Cluster"><a href="#创建Cluster" class="headerlink" title="创建Cluster"></a>创建Cluster</h3><p>安装完之后通过Mysql Shell命令mysqlsh脚本开始部署，创建一个端口为3210的实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /mysql-tools/mysql-shell-8.0.20-linux-glibc2.12-x86-64bit/bin/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./mysqlsh</span> </span><br><span class="line">...</span><br><span class="line">MySQL  JS &gt; dba.deploySandboxInstance(3210)   //默认回车即可</span><br></pre></td></tr></table></figure><p>可输入密码，也可以回车不输入，一个端口3210的MySQL服务就启动好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Instance localhost:3210 successfully deployed and started.</span><br><span class="line">Use shell.connect(&#x27;root@localhost:3210&#x27;) to connect to the instance.</span><br></pre></td></tr></table></figure><p>后续继续创建两个节点3220和3230</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL  JS &gt; dba.deploySandboxInstance(3220)</span><br><span class="line">MySQL  JS &gt; dba.deploySandboxInstance(3230)</span><br></pre></td></tr></table></figure><p>创建的实例可在<code>$/home/mysql-sandboxes</code>目录下查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ll /root/mysql-sandboxes/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 5 root root 116 May 20 21:04 3210</span><br><span class="line">drwxr-xr-x. 5 root root 116 May 20 20:28 3220</span><br><span class="line">drwxr-xr-x. 5 root root 116 May 20 20:30 3230</span><br><span class="line"></span><br><span class="line">ll /root/mysql-sandboxes/3210</span><br><span class="line">3210.pid  bin  my.cnf  mysql-files  sandboxdata  start.sh  stop.sh</span><br></pre></td></tr></table></figure><p>切换连接到3210实例，开始创建Cluster</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL  JS &gt; \connect root@localhost:3210</span><br><span class="line">...</span><br><span class="line">MySQL  localhost:3210 ssl  JS &gt; </span><br></pre></td></tr></table></figure><p>定义一个Cluster变量，接着节点1就开启了Cluster创建，可以从下述信息看出，至少需要3个节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:3210 ssl  JS &gt; var cluster = dba.createCluster(&#x27;t_Cluster&#x27;)</span><br><span class="line">Adding Seed Instance...</span><br><span class="line">Cluster successfully created. Use Cluster.addInstance() to add MySQL instances.</span><br><span class="line">At least 3 instances are needed for the cluster to be able to withstand up to</span><br><span class="line">one server failure.</span><br></pre></td></tr></table></figure><p>后续将两个节点添加进来，加入3220和3230实例，可以默认回车，也可以根据输出的信息进行填写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:3210 ssl  JS &gt; cluster.addInstance(&#x27;root@localhost:3220&#x27;)</span><br><span class="line">MySQL  localhost:3210 ssl  JS &gt; cluster.addInstance(&#x27;root@localhost:3230&#x27;)</span><br></pre></td></tr></table></figure><p>配置MySQL Router，创建个软连接，保证能够正常调用（要绝对路径）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -s /mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/bin/mysqlrouter /usr/bin/mysqlroute</span></span><br></pre></td></tr></table></figure><p>在配置MySQL Router的启动节点为端口3310的实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/bin/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./mysqlrouter --bootstrap root@localhost:3210 --user=root  //没有密码的直接回车</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bootstrapping system MySQL Router instance...</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL Router configured <span class="keyword">for</span> the InnoDB Cluster <span class="string">&#x27;t_Cluster&#x27;</span></span></span><br><span class="line">After this MySQL Router has been started with the generated configuration</span><br><span class="line">    $ /etc/init.d/mysqlrouter restart</span><br><span class="line">or</span><br><span class="line">    $ systemctl start mysqlrouter</span><br><span class="line">or</span><br><span class="line">    $ ./mysqlrouter -c /mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/mysqlrouter.conf</span><br><span class="line">the cluster &#x27;t_Cluster&#x27; can be reached by connecting to:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MySQL Classic protocol</span></span></span><br><span class="line">- Read/Write Connections: localhost:6446</span><br><span class="line">- Read/Only Connections:  localhost:6447</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># MySQL X protocol</span></span></span><br><span class="line">- Read/Write Connections: localhost:64460</span><br><span class="line">- Read/Only Connections:  localhost:64470</span><br></pre></td></tr></table></figure><p>从输出的日志来看，分配的读写端口是6446，只读端口是6447，还有X协议连接的端口为64460和64470。可以查看一下<code>/mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/mysqlrouter.conf</code>配置文件都有哪些信息，下述只截取一部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/mysqlrouter.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> File automatically generated during MySQL Router bootstrap</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">name=system</span><br><span class="line">user=root</span><br><span class="line">keyring_path=/mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/var/lib/mysqlrouter/keyring</span><br><span class="line">master_key_path=/mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/mysqlrouter.key</span><br><span class="line">connect_timeout=15</span><br><span class="line">read_timeout=30</span><br><span class="line">dynamic_state=/mysql-tools/mysql-router-8.0.20-linux-glibc2.12-x86_64/bin/../var/lib/mysqlrouter/state.json</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>启动MySQL Router，接着尝试使用6446端口来连接登录，通过MySQL Shell连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./mysqlrouter &amp;</span></span><br><span class="line">[1] 6954</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./mysqlsh --uri root@localhost:6446</span></span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; </span><br></pre></td></tr></table></figure><p>之后可以切换到SQL模式，查看端口会发现是3210节点，这是由MySQL Router做了转接，连接到了里面的读写节点3210</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  SQL &gt; select @@port;</span><br><span class="line">+--------+</span><br><span class="line">| @@port |</span><br><span class="line">+--------+</span><br><span class="line">|   3210 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><h3 id="查看Cluster信息"><a href="#查看Cluster信息" class="headerlink" title="查看Cluster信息"></a>查看Cluster信息</h3><p>查看Cluster的集群名称，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  JS &gt; dba.getCluster()</span><br><span class="line">&lt;Cluster:t_Cluster&gt;</span><br></pre></td></tr></table></figure><p>查看Cluster的状态信息，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置变量</span></span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; var cluster = dba.getCluster()</span><br><span class="line"></span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; cluster.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;clusterName&quot;: &quot;t_Cluster&quot;, </span><br><span class="line">    &quot;defaultReplicaSet&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;default&quot;, </span><br><span class="line">        &quot;primary&quot;: &quot;127.0.0.1:3210&quot;, </span><br><span class="line">        &quot;ssl&quot;: &quot;REQUIRED&quot;, </span><br><span class="line">        &quot;status&quot;: &quot;OK&quot;, </span><br><span class="line">        &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, </span><br><span class="line">        &quot;topology&quot;: &#123;</span><br><span class="line">            &quot;127.0.0.1:3210&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3210&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/W&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;127.0.0.1:3220&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3220&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/O&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;127.0.0.1:3230&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3230&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/O&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;topologyMode&quot;: &quot;Single-Primary&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;groupInformationSourceMember&quot;: &quot;127.0.0.1:3210&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以通过describe得到一些基本的信息，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  JS &gt; cluster.describe();</span><br><span class="line">&#123;</span><br><span class="line">    &quot;clusterName&quot;: &quot;t_Cluster&quot;, </span><br><span class="line">    &quot;defaultReplicaSet&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;default&quot;, </span><br><span class="line">        &quot;topology&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3210&quot;, </span><br><span class="line">                &quot;label&quot;: &quot;127.0.0.1:3210&quot;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3220&quot;, </span><br><span class="line">                &quot;label&quot;: &quot;127.0.0.1:3220&quot;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3230&quot;, </span><br><span class="line">                &quot;label&quot;: &quot;127.0.0.1:3230&quot;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ], </span><br><span class="line">        &quot;topologyMode&quot;: &quot;Single-Primary&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="故障自动切换"><a href="#故障自动切换" class="headerlink" title="故障自动切换"></a>故障自动切换</h3><p>模拟一个节点出现问题，可使用<code>killSandboxInstance</code>方法，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  JS &gt; dba.killSandboxInstance(3210)</span><br><span class="line"></span><br><span class="line">Killing MySQL instance...</span><br><span class="line">Instance localhost:3210 successfully killed.</span><br></pre></td></tr></table></figure><p>查看进程是否被清理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef|grep 3210</span></span><br><span class="line">root       7009   6991  0 20:59 pts/0    00:00:00 grep --color=auto 3210</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ps -ef|grep 3220</span>   </span><br><span class="line">root       5707      1  0 20:28 pts/2    00:00:00 /bin/bash /root/mysql-sandboxes/3220/start.sh --user=root</span><br><span class="line">root       5708   5707  0 20:28 pts/2    00:00:10 /root/mysql-sandboxes/3220/bin/mysqld --defaults-file=/root/mysql-sandboxes/3220/my.cnf --user=root</span><br></pre></td></tr></table></figure><p>可以看到3210实例进程已经被清理，查看3220实例进程还是存在的</p><p>再次通过MySQL Shell重新连接6446端口，然后切换sql模式，查看端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  JS &gt; \quit</span><br><span class="line">Bye!</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./mysqlsh --uri root@localhost:6446</span></span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; \sql</span><br><span class="line">Switching to SQL mode... Commands end with ;</span><br><span class="line">MySQL  localhost:6446 ssl  SQL &gt; select @@port;</span><br><span class="line">+--------+</span><br><span class="line">| @@port |</span><br><span class="line">+--------+</span><br><span class="line">|   3230 |</span><br></pre></td></tr></table></figure><p>查看的端口已经切换成3230，就说明故障切换没有产生问题，接着在把宕机的节点启动起来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  SQL &gt; \js</span><br><span class="line">Switching to JavaScript mode...</span><br><span class="line"></span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; dba.startSandboxInstance(3210)</span><br><span class="line">Starting MySQL instance...</span><br><span class="line">Instance localhost:3210 successfully started.</span><br></pre></td></tr></table></figure><p>重新查看Cluster的状态，会发现3230已经是主了，而3210会被切换成读节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">MySQL  localhost:6446 ssl  JS &gt; dba.getCluster()</span><br><span class="line">&lt;Cluster:t_Cluster&gt;</span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; var cluster = dba.getCluster()</span><br><span class="line">MySQL  localhost:6446 ssl  JS &gt; cluster.status()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;clusterName&quot;: &quot;t_Cluster&quot;, </span><br><span class="line">    &quot;defaultReplicaSet&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;default&quot;, </span><br><span class="line">        &quot;primary&quot;: &quot;127.0.0.1:3230&quot;, </span><br><span class="line">        &quot;ssl&quot;: &quot;REQUIRED&quot;, </span><br><span class="line">        &quot;status&quot;: &quot;OK&quot;, </span><br><span class="line">        &quot;statusText&quot;: &quot;Cluster is ONLINE and can tolerate up to ONE failure.&quot;, </span><br><span class="line">        &quot;topology&quot;: &#123;</span><br><span class="line">            &quot;127.0.0.1:3210&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3210&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/O&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;127.0.0.1:3220&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3220&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/O&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;, </span><br><span class="line">            &quot;127.0.0.1:3230&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;127.0.0.1:3230&quot;, </span><br><span class="line">                &quot;mode&quot;: &quot;R/W&quot;, </span><br><span class="line">                &quot;readReplicas&quot;: &#123;&#125;, </span><br><span class="line">                &quot;role&quot;: &quot;HA&quot;, </span><br><span class="line">                &quot;status&quot;: &quot;ONLINE&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, </span><br><span class="line">        &quot;topologyMode&quot;: &quot;Single-Primary&quot;</span><br><span class="line">    &#125;, </span><br><span class="line">    &quot;groupInformationSourceMember&quot;: &quot;127.0.0.1:3230&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心组件-MGR（组复制）"><a href="#核心组件-MGR（组复制）" class="headerlink" title="核心组件 MGR（组复制）"></a>核心组件 MGR（组复制）</h2><h3 id="MGR介绍"><a href="#MGR介绍" class="headerlink" title="MGR介绍"></a>MGR介绍</h3><p>MySQL组复制（MRG，MySQL Group Replication）提供分布式状态机复制与服务器之间的强协调。当服务器属于同一组时，它们会自动协调自己。组可以在<u>单主模式</u>下操作，并具有自动主选，即每次只有一个服务器接受更新</p><p>或者，对于更高级的用户，可以以<u>多主模式</u>部署组，这种模式下，所有服务器都可以接受更新，即使它们是并发发布的。但这种功能的代价是应用程序必须克服这种部署所施加的限制</p><p>组复制内置一个组成员服务，组成员的构建了一个组视图，成员自由离开或加入组，视图会相应的更新。如果是意外离开组，会通过故障检测到这一点，然后通知组视图进行更改，过程都是自动的</p><p>当提交一个事务，需要组中的大多数成员同意给定事务在全局事务序列中的顺序。当决定提交或中止事务是由每个服务器单独完成的，但需要所有服务器做出相同的决定。如果出现网络分区，导致成员分裂，则系统不会继续运行，而是知道这个问题解决之后才继续运行<em>（组复制也有一个内置的自动恢复的保护机制）</em></p><p>所有这些都是由提供的组通信系统(GCS)协议提供的。它们提供了故障检测机制、组成员服务和安全且完全有序的消息传递。所有这些属性都是创建组复制的关键，确保在服务器组中一致地复制数据。这项技术的核心是Paxos算法的实现，它充当组通信引擎。</p><h4 id="MGR技术"><a href="#MGR技术" class="headerlink" title="MGR技术"></a>MGR技术</h4><p>组复制是一种可用于实现<u>容错系统</u>的技术，每个服务器都有自己的完整数据副本(无共享复制方案)。组复制又由多个服务器组成，组中的每个服务器可以独立的执行事务，但所有的读写事务需要得到组的批准才能提交。换句话说，对于任何读写事务，组决定是否提交，不是原服务器单方面决定。而只读事务就不需要组内批准</p><p>当读写事务准备在原服务器上提交时，服务器会自动广播写值(更改的行)和相应的写集(更新的行的唯一标识符)。因为事务是通过原子广播发送的，所以要么组中的所有服务器都接收该事务，要么没有服务器接收，如果它们都收到它，那么他们都以相同的顺序接收。因此，所有服务器以相同的顺序接收相同的事务集，并为事务建立一个全局总排序</p><p>组复制是一个<u>最终的一致性系统</u>，意味着一旦传入的流量变慢或停止，所有组成员就具有相同的数据内容。例如，在单主模式中，主服务器并发的、无冲突的本地事务可能会以不同于Group Replication所同意的全局顺序提交。</p><p>下图描述了MySQL组复制协议，通过将其与MySQL复制(或MySQL半同步复制)进行比较，可以看到一些区别，图中缺少了一些Paxos的相关信息</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210521173758783.png"></p><h4 id="MGR用例"><a href="#MGR用例" class="headerlink" title="MGR用例"></a>MGR用例</h4><p>通过组复制，可以创建具有冗余的系统，即使服务器出现故障，只要不是全部或者大部分服务器出现故障，系统仍然是可以用的。但会根据故障的服务器的数量，组可能会降低性能或可扩展性，但仍然可用</p><p>尽管数据库服务是可用的，但如果服务器是发生意外down机，那些连接到它的客户端必须重定向或故障转移到不同的服务区。组复制不能解决这个问题，但可以通过MySQL Routing来解决路由的问题（即重定向到可用的主机）</p><p>总的来说，MySQL Group Replication提供了一个高可用性、高弹性、可靠的MySQL服务。</p><blockquote><p>PS：要部署多个MySQL实例，可以使用InnoDB Cluster，然后使用MySQL Shell轻松管理一组MySQL服务器实例。InnoDB Cluster将MySQL Group Replication包装在一个编程环境中，能够轻松部署MySQL实例集群来实现高可用性。还有InnoDB集群与MySQL路由器无缝连接，可以使应用程序无需编写自己的故障转移过程就可以连接到集群。但是，对于不需要高可用性的类似用例，可以使用InnoDB replicasset</p></blockquote><p><strong>示例用例</strong></p><p>下列例子是组复制典型使用情况</p><ul><li><p>弹性复制：需要非常灵活的复制基础设施的环境，其中服务器的数量必须动态增加或减少，并且副作用尽可能少。例如，用于云的数据库服务</p></li><li><p>高可用分片：高可用分片——分片是实现写扩展的一种流行方法。使用MySQL组复制实现高可用分片，其中每个分片映射到一个复制组</p></li><li><p>替代异步源副本复制：在某些情况下，使用单一源服务器会使它成为一个争用点。在某些情况下，写入整个组可能被证明更具可伸缩性</p></li><li><p>自主系统：此外，可以部署MySQL Group Replication纯粹是为了实现复制协议内建的自动化(已经在上述描述过了)</p></li></ul><h3 id="多主和单主模式"><a href="#多主和单主模式" class="headerlink" title="多主和单主模式"></a>多主和单主模式</h3><p>组复制能运行在单主模式或多主模式，组模式可以通过MySQL指令或配置文件进行转换，由系统变量<code>group_replication_single_primary_mode</code>指定，在所有成员上必须是相同的。ON表示单主模式（默认模式），OFF表示多主模式。不能让组的成员以不同的模式部署，例如，一个成员以多主模式配置，而另一个成员以单主模式配置</p><p>不能在“组复制”运行时手动修改<code>group_replication_single_primary_mode</code>的值。在MySQL 8.0.13中，可以使用<code>group_replication_switch_to_single_primary_mode()</code>和<code>group_replication_switch_to_multi_primary_mode()</code>函数将组从一种模式移动到另一种模式，而组复制仍在运行中</p><p>这些功能管理更改组模式的过程，并确保您的数据的安全性和一致性。在以前的版本中，要修改组模式，必须先停止“组复制”，接着在所有成员上修改<code>group_replication_single_primary_mode</code>的值，然后执行组重新启动(由具有<code>group_replication_bootstrap_group=ON</code>的服务器引导)，以实现对新的操作配置的更改。不需要重新启动服务器</p><p>无论部署模式是什么，Group Replication都不会处理客户端故障转移。需要通过中间件框架(如MySQL Router 8.0)、代理、连接器或应用程序本身来处理</p><h4 id="单主模式"><a href="#单主模式" class="headerlink" title="单主模式"></a>单主模式</h4><p>在单主服务器模式下（<code>group_replication_single_primary_mode = ON</code>），组具有一个成员设置为读写模式的主服务器。其他成员都设置为只读模式（<code>super_read_only = ON</code>）。主服务器通常是引导该组的第一台服务器。加入该组的所有其他服务器了解主服务器，并自动设置为只读模式。</p><p>在单主模式下，组复制强制只有一个服务器写入组，因此与多主模式相比，一致性检查可以不那么严格，DDL语句不需要特别小心地处理。<code>group_replication_enfor_update_everywhere_checks</code>选项用于启用或禁用组的严格一致性检查。当部署为单主模式或将组更改为单主模式时，此变量必须设置为OFF</p><p>被指定为主服务器的成员可以通过以下方式更改：</p><ul><li>如果现有的初选退出，无论是自愿的还是意外的，一个新的初选将<code>自动</code>选出</li><li>可以使用<code>group_replication_set_as_primary()</code>函数指定一个特定成员作为新的主节点</li><li>如果使用<code>group_replication_switch_to_single_primary_mode()</code>函数将一个运行在多主模式下的组修改为单主模式。自动选择一个新的主，或可以通过使用功能指定新的主</li></ul><p>仅当所有组成员都运行MySQL 8.0.13或更高版本时，才可以使用该功能。自动选择新的主服务器或手动指定新的主服务器时，它将自动设置为可<code>读写</code>，其他组成员保留为从主机，只能只读。 下图选主的一个过程</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210524092921874.png"></p><p>当一个新的主服务器被选出或指定时，可能会有一些已经在旧主服务器上应用，但还没有在此服务器上应用的更改。在这种情况下，直到新的主数据库赶上旧的主数据库，读写事务可能会导致冲突并回滚，而只读事务可能导致陈旧的读取。组复制的流控制机制最大程度地减少了快速成员和慢成员之间的差异，如果激活并适当调整了它，则可以减少这种情况的发生</p><p>有关流量控制的更多信息，可通过官方[Flow Contorl][<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-flow-control.html]%E8%BF%9B%E8%A1%8C%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BA%86%E8%A7%A3%E3%80%82%E4%BB%8EMySQL">https://dev.mysql.com/doc/refman/8.0/en/group-replication-flow-control.html]进行详细的了解。从MySQL</a> 8.0.14开始，还可以使用<code>group_replication_consistency</code>系统变量来配置组的事务一致性级别，以防止出现此问题。</p><p>设置<code>BEFORE_ON_PRIMARY_FAILOVER</code>（或更高的一致性级别）将在新选举的主数据库上保存新事务。事务一致性的更多信息，可通过官方<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-consistency-guarantees.html">Transaction Consistency Guarantees”</a>进行详细的了解。如果没有为组使用流控制和事务一致性保证，则优良作法是在将新的主应用程序重新路由到该主数据库之前，等待新主数据库应用其复制相关的中继日志</p><h5 id="主的初选算法"><a href="#主的初选算法" class="headerlink" title="主的初选算法"></a>主的初选算法</h5><p>每个成员都按照其MySQL Server版本中的主要选举算法在本地做出自己的决定。由于所有成员都必须做出相同的决定。因此，如果其他组成员正在运行较低版本的MySQL Server，则成员将调整其主要选举算法，从而使其与组中拥有最低MySQL Server版本的成员具有相同的行为</p><p>成员按顺序选举主要成员时考虑的因素如下：</p><ul><li><p>考虑的第一个因素是哪个或哪些成员运行最低的MySQL Server版本。如果所有组成员都在运行MySQL 8.0.17或更高版本，则首先按其发行版的补丁程序对成员进行排序。如果所有成员运行的是MySQL Server 5.7或MySQL 8.0.16或更低版本，则首先按其发行版的主版本对成员进行排序，并且忽略补丁程序版本</p></li><li><p>如果有多个成员正在运行最低的MySQL Server版本，则考虑的第二个因素是每个成员的成员权重，具体由成员上的<code>group_replication_member_weight</code>系统变量指定。如果这个组的所有成员正在运行MySQL Server 5.7，则这个参数是不可用的，因此这个因素会被忽略</p><p><code>group_replication_member_weight</code>系统变量的取值范围是0 ~ 100。所有成员的默认权重为50，因此设置低于此权重以降低排序，设置高于此权重以增加排序。可以使用这个加权函数来确定使用更好的硬件的优先级，或者确保在计划的主节点维护期间将故障转移到特定的成员</p></li><li><p>如果有多个成员正在运行最低的MySQL Server版本，并且多个成员中有一个具有最高成员权重（或忽略了成员权重），则考虑的第三个因素是每个成员的已生成服务器<code>UUID</code>的标识符顺序 ，由server_uuid系统变量指定。该因素可作为最后选择的保证。因此，如果不能由任何重要因素决定，则所有小组成员均会做出相同的决定</p></li></ul><h5 id="如何发现主"><a href="#如何发现主" class="headerlink" title="如何发现主"></a>如何发现主</h5><p>在单主模式下部署时找出当前哪个服务器是主服务器，可使用<code>Performance_schema.replication_group_members</code>表中的MEMBER_ROLE列。 例如下述命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT MEMBER_HOST, MEMBER_ROLE FROM performance_schema.replication_group_members;</span></span><br><span class="line">+-------------------------+-------------+</span><br><span class="line">| MEMBER_HOST             | MEMBER_ROLE |</span><br><span class="line">+-------------------------+-------------+</span><br><span class="line">| remote1.example.com     | PRIMARY     |</span><br><span class="line">| remote2.example.com     | SECONDARY   |</span><br><span class="line">| remote3.example.com     | SECONDARY   |</span><br><span class="line">+-------------------------+-------------+</span><br></pre></td></tr></table></figure><p>或者使用<code>group_replication_primary_member</code>状态变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW STATUS LIKE <span class="string">&#x27;group_replication_primary_member&#x27;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>PS：<code>group_replication_primary_member</code>状态变量已被弃用，并计划在以后的版本中删除</p></blockquote><h4 id="多主模式"><a href="#多主模式" class="headerlink" title="多主模式"></a>多主模式</h4><p>在多主要模式下（<code>group_replication_single_primary_mode = OFF</code>），没有成员具有特殊角色。在加入组时，所有成员都被设置为读写模式，并且可以处理写事务，即使它们是并发读写的</p><p>如果成员停止接受写事务(例如，在意外的服务器退出的情况下)，连接到该成员的客户端可以被重定向或故障转移到处于读写模式的任何其他成员。Group Replication本身并不处理客户端故障转移，因此需要使用中间件框架(如MySQL Router 8.0)、代理、连接器或应用程序本身来安排</p><p>下述描述了客户端故障转移，显示了如果一个成员离开组，客户端如何重新连接到一个可选组成员</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210524144410871.png"></p><p>组复制是一个最终的一致性系统。意味着一旦传入流量变慢或停止，所有组成员就具有相同的数据内容。当流量在流动时，可以在某些成员上先进行事务外部化，尤其是在某些成员的写吞吐量低于其他成员的情况下，这可能导致过时的读取</p><p>在多主数据库模式下，速度较慢的成员还可能积压过多的事务进行认证和应用，从而导致更大的冲突和认证失败风险。为了限制这些问题，可以激活和优化Group Replication的流控制机制，以最小化快速成员和慢速成员之间的差异，可通过官方[Flow Contorl][<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-flow-control.html]%E8%BF%9B%E8%A1%8C%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BA%86%E8%A7%A3">https://dev.mysql.com/doc/refman/8.0/en/group-replication-flow-control.html]进行详细的了解</a></p><p>从MySQL 8.0.14开始，如果为组中的每个事务提供事务一致性保证，可以使用<code>group_replication_consistency</code>系统变量来实现这一点。选择适合组的工作负载和数据读写优先级的设置，并考虑到增加一致性所需的同步的性能影响。还可以为单个会话设置系统变量，以保护特别是对并发敏感的事务，可通过官方<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-consistency-guarantees.html">Transaction Consistency Guarantees”</a>进行详细的了解</p><h5 id="事务检查"><a href="#事务检查" class="headerlink" title="事务检查"></a>事务检查</h5><p>当一个组以多主模式部署时，将检查事务，以确保它们与该模式兼容。“Group Replication”部署为多主模式时，需要进行如下严格的一致性检查</p><ul><li>如果事务是在SERIALIZABLE（可序列化）隔离级别下执行的，那么它的提交将在与组同步时失败</li><li>如果一个事务针对具有级联约束的外键的表执行，那么它在与组同步时提交失败</li></ul><p><code>group_replication_enforce_update_everywhere_checks</code>系统变量。在多主模式下，通常应该设置为ON，但是可以选择通过将系统变量设置为OFF来禁用检查。<code>单机部署</code>时，系统变量必须设置为<code>“OFF”</code></p><h5 id="Data-Definition-Statements（数据定义语句）"><a href="#Data-Definition-Statements（数据定义语句）" class="headerlink" title="Data Definition Statements（数据定义语句）"></a>Data Definition Statements（数据定义语句）</h5><p>在多主模式下的Group Replication拓扑中，在执行数据定义语句(通常也称为数据定义语言(DDL))时需要注意。MySQL 8.0引入了对原子数据定义语言(DDL)语句的支持，其中完整的DDL语句作为单个原子事务提交或回滚</p><p>然而，DDL语句，无论是原子的还是其他的，都会隐式地结束当前会话中活动的任何事务，就像在执行语句之前执行了COMMIT一样。意味着DDL语句不能在另一个事务中执行，在事务控制语句中，如START transaction…COMMIT，或与同一事务中的其他语句组合</p><p>Group Replication基于乐观复制范式，其中语句将乐观地执行，并在必要时稍后回滚。每个服务器在执行时都不会首先确保组协议的安全。因此，在多主模式下复制DDL语句时需要格外小心</p><p>如果对同一对象进行模式更改（使用DDL）并更改对象包含的数据（使用DML），则需要通过同一服务器处理更改，而模式操作尚未完成并在各处复制。如果不这样做，当操作被中断或仅部分完成时，可能会导致数据不一。如果组以单主服务器模式部署，则不会发生此问题，因为所有更改都是通过同一服务器（主服务器）执行的</p><p>关于MySQL 8.0中对原子DDL的支持以及某些语句的复制所导致的行为变化的详细信息，可参考官方<a href="https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html">Atomic Data Definition Statement Support</a></p><h5 id="版本兼容性"><a href="#版本兼容性" class="headerlink" title="版本兼容性"></a>版本兼容性</h5><p>对于版本的兼容性，最好是所有成员都运行相同版本的MySQL Server，也运行相同版本的Group Replication。如果一个组的成员运行了多个不同的MySQL Server版本，就有可能成员与成员之间是不兼容的，会出现有成员不支持一些功能，或者缺少其他成员的功能。为了防止这个情况，当一个成员加入，对该组的所有成员进行兼容性检查</p><p>如果一个加入成员运行的MySQL Server版本高于现有组成员运行的最低版本，它加入组但保持只读模式。(在以单主模式运行的组中，新添加的成员在任何情况下默认为只读）运行MySQL 8.0.17或更高版本的成员在检查他们的兼容性时要考虑补丁版本。运行MySQL 8.0.16或更低版本，或MySQL 5.7的成员，只考虑主版本</p><p>在多主模式下运行的组中，成员使用不同的MySQL Server版本，组复制自动管理运行MySQL 8.0.17或更高版本的成员的读写和只读状态。如果成员离开组，则运行现在最低版本的成员将自动设置为读写模式</p><p>当使用<code>group_replication_switch_to_multi_primary_mode()</code>函数将运行在单主模式下的组更改为运行在多主模式下时，group Replication会自动将成员设置为正确的模式。如果运行的MySQL服务器版本高于组中最低版本，则成员将自动处于只读模式，运行最低版本的成员将处于读写模式</p><p>关于组版本兼容性以及这如何影响升级过程中组的行为的完整信息，可参考官网<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-online-upgrade-combining-versions.html">Combining Different Member Versions in a Group</a> </p><h3 id="MGR服务"><a href="#MGR服务" class="headerlink" title="MGR服务"></a>MGR服务</h3><h4 id="组成员"><a href="#组成员" class="headerlink" title="组成员"></a>组成员</h4><p>在MySQL组复制中，一组服务器组成一个复制组。群组具有名称，名称采用UUID的形式。这个组是动态的，服务器可以随时离开(自愿或非自愿)并加入。每当服务器加入或离开时，组会调整自身动态</p><p>组复制具有一个组成员服务，该服务定义了哪些服务器处于Oneline或是Down，在线服务器列表称为视图。组成员不仅必须事务提交达成一致，而且还必须就当前视图的提交达成一致。如果该组的成员同意别的成员加入，则需要重新配置，接着触发视图更改。如果服务器自愿或不自愿离开组，则组会动态安排其配置，并触发视图更改</p><p>在成员自愿离开的情况下，会启动一个动态组重新配置，这个时期，所有成员必须在没有离开组的情况下达成视图一致的更改。如果成员非自愿离开（例如：网络连接超时、断开或Down机），在这种情况下，组复制会启动故障检测机制短时间识别出已离开的成员，并重新配置组。但是，如果组不能达成协议（例如，因为它的分区方式没有大多数服务器在线）系统不能动态改变配置，并阻塞以防止裂脑的情况。这种情况需要管理员的干预</p><p>成员可能会短暂脱机，接着会通过故障检测将故障之前重新配置组或删除组成员的信息，尝试再次重新加入组。这种情况下，重新加入的成员会忘记之前的状态。但如果其他成员向该新加入的成员发送用于其down前的状态信息，可能会导致，数据的不一致。如果这种情况下的成员参与了XCom的共识协议，这可能会导致XCom在相同的共识回合中通过在失败前和失败后做出不同的决定而提供不同的价值。</p><p>为了应对这种可能性，从MySQL 5.7.22和MySQL 8.0中，Group Replication检查相同服务器的新身份加入组，而旧身份(具有相同的地址和端口号)仍然作为成员离开的情况。新的身份被阻止加入组，直到旧身份通过重新配置和被删除</p><blockquote><p>注意：如果<code>group_replication_member_expel_timeout</code>系统变量添加了一个等待时间，以允许成员有更多时间在被驱逐之前与该组重新连接，则被怀疑的成员如果重新连接到该组，则可以作为其当前身份再次在该组中活动。当成员超过驱逐超时并被逐出组时，或当组复制在服务器上被<code>STOP GROUP_REPLICATION</code>语句停止时，或服务器出现故障时，它必须作为一个新的身份重新加入</p></blockquote><h4 id="故障检测"><a href="#故障检测" class="headerlink" title="故障检测"></a>故障检测</h4><p>Group Replication包括一个故障检测机制，该机制能够发现并报告哪些服务器是静默的状态（被认为是死亡的）。故障检测可以说是用于一个分布式服务，它提供关于哪些服务器可能已死(或可疑)的信息。当服务器静默时，检测就会被怀疑。当服务器A在给定的时间段内没有收到来自服务器B的消息时，就会发生超时和产生提高怀疑。之后，如果组认为怀疑可能是真的，那么组就认定的服务器确实发生了故障。意味着组中的其余成员将做出共同决定以移除该成员</p><p>如果一个成员与组中成员隔离了，该成员会怀疑其他成员都down机了。但由于无法确保与团体协议的一直（因为它无法确保势力的人数），所以不会产生任何动作。而隔离组时，该成员将无法执行本地的事务</p><p>如果网络不稳定，成员经常出现重新连接的状态，可能会照成将所有成员标记为开除，之后组就会不存在。为了解决这个问题，从MySQL 8.0.20开始，Group Replication的Group Communication System (GCS)跟踪被标记为开除的组成员，并在决定是否有多数成员时将他们视为可疑成员组中的成员。这可以确保至少有一个成员留在组中，并且组可以继续存在当一个被开除的成员已经被开除出组时，GCS将删除该成员被开除的记录，以便该成员可以在可能的情况下重新加入组</p><p>关于组复制系统变量系统，可参考官网“对故障检测和网络分区的响应”<a href="https://dev.mysql.com/doc/refman/8.0/en/group-replication-responses-failure.html">Responses to Failure Detection and Network Partitioning</a>.</p><h4 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h4><p>MySQL组复制建立在Paxos分布式算法的实现上，提供服务器之间的分布式协调。因此，它需要大多数服务器处于活动状态以达到相应人数，从而做出决定。这直接影响到系统在不损害自身和整体功能的情况下可以容忍的故障数量。容忍f次故障所需的服务器数量(n)是n = 2 x f + 1</p><p>实践过程中，意味着要容忍一个故障，组中必须有是三个服务器。因此，如果有一个服务器失败，仍然有两个服务器构成多数（三分之二），并允许系统继续自动做出决定和进展。但是如果有第二台服务器非自愿的失败，组中就只有一个服务器，这个时候就会照成阻塞，因为不够势力人数来做出最终的决定</p><p>下表示是对于公式算出所需服务器数量</p><table><thead><tr><th>组</th><th>主机数</th><th>故障容忍</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>2</td><td>2</td><td>0</td></tr><tr><td>3</td><td>2</td><td>1</td></tr><tr><td>4</td><td>3</td><td>1</td></tr><tr><td>5</td><td>3</td><td>2</td></tr><tr><td>6</td><td>4</td><td>2</td></tr><tr><td>7</td><td>4</td><td>3</td></tr></tbody></table><h2 id="MGR实例"><a href="#MGR实例" class="headerlink" title="MGR实例"></a>MGR实例</h2><p>MySQL Group Replication作为MySQL服务器的插件提供，组中的每个服务器都需要配置和安装插件。需创建至少有三个成员的复制组所需的步骤</p><blockquote><p>PS：要部署多个MySQL实例，可以使用InnoDB Cluster，使用MySQL Shell中轻松管理一组MySQL服务器实例。InnoDB Cluster将MySQL Group Replication包装在一个编程环境中，使能够轻松部署MySQL实例集群来实现高可用性</p></blockquote><h3 id="单主模式下配置Group-Replication实例"><a href="#单主模式下配置Group-Replication实例" class="headerlink" title="单主模式下配置Group Replication实例"></a>单主模式下配置Group Replication实例</h3><p>用于组复制的MySQL Server实例所需的配置设置，配置MySQL5.7版本的组复制，而一个组中可以使用的最大实例数是9</p><ul><li>存储引擎</li><li>复制框架</li><li>组复制设置</li></ul><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>对于组复制，数据必须存储在InnoDB事务存储引擎中，使用其他存储引擎(包括临时内存存储引擎)可能导致组复制出错。禁用系统变量disabled_storage_engines的方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disabled_storage_engines=&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;</span><br></pre></td></tr></table></figure><h4 id="复制参数设置"><a href="#复制参数设置" class="headerlink" title="复制参数设置"></a>复制参数设置</h4><p>设置根据MySQL组复制要求配置复制（必须配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server_id=1</span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">log_bin=binlog</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">binlog_format=ROW</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br></pre></td></tr></table></figure><ul><li><code>server_id=1</code>设置服务器唯一标识符</li><li><code>gtid_mode=ON</code>开启GTID模式</li><li><code>enforce_gtid_consistency=ON</code>开启GTID一致性</li><li><code>binlog_checksum=NONE</code>禁用二进制日志事件校验</li><li><code>log_bin=binlog</code>开启binlog日志</li><li><code>log_slave_updates=ON</code>开启从主机更新功能</li><li><code>binlog_format=ROW</code>使用基于行的格式（默认情况下也是ROW）</li><li><code>master_info_repository=TABLE</code>将复制元数据存储在表</li><li><code>relay_log_info_repository=TABLE</code>等同上述</li></ul><h4 id="组复制设置"><a href="#组复制设置" class="headerlink" title="组复制设置"></a>组复制设置</h4><p>下述部分为服务器配置组复制设置（必须配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transaction_write_set_extraction=XXHASH64</span><br><span class="line">plugin_load_add=&#x27;group_replication.so&#x27;</span><br><span class="line">group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;</span><br><span class="line">group_replication_start_on_boot=off</span><br><span class="line">group_replication_local_address= &quot;mgr-1:33061&quot;</span><br><span class="line">group_replication_group_seeds= &quot;mgr-1:33061,mgr-2:33061,mgr-3:33061&quot;</span><br><span class="line">group_replication_bootstrap_group=off</span><br><span class="line">group_replication_allow_local_disjoint_gtids_join=on</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> group_replication_single_primary_mode=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group_replication_enforce_update_everywhere_checks=<span class="literal">false</span></span></span><br></pre></td></tr></table></figure><ul><li><p><code>transaction_write_set_extraction</code>表示server必须为每个事务收集写集合，比使用XXHASH64哈希算法将其编码为散列</p></li><li><p><code>plugin-load-add</code>表示启动服务器时自动加载到插件列表中，在生产部署追踪，比手动方便些</p></li><li><p><code>group_replication_group_name</code>配置告诉插件，它正在加入或创建的组名为“aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa”。</p><p><code>group_replication_group_name</code>必须是合法的UUID。可以使用<code>SELECT UUID()</code>随机来生成一个。UUID是构成gtid的一部分，当组成员从客户端接收到的事务，以及组成员内部生成的视图更改事件时被写入二进制日志，则使用gtid。当然测试环境使用的时候，可以使用aaa…aaa方便简便配置</p></li><li><p><code>group_replication_start_on_boot</code>参数设置为off，启动服务器时不自动开启插件，注意这点很重要，是确保在手动启动插件之前配置服务器。一旦配置了成员，则可以将group_replication_start_on_boot设置为on，以便在服务器启动时自动开启组复制</p></li><li><p><code>group_replication_local_address</code>参数是设置成员的通信地址与端口。组复制将地址用于组通信引擎（XCom，Paxos协议）的远程实例成员连接</p><p><code>group_replication_local_address</code>配置的地址是所有成员主机中可解析的，每个服务器实例位于不同地址。例如使用10.0.0.1主机地址，需要确保能够通过DNS或/etc/hosts文件解析成功</p><p><code>group_replication_local_address</code>的端口为“33061”，只有主机名或IP地址都相同，就可以使用相同的端口或相同的IP（相同IP适用于本地部署组复制）</p></li></ul><blockquote><p>PS：如果加入的成员不能解析到其他成员的主机名，则分布式恢复会失败。客户端连接的主机名可以通过Performance Schema表中的<code>replication_group_members的Member_host</code>列中验证。</p></blockquote><ul><li><code>group_replication_group_seeds</code>参数设置新成员与其他组成员建立连接（主机名和端口）。一旦建立连接，组成员信息就可以通过Performance Schema表replication_group_members中列出。通常，group_replication_group_seeds列表包含组成员的每个group_replication_local_address的hostname:port，但这不是强制性的，可以选择组成员的子集作为种子</li></ul><blockquote><p>PS：<code>group_replication_group_seeds</code>中列出的<code>hostname:port</code>是种子成员的内部网络地址，由每个成员主机上的<code>group_replication_local_address</code>配置，而不是用于客户端连接的<code>hostname:port</code>。例如，在<code>Performance Schema</code>表中的<code>Replication_group_members</code>中显示</p></blockquote><ul><li><code>group_replication_bootstrap_group</code>会指示插件是否引导该组。 在这种情况下，即使mgr-1是组的第一个成员，也会在选项文件中将此变量设置为off。 反之在实例运行时配置group_replication_bootstrap_group，以确保只有一个成员实际引导该组</li></ul><blockquote><p>PS：必须在任何时候（通常是在第一次引导该组时，或者在整个组都关闭并再次备份的情况下），仅在任何时候在属于该组的一个服务器实例上启用<code>group_replication_bootstrap_group</code>变量。如果多次引导组，例如当多个服务器实例设置了此选项为on时，那么就会创建一个人工的脑分裂场景，其中存在两个具有相同名称的不同组。所以在第一个服务器实例启动后，必须将<code>group_replication_bootstrap_group</code>设置为off</p></blockquote><ul><li><code>group_replication_allow_local_disjoint_gtids_join</code>自动连接访问到上述设置的主机端口</li><li><code>group_replication_single_primary_mode</code>设置为single-primary模式，默认情况下就是true</li><li><code>group_replication_enforce_update_everywhere_checks</code>检查参数在各个节点是否一致</li></ul><h4 id="用于分布式恢复的用户"><a href="#用于分布式恢复的用户" class="headerlink" title="用于分布式恢复的用户"></a>用于分布式恢复的用户</h4><p>成员加入组中时，组复制使用分布式流程来同步组成员，通过<code>group_replication_recovery</code>参数复制通信将事务从主成员的二进制日志传输到其他成员中。这时就需要具有权限的复制用户，以便组复制能够建立成员到成员之间的通信</p><p>在通信的过程中，必须使用同一个复制用户在每个组成员进行分布式恢复。创建的用户过程可以在二进制日志抓取，然后通过分布式恢复来复制用于创建用户的语句。或者禁用二进制记录，然后手动在每个成员主机上创建用户。</p><p>按照以下步骤创建用于分布式恢复的复制用户：</p><ul><li>启动MySQL服务器实例，然后连接一个客户端到它</li><li>如果要禁用二进制日志，可以通过以下语句来实现:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=0;</span></span><br></pre></td></tr></table></figure><ul><li>创建一个具有REPLICATION SLAVE权限的MySQL用户，用于分布式恢复，如果服务器设置支持克隆，则创建BACKUP_ADMIN权限，用于克隆操作中的donor。下述中显示了密码为password和用户rpl_user</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER rpl_user@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;rpl_user&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_user@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql&gt; GRANT BACKUP_ADMIN ON *.* TO rpl_user@<span class="string">&#x27;%&#x27;</span>; //5.7版本不需要</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><ul><li>如果禁用了二进制日志记录，在创建用户之后，通过下述语句重新开启二进制</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET SQL_LOG_BIN=1;</span></span><br></pre></td></tr></table></figure><p>创建复制用户后，必须向服务器提供用户凭据，以便可以使用分布式恢复。可以通过将用户凭据设置为``group_replication_bootstrap_group`通信的凭据，使用 CHANGE MASTER TO语句（5.7版本到8.0.23版本）</p><blockquote><p>PS：在MySQL 8.0.23版本中可以使用<code>CHANGE REPLICATION SOURCE TO</code>语句，或者从8.0.21开始，可以在<code>START GROUP_REPLICATION</code>语句上为分布式恢复指定用户凭据</p></blockquote><p>使用<code>CHANGE MASTER TO</code>设置的用户凭据，是以纯文本形式存储在服务器。在启动组复制应用时，<code>group_relication_start_on_boot</code>参数变量设置为ON时会自动启动</p><blockquote><p>PS：使用<code>START GROUP_REPLICATION</code>指定的用户凭据是仅保存在内存中，并通过<code>STOP GROUP_REPLICATION</code>语句关机及删除，需要重新获取凭据，则再次发出<code>START GROUP_REPLICATION</code>语句。这种指定用户凭据的方法有助于保护组复制服务器免受未经授权的访问</p></blockquote><p>如果选择使用<code>CHANGE REPLICATION SOURCE to | CHANGE MASTER to</code>语句提供用户凭证，现在在服务器实例上发出以下语句，用创建用户时使用的值替换rpl_user和password</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> MySQL 5.7：</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_USER=<span class="string">&#x27;rpl_user&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;rpl_user&#x27;</span> \\</span></span><br><span class="line"><span class="bash">      FOR CHANNEL <span class="string">&#x27;group_replication_recovery&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL 8.0.23:</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CHANGE REPLICATION SOURCE TO SOURCE_USER=<span class="string">&#x27;rpl_user&#x27;</span>, SOURCE_PASSWORD=<span class="string">&#x27;rpl_user&#x27;</span> \\</span></span><br><span class="line"><span class="bash">      FOR CHANNEL <span class="string">&#x27;group_replication_recovery&#x27;</span>;</span></span><br></pre></td></tr></table></figure><h4 id="启动组复制"><a href="#启动组复制" class="headerlink" title="启动组复制"></a>启动组复制</h4><p>配置并启动服务器mgr-1实例后，需要安装组复制插件，也可以在配置文件中指定插件<code>plugin_load_add =&#39;group_replication.so&#39;</code>，然后可以继续执行下一步。 下述是手动安装插件使用的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALL PLUGIN group_replication SONAME &#x27;group_replication.so&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>PS：mysql.session 用户必须存在才能加载组复制。 mysql.session 是在 MySQL 5.7.19 版本中添加的。如果您的数据字典是使用早期版本初始化的，则必须执行MySQL升级过程(升级MySQL的过程，可参考官网<a href="https://dev.mysql.com/doc/refman/5.7/en/upgrading.html">Upgrading MySQL</a>)。如果没有运行升级，则“Group Replication”启动失败，并提示错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There was an error when trying to access the server with user: mysql.session@localhost. Make sure the user is present in the server and that mysql_upgrade was ran after a server update..</span><br></pre></td></tr></table></figure><p>检查插件是否安装成功，可以执行SHOW PLUGINS，然后检查输出，显示的内容如下:</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW PLUGINS;</span></span><br><span class="line">+----------------------------+----------+--------------------+----------------------+-------------+</span><br><span class="line">| Name                       | Status   | Type               | Library              | License     |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+-------------+</span><br><span class="line">| binlog                     | ACTIVE   | STORAGE ENGINE     | NULL                 | PROPRIETARY |</span><br><span class="line"></span><br><span class="line">(...)</span><br><span class="line"></span><br><span class="line">| group_replication          | ACTIVE   | GROUP REPLICATION  | group_replication.so | PROPRIETARY |</span><br><span class="line">+----------------------------+----------+--------------------+----------------------+-------------+</span><br></pre></td></tr></table></figure><h4 id="引导组设置"><a href="#引导组设置" class="headerlink" title="引导组设置"></a>引导组设置</h4><p>首次启动组复制过程称为引导，可以通过<code>group_replication_bootstrap_group</code>进行引导组。引导只能由一个服务器完成，服务器启动该组并只能执行一次。这也是为什么<code>group_replication_bootstrap_group</code>参数选项没有在配置文件的原因。</p><p>如果该选项存储在配置文件，则重新启动时会自动引导第二个具有相同名称的组，而两个不同的组就会具有相同的名称，这往往是不允许的。反之手动选项设置为ON时，停止之后并在启动插件。为了安全引导该组，使用下述的语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=ON;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=OFF;</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：或者如果你在<code>START GROUP_REPLICATION</code>语句上为分布式恢复提供用户凭证(可以从MySQL 8.0.21中获得)，则使用以下语句:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=ON;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION USER=<span class="string">&#x27;rpl_user&#x27;</span>, PASSWORD=<span class="string">&#x27;password&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL group_replication_bootstrap_group=OFF;</span></span><br></pre></td></tr></table></figure><p>语句成功设置之后，可以<code>performance_schema.replication_group_members</code>通过下述语句查询组中的视图成员</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+---------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE  |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+---------------+</span><br><span class="line">| group_replication_applier | aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa |   mgr-1        |       3306  | ONLINE        |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+---------------+</span><br></pre></td></tr></table></figure><p>表中的信息确认组中存在唯一标识符为 <code>aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa</code> 的成员，该成员处于 ONLINE 状态并在 mgr-1 侦听端口 3306 。可以通过创建库和表来确定组复制是否成功设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE DATABASE <span class="built_in">test</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> USE <span class="built_in">test</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL);</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> INSERT INTO t1 VALUES (1, <span class="string">&#x27;wu&#x27;</span>);</span></span><br></pre></td></tr></table></figure><p>检查表 t1 的内容和二进制日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM t1;</span></span><br><span class="line">+----+------+</span><br><span class="line">| c1 | c2   |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | wu |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW BINLOG EVENTS;</span></span><br><span class="line">+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                                                               |</span><br><span class="line">+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| binlog.000001 |   4 | Format_desc    |         1 |         123 | Server ver: 8.0.25-log, Binlog ver: 4                              |</span><br><span class="line">| binlog.000001 | 123 | Previous_gtids |         1 |         150 |                                                                    |</span><br><span class="line">| binlog.000001 | 150 | Gtid           |         1 |         211 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&#x27;  |</span><br><span class="line">| binlog.000001 | 211 | Query          |         1 |         270 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 | 270 | View_change    |         1 |         369 | view_id=14724817264259180:1                                        |</span><br><span class="line">| binlog.000001 | 369 | Query          |         1 |         434 | COMMIT                                                             |</span><br><span class="line">| binlog.000001 | 434 | Gtid           |         1 |         495 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&#x27;  |</span><br><span class="line">| binlog.000001 | 495 | Query          |         1 |         585 | CREATE DATABASE test                                               |</span><br><span class="line">| binlog.000001 | 585 | Gtid           |         1 |         646 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&#x27;  |</span><br><span class="line">| binlog.000001 | 646 | Query          |         1 |         770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) |</span><br><span class="line">| binlog.000001 | 770 | Gtid           |         1 |         831 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&#x27;  |</span><br><span class="line">| binlog.000001 | 831 | Query          |         1 |         899 | BEGIN                                                              |</span><br><span class="line">...</span><br><span class="line">+---------------+-----+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>上述所示，创建了数据库和表，并将它们对应的 DDL 语句写入二进制日志。数据也插入到表中并写入二进制日志，因此可以通过二进制日志进行状态传输来进行分布式恢复</p><h4 id="添加其他实例到组"><a href="#添加其他实例到组" class="headerlink" title="添加其他实例到组"></a>添加其他实例到组</h4><h5 id="添加第二个实例"><a href="#添加第二个实例" class="headerlink" title="添加第二个实例"></a><strong>添加第二个实例</strong></h5><p>此时，组中有一个成员，服务器mgr-1。为了添加第二个实例，即服务器mgr-2，首先要为它创建配置文件。配置信息类似于mgr-1的配置，除了server_id和地址端口配置不一样外，其他的都差不多相同，不同的配置我会注释信息提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Disable other storage engines</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">disabled_storage_engines=<span class="string">&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Replication configuration parameters</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">server_id=2</span></span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">log_bin=binlog</span><br><span class="line">binlog_format=ROW</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Group Replication configuration</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">transaction_write_set_extraction=XXHASH64</span></span><br><span class="line">plugin_load_add=&#x27;group_replication.so&#x27;</span><br><span class="line">group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;</span><br><span class="line">group_replication_start_on_boot=off</span><br><span class="line">group_replication_local_address= &quot;mgr-2:33061&quot;</span><br><span class="line">group_replication_group_seeds= &quot;mgr-1:33061,mgr-2:33061,mgr-3:33061&quot;</span><br><span class="line">group_replication_bootstrap_group= off</span><br></pre></td></tr></table></figure><p>与服务器mgr-1的过程类似，有了选项文件，就可以启动服务器，然后按如下方式配置分布式恢复凭据。 这些命令与设置服务器 mgr-1 时使用的相同，因为用户在组内共享。如果你依赖分布式在所有成员配置用户，当mgr-2连接到mgr-1，通过复制或克隆mgr-1的复制用户信息，可以参考官网<a href="https://dev.mysql.com/doc/refman/5.7/en/group-replication-distributed-recovery.html">Distributed Recovery</a></p><p>如果在 mgr-1上配置用户凭据时未启用二进制日志记录，并且未将远程克隆操作用于状态传输，则必须在 mgr-2 上创建复制用户。操作的语句如下 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SET SQL_LOG_BIN=0;</span><br><span class="line">CREATE USER rpl_user@&#x27;%&#x27; IDENTIFIED BY &#x27;rpl_user&#x27;;</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO rpl_user@&#x27;%&#x27;;</span><br><span class="line">SET SQL_LOG_BIN=1;</span><br><span class="line">CHANGE MASTER TO MASTER_USER=&#x27;rpl_user&#x27;, MASTER_PASSWORD=&#x27;rpl_user&#x27; \\</span><br><span class="line">FOR CHANNEL &#x27;group_replication_recovery&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>PS：如果使用<code>CHANGE REPLICATION SOURCE TO</code>语句提供用户凭据，则使用下述的语句（MySQL 8.0.23）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHANGE REPLICATION SOURCE TO SOURCE_USER=&#x27;rpl_user&#x27;, SOURCE_PASSWORD=&#x27;password&#x27; \\</span><br><span class="line">FOR CHANNEL &#x27;group_replication_recovery&#x27;;</span><br></pre></td></tr></table></figure><p>启动组复制，mgr-2启动加入组的过程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：或者，如果您在 START GROUP_REPLICATION 语句（MySQL 8.0.21）上提供用于分布式恢复的用户凭据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> START GROUP_REPLICATION USER=<span class="string">&#x27;rpl_user&#x27;</span>, PASSWORD=<span class="string">&#x27;password&#x27;</span>;</span></span><br></pre></td></tr></table></figure><p>与上述mgr-1上执行的步骤相同，但缺少一些步骤，在mgr-2加入组时<u>不需要引导组</u>，因为已经有一个组成员引导（组已经存在了）。此时，只需要将服务器mgr-2添加到已经存在的组中即可</p></blockquote><blockquote><p>PS：当成功启动并加入组时，会检查<code>super_read_only</code>变量。该成员的配置文件中的<code>super_read_only</code>会设置为ON，确保因任何原因启动组复制时失败的服务器不接受事务。如果使用的是多主模式，那么加入组之后，<code>super_read_only</code>会设置为OFF</p></blockquote><p>检查performance_schema.replication_group_members表会显示组中已有两个ONLINE服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | a6d58ecb-c871-11eb-a20a-000c2965a579 | mgr-2       |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | d0c3200d-c864-11eb-b732-000c298e405e | mgr-1       |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br></pre></td></tr></table></figure><p>验证mgr-2是否已经同步mgr-1，如下所示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES LIKE <span class="string">&#x27;test&#x27;</span>;</span></span><br><span class="line">+-----------------+</span><br><span class="line">| Database (test) |</span><br><span class="line">+-----------------+</span><br><span class="line">| test            |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM test.t1;</span></span><br><span class="line">+----+------+</span><br><span class="line">| c1 | c2   |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | Luis |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW BINLOG EVENTS;</span></span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| Log_name      | Pos  | Event_type     | Server_id | End_log_pos | Info                                                               |</span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| binlog.000001 |    4 | Format_desc    |         2 |         123 | Server ver: 8.0.25-log, Binlog ver: 4                              |</span><br><span class="line">| binlog.000001 |  123 | Previous_gtids |         2 |         150 |                                                                    |</span><br><span class="line">| binlog.000001 |  150 | Gtid           |         1 |         211 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&#x27;  |</span><br><span class="line">| binlog.000001 |  211 | Query          |         1 |         270 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 |  270 | View_change    |         1 |         369 | view_id=14724832985483517:1                                        |</span><br><span class="line">| binlog.000001 |  369 | Query          |         1 |         434 | COMMIT                                                             |</span><br><span class="line">| binlog.000001 |  434 | Gtid           |         1 |         495 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&#x27;  |</span><br><span class="line">| binlog.000001 |  495 | Query          |         1 |         585 | CREATE DATABASE test                                               |</span><br><span class="line">| binlog.000001 |  585 | Gtid           |         1 |         646 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&#x27;  |</span><br><span class="line">| binlog.000001 |  646 | Query          |         1 |         770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) |</span><br><span class="line">| binlog.000001 |  770 | Gtid           |         1 |         831 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&#x27;  |</span><br><span class="line">| binlog.000001 |  831 | Query          |         1 |         890 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 |  890 | Table_map      |         1 |         933 | table_id: 108 (test.t1)                                            |</span><br><span class="line">| binlog.000001 |  933 | Write_rows     |         1 |         975 | table_id: 108 flags: STMT_END_F                                    |</span><br><span class="line">| binlog.000001 |  975 | Xid            |         1 |        1002 | COMMIT /* xid=30 */                                                |</span><br><span class="line">| binlog.000001 | 1002 | Gtid           |         1 |        1063 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:5&#x27;  |</span><br><span class="line">...</span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h5 id="添加更多的实例"><a href="#添加更多的实例" class="headerlink" title="添加更多的实例"></a><strong>添加更多的实例</strong></h5><p>添加第三台实例或更多的实例，步骤与mgr-2基本相同，总结一下命令</p><p>创建配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Disable other storage engines</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">disabled_storage_engines=<span class="string">&quot;MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Replication configuration parameters</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">server_id=3</span></span><br><span class="line">gtid_mode=ON</span><br><span class="line">enforce_gtid_consistency=ON</span><br><span class="line">master_info_repository=TABLE</span><br><span class="line">relay_log_info_repository=TABLE</span><br><span class="line">binlog_checksum=NONE</span><br><span class="line">log_slave_updates=ON</span><br><span class="line">log_bin=binlog</span><br><span class="line">binlog_format=ROW</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Group Replication configuration</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">transaction_write_set_extraction=XXHASH64</span></span><br><span class="line">plugin_load_add=&#x27;group_replication.so&#x27;</span><br><span class="line">group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;</span><br><span class="line">group_replication_start_on_boot=off</span><br><span class="line">group_replication_local_address= &quot;mgr-3:33061&quot;</span><br><span class="line">group_replication_group_seeds= &quot;mgr-1:33061,mgr-2:33061,mgr-3:33061&quot;</span><br><span class="line">group_replication_bootstrap_group= off</span><br></pre></td></tr></table></figure><p>使用CHANGE MASTER TO语句提供用户凭据，语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SET SQL_LOG_BIN=0;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> CREATE USER rpl_user@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;rpl_user&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_user@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> SET SQL_LOG_BIN=1;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> CHANGE MASTER TO MASTER_USER=<span class="string">&#x27;rpl_user&#x27;</span>, MASTER_PASSWORD=<span class="string">&#x27;rpl_user&#x27;</span>  \\</span></span><br><span class="line"><span class="bash">FOR CHANNEL <span class="string">&#x27;group_replication_recovery&#x27;</span>;</span></span><br></pre></td></tr></table></figure><p>如果需要安装组复制插件和启动组复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> INSTALL PLUGIN group_replication SONAME <span class="string">&#x27;group_replication.so&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> START GROUP_REPLICATION;</span></span><br></pre></td></tr></table></figure><p>在通过<code>performance_schema。Replication_group_members</code>表查看组的情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | ac39f1e6-6dfa-11e6-a69d-00212844f856 | mgr-3       |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | a6d58ecb-c871-11eb-a20a-000c2965a579 | mgr-2       |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | d0c3200d-c864-11eb-b732-000c298e405e | mgr-1       |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+---------------+</span><br></pre></td></tr></table></figure><p>验证服务器 mgr-3 是否已同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES LIKE <span class="string">&#x27;test&#x27;</span>;</span></span><br><span class="line">+-----------------+</span><br><span class="line">| Database (test) |</span><br><span class="line">+-----------------+</span><br><span class="line">| test            |</span><br><span class="line">+-----------------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM test.t1;</span></span><br><span class="line">+----+------+</span><br><span class="line">| c1 | c2   |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | Luis |</span><br><span class="line">+----+------+</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW BINLOG EVENTS;</span></span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| Log_name      | Pos  | Event_type     | Server_id | End_log_pos | Info                                                               |</span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br><span class="line">| binlog.000001 |    4 | Format_desc    |         3 |         123 | Server ver: 8.0.25-log, Binlog ver: 4                              |</span><br><span class="line">| binlog.000001 |  123 | Previous_gtids |         3 |         150 |                                                                    |</span><br><span class="line">| binlog.000001 |  150 | Gtid           |         1 |         211 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1&#x27;  |</span><br><span class="line">| binlog.000001 |  211 | Query          |         1 |         270 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 |  270 | View_change    |         1 |         369 | view_id=14724832985483517:1                                        |</span><br><span class="line">| binlog.000001 |  369 | Query          |         1 |         434 | COMMIT                                                             |</span><br><span class="line">| binlog.000001 |  434 | Gtid           |         1 |         495 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:2&#x27;  |</span><br><span class="line">| binlog.000001 |  495 | Query          |         1 |         585 | CREATE DATABASE test                                               |</span><br><span class="line">| binlog.000001 |  585 | Gtid           |         1 |         646 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:3&#x27;  |</span><br><span class="line">| binlog.000001 |  646 | Query          |         1 |         770 | use `test`; CREATE TABLE t1 (c1 INT PRIMARY KEY, c2 TEXT NOT NULL) |</span><br><span class="line">| binlog.000001 |  770 | Gtid           |         1 |         831 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:4&#x27;  |</span><br><span class="line">| binlog.000001 |  831 | Query          |         1 |         890 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 |  890 | Table_map      |         1 |         933 | table_id: 108 (test.t1)                                            |</span><br><span class="line">| binlog.000001 |  933 | Write_rows     |         1 |         975 | table_id: 108 flags: STMT_END_F                                    |</span><br><span class="line">| binlog.000001 |  975 | Xid            |         1 |        1002 | COMMIT /* xid=29 */                                                |</span><br><span class="line">| binlog.000001 | 1002 | Gtid           |         1 |        1063 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:5&#x27;  |</span><br><span class="line">| binlog.000001 | 1063 | Query          |         1 |        1122 | BEGIN                                                              |</span><br><span class="line">| binlog.000001 | 1122 | View_change    |         1 |        1261 | view_id=14724832985483517:2                                        |</span><br><span class="line">| binlog.000001 | 1261 | Query          |         1 |        1326 | COMMIT                                                             |</span><br><span class="line">| binlog.000001 | 1326 | Gtid           |         1 |        1387 | SET @@SESSION.GTID_NEXT= &#x27;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:6&#x27;  |</span><br><span class="line">...</span><br><span class="line">+---------------+------+----------------+-----------+-------------+--------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="本地部署MGR"><a href="#本地部署MGR" class="headerlink" title="本地部署MGR"></a>本地部署MGR</h3><p>常见的部署方法是在多个服务器部署Group Replication实例，以提高高可用性。也是在本地部署Group Replication，如用于测试的目的</p><p>初始化MySQL Server实例的复制组，需要分别创建三个数据目录（这里以5.7版本为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/mysql_mgr1/data</span><br><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/mysql_mgr2/data</span><br><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/mysql_mgr2/data</span><br></pre></td></tr></table></figure><blockquote><p>PS：使用<code>-initialize-insecure</code>，是免创建密码，是不安全的做法，生产环境不建议使用</p></blockquote><h4 id="编写实例的配置文件"><a href="#编写实例的配置文件" class="headerlink" title="编写实例的配置文件"></a>编写实例的配置文件</h4><p>如果是本地部署，需要额外注意datadir指定的数据目录和socker配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> server configuration</span></span><br><span class="line">datadir=&lt;full_path_to_data&gt;/data/s1</span><br><span class="line">basedir=&lt;full_path_to_bin&gt;/mysql-8.0/</span><br><span class="line"></span><br><span class="line">port=24801</span><br><span class="line">socket=&lt;full_path_to_sock_dir&gt;/mgr-1.sock</span><br></pre></td></tr></table></figure><p>因为是本地部署，所以只需要改变三个实例不同的端口即可，地址不需要改变。然后每个成员需要能够连接到其group_replication_local_address上的其他成员。例如，在成员mgr-1添加如下配置（mgr-2与mgr-3类似）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group_replication_local_address= &quot;127.0.0.1:24901&quot;</span><br><span class="line">group_replication_group_seeds= &quot;127.0.0.1:24901,127.0.0.1:24902,127.0.0.1:24903&quot;</span><br></pre></td></tr></table></figure><p>24901端口是mgr-1与其他成员通信的，对于其他成员，也要将其修改通信端口。其余的配置跟上述配置单模式相似</p><h3 id="MGR常见问题"><a href="#MGR常见问题" class="headerlink" title="MGR常见问题"></a>MGR常见问题</h3><h4 id="缺少参数问题"><a href="#缺少参数问题" class="headerlink" title="缺少参数问题"></a>缺少参数问题</h4><p>如果抛出以下的错误，这个就是基本错误，说明离成功搭建不远了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Plugin group_replication reported: &#x27;The member contains transactions not present in the group. The member will now exit the group.&#x27;</span><br><span class="line">[Note] Plugin group_replication reported: &#x27;To force this member into the group you can use the group_replication_allow_local_disjoint_gtids_join_option&#x27;</span><br></pre></td></tr></table></figure><p>从日志可以看出提示，需要设置<code>group_replication_allow_local_disjoint_gtids_join_option=on</code>参数，然后运行start group_replication重新启动</p><p>通过配置文件加入，也可以在MySQL通过下述指令设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> global group_replication_allow_local_disjoint_gtids_join_option=on</span></span><br></pre></td></tr></table></figure><h4 id="复制内容不一致"><a href="#复制内容不一致" class="headerlink" title="复制内容不一致"></a>复制内容不一致</h4><p>在添加第二个节点使用指令<code>start group_replication</code>加入组时，出现<code>RECOVERING</code>的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | 56b18008-cabd-11eb-bc62-000c298e405e | mgr-1       |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | a6d58ecb-c871-11eb-a20a-000c2965a579 | mgr-2       |        3306 | RECOVERING   |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br></pre></td></tr></table></figure><p>查看错误日志出现的报错问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2021-06-10T02:43:02.328189Z 0 [ERROR] Plugin group_replication reported: &#x27;This member has more executed transactions than those present in the group. Local transactions: a6d58ecb-c871-11eb-a20a-000c2965a579:1-2 &gt; Group transactions: aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa:1-9,</span><br><span class="line">d0c3200d-c864-11eb-b732-000c298e405e:1-3,</span><br><span class="line">e1c232d9-c870-11eb-991f-000c298e405e:1-4&#x27;</span><br><span class="line">2021-06-10T02:43:02.328189Z 0 [ERROR] Plugin group_replication reported: &#x27;The member contains transactions not present in the group. The member will now exit the group.&#x27;</span><br></pre></td></tr></table></figure><p>解决办法：将binlog日志将全部清空，通过下述指令（不管是主成员，还是其他成员，都将binlog恢复最初始的状态）    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> reset master;</span></span><br></pre></td></tr></table></figure><p>原因可能是节点之前有操作了创建用户或节点之前加入组时没有成功，所以通过上述命令，清空Executd_Gtid_Set和binlog</p><p>如果连接还是出现<code>RECOVERING</code>状态，也有可能是applier与recovery的<code>relay-bin-group_replication</code>文件信息不一致，可通过下述命令恢复初始的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> reset slave;</span></span><br></pre></td></tr></table></figure><h4 id="recovery连接报错"><a href="#recovery连接报错" class="headerlink" title="recovery连接报错"></a>recovery连接报错</h4><p>在添加第二个节点使用指令<code>start group_replication</code>加入组时，出现RECOVERING的状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from performance_schema.replication_group_members;</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | 56b18008-cabd-11eb-bc62-000c298e405e | mgr-1       |        3306 | ONLINE       |</span><br><span class="line">| group_replication_applier | a6d58ecb-c871-11eb-a20a-000c2965a579 | mgr-2       |        3306 | RECOVERING   |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br></pre></td></tr></table></figure><p>查看错误日志出现的报错问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-06-11T07:51:19.813021Z 61 [ERROR] Plugin group_replication reported: &#x27;There was an error when connecting to the donor server. Please check that group_replication_recovery channel credentials and all MEMBER_HOST column values of performance_schema.replication_group_members table are correct and DNS resolvable.&#x27;</span><br><span class="line">2021-06-11T07:51:19.813036Z 61 [ERROR] Plugin group_replication reported: &#x27;For details please check performance_schema.replication_connection_status table and error log messages of Slave I/O for channel group_replication_recovery.&#x27;</span><br></pre></td></tr></table></figure><p>错误日志提示的信息，让我们去查看<code>performance_schema.replication_group_members</code>表，先看看是什么原因</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from performance_schema.replication_connection_status\G;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             CHANNEL_NAME: group_replication_applier</span><br><span class="line">               GROUP_NAME: e1c232d9-c870-11eb-991f-000c298e405e</span><br><span class="line">              SOURCE_UUID: e1c232d9-c870-11eb-991f-000c298e405e</span><br><span class="line">                THREAD_ID: NULL</span><br><span class="line">            SERVICE_STATE: ON</span><br><span class="line">COUNT_RECEIVED_HEARTBEATS: 0</span><br><span class="line"> LAST_HEARTBEAT_TIMESTAMP: 0000-00-00 00:00:00</span><br><span class="line"> RECEIVED_TRANSACTION_SET: </span><br><span class="line">        LAST_ERROR_NUMBER: 0</span><br><span class="line">       LAST_ERROR_MESSAGE: </span><br><span class="line">     LAST_ERROR_TIMESTAMP: 0000-00-00 00:00:00</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">             CHANNEL_NAME: group_replication_recovery</span><br><span class="line">               GROUP_NAME: </span><br><span class="line">              SOURCE_UUID: </span><br><span class="line">                THREAD_ID: NULL</span><br><span class="line">            SERVICE_STATE: OFF</span><br><span class="line">COUNT_RECEIVED_HEARTBEATS: 0</span><br><span class="line"> LAST_HEARTBEAT_TIMESTAMP: 0000-00-00 00:00:00</span><br><span class="line"> RECEIVED_TRANSACTION_SET: </span><br><span class="line">        LAST_ERROR_NUMBER: 1130</span><br><span class="line">       LAST_ERROR_MESSAGE: error connecting to master &#x27;rpl_user@mgr-1:3306&#x27; - retry-time: 60  retries: 1</span><br><span class="line">     LAST_ERROR_TIMESTAMP: 2021-06-11 15:50:19</span><br></pre></td></tr></table></figure><p>上述查询的表可以看到在<code>group_replication_recovery</code>下的信息出现了报错。这是错误信息可能是<strong>主成员没有创建对应的用户，或是没有对该用户进行授权</strong></p><p>解决办法，通过以下命令创建用户与授权，然后再重新连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> CREATE USER rpl_user@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;rpl_user&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GRANT REPLICATION SLAVE ON *.* TO rpl_user@<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><h4 id="判断一个复制组中的主节点"><a href="#判断一个复制组中的主节点" class="headerlink" title="判断一个复制组中的主节点"></a>判断一个复制组中的主节点</h4><p>判断复制组中哪个是主节点，如果完全靠猜或日志来判断，会不确认和有些麻烦。所以可以通过下述的语句过滤得到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT * FROM performance_schema.replication_group_members <span class="built_in">where</span> member_id = (select variable_value from performance_schema.global_status <span class="built_in">where</span> variable_name= <span class="string">&#x27;group_replication_primary_member&#x27;</span>);</span></span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| CHANNEL_NAME              | MEMBER_ID                            | MEMBER_HOST | MEMBER_PORT | MEMBER_STATE |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br><span class="line">| group_replication_applier | 56b18008-cabd-11eb-bc62-000c298e405e | mgr-1       |        3306 | ONLINE       |</span><br><span class="line">+---------------------------+--------------------------------------+-------------+-------------+--------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制-8</title>
      <link href="2021/05/16/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-8/"/>
      <url>2021/05/16/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-8/</url>
      
        <content type="html"><![CDATA[<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="MySQL主从复制管理"><a href="#MySQL主从复制管理" class="headerlink" title="MySQL主从复制管理"></a>MySQL主从复制管理</h2><h3 id="MySQL高可用架构方案"><a href="#MySQL高可用架构方案" class="headerlink" title="MySQL高可用架构方案"></a>MySQL高可用架构方案</h3><ul><li>负载均衡：有一定的高可用性  LVS Nginx</li><li>主备系统：有高可用性，但是需要切换，是单活的架构 KA，MHA，MMM</li><li>真正高可用（多活系统）：NDF Cluster，Oracle RAC，Sysvase Cluster，InnoDB Cluster（MGR），PXC，MGC</li></ul><h3 id="MySQL复制的类型"><a href="#MySQL复制的类型" class="headerlink" title="MySQL复制的类型"></a>MySQL复制的类型</h3><p>大体有4种类型：异步复制、半同步复制、延迟复制和组复制（组复制不在这章说明）</p><h4 id="异步复制（源复制）"><a href="#异步复制（源复制）" class="headerlink" title="异步复制（源复制）"></a>异步复制（源复制）</h4><p>是经典的主从复制，搭建主从默认的架构方式，相对与性能会好一些，但是会有丢失数据的情况。异步复制源是主要的，有一个或多个从，这些从是次要的。当发生事务的时候，主库会写入自己的BinLog，然后通过dump线程发送新binlog给从库的io线程接收，后续主库不会等待从库的确认，而是继续处理提交的操作。在默认情况下，所有服务器都有数据的完成副本。源复制异步图如下：</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210521162805583.png" alt="image-20210521162805583"></p><h4 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h4><p>半同步复制，在同步步骤过程中增加了一个协议，主服务器在提交事务时，需要等待从服务器确认接收事务，接着返回一个ACK给主服务器，然后主服务器才能进行提交。如下图半同步复制图所示</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210521163057100.png" alt="image-20210521163057100"></p><h4 id="延时复制"><a href="#延时复制" class="headerlink" title="延时复制"></a>延时复制</h4><p>延时复制是在异步复制的基础上，人为的设定主库和从库的数据同步延迟时间，好处是能在误删除时，能够更快的恢复数据。比如有时候手抖误删除了库、表或者其他对象，还有不加where条件更新或删除，都可以使用延迟从库再误删前的时间点停下，然后进行恢复</p><h3 id="主从复制的搭建前提"><a href="#主从复制的搭建前提" class="headerlink" title="主从复制的搭建前提"></a>主从复制的搭建前提</h3><ul><li>2个或以上的数据库实例</li><li>主库需要开启二进制日志</li><li>server_id要不同，区分不同的节点</li><li>主库需要建立专用的复制用户(replication slave)</li><li>从库应该通过备份主库，复制主从的所有信息，将数据一致</li><li>人为的告诉从库一些复制信息（ip、port、user、pass与二进制日志起点等）</li><li>从库应该开启专门的复制线程</li></ul><h2 id="主从复制搭建过程（生产）"><a href="#主从复制搭建过程（生产）" class="headerlink" title="主从复制搭建过程（生产）"></a>主从复制搭建过程（生产）</h2><h3 id="实例准备"><a href="#实例准备" class="headerlink" title="实例准备"></a>实例准备</h3><p>使用2个实例，分别是3307和3308</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemcdtl start mysqld3307</span><br><span class="line">$ \rm -rf /data/3308/data/*</span><br><span class="line">$ \rm -rf /data/3308/mysql-bin.*</span><br><span class="line">$ mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/3308/data </span><br><span class="line">$ systemctl start mysqld3308</span><br></pre></td></tr></table></figure><p>检查是否可用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &#x27;select @@port&#x27;</span><br><span class="line">$ mysql -S /data/3308/mysql.sock -e &#x27;select @@port&#x27;</span><br></pre></td></tr></table></figure><h3 id="编写实例配置文件"><a href="#编写实例配置文件" class="headerlink" title="编写实例配置文件"></a>编写实例配置文件</h3><p>编写3307实例my.cnf的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /data/3307/my.cnf </span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">log_error=/data/3307/mysql.log</span><br><span class="line">port=3307</span><br><span class="line">server_id=7</span><br><span class="line">log_bin=/data/3307/mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line">socket=/data/3307/mysql.sock</span><br></pre></td></tr></table></figure><p>编写3308实例my.cnf的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat /data/3308/my.cnf </span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3308/data</span><br><span class="line">socket=/data/3308/mysql.sock</span><br><span class="line">log_error=/data/3308/mysql.log</span><br><span class="line">port=3308</span><br><span class="line">server_id=8</span><br><span class="line">log_bin=/data/3308/mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line">socket=/data/3308/mysql.sock</span><br></pre></td></tr></table></figure><h3 id="主库创建复制用户"><a href="#主库创建复制用户" class="headerlink" title="主库创建复制用户"></a>主库创建复制用户</h3><p>创建用户与查看</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;grant replication slave on *.* to repl@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;&quot;</span><br><span class="line">$ mysql -S /data/3307/mysql.sock -e &quot;select user,host from mysql.user;&quot; </span><br></pre></td></tr></table></figure><h3 id="备份与导入数据"><a href="#备份与导入数据" class="headerlink" title="备份与导入数据"></a>备份与导入数据</h3><p>3307 主（全备）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -S /data/3307/mysql.sock -A --master-data=2 --single-transaction -R -E --triggers &gt;/tmp/full.sql</span><br></pre></td></tr></table></figure><p>3308 从（导入）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3308/mysql.sock </span><br><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">full</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><h3 id="连接主库"><a href="#连接主库" class="headerlink" title="连接主库"></a>连接主库</h3><p>需要连接主库的参数比较多，所以可以通过help查看，而不需自己手打下面的内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span>  </span><br><span class="line"><span class="selector-tag">CHANGE</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">TO</span></span><br><span class="line">  MASTER_HOST=&#x27;master2.example.com&#x27;,</span><br><span class="line">  MASTER_USER=&#x27;replication&#x27;,</span><br><span class="line">  MASTER_PASSWORD=&#x27;password&#x27;,</span><br><span class="line">  MASTER_PORT=3306,</span><br><span class="line">  MASTER_LOG_FILE=&#x27;master2-bin.001&#x27;,</span><br><span class="line">  MASTER_LOG_POS=4,</span><br><span class="line">  MASTER_CONNECT_RETRY=10;</span><br></pre></td></tr></table></figure><p>查看备份后数据的position的起始位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /tmp/full.sql</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql-bin.000004&#x27;, MASTER_LOG_POS=444;</span><br></pre></td></tr></table></figure><p>将信息编写好写入从库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CHANGE</span> <span class="selector-tag">MASTER</span> <span class="selector-tag">TO</span></span><br><span class="line">  MASTER_HOST=&#x27;10.0.0.50&#x27;,</span><br><span class="line">  MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">  MASTER_PASSWORD=&#x27;123456&#x27;,</span><br><span class="line">  MASTER_PORT=3307,</span><br><span class="line">  MASTER_LOG_FILE=&#x27;mysql-bin.000004&#x27;,</span><br><span class="line">  MASTER_LOG_POS=444,</span><br><span class="line">  MASTER_CONNECT_RETRY=10;</span><br></pre></td></tr></table></figure><p>从库start slave，连接主库，从库开启复制线程（IO_T，SQL_T）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3308/mysql.sock </span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br></pre></td></tr></table></figure><h3 id="检查主从复制状态"><a href="#检查主从复制状态" class="headerlink" title="检查主从复制状态"></a>检查主从复制状态</h3><p>IO与SQL的状态显示Yes，就代表主从复制成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3308/mysql.sock -e &#x27;show slave status\G&#x27;|grep Slave</span><br><span class="line">               <span class="selector-tag">Slave_IO_State</span>: <span class="selector-tag">Waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span> <span class="selector-tag">send</span> <span class="selector-tag">event</span></span><br><span class="line">             <span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line">            <span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line">      <span class="selector-tag">Slave_SQL_Running_State</span>: <span class="selector-tag">Slave</span> <span class="selector-tag">has</span> <span class="selector-tag">read</span> <span class="selector-tag">all</span> <span class="selector-tag">relay</span> <span class="selector-tag">log</span>; <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">more</span> <span class="selector-tag">updates</span></span><br></pre></td></tr></table></figure><p>测试，在3307实例中创建一个库，然后在3308实例中查看</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -S /data/3307/mysql.sock </span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">niubi</span>;</span><br><span class="line">&gt; <span class="selector-tag">mysql</span> <span class="selector-tag">-S</span> /<span class="selector-tag">data</span>/3308/<span class="selector-tag">mysql</span><span class="selector-class">.sock</span> <span class="selector-tag">-e</span> &quot;<span class="selector-tag">show</span> <span class="selector-tag">databases</span>;&quot;</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| Database           |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| mysql              |</span><br><span class="line">| niubi              |</span><br></pre></td></tr></table></figure><h2 id="主从复制工作原理"><a href="#主从复制工作原理" class="headerlink" title="主从复制工作原理"></a>主从复制工作原理</h2><h3 id="主从复制涉及的文件和线程"><a href="#主从复制涉及的文件和线程" class="headerlink" title="主从复制涉及的文件和线程"></a>主从复制涉及的文件和线程</h3><p><strong>主库信息</strong></p><ul><li>binlog：二进制文件</li><li>Binlog_Dump Thread：DUMP_T</li></ul><p><strong>从库信息</strong>：</p><ul><li><p>relaylog：中继日志；master.info：主库信息文件；relaylog.info：relaylog应用的信息</p></li><li><p>Slave_IO_Thread: IO_T</p></li><li><p>Slave_SQL_Thread: SQL_T</p></li></ul><h3 id="主从复制工作（过程）原理"><a href="#主从复制工作（过程）原理" class="headerlink" title="主从复制工作（过程）原理"></a>主从复制工作（过程）原理</h3><p>主从工作过程如下图所示</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210217102825911.png"></p><p>主从过程文字描述</p><ul><li>从库执行change master to命令（主库的连接信息+binlog的起点）</li><li>从库会将以上信息，记录到master.info文件中</li><li>从库执行start slave命令，立即开启IO_T和SQL_T</li><li>从库IO_T，读取mater.info文件中的信息，获取到主库IP，POST，User，Pass,binlog的位置信息</li><li>从库通过IO_T请求连接主库，主库专门提供一个DUMP_T线程，负责和IO_T交互</li><li>IO_T根据binlog的位置信息（mysql-bin.000001,111)，请求主库新binlog</li><li>主库通过DUMP_T将最新的binlog，通过网络TP（传输）给从库的IO_T</li><li>IO_T接受到新的binlog日志，存储到TCP/IP缓存，TCP/IP接受到之后立即ACK给主库，并更新master.info</li><li>IO_T将TCP/IP缓存中的数据，转存到磁盘relaylog文件中</li><li>SQL_T读取relaylog中的信息，获取到上次已经应用过的relaylog的位置信息</li><li>SQL_T会按照上次的位置点回放最新的relaylog，再次更新relay.info信息</li><li>从库会自动purge（清理）应用过relaylog，进行定期清理</li></ul><blockquote><p>补充说明：一旦主从复制构建成功，主库当中发生了新的变化，都会通过DUMP_T发送一个信号给IO_T，增强了主从复制的实时性</p></blockquote><h3 id="主从复制状态监控"><a href="#主从复制状态监控" class="headerlink" title="主从复制状态监控"></a>主从复制状态监控</h3><p>从库命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span></span><br></pre></td></tr></table></figure><p>主库有关的信息（master.info)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br><span class="line"><span class="selector-tag">Master_Host</span>: 10.0.0.51</span><br><span class="line"><span class="selector-tag">Master_User</span>: <span class="selector-tag">repl</span></span><br><span class="line"><span class="selector-tag">Master_Port</span>: 3307</span><br><span class="line"><span class="selector-tag">Connect_Retry</span>: 10</span><br><span class="line">*****************************</span><br><span class="line"><span class="selector-tag">Master_Log_File</span>: <span class="selector-tag">mysql-bin</span>.000006</span><br><span class="line"><span class="selector-tag">Read_Master_Log_Pos</span>: 606</span><br><span class="line">*****************************</span><br></pre></td></tr></table></figure><p>从库relay应用信息相关的（relay.info)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Relay_Log_File</span>: <span class="selector-tag">mysql-relay-bin</span>.000002</span><br><span class="line"><span class="selector-tag">Relay_Log_Pos</span>: 482</span><br><span class="line"><span class="selector-tag">Relay_Master_Log_File</span>: <span class="selector-tag">mysql-bin</span>.000006</span><br></pre></td></tr></table></figure><p>从库线程运行状态（排错）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Last_IO_Errno</span>: 0</span><br><span class="line"><span class="selector-tag">Last_IO_Error</span>: </span><br><span class="line"><span class="selector-tag">Last_SQL_Errno</span>: 0</span><br><span class="line"><span class="selector-tag">Last_SQL_Error</span>: </span><br></pre></td></tr></table></figure><p>过滤复制有关的信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Replicate_Do_DB</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Ignore_DB</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Do_Table</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Ignore_Table</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Wild_Do_Table</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Wild_Ignore_Table</span>: </span><br></pre></td></tr></table></figure><p>从库延时主机的时间（秒）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Seconds_Behind_Master</span>: 0</span><br></pre></td></tr></table></figure><p>延时从库信息：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SQL_Delay</span>: 0</span><br><span class="line"><span class="selector-tag">SQL_Remaining_Delay</span>: <span class="selector-tag">NULL</span></span><br></pre></td></tr></table></figure><p>GTID复制有关的状态信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Retrieved_Gtid_Set</span>: </span><br><span class="line"><span class="selector-tag">Executed_Gtid_Set</span>: </span><br><span class="line"><span class="selector-tag">Auto_Position</span>: 0</span><br></pre></td></tr></table></figure><h2 id="主从复制故障示例"><a href="#主从复制故障示例" class="headerlink" title="主从复制故障示例"></a>主从复制故障示例</h2><h3 id="IO线程故障"><a href="#IO线程故障" class="headerlink" title="IO线程故障"></a>IO线程故障</h3><h4 id="连接主库失败：connecting"><a href="#连接主库失败：connecting" class="headerlink" title="连接主库失败：connecting"></a>连接主库失败：connecting</h4><p>原因：可以是网络、连接信息错或变更了，或是防火墙、连接数上线等</p><p>排查思路</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -urepl -p123 -h 10.0.0.51 -P3307  //密码错误</span><br><span class="line">//<span class="selector-tag">mysql</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line">//ERROR 1045 (28000): Access denied for user &#x27;repl&#x27;@&#x27;mysql&#x27; (using password: YES)</span><br><span class="line"></span><br><span class="line">$ mysql -urep -p123456 -h 10.0.0.51 -P3307  //账号错误</span><br><span class="line">//<span class="selector-tag">mysql</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line">//ERROR 1045 (28000): Access denied for user &#x27;rep&#x27;@&#x27;mysql&#x27; (using password: YES)</span><br><span class="line"></span><br><span class="line">$ mysql -urepl -p123456 -h 10.0.0.52 -P3307 //地址错误</span><br><span class="line">//<span class="selector-tag">mysql</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line">//ERROR 2003 (HY000): Can&#x27;t connect to MySQL server on &#x27;10.0.0.52&#x27; (113)</span><br><span class="line"></span><br><span class="line">$ mysql -urepl -p123456 -h 10.0.0.51 -P3309  //端口错误</span><br><span class="line">//<span class="selector-tag">mysql</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line">//ERROR 2003 (HY000): Can&#x27;t connect to MySQL server on &#x27;10.0.0.51&#x27; (111)</span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;        //停止从库</span><br><span class="line">2. <span class="selector-tag">reset</span> <span class="selector-tag">slave</span> <span class="selector-tag">all</span>;   //所有文件清空</span><br><span class="line">3. <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span>;  //重新配置参数连接</span><br><span class="line">.........参数省略.........</span><br><span class="line">4. <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br><span class="line">5. <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>;</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h4 id="请求binlog-失败"><a href="#请求binlog-失败" class="headerlink" title="请求binlog(失败)"></a>请求binlog(失败)</h4><p>原因：可能是binlog没开启或binlog损坏或不存在</p><p>主库执行了reset master处理，这个命令会刷新一个新的binlog，从库就会崩</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">reset</span> <span class="selector-tag">master</span></span><br></pre></td></tr></table></figure><p>从库查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">No</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">2. <span class="selector-tag">reset</span> <span class="selector-tag">slave</span> <span class="selector-tag">all</span>;  </span><br><span class="line">3. <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span>;  </span><br><span class="line">.........参数省略.........</span><br><span class="line">4. <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br><span class="line">5. <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>;</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span></span><br></pre></td></tr></table></figure><h3 id="SQL线程故障"><a href="#SQL线程故障" class="headerlink" title="SQL线程故障"></a>SQL线程故障</h3><p>原因：relay-log损坏或是约束冲突（主键，唯一键，非空）</p><h4 id="演示SQL线程故障"><a href="#演示SQL线程故障" class="headerlink" title="演示SQL线程故障"></a>演示SQL线程故障</h4><p>在从库创建一个库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">chche</span>;</span><br></pre></td></tr></table></figure><p>在主库又创建一个一模一样的库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; create database chche charset=utf8mb4;</span><br></pre></td></tr></table></figure><p>查看从库的状态</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br></pre></td></tr></table></figure><p>报错信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_SQL_Error: Error &#x27;Can&#x27;t create database &#x27;chche&#x27;; database exists&#x27; on query. Default database: &#x27;chche&#x27;. Query: &#x27;create database chche charset=utf8mb4&#x27;</span><br></pre></td></tr></table></figure><h5 id="解决方法1-删除库"><a href="#解决方法1-删除库" class="headerlink" title="解决方法1 删除库"></a>解决方法1 删除库</h5><p>把握一个原则，一切以主库为准进行解决，如果出现问题，尽量进行反操作，最直接稳妥办法，重新构建主从</p><p>删除从库创建的库，然后重启启动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">database</span> <span class="selector-tag">chche</span>;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br></pre></td></tr></table></figure><h5 id="解决方法2-跳过这个步骤"><a href="#解决方法2-跳过这个步骤" class="headerlink" title="解决方法2 跳过这个步骤"></a>解决方法2 跳过这个步骤</h5><p>将同步指针向下移动一个，如果多次不同步，可以重复操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; set global sql_slave_skip_counter=1;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br></pre></td></tr></table></figure><h5 id="解决方法3-以后遇到这些问题直接跳过"><a href="#解决方法3-以后遇到这些问题直接跳过" class="headerlink" title="解决方法3 以后遇到这些问题直接跳过"></a>解决方法3 以后遇到这些问题直接跳过</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/my.cnf</span><br><span class="line">slave-skip-errors = 1032,1062,1007</span><br></pre></td></tr></table></figure><p>创建错误代码：</p><ul><li>1007：对象已存在</li><li>1062：无法执行DML</li><li>1062：主键冲突，或约束冲突</li></ul><blockquote><p>PS：方法2和方法3都有风险，总之一切都已主库为主最为安全</p></blockquote><h4 id="主键冲突问题"><a href="#主键冲突问题" class="headerlink" title="主键冲突问题"></a>主键冲突问题</h4><p>主库创建主键，并插入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span> <span class="selector-tag">primary</span> <span class="selector-tag">key</span> <span class="selector-tag">not</span> <span class="selector-tag">null</span> <span class="selector-tag">auto_increment</span>);</span><br></pre></td></tr></table></figure><p>从库插入一行数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1);</span><br></pre></td></tr></table></figure><p>主库也插入一行数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(7);</span><br></pre></td></tr></table></figure><p>解决方案</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">2. <span class="selector-tag">reset</span> <span class="selector-tag">slave</span> <span class="selector-tag">all</span>;   </span><br><span class="line">3. <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span>;</span><br><span class="line">.........参数省略.........</span><br><span class="line">4. <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br><span class="line">5. <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>;</span><br><span class="line"><span class="selector-tag">Slave_IO_Running</span>: <span class="selector-tag">Yes</span></span><br><span class="line"><span class="selector-tag">Slave_SQL_Running</span>: <span class="selector-tag">Yes</span> </span><br></pre></td></tr></table></figure><h4 id="如何避免SQL线程故障"><a href="#如何避免SQL线程故障" class="headerlink" title="如何避免SQL线程故障"></a>如何避免SQL线程故障</h4><ul><li>可以设置从库只读，read_only，super_read_only</li><li>使用读写分离中间件atlas、mycat、ProxySQL和MacScale等</li></ul><h2 id="主从延时监控的原因"><a href="#主从延时监控的原因" class="headerlink" title="主从延时监控的原因"></a>主从延时监控的原因</h2><h3 id="主库方面原因"><a href="#主库方面原因" class="headerlink" title="主库方面原因"></a>主库方面原因</h3><ul><li><p>binlog写入不及时</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sync_binlog=1  # 如果设置为0，那么binlog的读写就会先写入OS buffer，等待OS buffer满之后才写入磁盘</span><br></pre></td></tr></table></figure></li><li><p>默认情况下dump_t是串行传输binlog</p><p>在并发事务量大时或者大事务，由于dump_t是串行工作，所有会导致传送日志较慢</p><p><code>如何解决：</code>开启GTID，使用Group commit方式，可以支持DUMP_T并行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &#x27;%group_commit%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>主库极其繁忙</p><p>可以由于慢语句、锁等待、从库个数以及网络延时的原因导致延时</p></li></ul><h3 id="从库方面原因"><a href="#从库方面原因" class="headerlink" title="从库方面原因"></a>从库方面原因</h3><p>传统复制（Classic）汇总</p><ul><li><p>主库并发事务量大，或者出现大事务</p></li><li><p>由于从库是单SQL线程，导致不管传的日志有多少，只能一次执行一个事务</p></li><li><p>5.6版本，有了GTID可以实现多SQL线程，但是只能基于不同库的事务进行并发回放（database）</p></li><li><p>5.7版本，又增强的GTID，增加了seq_no，增加了新型的并发SQl线程模式（logical clock），MTS技术</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show variables like <span class="string">&#x27;%worker%&#x27;</span>;  <span class="comment"># 调整SQL线程个数</span></span></span><br><span class="line">+------------------------+-------+</span><br><span class="line">| Variable_name          | Value |</span><br><span class="line">+------------------------+-------+</span><br><span class="line">| slave_parallel_workers | 0     |</span><br><span class="line">+------------------------+-------+</span><br></pre></td></tr></table></figure><ul><li>主从硬件差异太大</li><li>主从的参数配置（不一样）</li><li>从库和主库的索引不一致</li><li>版本有差异</li></ul><h3 id="主从延时的监控选项"><a href="#主从延时的监控选项" class="headerlink" title="主从延时的监控选项"></a>主从延时的监控选项</h3><p>使用命令查看延时参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br><span class="line"><span class="selector-tag">Seconds_Behind_Master</span>: 0</span><br></pre></td></tr></table></figure><p>查看主库状态信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show master status;</span></span><br><span class="line">mysql-bin.000001 </span><br><span class="line">Position：1808</span><br></pre></td></tr></table></figure><p>查看从库状态信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show slave status\G;</span></span><br><span class="line">  Relay_Log_Pos: 1974</span><br><span class="line">  Relay_Master_Log_File: mysql-bin.000001</span><br></pre></td></tr></table></figure><h3 id="主库延迟问题"><a href="#主库延迟问题" class="headerlink" title="主库延迟问题"></a>主库延迟问题</h3><p>对于延迟，我们可以查看参数show slave status里面的Seconds_behind_master（SBM）的选项，但是从严格意义上是不能当做主从延迟标准的，只能仅供参考</p><p>SBM的逻辑是对<code>sql_thread执行event的timestamp</code>和<code>io_thread复制好event的timestamp</code>（简写ts）进行比较，得到这个时间差值</p><p><strong>延时的问题</strong></p><ul><li>如果Master和Slave网络不好，即IO_Thread的同步到瓶颈，而从Slave端来看，SQL_Thread能够很快的应用日志数据，SBM值却是0，这样可能会造成一个幻觉，会觉得没有延迟。但实际上因为网络条件不佳，已经产生了很大的延迟</li><li>当从库长时间未收到主库传来的数据，等待时间超过参数slave_net_timeout默认的3600秒之后，Slave的状态Slave_IO_Running的值会变成No，而在这个过程中，其实得到是假象数据</li><li>从库存在大量的查询导致处理性能降低，也会造成延迟时间，而这个延迟时间其实是属于额外的资源消耗导致</li><li>如果一个数据库在1分钟内产生了大量的binlog，如果按照日志中的timestamp来作为标记，这个延迟会很小。比如延迟5秒左右，但是差异的日志量是1G，这种差异带来的负面影响大的</li></ul><p>所以延迟是一个比较难衡量的指标，可以基于日志维度进行衡量（binlog的偏移量差异），或者是基于时间维度，通过时间戳差值来衡量延迟</p><h3 id="使用pt工具检测主从延迟"><a href="#使用pt工具检测主从延迟" class="headerlink" title="使用pt工具检测主从延迟"></a>使用pt工具检测主从延迟</h3><p>相对容易理解的延迟计算方式是基于心跳机制，周期性发送一个标志位，以这个标志位到达从库的时间为准，得到的这个值就是延迟，而pt-hearbeat可以较准确的得到延迟情况，工具使用起来也非常便捷，属于pt工具集的一部分。</p><p>使用pt-hearbeat，需要创建一个用户pt_check，这个统一的用户方便后续标准化管理</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grant select,process,super,replication slave on *.* to &#x27;pt-check&#x27;@&#x27;10.0.0.%&#x27; identified by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p>然后给与用户访问test数据库的权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grant all privileges on test.* to &#x27;pt-check&#x27;@&#x27;10.0.0.%&#x27;;</span><br></pre></td></tr></table></figure><p>在后台启动这个心跳守护进程，其中的create-table就是创建测试表，interval是间隔1分钟，最小可以是0.01秒，update是更新test库上的测试表，而replace则是更新替换表里的时间，无须考虑表里是否有数据，daemonize是后台运行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pt-heartbeat h=&#x27;10.0.0.50&#x27;,u=&#x27;pt-check&#x27;,p=&#x27;123456&#x27;,P=3306 -D test --create-table --interval=1 --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>使用ps命令查看hearbeat进程</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep heartbeat</span><br><span class="line">root       4472      1  0 00:04 ?        00:00:00 perl /usr/bin/pt-heartbeat h=10.0.0.50,u=pt-check,p=123456,P=3306 -D test --create-table --interval=1 --update --replace --daemonize</span><br></pre></td></tr></table></figure><p>开启了后台守护进程，如果要停止，可以使用选项stop来做，会生成一个临时文件，注意下次重新启动的话，需要清理掉这个文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pt-heartbeat h=&#x27;10.0.0.50&#x27;,u=&#x27;pt-check&#x27;,p=&#x27;123456&#x27;,P=3306 -D test --stop</span><br><span class="line"><span class="selector-tag">Successfully</span> <span class="selector-tag">created</span> <span class="selector-tag">file</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">pt-heartbeat-sentinel</span></span><br></pre></td></tr></table></figure><p>接下来开启monitor选项来监控主从延迟的情况，需要设置server-id</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pt-heartbeat h=&#x27;10.0.0.50&#x27;,u=&#x27;pt-check&#x27;,p=&#x27;123456&#x27;,P=3306 -D test --table=heartbeat --monitor</span><br><span class="line">The --master-server-id option must be specified because the heartbeat table `test`.`heartbeat` uses the server_id column for --update or --check but the server&#x27;s master could not be automatically determined.</span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">read</span> <span class="selector-tag">the</span> <span class="selector-tag">DESCRIPTION</span> <span class="selector-tag">section</span> <span class="selector-tag">of</span> <span class="selector-tag">the</span> <span class="selector-tag">pt-heartbeat</span> <span class="selector-tag">POD</span>.</span><br></pre></td></tr></table></figure><p>主库查看server-id</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">hosts</span>;</span><br><span class="line">+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">--------------------------------------</span>+</span><br><span class="line">| Server_id | Host | Port | Master_id | Slave_UUID                           |</span><br><span class="line">+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">--------------------------------------</span>+</span><br><span class="line">|        51 |      | 3306 |        50 | 7fe26529-7cd1-11eb-8185-000c298004d3 |</span><br><span class="line">+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">--------------------------------------</span>+</span><br></pre></td></tr></table></figure><p>使用pt-heartbeat查看延时情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pt-heartbeat h=&#x27;10.0.0.50&#x27;,u=&#x27;pt-check&#x27;,p=&#x27;123456&#x27;,P=3306 -D test --monitor --master-server-id=50</span><br><span class="line">1.01<span class="selector-tag">s</span> <span class="selector-attr">[  0.02s,  0.00s,  0.00s ]</span></span><br><span class="line">2.00<span class="selector-tag">s</span> <span class="selector-attr">[  0.05s,  0.01s,  0.00s ]</span></span><br><span class="line">3.00<span class="selector-tag">s</span> <span class="selector-attr">[  0.10s,  0.02s,  0.01s ]</span></span><br><span class="line">4.00<span class="selector-tag">s</span> <span class="selector-attr">[  0.17s,  0.03s,  0.01s ]</span></span><br><span class="line">5.00<span class="selector-tag">s</span> <span class="selector-attr">[  0.25s,  0.05s,  0.02s ]</span></span><br></pre></td></tr></table></figure><p>可以看到目前环境的延迟，方括号里面的指标是可以使用frames来定制，比如默认是1m，5m，15m</p><p>如果想即查即看，可以使用check选项，这个值没有frame的时间范围</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pt-heartbeat h=&#x27;10.0.0.50&#x27;,u=&#x27;pt-check&#x27;,p=&#x27;123456&#x27;,P=3306 -D test --table=heartbeat --master-server-id=50 --check</span><br><span class="line">1.01</span><br></pre></td></tr></table></figure><h2 id="主从延时从库"><a href="#主从延时从库" class="headerlink" title="主从延时从库"></a>主从延时从库</h2><p><strong>SQL线程延时介绍</strong></p><p>SQL线程延时：数据已经写入relaylog中了，SQL线程“慢点”运行，一般企业建议3-6小时，具体看公司运维人员对于故障的反应时间（单独的一台从库）</p><p><strong>为什么要有延时从库</strong></p><p>数据库故障：</p><ul><li>物理损坏：主从复制非常擅长解决物理损坏</li><li>逻辑损坏：普通主从复制没办法解决逻辑损坏</li></ul><h3 id="配置延时从库命令"><a href="#配置延时从库命令" class="headerlink" title="配置延时从库命令"></a>配置延时从库命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; CHANGE MASTER TO MASTER_DELAY = 300;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span> \<span class="selector-tag">G</span></span><br><span class="line"><span class="selector-tag">SQL_Delay</span>: 300</span><br><span class="line"><span class="selector-tag">SQL_Remaining_Delay</span>: 293</span><br></pre></td></tr></table></figure><h3 id="延时从库处理的逻辑故障"><a href="#延时从库处理的逻辑故障" class="headerlink" title="延时从库处理的逻辑故障"></a>延时从库处理的逻辑故障</h3><ul><li><p>监控到数据库逻辑故障</p></li><li><p>停从库SQL线程，查看记录已经回的位置（截取日志起点）</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">sql_thread</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br><span class="line"><span class="selector-tag">Relay_Log_File</span>: <span class="selector-tag">db01-relay-bin</span>.000002</span><br><span class="line"><span class="selector-tag">Relay_Log_Pos</span>: 320</span><br></pre></td></tr></table></figure><ul><li>截取relaylog起点与终点</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 起点</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>;</span><br><span class="line"><span class="selector-tag">Relay_Log_File</span>: <span class="selector-tag">mysql-relay-bin</span>.000002</span><br><span class="line"><span class="selector-tag">Relay_Log_Pos</span>: 320</span><br><span class="line"></span><br><span class="line"># 终点</span><br><span class="line">&gt; show relaylog events in &#x27;mysql-relay-bin.000002&#x27;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>模拟SQL线程回放日志</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 从库 </span><br><span class="line">&gt; <span class="selector-tag">source</span> <span class="selector-tag">xxxx</span>;</span><br></pre></td></tr></table></figure><ul><li><p>恢复业务</p><p>1）情况1：可以使用从库代替主库工作</p><p>2）情况2：从库导出故障库，还远到主库中</p></li></ul><h3 id="故障演练"><a href="#故障演练" class="headerlink" title="故障演练"></a>故障演练</h3><p>主库创建库和表，并插入些数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">delay</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">delay</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p>模拟主库出故障</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">database</span> <span class="selector-tag">delay</span></span><br></pre></td></tr></table></figure><p>从库停止从库SQL线程，记录relay的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span> <span class="selector-tag">sql_thread</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span> \<span class="selector-tag">G</span></span><br><span class="line"><span class="selector-tag">Relay_Log_File</span>: <span class="selector-tag">mysql-relay-bin</span>.000003</span><br><span class="line"><span class="selector-tag">Relay_Log_Pos</span>: 320</span><br></pre></td></tr></table></figure><p>找到relay的截取终点</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; show relaylog events in &#x27;mysql-relay-bin.000003&#x27;;</span><br><span class="line">| mysql-relay-bin.000003 | 1146 | Query          |         7 | 3521 | drop database full           </span><br></pre></td></tr></table></figure><p>截取relay log</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/3308/data/</span><br><span class="line">$ mysqlbinlog --start-position=320 --stop-position=1146 mysql-relay-bin.000003 &gt;/tmp/full.sql</span><br></pre></td></tr></table></figure><p>恢复relay从库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p -S /data/3308/mysql.sock </span><br><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">full</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><h2 id="主从过滤复制应用"><a href="#主从过滤复制应用" class="headerlink" title="主从过滤复制应用"></a>主从过滤复制应用</h2><p>主库 do是表名单，ignore是黑名单，就是设置写不写入二进制日志</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line"><span class="selector-tag">binlog_do_db</span> </span><br><span class="line"><span class="selector-tag">binlog_ignore_db</span> </span><br></pre></td></tr></table></figure><p>从库 指定的库、指定的表、模糊指定</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">slave</span> <span class="selector-tag">status</span> \<span class="selector-tag">G</span></span><br><span class="line">    </span><br><span class="line">//指定的库</span><br><span class="line">Replicate_Do_DB=</span><br><span class="line">Replicate_Ignore_DB=</span><br><span class="line">   </span><br><span class="line">//指定的表</span><br><span class="line">Replicate_Do_Table=</span><br><span class="line">Replicate_Ignore_Table=</span><br><span class="line">    </span><br><span class="line">//模糊指定</span><br><span class="line"><span class="selector-tag">Replicate_Wild_Do_Table</span>: </span><br><span class="line"><span class="selector-tag">Replicate_Wild_Ignore_Table</span>: </span><br></pre></td></tr></table></figure><p>写入到配置文件，重启即会生效的过滤</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">replicate_do_db=repl</span><br><span class="line">$ systemctl restart mysqld3308</span><br></pre></td></tr></table></figure><h2 id="GTID复制"><a href="#GTID复制" class="headerlink" title="GTID复制"></a>GTID复制</h2><p>从MySQL 5.6.5版本开始新增了一种基于GTID的复制方式，通过GTID保证每个主库上提交的事务在集群中有一个全局唯一的ID，这种方式加强了数据库的主备一致性、故障恢复以及容错能力</p><p>GTID(Global Transacition ID)是对于一个已提交事务的唯一编号，当主库上提交事务或者被从库应用时，可以定位和追踪每一个事务，通过这种就不需要手工去找偏移量的值了，而是通过<code>CHANGE MASTER TO MASTER_HOST=&#39;xxx&#39;，MASTER_AUTO_POSITION=1</code>即可方便的搭建从库，在故障修改中也可以采用<code>MASTER_AUTO_POSITION=&#39;X&#39;</code>的方式</p><h3 id="GTID核心参数"><a href="#GTID核心参数" class="headerlink" title="GTID核心参数"></a>GTID核心参数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">binlog_format=row              # 这条参数可以不用加入，因为默认就是使用row格式</span><br><span class="line">gtid-mode=on                   # 启动GTID类型，否则就是普通的复制架构</span><br><span class="line">enforce-gtid-consistency=true  # 强制GTID的一致性</span><br><span class="line">log-slave-updates=1            # slave更新是否计入日志</span><br></pre></td></tr></table></figure><h3 id="GTID复制配置过程"><a href="#GTID复制配置过程" class="headerlink" title="GTID复制配置过程"></a>GTID复制配置过程</h3><p>*<em>1. 清理环境</em></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pkill mysqld</span><br><span class="line">$ \rm -rf /data/mysql/data/*</span><br><span class="line">$ \rm -rf /data/binlog/*</span><br></pre></td></tr></table></figure><p> <strong>2. 准备配置文件</strong></p><table><thead><tr><th>主机地址</th><th>SERVER_ID</th><th>描述</th></tr></thead><tbody><tr><td>10.0.0.51</td><td>51</td><td>主库</td></tr><tr><td>10.0.0.52</td><td>52</td><td>从库</td></tr><tr><td>10.0.0.53</td><td>53</td><td>从库</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主库db01：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/my.cnf &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql/</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=51</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db01 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从库slave1(db02)：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/my.cnf &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=52</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db02 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从库slave2(db03)：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat &gt; /etc/my.cnf &lt;&lt;<span class="string">EOF</span></span></span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=53</span><br><span class="line">port=3306</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line">autocommit=0</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line">log-slave-updates=1</span><br><span class="line">[mysql]</span><br><span class="line">prompt=db03 [\\d]&gt;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p><strong>3. 初始化数据（所有）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld --initialize-insecure --user=mysql --basedir=/application/mysql  --datadir=/data/mysql/data</span><br></pre></td></tr></table></figure><p><strong>4. 启动数据库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><p><strong>5. 构建主从</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 51 创建一个与从库连接的用户</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> grant replication slave  on *.* to repl@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> 52\53 连接主库</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> change master to</span> </span><br><span class="line">master_host=&#x27;10.0.0.51&#x27;,</span><br><span class="line">master_user=&#x27;repl&#x27;,</span><br><span class="line">master_password=&#x27;123&#x27; ,</span><br><span class="line">MASTER_AUTO_POSITION=1;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> start slave;</span></span><br></pre></td></tr></table></figure><h3 id="GTID复制和普通复制的区别"><a href="#GTID复制和普通复制的区别" class="headerlink" title="GTID复制和普通复制的区别"></a>GTID复制和普通复制的区别</h3><ul><li><p>在主从复制环境中，主库发生过的事务，在全局都是有唯一GTID记录的，更方便Failover(故障转移)</p></li><li><p>change master to的时候不在需要binlog文件名和position号，而是有MASTER_ATUO_POSITION=1即可；</p></li><li><p>在复制过程中，从库不再依赖master.info文件，而是直接读取最后一个relaylog的GTID号</p></li><li><p>mysqldump备份时，默认会将备份中包含的事务操作，以这种方式显示<code>SET @@GLOBAL.GTID_PURGED=&#39;8c49d7ec-7e78-11e8-9638-000c29ca725d:1-11&#39;;</code></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 传统型需要复制参数</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> CHANGE MASTER TO</span></span><br><span class="line">MASTER_HOST=&#x27;10.0.0.51&#x27;,</span><br><span class="line">MASTER_USER=&#x27;repl&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123&#x27;,</span><br><span class="line">MASTER_PORT=3307,</span><br><span class="line">MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;,</span><br><span class="line">MASTER_LOG_POS=444,</span><br><span class="line">MASTER_CONNECT_RETRY=10;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加GTID特性需要复制的参数</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> change master to</span> </span><br><span class="line">master_host=&#x27;10.0.0.51&#x27;,</span><br><span class="line">master_user=&#x27;repl&#x27;,</span><br><span class="line">master_password=&#x27;123&#x27; ,</span><br><span class="line">MASTER_AUTO_POSITION=1;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h3 id="GTID的限制和解决方案"><a href="#GTID的限制和解决方案" class="headerlink" title="GTID的限制和解决方案"></a>GTID的限制和解决方案</h3><p>虽然在5.7版本GTID有加强，但还是有一些场景是受限制的。一个是create table xxx as select的模式，另外一个是临时表相关的</p><h4 id="create语句限制和解法"><a href="#create语句限制和解法" class="headerlink" title="create语句限制和解法"></a>create语句限制和解法</h4><p>create table xxx as select的语句，其实会被拆分为两部分：create语句和insert语句，但是想成功操作，MySQL会出现以下错误</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test_a</span> <span class="selector-tag">as</span> <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test</span>;</span><br><span class="line"><span class="selector-tag">ERROR</span> 1786 (<span class="selector-tag">HY000</span>): <span class="selector-tag">Statement</span> <span class="selector-tag">violates</span> <span class="selector-tag">GTID</span> <span class="selector-tag">consistency</span>: <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> ... <span class="selector-tag">SELECT</span>.</span><br></pre></td></tr></table></figure><p>这条语句是复制表结构、复制数据，insert部分没问题，难点在于create table的部分，如果一个表的列有100个，那么拼出语句是将会很复杂工程。由于受GTID的限制，所以上述方面不能创建，但还有另MySQL特有的用法like可以解决</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test_a</span> <span class="selector-tag">like</span> <span class="selector-tag">test</span></span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">xxxx</span> <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test</span>;</span><br></pre></td></tr></table></figure><h4 id="临时表的限制和建议"><a href="#临时表的限制和建议" class="headerlink" title="临时表的限制和建议"></a>临时表的限制和建议</h4><p>使用GTID复制模式，不支持create temporary table 和 drop temporary table。但是在<code>autocommit=1</code>的情况下是可以创建临时表，Master端创建临时表不产生GTID信息，所以不会同步到Slave，但是在删除临时表的时候会产生GTID，会导致主从中断</p><p><strong>autocommit=0 情况会报一下错误</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">temporary</span> <span class="selector-tag">table</span> <span class="selector-tag">test_c</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line"><span class="selector-tag">ERROR</span> 1787 (<span class="selector-tag">HY000</span>): <span class="selector-tag">Statement</span> <span class="selector-tag">violates</span> <span class="selector-tag">GTID</span> <span class="selector-tag">consistency</span>: <span class="selector-tag">CREATE</span> <span class="selector-tag">TEMPORARY</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">and</span> <span class="selector-tag">DROP</span> <span class="selector-tag">TEMPORARY</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">can</span> <span class="selector-tag">only</span> <span class="selector-tag">be</span> <span class="selector-tag">executed</span> <span class="selector-tag">outside</span> <span class="selector-tag">transactional</span> <span class="selector-tag">context</span>.  <span class="selector-tag">These</span> <span class="selector-tag">statements</span> <span class="selector-tag">are</span> <span class="selector-tag">also</span> <span class="selector-tag">not</span> <span class="selector-tag">allowed</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">function</span> <span class="selector-tag">or</span> <span class="selector-tag">trigger</span> <span class="selector-tag">because</span> <span class="selector-tag">functions</span> <span class="selector-tag">and</span> <span class="selector-tag">triggers</span> <span class="selector-tag">are</span> <span class="selector-tag">also</span> <span class="selector-tag">considered</span> <span class="selector-tag">to</span> <span class="selector-tag">be</span> <span class="selector-tag">multi-statement</span> <span class="selector-tag">transactions</span>.</span><br></pre></td></tr></table></figure><p><strong>autocommit=1 情况</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; set autocommit=1;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">temporary</span> <span class="selector-tag">table</span> <span class="selector-tag">test_b</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.00 <span class="selector-tag">sec</span>)</span><br></pre></td></tr></table></figure><h3 id="GTID的体系结构"><a href="#GTID的体系结构" class="headerlink" title="GTID的体系结构"></a>GTID的体系结构</h3><p>可以分为从变量视图、表和文件视图、操作视图等三个角度看待GITD</p><p><strong>变量视图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210304105528617.png"></p><table><thead><tr><th>GTID变量</th><th>描述</th></tr></thead><tbody><tr><td>Executed_Gtid_Set</td><td>在当前实例上执行过的GTID集合</td></tr><tr><td>gtid_purged</td><td>gtid_purged用于记录已经被清除了的binlog事务集合，它是gtid_executed的子集</td></tr><tr><td>gtid_next</td><td>如何产生一个GTID，通常有AUTOMATIC、ANONYMOUS和显示GTID三种取值方式</td></tr><tr><td>Retrieved_Gtid_Set</td><td>Slave会扫描最后一个relay log文件，Retrieved_Gtid_Set显示的是当前扫描所得的GTID</td></tr></tbody></table><p><strong>表和文件视图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210304105929581.png"></p><p>根据MySQL复制原理，MySQL Server在写binlog的时候，会先写一个特殊的Binlog Event，类型为GTID_Event，指定下一个事务的GTID，然后再写事务的Binlog，主从同步时GTID Event和事务的Binlog都会传递到从库，在从库应用的Relay Log，从库执行同样的GTID写入binlog</p><ul><li><p>mysql.gtid_executed说明</p><p>1）5.6版本必须设置log_slave_updates，因为当Slave重启后，无法得知当前Slave已经运行到的GTID位置，而gitd_executed是一个内存值，无法持久化。</p><p>2）5.7版本通过mysql.gtid_executed把这个值持久化来解决，所以在5.7版本log_slave_updates是一个可选项</p></li><li><p>mysql.gtid_executed引入带来的问题，会导致里面的数据会越来越多，可以查询引入一个新的线程和参数来进行管理</p><p>1）线程为：thread/sql/compree_gtid_table，可以查询performance_schema.thread来查看</p><p>2）参数为：gtid_executed_compression_period，主要用于控制每执行多少个事物，对表gtid_executed进行压缩，默认值为1000</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select @@gtid_executed_compression_period;</span></span><br><span class="line">+------------------------------------+</span><br><span class="line">| @@gtid_executed_compression_period |</span><br><span class="line">+------------------------------------+</span><br><span class="line">|                               1000 |</span><br><span class="line">+------------------------------------+</span><br></pre></td></tr></table></figure><p><strong>操作视图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210304113156547.png"></p><p>对于操作视图，主要是用来搭建主从复制关系所用。基本都是一次开启，长期生效的方式，如果是修复主从复制中的异常，如果是确认错误可以跳过的情况下，可以使用一下方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; set gtid_next=&#x27;xxxxxxx&#x27;;   # 指定下一个事务执行的版本，即跳过的GTID</span><br><span class="line">&gt; <span class="selector-tag">beign</span>;</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;                    # 注入一个空事务</span><br><span class="line">&gt; set gtid_next=&#x27;AUTOMATIC&#x27;  # 自动的寻找GTID事务</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;               # 开始同步</span><br></pre></td></tr></table></figure><h3 id="GTID修复复制问题"><a href="#GTID修复复制问题" class="headerlink" title="GTID修复复制问题"></a>GTID修复复制问题</h3><p>上述可以解决了GTID跳过错误的方法，前提是这个错误是可以忽略的。但是如果MySQL宕机、MySQL掉电、MySQL主从偏移量差距大，想要修复主从关系，明显上述的方法是不能解决的，所以可以有以下方法解决，一切以主库为主</p><p>主库操作步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重置binlog日志</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> reset master;</span>       </span><br></pre></td></tr></table></figure><p>从库操作步骤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br><span class="line">&gt; <span class="selector-tag">reset</span> <span class="selector-tag">slave</span> <span class="selector-tag">all</span>;</span><br><span class="line">&gt; <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span> </span><br><span class="line">  master_host=&#x27;10.0.0.51&#x27;,</span><br><span class="line">  master_user=&#x27;repl&#x27;,</span><br><span class="line">  master_password=&#x27;123&#x27; ,</span><br><span class="line">  MASTER_AUTO_POSITION=1;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span>;</span><br></pre></td></tr></table></figure><h3 id="GTID不规范的使用场景"><a href="#GTID不规范的使用场景" class="headerlink" title="GTID不规范的使用场景"></a>GTID不规范的使用场景</h3><p><strong>从库可写</strong></p><ul><li>如果是从库端写入了数据，GTID_Set就包含两个源，在使用可能导致混淆，比较规范的方法是对从库只有只读模式。</li></ul><p><strong>Purge binlog</strong></p><ul><li>主库端对于binary log的保留时间过短，同时主从网络由延时问题，都可能导致要应用GTID事务已经在主库被清理</li></ul><p><strong>复制模式为MASTER_AUTO_POSITION=0</strong></p><ul><li>如果开启了GTID，还是监视使用GTID协议的数据复制方式，如果依赖偏移量方式，在主从切换很容易出问题</li></ul><ul><li>在一些特殊的数据修复，使用<code>change master to xxx,master_auto_position=0;</code>配置时，语句不带<code>relay_log_file</code>和<code>relay_log_pos</code>选项都会导致relay log被清理，所以一组相对完整的语句为：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">change</span> <span class="selector-tag">master</span> <span class="selector-tag">to</span> </span><br><span class="line">master_user=[Master_user],</span><br><span class="line">master_port= [Master_port],</span><br><span class="line">master_host=[Master_Host],</span><br><span class="line">master_log_file=[Relay_Master_Log_File],</span><br><span class="line">master_log_pos=[Exec_Master_Log_Pos],</span><br><span class="line">relay_log_file=[Relay_Log_File],</span><br><span class="line">relay_log_pos=[Relay_Log_Pos],</span><br><span class="line">master_auto_position=0;</span><br></pre></td></tr></table></figure><p><strong>mysqldump导出导入导致从库混乱</strong></p><p>mysqldump会默认开启set-gtid-purged选项，在导出的dump文件中会包含set@@gtid_purge=xxx的语句。如果在跨服务器环境导入数据，可能会导致操作失误而直接对主库做了reset master操作</p><h2 id="半同步复制-1"><a href="#半同步复制-1" class="headerlink" title="半同步复制"></a>半同步复制</h2><p>开启半同步复制，需要安装插件，基本的要求是在满足异步复制的情况下。版本在5.5以上，并且设置变量<code>have_dynamic_loading为YES</code>，即判断是否支持动态插件</p><h3 id="安装主从半同步插件"><a href="#安装主从半同步插件" class="headerlink" title="安装主从半同步插件"></a>安装主从半同步插件</h3><p>主从都安装</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 主安装</span><br><span class="line">&gt; install plugin rpl_semi_sync_master soname &#x27;semisync_slave.so&#x27;;</span><br><span class="line"></span><br><span class="line"># 从安装</span><br><span class="line">&gt; install plugin rpl_semi_sync_slave soname &#x27;semisync_slave.so&#x27;;</span><br></pre></td></tr></table></figure><p>通过mysql.plugin选项查看是否安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">plugins</span>;                @查看所有插件</span><br><span class="line">&gt; select * from mysql.plugin;</span><br><span class="line">+<span class="selector-tag">----------------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| name                 | dl                 |</span><br><span class="line">+<span class="selector-tag">----------------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| rpl_semi_sync_master | semisync_master.so |</span><br><span class="line">+<span class="selector-tag">----------------------</span>+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><p>当然默认半同步的开关还没有打开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &#x27;rpl_semi_sync_master%&#x27;;</span><br><span class="line">+<span class="selector-tag">-------------------------------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| Variable_name                             | Value      |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| rpl_semi_sync_master_enabled              | OFF        |</span><br><span class="line">| rpl_semi_sync_master_timeout              | 10000      |</span><br><span class="line">| rpl_semi_sync_master_trace_level          | 32         |</span><br><span class="line">| rpl_semi_sync_master_wait_for_slave_count | 1          |</span><br><span class="line">| rpl_semi_sync_master_wait_no_slave        | ON         |</span><br><span class="line">| rpl_semi_sync_master_wait_point           | AFTER_SYNC |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------</span>+<span class="selector-tag">------------</span>+</span><br></pre></td></tr></table></figure><p>需要开启参数<code>rpl_semi_sync_master_enabled</code>和<code>rpl_semi_sync_slave_enabled</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 主开启</span><br><span class="line">&gt; set global rpl_semi_sync_master_enabled=1;</span><br><span class="line"></span><br><span class="line"># 从开启</span><br><span class="line">&gt; set global rpl_semi_sync_slave_enabled=1;</span><br></pre></td></tr></table></figure><p>在slave端需要做同样的操作，然后在slave端重启IO_Thread即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span> <span class="selector-tag">io_thread</span>;</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span> <span class="selector-tag">io_thread</span>;</span><br></pre></td></tr></table></figure><p>Master端与Slave端检查</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 主查看</span><br><span class="line">&gt; show status like &#x27;rpl_semi_sync_slave_status&#x27;;</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Rpl_semi_sync_slave_status | ON    |</span><br><span class="line">+<span class="selector-tag">----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line"></span><br><span class="line"># 从查看</span><br><span class="line">&gt; show status like &#x27;rpl_semi_sync_master_status&#x27;;</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Variable_name               | Value |</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Rpl_semi_sync_master_status | ON    |</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><h3 id="半同步复制在MySQL-5-6和5-7的变化"><a href="#半同步复制在MySQL-5-6和5-7的变化" class="headerlink" title="半同步复制在MySQL 5.6和5.7的变化"></a>半同步复制在MySQL 5.6和5.7的变化</h3><p>MySQL 5.7版本中新增了一个参数（AFTER_SYNC）来控制半同步模式下主库在返回给会话事务成功之前提交事务的方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &#x27;rpl_semi_sync_master_wait_point&#x27;;</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| Variable_name                   | Value      |</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| rpl_semi_sync_master_wait_point | AFTER_SYNC |</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">------------</span>+</span><br></pre></td></tr></table></figure><p>而在MySQL 5.6版本中设置的参数是AFTER_COMMIT</p><p>两个版本中的两个参数，AFTER_COMMIT模式可以理解是，当你购物时收到快递，很少人会去点击<strong>确认收货</strong>，而是过一段时间后才<strong>已收货</strong>。这个收货动作就像半同步里面的IO_Thread，通常是异步，会有延时。而AFTER_SYNC模式，则是收到快递之后，立马收到一条信息，显示快递状态<strong>已收货</strong></p><p>Master的数据写入了Binlog，Slave刷新到磁盘（relay log），同时Maser需要等待Slave反馈收到Relay Log，只有收到ACK后Master才将COMMIT OK结果返回给客户端，MySQL 5.7版本中的半同步复制，有个叫法是Loss-Less(无损)半同步复制。实现的方式有了一些差别，事务在提交之前发送给Slave，当Slave没有接收完成，并且如果发生Master宕机的事件，不会导致主从不一致，因为此时Master端还没有提交，所以主从都没有数据，这样就能够满足数据完成性和一致性</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210303163726830.png"></p><p><strong>步骤过程</strong></p><ul><li>主库执行新的事务，commit时，更新show master status\G，触发一个信号给</li><li>binlog dump thread接收到主库的show master status\G信息，通知从库日志更新了</li><li>从库IO线程请求新的二进制日志事件</li><li>主库会通过dump_T线程传送新的日志事件给从库IO线程</li><li>从库IO线程接收到binlog日志，将日志写入到磁盘上的relaylog文件时，给主库返回一个ACK</li><li>接受ACK后，触发主库可以commit提交</li><li>如果ACK达到了我们预设值的超时时间，半同步复制会切换为原始的异步复制.</li></ul><h3 id="测试半同步复制"><a href="#测试半同步复制" class="headerlink" title="测试半同步复制"></a>测试半同步复制</h3><p>创建一个库，做个小测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">test_sync</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br></pre></td></tr></table></figure><p>创建一个表，插入数据，这个时候的执行速度是很快的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test_sync</span><span class="selector-class">.test</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">test_sync</span><span class="selector-class">.test</span> <span class="selector-tag">values</span>(100);</span><br></pre></td></tr></table></figure><p>模拟网络延迟的情况，将Slave停止</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">stop</span> <span class="selector-tag">slave</span>;</span><br></pre></td></tr></table></figure><p>在回主库插入一行数据，这个时候插入数据会很慢，过程大概是10秒左右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">test_sync</span><span class="selector-class">.test</span> <span class="selector-tag">values</span>(101);</span><br></pre></td></tr></table></figure><p>10秒的等待是与半同步复制的参数有关，单位是毫秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show variables like <span class="string">&#x27;rpl_semi_sync_master_timeout&#x27;</span>;</span></span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| Variable_name                | Value |</span><br><span class="line">+------------------------------+-------+</span><br><span class="line">| rpl_semi_sync_master_timeout | 10000 |</span><br><span class="line">+------------------------------+-------+</span><br></pre></td></tr></table></figure><p>再将半同步复制的开关打开，接着插入一行数据，插入的速度就会恢复</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">slave</span></span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">test_sync</span><span class="selector-class">.test</span> <span class="selector-tag">values</span>(102);</span><br></pre></td></tr></table></figure><p>查看数据库信息，也可以看到明确的信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ vi mysql.log</span><br><span class="line">/<span class="selector-tag">Time</span></span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:15</span><span class="selector-pseudo">:26.185567Z</span> 6 <span class="selector-attr">[Note]</span> <span class="selector-tag">Stop</span> <span class="selector-tag">asynchronous</span> <span class="selector-tag">binlog_dump</span> <span class="selector-tag">to</span> <span class="selector-tag">slave</span> (<span class="selector-tag">server_id</span>: 8)</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:45</span><span class="selector-pseudo">:00.136252Z</span> 0 <span class="selector-attr">[ERROR]</span> /<span class="selector-tag">application</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">mysqld</span>: <span class="selector-tag">Got</span> <span class="selector-tag">an</span> <span class="selector-tag">error</span> <span class="selector-tag">reading</span> <span class="selector-tag">communication</span> <span class="selector-tag">packets</span></span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:45</span><span class="selector-pseudo">:20.478797Z</span> 5 <span class="selector-attr">[Warning]</span> <span class="selector-tag">Timeout</span> <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">reply</span> <span class="selector-tag">of</span> <span class="selector-tag">binlog</span> (<span class="selector-tag">file</span>: <span class="selector-tag">mysql-bin</span>.000001, <span class="selector-tag">pos</span>: 1321), <span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">emi-sync</span> <span class="selector-tag">up</span> <span class="selector-tag">to</span> <span class="selector-tag">file</span> <span class="selector-tag">mysql-bin</span>.000001, <span class="selector-tag">position</span> 1065.</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:45</span><span class="selector-pseudo">:20.478829Z</span> 5 <span class="selector-attr">[Note]</span> <span class="selector-tag">Semi-sync</span> <span class="selector-tag">replication</span> <span class="selector-tag">switched</span> <span class="selector-tag">OFF</span>.</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:45</span><span class="selector-pseudo">:40.479547Z</span> 7 <span class="selector-attr">[Note]</span> <span class="selector-tag">Stop</span> <span class="selector-tag">semi-sync</span> <span class="selector-tag">binlog_dump</span> <span class="selector-tag">to</span> <span class="selector-tag">slave</span> (<span class="selector-tag">server_id</span>: 8)</span><br><span class="line">2021-03-03T07:45:40.479769Z 7 [Note] Aborted connection 7 to db: &#x27;unconnected&#x27; user: &#x27;repl&#x27; host: &#x27;mysql&#x27; (failed</span><br><span class="line"><span class="selector-tag">on</span> <span class="selector-tag">flush_net</span>())</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:46</span><span class="selector-pseudo">:30.185377Z</span> 8 <span class="selector-attr">[Note]</span> <span class="selector-tag">Start</span> <span class="selector-tag">binlog_dump</span> <span class="selector-tag">to</span> <span class="selector-tag">master_thread_id</span>(8) <span class="selector-tag">slave_server</span>(8), <span class="selector-tag">pos</span>(<span class="selector-tag">mysql-bin</span>.00000</span><br><span class="line">1, 1065)</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:46</span><span class="selector-pseudo">:30.185614Z</span> 8 <span class="selector-attr">[Note]</span> <span class="selector-tag">Start</span> <span class="selector-tag">semi-sync</span> <span class="selector-tag">binlog_dump</span> <span class="selector-tag">to</span> <span class="selector-tag">slave</span> (<span class="selector-tag">server_id</span>: 8), <span class="selector-tag">pos</span>(<span class="selector-tag">mysql-bin</span>.000001, 10</span><br><span class="line">65)</span><br><span class="line">2021<span class="selector-tag">-03-03T07</span><span class="selector-pseudo">:46</span><span class="selector-pseudo">:30.196521Z</span> 0 <span class="selector-attr">[Note]</span> <span class="selector-tag">Semi-sync</span> <span class="selector-tag">replication</span> <span class="selector-tag">switched</span> <span class="selector-tag">ON</span> <span class="selector-tag">at</span> (<span class="selector-tag">mysql-bin</span>.000001, 1321)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL备份恢复-7</title>
      <link href="2021/05/16/MySQL%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D-7/"/>
      <url>2021/05/16/MySQL%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D-7/</url>
      
        <content type="html"><![CDATA[<h1 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h1><h2 id="MySQL常规的备份方案"><a href="#MySQL常规的备份方案" class="headerlink" title="MySQL常规的备份方案"></a>MySQL常规的备份方案</h2><p>从备份类型来说，可分为<strong>冷备份、热备份和温备</strong></p><p>冷备份：主要使用系统命令完成，是基于物理文件的复制。比如命令CP，特点是快速、事务一致；但是重要的一点是需要停止服务，适用的场景会相对较少</p><p>热备份：可以理解是在线备份，不会中断已有的业务访问，绝大多数的场景涉及的都是热备份，下述使用的备份工具也都是基于热备份的前提下</p><p>温备份：锁表备份，只能查询不能修改（MyISAM）</p><table><thead><tr><th>备份工具</th><th>归属</th><th>备份类型</th><th>多线程备份</th><th>备份效率</th><th>恢复效率</th><th>空间占用</th><th>事务一致性</th></tr></thead><tbody><tr><td>mysqldump</td><td>官方</td><td>逻辑备份</td><td>不支持</td><td>低</td><td>低</td><td>适中</td><td>不完全一致</td></tr><tr><td>xtrabackup</td><td>第三方</td><td>物理备份</td><td>支持</td><td>高</td><td>高</td><td>大</td><td>支持</td></tr></tbody></table><h3 id="备份工具原生与第三方"><a href="#备份工具原生与第三方" class="headerlink" title="备份工具原生与第三方"></a>备份工具原生与第三方</h3><p><strong>mysqldump备份工具</strong></p><p>优点</p><ul><li>不需要安装，原生</li><li>备份出来的是SQL，文本格式，可读性高，便于备份处理</li><li>压缩比较高，节省备份的磁盘空间</li></ul><p>缺点</p><ul><li>依赖于数据库引擎，需要从磁盘把数据读出，然后转换成SQL进行转存，数据量大的话效率较低</li><li>建议：100G以内的数据量级，可以使用mysqldump超过TB以上，也可选择的是mysqldump，配合分布式的系统</li></ul><p><strong>xtrabackup备份工具</strong></p><p>优点</p><ul><li>类似于直接CP数据文件，不需要管逻辑结构，相对来说性能较高</li></ul><p>缺点</p><ul><li>可读性差</li><li>压缩比低，需要更多磁盘空间</li><li>建议：大于100G小于TB</li></ul><h2 id="mysqldump使用"><a href="#mysqldump使用" class="headerlink" title="mysqldump使用"></a>mysqldump使用</h2><h3 id="备份专用基本参数"><a href="#备份专用基本参数" class="headerlink" title="备份专用基本参数"></a>备份专用基本参数</h3><blockquote><p>注意：以下参数备份恢复时：必须库事先存在，并且使用source才能恢复</p></blockquote><p><strong>-A 全备参数</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/backup</span><br><span class="line">$ mysqldump -uroot -p -A &gt;/data/backup/full.sql</span><br><span class="line"><span class="selector-tag">Enter</span> <span class="selector-tag">password</span>: </span><br><span class="line"></span><br><span class="line">$ cd /data/backup/</span><br><span class="line">$ ls</span><br><span class="line"><span class="selector-tag">full</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p><strong>-B 指定备份的多个单库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p123456 -B world &gt;/data/backup/db.sql</span><br></pre></td></tr></table></figure><p><strong>备份单个或多个表</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p123456 world city country &gt;/data/backup/bak1.sql</span><br></pre></td></tr></table></figure><p><strong>补充说明</strong></p><ul><li>常规备份是要加 –set-gtid-purged=OFF，解决备份时的警告</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p -A --set-gtid-purged=OFF &gt;/data/backup/a.sql</span></span><br></pre></td></tr></table></figure><ul><li>构建主从时，做的备份，–set-gitd-purged=AUTO/ON（默认是AUTO，所以不需要添加）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p -A  &gt;/data/backup/a.sql</span></span><br></pre></td></tr></table></figure><h3 id="特殊参数使用"><a href="#特殊参数使用" class="headerlink" title="特殊参数使用"></a>特殊参数使用</h3><ul><li>-R 备份存储过程及函数</li><li>-E 备份事件</li><li>-F 备份开始时，刷新一个新binlog日志</li><li>–triggers 触发器</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A -R -E --triggers &gt;/data/backup/full.sql</span><br><span class="line">$ mysqldump -uroot -p  -A  -R --triggers -F &gt;/bak/full.sql</span><br></pre></td></tr></table></figure><p><strong>–master-data 选项</strong></p><p>在备份时，如果要生成整个备份文件的检查点，可以使用master-data选项，通常会使用1和2两个选项，它们之间的区别是一个是执行（参数值1），一个是不执行（参数值2）</p><p><code>作用</code>：以注释的形式，保存备份开始事件点的binlog的状态信息</p><p><strong>–single-trancation 选项</strong></p><p>在备份时，是默认启动–lock-all-tables选项，所以要明确一点是开启–single-transaction选项，保证在一个事务中所有先沟通的查询读取到同样的数据，只在dump开始时短暂获取global read locak，否则在备份中全程锁表</p><p><code>作用</code>：对于InnoDB的表，进行一致性快照备份，不锁表</p><blockquote><p>注意：在备份过程中，要确保没有其他连接在使用ALTER TABLE、CREATE TABLE、DROP TABLE、RENAME TABLE、TRUNCATE TABLE等语句，否则会出现不正确的内容或者失败</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p  -A  -R --triggers --master-data=2   &gt;/back/world.sql  </span><br><span class="line">$ grep &#x27;CHANGE&#x27; /backup/world.sql </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql-bin.000035&#x27;, MASTER_LOG_POS=194;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A -R -E --triggers --master-data=2  --single-transaction --set-gtid-purged=OFF &gt;/data/backup/full.sql</span><br></pre></td></tr></table></figure><p>自动锁表</p><ul><li>不加–single-transcation，温备份</li><li>加了–single-transcation，对于InnoDB表不锁表备份（快照备份）</li></ul><p><strong>–set-gtid-purged 选项</strong></p><ul><li>使用场景，选项有：auto，on，of</li></ul><p>–set-gtid-purged=OFF，可以使用在日常备份参数中.(解决警告)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A -R -E --triggers --master-data=2  --single-transaction --set-gtid-purged=OFF &gt;/data/backup/full.sql</span><br></pre></td></tr></table></figure><p>auto , on 在构建主从复制环境时需要的参数配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A -R -E --triggers --master-data=2  --single-transaction --set-gtid-purged=ON &gt;/data/backup/full.sql</span><br></pre></td></tr></table></figure><p><strong>–max-allowed-packet 选项</strong></p><p>发送到服务器或从服务器接收的最大数据包长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A -R -E --triggers --master-data=2  --single-transaction --set-gtid-purged=OFF --max-allowed-packet=256M &gt;/data/backup/full.sql</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">PS</span>：<span class="selector-tag">The</span> <span class="selector-tag">maximum</span> <span class="selector-tag">packet</span> <span class="selector-tag">length</span> <span class="selector-tag">to</span> <span class="selector-tag">send</span> <span class="selector-tag">to</span> <span class="selector-tag">or</span> <span class="selector-tag">receive</span> <span class="selector-tag">from</span> <span class="selector-tag">server</span>.</span><br></pre></td></tr></table></figure><p><strong>add-drop-database 选项</strong></p><p>在导入数据时，如果数据库存在，通常有两种策略，一种是使用drop database if exists选项，另一种是忽略该操作。对于这种操作，mysqldump提供了丰富的选项，对于表的操作时默认开启了drop table if exists的处理方式，而对于数据是直接忽略此操作，可以设定这些已有的默认值，对于实际的工作环境进行选用</p><p><strong>order-by-primary 选项</strong></p><p>这个选项属于MySQL特色的一个功能，能够根据主键来进行排序</p><p><strong>skip-extended-insert 选项</strong></p><p>默认使用insert into xxx values(xx)(xx)的形式</p><p>如果要得到一行数据对应一条insert语句的形式，可以使用该选项，语句的形式为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test` VALUES (1,&#x27;1&#x27;);</span><br></pre></td></tr></table></figure><p><strong>complete-insert 选项</strong></p><p>如果对insert语句还不满意，想生成完整的字段列表，可以使用该选项，语句的形式为</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `test` (&#x27;id&#x27;, &#x27;name&#x27;) VALUES (1, &#x27;gg&#x27;),(2, &#x27;dd&#x27;);</span><br></pre></td></tr></table></figure><p><strong>replace 选项</strong></p><p>可以将insert转化为replace语句，或者结合skip-extended-insert来完成，这样可以生成若干条的replace语句，语句形成如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO `test` VALUES (1,&#x27;gg&#x27;);</span><br></pre></td></tr></table></figure><h3 id="环境与策略"><a href="#环境与策略" class="headerlink" title="环境与策略"></a>环境与策略</h3><p><strong>背景环境</strong>：正在运行的网站系统，数据库：msyql-5.7.20，数据量50G，日业务增量1~5M</p><p><strong>备份策略</strong>：每天23:00点,计划任务调用mysqldump执行全备脚本</p><p><strong>故障时间点</strong>：年底故障演练，模拟周三上午10点误删除数据库</p><p><strong>备份思路</strong></p><ul><li><p>停业务，挂维护页，避免数据的二次伤害</p></li><li><p>找一个临时库，恢复周二23:00全备</p></li><li><p>截取周二23:00 至 周三10点误删除之间的binlog，恢复到临时库</p></li><li><p>测试可用性和完整性</p></li><li><p>两种方法使用库</p><p>1）直接使用临时库顶替原生产库，前端应用割接到新库</p><p>2）将误删除的表导出，导入到原生产库</p></li><li><p>开启业务：处理20分钟，最终业务恢复正常</p></li></ul><h3 id="故障模拟演练"><a href="#故障模拟演练" class="headerlink" title="故障模拟演练"></a>故障模拟演练</h3><p><strong>1. 准备的数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">backup</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">backup</span></span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 周二的23:00全备</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -A  -R  --triggers --set-gtid-purged=OFF --master-data=2 --single-transaction|gzip &gt; /data/backup/full_$(date +%F).sql.gz</span><br></pre></td></tr></table></figure><p><strong>3. 模拟周二23:00 至 周三10点之间数据变化</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">backup</span></span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(11),(22),(33);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t2</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t2</span> <span class="selector-tag">values</span>(11),(22),(33);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>4. 模拟故障，删除表（只是模拟，不代表生产操作）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">drop</span> <span class="selector-tag">database</span> <span class="selector-tag">backup</span>;</span><br></pre></td></tr></table></figure><h3 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h3><p><strong>1. 准备临时数据库（多实例3307）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysql3307</span><br><span class="line">$ mysql -uroot -p -S /data/3307/mysql.sock -P 3307</span><br></pre></td></tr></table></figure><p><strong>2. 准备备份</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cd /backup</span><br><span class="line">$ gunzip full_2020-09-07<span class="selector-class">.sql</span><span class="selector-class">.gz</span> </span><br><span class="line">$ vim full_2020-09-07<span class="selector-class">.sql</span><span class="selector-class">.gz</span> </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql.000003&#x27;, MASTER_LOG_POS=762;</span><br><span class="line"># 找到新事物起始位置762</span><br><span class="line"></span><br><span class="line">&gt; show master status;</span><br><span class="line">&gt; show binlog events in &#x27;mysql.000003&#x27;;</span><br><span class="line"># 找到终点位置1529</span><br><span class="line"></span><br><span class="line"># 导入二进制日志</span><br><span class="line">mysqlbinlog --skip-gtids --start-position=762 --stop-position=1529 /data/binlog/mysql.000003 &gt;/data/backup/bin.sql</span><br></pre></td></tr></table></figure><p><strong>3. 恢复备份到临时库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -S /data/3307/mysql.sock</span><br><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">backup</span>/<span class="selector-tag">full_2019-07-15</span><span class="selector-class">.sql</span></span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">backup</span>/<span class="selector-tag">bin</span><span class="selector-class">.sql</span>  </span><br><span class="line">&gt; set sql_log_bin=0;</span><br></pre></td></tr></table></figure><p><strong>4. 故障表导出并恢复到生产</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p123456 -S /data/3307/mysql.sock -B backup &gt;/data/backup/bak.sql</span><br><span class="line">$ mysql -uroot -p123456</span><br><span class="line">&gt; set sql_log_bin=0</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">backup</span>/<span class="selector-tag">bak</span><span class="selector-class">.sql</span>;</span><br><span class="line">&gt; set sql_log_bin=1</span><br></pre></td></tr></table></figure><h3 id="GTID模式备份恢复示例"><a href="#GTID模式备份恢复示例" class="headerlink" title="GTID模式备份恢复示例"></a>GTID模式备份恢复示例</h3><p><strong>1. 创建一个数据库bak</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">bak</span>;</span><br></pre></td></tr></table></figure><p><strong>2. 在bak下创建一张表t1</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br></pre></td></tr></table></figure><p><strong>3. 插入5行任意数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3),(4),(5)</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>4. 进行全备备份</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p123456 -A --master-data=2 --single-transaction -R -E --triggers &gt;/data/backup/ba.sql</span><br><span class="line">SET @@GLOBAL.GTID_PURGED=&#x27;f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:1-16&#x27;; # 从第17个事务开始</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=&#x27;mysql.000003&#x27;, MASTER_LOG_POS=1627;</span><br></pre></td></tr></table></figure><p><strong>5. 插入三行数据，任意修改3行数据，删除1行数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(6),(7),(8);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br><span class="line">&gt; update t1 set id=10 where id&gt;2;</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br><span class="line">&gt; delete from t1 where id=5;</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>6. 删除所有数据（误删）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">delete</span> <span class="selector-tag">from</span> <span class="selector-tag">t1</span>;</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>7. 再t1中又插入5行新数据，修改3行数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(11),(12),(13),(14),(15);</span><br><span class="line">&gt; update t1 set id=20 where id&gt;13;</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><blockquote><p>PS：需求跳过第六步恢复表数据</p></blockquote><p><strong>8. 导出二进制日志</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --skip-gtids --include-gtids=&#x27;f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:17-22&#x27; --exclude-gtids=&#x27;f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:20&#x27; /data/binlog/mysql.000003 &gt;/data/backup/bin.sql</span><br></pre></td></tr></table></figure><p><strong>9. 恢复数据</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; set sql_bin_log=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">data</span>/<span class="selector-tag">backup</span>/<span class="selector-tag">full</span><span class="selector-class">.sql</span></span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">data</span>/<span class="selector-tag">backup</span>/<span class="selector-tag">bin</span><span class="selector-class">.sql</span></span><br><span class="line">&gt; set sql_bin_log=0;</span><br></pre></td></tr></table></figure><h2 id="xtrabackup物理备份使用"><a href="#xtrabackup物理备份使用" class="headerlink" title="xtrabackup物理备份使用"></a>xtrabackup物理备份使用</h2><p>xtrabackup是Percona公司研发的一款开源、免费的MySQL热备份软件，具备增备功能，同时在大数数据的场景下具有明显的恢复优势，它主要包括xtrabackup和innobackypex两个命令</p><p>其中，xtrabackup主要是用于热备份innodb，或者在xtradb表中数据的工具，不能备份其他类型的表，也不能备份数据表结构。innobackupex是将xtrabackup进行封装的perl脚本，可以备份和恢复MyISAM表以及数据表结构</p><p>对于不是InnoDB表（比如 myisam)，锁表cp数据文件，属于一种温备份</p><p>对于InnoDB的表（支持事务的）不锁表，拷贝数据页，最终以数据文件的方式保存下来，把一部分redo和undo一并备走，属于热备方式</p><blockquote><p>注：在2.3版本innobackupex的功能全部集成到了xtrabackup里面，只保留一个二进制入口，为了保证兼容性，innobackupex是作为xtrabackup的一个软连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ll /usr/bin/innobackupex</span><br><span class="line"><span class="selector-tag">lrwxrwxrwx</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 10 <span class="selector-tag">Feb</span> 27 20<span class="selector-pseudo">:45</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">innobackupex</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">xtrabackup</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="全量备份原理"><a href="#全量备份原理" class="headerlink" title="全量备份原理"></a>全量备份原理</h3><p>在备份开始时，会启动一个xtrabackup_log后台检测的进程，一旦发现redo有新的日志写入，立刻将日志写入到日志文件xtrabackup_log，然后开始物理文件的复制，多余Innodb表和MyISAM表会有不同粒度的锁，知道复制完成。如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210227205907253.png"></p><h3 id="增备原理"><a href="#增备原理" class="headerlink" title="增备原理"></a>增备原理</h3><p>增备的原理和全备类似，但是检查点LSN有所差异，增备是基于全备的，第一次增备备份是基于上一次全备，后续的增备都是上一次的增备，最终达到一致性。增备的过程主要是处理Innodb中有变更的页（即页的LSN），LSN信息在xtrabackup_checkpoints中</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210227210547307.png"></p><p>而恢复过程是分为两个阶段</p><ul><li>prepare阶段的主要作用是通过回滚未提交的事务及同步已经提交的事务，使得数据文件处于一致性状态。主要是通过innobackupex的apply-log选项实现的，最终会重构出相关的redo，ibdata文件等</li><li>copy back阶段会把所有的文件都复制到指定的目录下，启动服务</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210227210616774.png"></p><h3 id="安装依赖并下载安装xtrabackup"><a href="#安装依赖并下载安装xtrabackup" class="headerlink" title="安装依赖并下载安装xtrabackup"></a>安装依赖并下载安装xtrabackup</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">$ yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev</span><br><span class="line">$ wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">$ yum install percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm -y</span><br></pre></td></tr></table></figure><h3 id="innobackupex使用"><a href="#innobackupex使用" class="headerlink" title="innobackupex使用"></a>innobackupex使用</h3><h4 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h4><p>全备备份</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex --user=root --password=123456 --socket=/tmp/mysql.sock /data/backup</span><br></pre></td></tr></table></figure><p>自主定制备份路径名</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex --user=root --password=123456 --socket=/tmp/mysql.sock --no-timestamp /data/backup/full</span><br></pre></td></tr></table></figure><p>恢复</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex --apply-log /backup/full</span><br></pre></td></tr></table></figure><h4 id="备份产生文件"><a href="#备份产生文件" class="headerlink" title="备份产生文件"></a>备份产生文件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ /data/backup</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>       24 <span class="selector-tag">Jun</span> 29 09<span class="selector-pseudo">:59</span> <span class="selector-tag">xtrabackup_binlog_info</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>      119 <span class="selector-tag">Jun</span> 29 09<span class="selector-pseudo">:59</span> <span class="selector-tag">xtrabackup_checkpoints</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>      489 <span class="selector-tag">Jun</span> 29 09<span class="selector-pseudo">:59</span> <span class="selector-tag">xtrabackup_info</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>     2560 <span class="selector-tag">Jun</span> 29 09<span class="selector-pseudo">:59</span> <span class="selector-tag">xtrabackup_logfile</span></span><br></pre></td></tr></table></figure><p><strong>1）xtrabackup_binlog_info：备份时刻的binlog位置</strong></p><blockquote><p>PS：记录的是备份时刻，binlog的文件扩展名和当时的结束的position gtid，可以用来作为截取binlog时的起点（这种是开启了GTID特性备份的情况）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat xtrabackup_binlog_info </span><br><span class="line"><span class="selector-tag">mysql-bin</span>.000003    536749</span><br><span class="line">79<span class="selector-tag">de40d3-5ff3-11e9-804a-000c2928f5dd</span><span class="selector-pseudo">:1-7</span></span><br></pre></td></tr></table></figure><p><strong>2）xtrabackup_checkpoints</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat xtrabackup_checkpoints</span><br><span class="line">backup_type = full-backuped # 类型为全备</span><br><span class="line">from_lsn = 0         # 全备（就是从0开始，度低于增量有别的显示方法）    </span><br><span class="line">to_lsn = 160683027        # 备份开始时间（ckpt）点数据页的LSN    </span><br><span class="line">last_lsn = 160683036        # 备份结束后，redo日志最终的LSN</span><br><span class="line">compact = 0</span><br><span class="line">recover_binlog_info = 0</span><br></pre></td></tr></table></figure><ul><li><p>备份时刻，立即将已经commit过的，内容中的数据也刷新到磁盘（CKPT），开始备份数据，数据文件的LSN会停留在to_lsn位置。</p></li><li><p>备分时刻，也有可能会有其他的数据写入，已备走的数据文件就不会再发生变化了。 </p></li><li><p>在备份过程中，备份文件会一直监控着redo和undo，如果一旦有变化会将日志也一并备走，并记录LSN到last_lsn位</p></li></ul><blockquote><p>注：从to_lsn  —&gt; last_lsn 就是备份过程中产生的数据变化。</p></blockquote><h3 id="innobackupex全备与恢复过程"><a href="#innobackupex全备与恢复过程" class="headerlink" title="innobackupex全备与恢复过程"></a>innobackupex全备与恢复过程</h3><p><strong>1. 全备备份</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex  --user=root --password=123456 --socket=/tmp/mysql.sock --no-timestamp /backup/full</span><br></pre></td></tr></table></figure><p><strong>2. 利用全备进行恢复</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pkill mysqld</span><br><span class="line">$ \rm -rf /data/mysql/data/*</span><br><span class="line">$ innobackupex --apply-log /backup/full/</span><br><span class="line">$ cp -a /backup/full/* /data/mysql/data/</span><br><span class="line">$ chown -R mysql.mysql /data/mysql/data/*</span><br><span class="line">$ /etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><h3 id="innobackupex增量备份"><a href="#innobackupex增量备份" class="headerlink" title="innobackupex增量备份"></a>innobackupex增量备份</h3><p><strong>1. 清空备份路径</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /data/backup/*</span><br></pre></td></tr></table></figure><p><strong>2. 模拟数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">full</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">full</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 进行周日的全备</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex  --user=root --password=123456 --socket=/tmp/mysql.sock --no-timestamp /data/backup/full</span><br></pre></td></tr></table></figure><p><strong>4. 模拟周一的数据变化</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">inc1</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">inc1</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;  </span><br></pre></td></tr></table></figure><p><strong>5. 进行周一的增量备份</strong></p><ul><li><p>–incremental 增量开关</p></li><li><p>–incremental-basedir=/data/backup/full 基于那个备份进行增量</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex  --user=root --password=123456 --socket=/tmp/mysql.sock --no-timestamp --incremental --incremental-basedir=/data/backup/full /data/backup/inc1</span><br></pre></td></tr></table></figure><p><strong>6. 检查xtrabackup_checkpoint文件的LSN是否对应</strong></p><p>如下图所示</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210216235807367.png"></p><p><strong>7. 模拟周二数据变化</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">inc2</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">inc2</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p><strong>8. 备份周二的增量</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ innobackupex  --user=root --password=123456 --socket=/tmp/mysql.sock --no-timestamp --incremental --incremental-basedir=/data/backup/inc1 /data/backup/inc2</span><br></pre></td></tr></table></figure><p><strong>9. 模拟周三的数据变化</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">inc3</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">inc3</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;   </span><br></pre></td></tr></table></figure><p><strong>9. 模拟上午10点数据库崩溃</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pkill mysqld</span><br><span class="line">$ \rm -rf /data/mysql/data/*</span><br></pre></td></tr></table></figure><p><strong>10. 恢复思路</strong></p><ul><li><p>停业务，挂维护页</p></li><li><p>查找可用备份并处理备份：full+inc1+inc2</p></li><li><p>binlog：inc2 到故障时间点的binlog</p></li><li><p>恢复全备+增量+binlog</p></li><li><p>验证过程</p></li><li><p>起业务，撤维护页</p></li></ul><p><strong>11. 恢复前的准备</strong></p><ul><li><p>–apply-log 应用redo和undo的前滚和回滚</p></li><li><p>–redo-only 只应用redo的前滚</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">This option should be used when preparing the base full</span><br><span class="line">backup and when merging all incrementals except the last</span><br><span class="line">one. This forces xtrabackup to skip the &quot;rollback&quot; phase</span><br><span class="line">and do a &quot;redo&quot; only</span><br><span class="line"></span><br><span class="line">这个选项的应用，是当整理全备和所有的增量合并时，除了最后一次增量不使用，</span><br><span class="line">这迫使xtrabackup跳过“回滚”阶段并仅执行“重做”。</span><br></pre></td></tr></table></figure><ul><li>整理full数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> innobackupex --apply-log --redo-only  /data/backup/full</span></span><br></pre></td></tr></table></figure><ul><li>合并inc1到full，并整理备份</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> innobackupex --apply-log --redo-only --socket=/tmp/mysql.sock --incremental-basedir=/data/backup/inc1 /data/backup/full</span></span><br></pre></td></tr></table></figure><ul><li>合并inc2到full,并整理备份</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> innobackupex --apply-log  --incremental-basedir=/data/backup/inc2 /data/backup/full</span></span><br></pre></td></tr></table></figure><ul><li>最后一次整理full</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --apply-log  /backup/full</span><br></pre></td></tr></table></figure><p><strong>12. 截取二进制日志</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /data/backup/inc2/xtrabackup_binlog_info </span><br><span class="line"><span class="selector-tag">mysql</span>.0000071989<span class="selector-tag">f4022bab-e9cf-11ea-aa7b-000c29ee0e5e</span><span class="selector-pseudo">:1-31</span></span><br><span class="line"></span><br><span class="line">//找到二进制日志</span><br><span class="line">$ mysqlbinlog /data/binlog/mysql.000007|grep &#x27;SET&#x27;</span><br><span class="line"></span><br><span class="line">//截取二进制日志</span><br><span class="line">$ mysqlbinlog --skip-gtids --include-gtids=&#x27;f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:32-34&#x27; /data/binlog/mysql.000007 &gt;/data/backup/binlog.sql</span><br></pre></td></tr></table></figure><p><strong>13. 恢复备份数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cp -a /data/backup/full/* /data/mysql/data/</span><br><span class="line">$ chown -R mysql. /data/mysql/data/*</span><br><span class="line">$ /etc/init.d/mysqld start</span><br><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">backup</span>/<span class="selector-tag">binlog</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p><strong>验证数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">full</span><span class="selector-class">.t1</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">inc1</span><span class="selector-class">.t1</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">inc2</span><span class="selector-class">.t1</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">inc3</span><span class="selector-class">.t1</span>;</span><br></pre></td></tr></table></figure><h2 id="迁移5-6至5-7"><a href="#迁移5-6至5-7" class="headerlink" title="迁移5.6至5.7"></a>迁移5.6至5.7</h2><p><strong>1. 创建必须的目录</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /data/mysql/data -p</span><br><span class="line">$ mkdir /application/ -p</span><br><span class="line">$ mkdir /data/binlog/ -p</span><br></pre></td></tr></table></figure><p><strong>2. 上传软件至/application下并解压</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rz</span><br><span class="line"></span><br><span class="line">$ tar xf mysql-5.6.44-linux-glibc2.12-x86_64</span><br><span class="line">$ mv mysql-5.6.44-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure><p><strong>3. 建用户，修改权限</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ useradd mysql </span><br><span class="line">$ chown -R mysql. /application/*</span><br><span class="line">$ chown -R mysql. /data/*</span><br></pre></td></tr></table></figure><p><strong>4. 修改环境变量</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tail -2 /etc/profile</span><br><span class="line">export PATH=/application/mysql/bin:$PATH</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><p><strong>5. 移除Linux默认使用的mariadb数据库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove mariadb-libs -y</span><br><span class="line">$ yum install -y libaio-devel</span><br><span class="line">$ \rm -rf /data/mysql/data/*</span><br></pre></td></tr></table></figure><p><strong>6. 数据初始化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install autoconf</span><br><span class="line">$ yum install -y libaio-devel</span><br><span class="line">$ /application/mysql/scripts/mysql_install_db --user=mysql --basedir=/application/mysql --datadir=/data/mysql/data</span><br></pre></td></tr></table></figure><p><strong>7. 准备配置文件按和启动脚本</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/my.cnf </span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">server_id=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line">log_bin=/data/binlog/mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"># 复制启动脚本</span><br><span class="line">$ cp /application/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br></pre></td></tr></table></figure><p><strong>8. 启动数据库并查看</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld restart</span><br><span class="line">$ ss -lntup|grep mysqld</span><br><span class="line"><span class="selector-tag">tcp</span>    <span class="selector-tag">LISTEN</span>     0      80       :<span class="selector-pseudo">::3306</span>                 :::*</span><br></pre></td></tr></table></figure><p><strong>9. 设置密码</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqladmin -uroot -passowrd 123456</span><br><span class="line">$ mysql -uroot -p123456 </span><br></pre></td></tr></table></figure><h3 id="迁移过程"><a href="#迁移过程" class="headerlink" title="迁移过程"></a>迁移过程</h3><p><strong>1. 创建库和表，并插入一行数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">full</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1),(2),(3)</span><br></pre></td></tr></table></figure><p><strong>2. 进行备份</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqldump -uroot -p123456 -A --master-data=2 --single-transaction -R -E --triggers &gt; /tmp/full.sql</span><br></pre></td></tr></table></figure><p><strong>3. 传输备份文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp /tmp/full.sql 10.0.0.51:/data/3308</span><br></pre></td></tr></table></figure><p><strong>4. 准备5.7数据库</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld3308</span><br><span class="line">$ ss -lntup|grep 330*</span><br></pre></td></tr></table></figure><p><strong>5. 导入5.7数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -S /data/3308/mysql.sock</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> sql_log_bin=0;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">source</span> /data/3308/full.sql</span> </span><br></pre></td></tr></table></figure><blockquote><p>PS：<code>$ mysql_upgrade -uroot -S /data/3308/mysql.sock  </code> 导入5.6表需要使用mysql_upgrade升级一下</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日志管理-6</title>
      <link href="2021/05/15/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86-6/"/>
      <url>2021/05/15/MySQL%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86-6/</url>
      
        <content type="html"><![CDATA[<h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><h2 id="日志种类"><a href="#日志种类" class="headerlink" title="日志种类"></a>日志种类</h2><table><thead><tr><th>日志文件</th><th>选项</th><th>文件名/表名成</th><th>程序</th></tr></thead><tbody><tr><td>错误日志</td><td>log_error</td><td>hostname.err</td><td>N/A</td></tr><tr><td>常规</td><td>general_log</td><td>hostname.log / general_log</td><td>N/A</td></tr><tr><td>慢查询</td><td>show_query_log / –long_query_time</td><td>hostname-slow.log / slow.log</td><td>mysqldumpslow</td></tr><tr><td>二进制</td><td>log_bin</td><td>host_name-bin.000001</td><td>mysqlbinlog</td></tr><tr><td>审计</td><td>audit_log / audit_log_file</td><td>audit.log</td><td>Audit Log</td></tr></tbody></table><h2 id="错误日志配置"><a href="#错误日志配置" class="headerlink" title="错误日志配置"></a>错误日志配置</h2><p><strong>作用</strong>：帮助排查MySQL运行过程的故障</p><p><strong>默认配置（默认开启）</strong>：/数据路径下/(hostname).err，系统主机名是什么，错误日志就是主机名.err</p><p>查看错误日志名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@log_error</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| @@log_error |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| ./mysql.err |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p>手工设定日志路径并重启，在查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#x27;^log&#x27; /etc/my.cnf </span><br><span class="line">log_error=/var/log/mysql.log</span><br><span class="line"></span><br><span class="line">$ /etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">&gt; show variables like &#x27;log_error&#x27;;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| Variable_name | Value              |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| log_error     | /var/log/mysql.log |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><p>出现报错时，关注ERROR，筛选出关键字查看</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#x27;ERROR&#x27; mysql.err </span><br></pre></td></tr></table></figure><h2 id="二进制日志（binlog）"><a href="#二进制日志（binlog）" class="headerlink" title="二进制日志（binlog）"></a>二进制日志（binlog）</h2><h3 id="配置BinLog日志"><a href="#配置BinLog日志" class="headerlink" title="配置BinLog日志"></a>配置BinLog日志</h3><p>配置文件参数介绍</p><ul><li><p>默认是没有开启二进制日志，需要在my.cnf设置一个路径</p></li><li><p>/data/binlog：提前创建好的目录，而且要有<code>mysql的权限</code></p></li><li><p>mysql-bin：二进制日志文件名的前缀。例如：mysql-bin.000001  ,mysql-bin.000002 ……等等</p></li><li><p>binlog_format=row   –&gt; 5.7版本默认配置是row格式，可以省略配置</p></li><li><p>row是binlog记录的格式    </p></li></ul><p>开启log_bin</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -E &#x27;^log|^server&#x27; /etc/my.cnf </span><br><span class="line">server_id=6                        //标记服务ID，使用在主从复制</span><br><span class="line">log_bin=/data/binlog/mysql-bin     //开启binlog，生成文件路径</span><br></pre></td></tr></table></figure><p>创建目录和授权  </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/binlog/</span><br><span class="line">$ chown -R mysql. /data/binlog/</span><br><span class="line"><span class="selector-tag">drwxr-xr-x</span> 2 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 6 <span class="selector-tag">Sep</span>  5 17<span class="selector-pseudo">:15</span> /<span class="selector-tag">data</span>/<span class="selector-tag">binlog</span>/</span><br></pre></td></tr></table></figure><p>重启生效并查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld restart</span><br><span class="line">$ cd binlog/</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 154 <span class="selector-tag">Sep</span>  5 17<span class="selector-pseudo">:16</span> <span class="selector-tag">mysql</span>.000001</span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>  26 <span class="selector-tag">Sep</span>  5 17<span class="selector-pseudo">:16</span> <span class="selector-tag">mysql</span><span class="selector-class">.index</span></span><br></pre></td></tr></table></figure><h3 id="BinLog记录"><a href="#BinLog记录" class="headerlink" title="BinLog记录"></a>BinLog记录</h3><p><strong>binlog作用</strong></p><ul><li><p>备份恢复必须依赖binlog日志</p></li><li><p>主从环境必须依赖binlog日志</p></li><li><p>binlog是SQL层的功能，记录的是变更SQL语句，不记录查看语句</p></li></ul><p><strong>记录SQL语句种类</strong></p><ul><li>DDL：原封不动的记录当前DDL（statement语句方式）</li><li>DCL：原封不动的记录当前DCL（statement语句方式）</li><li>DML：只记录已经提交的事务DML</li></ul><p><strong>DML三种记录方式</strong></p><p>binlog——fortmat(binlog的记录格式)参数影响</p><ul><li><p>statement（5.6默认），简称SBR（statement based replication)：语句模式原封不动的记录当前DML</p></li><li><p>ROW(5.7默认)，简称RBR（ROW based replicaiton）：记录数据行的变化（用户看不同，需要攻击分析）</p></li><li><p>mixed（混合），简称MBR（mixed based replication)：以上两种模式的混合</p></li></ul><p><strong>binlog的event(事件) 组成</strong></p><ul><li><p>时间的开始标识</p></li><li><p>事件内容 </p></li><li><p>事件的结束标识</p></li></ul><p><strong>Position（位置）</strong></p><p>作用：方便我们从日志中截取我们想要的日志事件</p><ul><li>开始标识：at 194</li><li>结束标识：and_log_pos 254</li></ul><h3 id="BingLog查看"><a href="#BingLog查看" class="headerlink" title="BingLog查看"></a>BingLog查看</h3><p>查看日志的开启情况，log_bin参数设置的路径，可以找到二进制日志</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| Variable_name                   | Value                    |</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| log_bin                         | ON                       |</span><br><span class="line">| log_bin_basename                | /data/binlog/mysql       |</span><br><span class="line">| log_bin_index                   | /data/binlog/mysql.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                      |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                      |</span><br><span class="line">| sql_log_bin                     | ON                       |</span><br><span class="line">+<span class="selector-tag">---------------------------------</span>+<span class="selector-tag">--------------------------</span>+</span><br></pre></td></tr></table></figure><p>查看一共多少个binlog日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">binary</span> <span class="selector-tag">logs</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| Log_name     | File_size |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| mysql.000001 |       154 |</span><br></pre></td></tr></table></figure><p>滚动添加一个新的日志</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">flush</span> <span class="selector-tag">logs</span>; </span><br><span class="line">&gt; <span class="selector-tag">flush</span> <span class="selector-tag">logs</span>; </span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">binary</span> <span class="selector-tag">logs</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| Log_name     | File_size |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| mysql.000001 |       197 |</span><br><span class="line">| mysql.000002 |       197 |</span><br><span class="line">| mysql.000003 |       154 |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------</span>+</span><br></pre></td></tr></table></figure><p>查看mysql正在使用的日志文件</p><ul><li>file：当前MySQL正在使用的文件名</li><li>Position：最后一个事件的结束位置号</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br><span class="line">| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br><span class="line">| mysql.000003 |      154 |              |                  |                   |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="BinLog示例"><a href="#BinLog示例" class="headerlink" title="BinLog示例"></a>BinLog示例</h2><h3 id="BinLog记录查看"><a href="#BinLog记录查看" class="headerlink" title="BinLog记录查看"></a>BinLog记录查看</h3><p>创建库和表，并插入一行数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">binlog</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">binlog</span></span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1);</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">t1</span>;</span><br><span class="line">+<span class="selector-tag">------</span>+</span><br><span class="line">| id   |</span><br><span class="line">+<span class="selector-tag">------</span>+</span><br><span class="line">|    1 |</span><br><span class="line">+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>查看当前二进制文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br><span class="line">| File         | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br><span class="line">| mysql.000003 |      758 |              |                  |                   |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------</span>+</span><br></pre></td></tr></table></figure><p>查看文件的内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; show binlog events in &#x27;mysql.000003&#x27;;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br><span class="line">| Log_name     | Pos | Event_type     | Server_id | End_log_pos | Info                                   |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br><span class="line">| mysql.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.26-log, Binlog ver: 4  |</span><br><span class="line">| mysql.000003 | 123 | Previous_gtids |         6 |         154 |                                        |</span><br><span class="line">| mysql.000003 | 154 | Anonymous_Gtid |         6 |         219 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql.000003 | 219 | Query          |         6 |         335 | create database binlog charset utf8mb4 |</span><br><span class="line">| mysql.000003 | 335 | Anonymous_Gtid |         6 |         400 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql.000003 | 400 | Query          |         6 |         501 | use `binlog`; create table t1(id int)  |</span><br><span class="line">| mysql.000003 | 501 | Anonymous_Gtid |         6 |         566 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql.000003 | 566 | Query          |         6 |         640 | BEGIN                                  |</span><br><span class="line">| mysql.000003 | 640 | Table_map      |         6 |         687 | table_id: 115 (binlog.t1)              |</span><br><span class="line">| mysql.000003 | 687 | Write_rows     |         6 |         727 | table_id: 115 flags: STMT_END_F        |</span><br><span class="line">| mysql.000003 | 727 | Xid            |         6 |         758 | COMMIT /* xid=23 */                    |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br></pre></td></tr></table></figure><p>查看文件内容前4条</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; show binlog events in &#x27;mysql.000003&#x27; limit 4;</span><br></pre></td></tr></table></figure><p>上述日志文件内容的标题字段说</p><ul><li><p>Log_name：binlog文件名</p></li><li><p>Pos：开始的position(位置)</p></li><li><p>Event_type：事件类型</p></li><li><p>Format_desc：格式描述，每一个日志文件的第一个事件，多用户没有意义，MySQL识别binlog必要信息</p></li><li><p>Server_id：mysql服务号标识</p></li><li><p>End_log_pos：事件的结束位置号</p></li><li><p>Info：事件内容</p></li></ul><h3 id="mysqlbinlog查看更详细的内容"><a href="#mysqlbinlog查看更详细的内容" class="headerlink" title="mysqlbinlog查看更详细的内容"></a>mysqlbinlog查看更详细的内容</h3><blockquote><p>PS：这里是相对路径，如果不在本路径，要使用绝对路径/data/binlog/mysql.000004</p></blockquote><p>直接查看所有内容，看到的都是二进制  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog mysql.000004 </span><br></pre></td></tr></table></figure><p>通过参数转换成可查看的语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --base64-output=decode-rows -vvv mysql.000004  //mysql翻译一些语句</span><br><span class="line">$ mysqlbinlog --base64-output=decode-rows -vvv mysql.000004 |grep -v &#x27;^SET&#x27;  //可以过滤掉开头SET命令，因为不是很重要</span><br></pre></td></tr></table></figure><p>只看binlog库中的二进制文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog -d binlog mysql.000004  </span><br></pre></td></tr></table></figure><p>使用时间来决定查看的内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --start-datetime=&#x27;2019-05-06 17:00:00&#x27; --stop-datetime=&#x27;2019-05-06 17:01:00&#x27;  /data/binlog/mysql-bin.000004 </span><br></pre></td></tr></table></figure><p>基于Position号进行日志截取</p><ul><li>参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--start-position=154  //开始</span><br><span class="line">--stop-position=513   //结束</span><br></pre></td></tr></table></figure><ul><li>使用命令将开始到结束的数据重定向到文件中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqlbinlog --start-position=154 --stop-position=513 /data/binlog/mysql.000004 &gt;/tmp/binlog.sql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat /tmp/binlog.sql |grep -v <span class="string">&#x27;^SET&#x27;</span></span></span><br></pre></td></tr></table></figure><h3 id="使用binlog日志进行数据恢复"><a href="#使用binlog日志进行数据恢复" class="headerlink" title="使用binlog日志进行数据恢复"></a>使用binlog日志进行数据恢复</h3><p>模拟数据，创建库和表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">haoge</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">boke</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br></pre></td></tr></table></figure><p>模拟故障，删除库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">database</span> <span class="selector-tag">boke</span>;</span><br></pre></td></tr></table></figure><p>分析和截取binlog</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line">&gt; show binlog events in &#x27;mysql.000004&#x27;;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br><span class="line">| Log_name     | Pos  | Event_type     | Server_id | End_log_pos | Info                                   |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br><span class="line">| mysql.000004 |  #566 | Query          |         6 |         660 | create database boke                   |</span><br><span class="line">| mysql.000004 |  660 | Anonymous_Gtid |         6 |         725 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql.000004 |  725 | Query          |         6 |         822 | use `boke`; create table t1(id int)    |</span><br><span class="line">| mysql.000004 |  822 | Anonymous_Gtid |         6 |         887 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">| mysql.000004 |  887 | Query          |         6 |         959 | BEGIN                                  |</span><br><span class="line">| mysql.000004 |  959 | Table_map      |         6 |        1004 | table_id: 109 (boke.t1)                |</span><br><span class="line">| mysql.000004 | 1004 | Write_rows     |         6 |        1044 | table_id: 109 flags: STMT_END_F        |</span><br><span class="line">| mysql.000004 | 1044 | Xid            |         6 |        #1075 | COMMIT /* xid=55 */                    |</span><br><span class="line">| mysql.000004 | 1075 | Anonymous_Gtid |         6 |        1140 | SET @@SESSION.GTID_NEXT= &#x27;ANONYMOUS&#x27;   |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------------------------------------</span>+</span><br></pre></td></tr></table></figure><p>找到起点和终点，进行截取</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --start-position=566 --stop-position=1075 /data/binlog/mysql.000004 &gt;/tmp/binlog.sql</span><br></pre></td></tr></table></figure><p>恢复数据，通过source方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; set sql_log_bin=0;       //临时关闭binlog的产生的新日志</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">binlog</span><span class="selector-class">.sql</span>   //导入数据</span><br><span class="line">&gt; set sql_log_bin=1；  </span><br></pre></td></tr></table></figure><h3 id="BinLog清理"><a href="#BinLog清理" class="headerlink" title="BinLog清理"></a>BinLog清理</h3><p>通过参数自动清理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@expire_logs_days</span>;</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| @@expire_logs_days |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">|                  0 |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><p>手工清理</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">purge</span></span><br><span class="line"><span class="selector-tag">Examples</span>:</span><br><span class="line">PURGE BINARY LOGS TO &#x27;mysql-bin.010&#x27;;</span><br><span class="line">PURGE BINARY LOGS BEFORE &#x27;2008-04-02 22:46:26&#x27;;</span><br></pre></td></tr></table></figure><p>全部清理，文件从1开始</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">reset</span> <span class="selector-tag">master</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br></pre></td></tr></table></figure><h2 id="BinLog日志的GTID新特性"><a href="#BinLog日志的GTID新特性" class="headerlink" title="BinLog日志的GTID新特性"></a>BinLog日志的GTID新特性</h2><p>GTID（Global Transaction ID）是对于一个已提交的事务做编号，并且是一个全局唯一的编码，GTID是在5.6版本新加的特性，不开启，5.7中的GTID，即使不开也会有自动生成</p><ul><li><p>DDL，DCL一个event就是一个事务，就会有一个GTID号</p></li><li><p>DML语句来讲，begin到commit，是一个事务</p></li><li><p>server-uuid:GTID</p></li><li><p>GTID是一个：自增长的数据，从1开始</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:1-15  </span><br></pre></td></tr></table></figure><p>查看当前的GTID</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@session</span>.gtid_next;</span><br><span class="line">+<span class="selector-tag">---------------------</span>+</span><br><span class="line">| @@session.gtid_next |</span><br><span class="line">+<span class="selector-tag">---------------------</span>+</span><br><span class="line">| AUTOMATIC           |</span><br><span class="line">+<span class="selector-tag">---------------------</span>+</span><br></pre></td></tr></table></figure><h3 id="GTID的配置"><a href="#GTID的配置" class="headerlink" title="GTID的配置"></a>GTID的配置</h3><p>开启GTID功能</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$vi /etc/my.cnf </span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=true</span><br><span class="line"></span><br><span class="line">$ systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>创建库和表，并GITD日志信息查看信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">gtid</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">gtid</span>;</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">t1</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">t1</span> <span class="selector-tag">values</span>(1);</span><br><span class="line">&gt; <span class="selector-tag">commit</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">master</span> <span class="selector-tag">status</span>;</span><br><span class="line">&gt; show binlog events in &#x27;mysql.000005&#x27;;</span><br></pre></td></tr></table></figure><h3 id="基于GTID，binlog恢复"><a href="#基于GTID，binlog恢复" class="headerlink" title="基于GTID，binlog恢复"></a>基于GTID，binlog恢复</h3><p>截取GTID日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/binlog/</span><br><span class="line">$ mysqlbinlog --include-gtids=&#x27;f4022bab-e9cf-11ea-aa7b-000c29ee0e5e:1-3&#x27; mysql.000005 &gt;/tmp/gtid.sql</span><br></pre></td></tr></table></figure><p>关闭日志记录，通过source恢复</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">gtid</span><span class="selector-class">.sql</span></span><br><span class="line">&gt; set sql_log_bin=1;</span><br></pre></td></tr></table></figure><p>但是出现了报错？为什么会报错，原因是MySQL的幂等性检查，如果事务1-3已经做过了，就不能再重复恢复，这是GTID的特性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1049 (42000): Unknown database &#x27;tiantian&#x27;4</span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.00 <span class="selector-tag">sec</span>)</span><br><span class="line"><span class="selector-tag">ERROR</span> 1046 (3<span class="selector-tag">D000</span>): <span class="selector-tag">No</span> <span class="selector-tag">database</span> <span class="selector-tag">selected</span></span><br><span class="line"><span class="selector-tag">Query</span> <span class="selector-tag">OK</span>, 0 <span class="selector-tag">rows</span> <span class="selector-tag">affected</span> (0.00 <span class="selector-tag">sec</span>)</span><br></pre></td></tr></table></figure><p>解决GTID的幂等问题，通过下述参数</p><ul><li>–skip-gtids  //跳过重复事务</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog --skip-gtids --include-gtids=&#x27;3ca79ab5-3e4d-11e9-a709-000c293b577e:4&#x27; mysql.000005 &gt;/tmp/gtid.sql</span><br><span class="line"></span><br><span class="line">&gt; set sql_log_bin=0;</span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">binlog</span><span class="selector-class">.sql</span></span><br><span class="line">&gt; set sql_log_bin=1;</span><br></pre></td></tr></table></figure><p>GTID的其他参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlbinlog | grep gtids</span><br><span class="line">                      <span class="selector-tag">with</span> <span class="selector-tag">--exclude-gtids</span>, <span class="selector-tag">transactions</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">filtered</span> <span class="selector-tag">out</span> <span class="selector-tag">on</span></span><br><span class="line">  <span class="selector-tag">--skip-gtids</span>        <span class="selector-tag">Do</span> <span class="selector-tag">not</span> <span class="selector-tag">preserve</span> <span class="selector-tag">Global</span> <span class="selector-tag">Transaction</span> <span class="selector-tag">Identifiers</span>; <span class="selector-tag">instead</span></span><br><span class="line">  --include-gtids=name    //包含</span><br><span class="line">  --exclude-gtids=name    //排除</span><br></pre></td></tr></table></figure><h2 id="慢日志"><a href="#慢日志" class="headerlink" title="慢日志"></a>慢日志</h2><h3 id="配置慢日志"><a href="#配置慢日志" class="headerlink" title="配置慢日志"></a>配置慢日志</h3><p>编辑配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/my.cnf</span><br><span class="line">slow_query_log=1               # 开启慢日志</span><br><span class="line">slow_query_log_file=/data/mysql/slow.log  # 文件日志位置</span><br><span class="line">long_query_time=0.1            # 设定慢查询时间</span><br><span class="line"><span class="selector-tag">log_queries_not_using_indexes</span>  # 没走索引的语句页记录</span><br></pre></td></tr></table></figure><h3 id="慢日志诊断"><a href="#慢日志诊断" class="headerlink" title="慢日志诊断"></a>慢日志诊断</h3><p>日志在系统层面其实所能做的工作实在有限，日志可以告诉MySQL层面资源问题，但无法告诉更多信息。而在MySQL的错误日志，当然也是有限的，如果出现了SQL性能问题的时候，错误日志的粒度无法探测到原因，所以分析问题是必要之路。这个可以体现在通用日志或慢日志层面</p><p>看慢日志的最终目的是解决存在和潜在的性能问题，如果问题没有发生，那就潜在问题，就需要通过慢日志查看哪些SQL的执行性能差。而SQL性能体现在于执行时间长、全表扫描、资源使用率高等几个问题，慢日志可以涵盖大多数。比如执行时间的问题，超越阈值就会几率，以及全表臊面的问题，如果没有走索引也会记录</p><p>慢日志的分析工具，下述列出一些：</p><ul><li>mysqldumpslow：原生的</li><li>mysqlsla：基于Perl</li><li>mysql-explain-slow-log：基于Perl</li><li>mysql-log-filter：基于python和php</li><li>pt-query-digest：基于perl</li></ul><p>执行SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from country;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from city;</span></span><br></pre></td></tr></table></figure><p>mysqldumpslow得到的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqldumpslow slow.log</span> </span><br><span class="line"></span><br><span class="line">Reading mysql slow query log from slow.log</span><br><span class="line">Count: 1  Time=0.12s (0s)  Lock=0.00s (0s)  Rows=239.0 (239), root[root]@localhost</span><br><span class="line">  select * from country</span><br><span class="line"></span><br><span class="line">Count: 1  Time=0.00s (0s)  Lock=0.00s (0s)  Rows=4079.0 (4079), root[root]@localhost</span><br><span class="line">  select * from city</span><br></pre></td></tr></table></figure><p>第三方工具下载[Percona][<a href="https://www.percona.com/downloads/percona-toolkit/LATEST/]">https://www.percona.com/downloads/percona-toolkit/LATEST/]</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest-MD5 perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://downloads.percona.com/downloads/percona-toolkit/3.3.1/binary/tarball/percona-toolkit-3.3.1_x86_64.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar xf percona-toolkit-3.3.1_x86_64.tar.gz -C /opt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/percona-toolkit-3.3.1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> perl Makefile.PL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>toolkit工具包中的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pt-query-diagest  /data/mysql/slow.log</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 180ms user time, 40ms system time, 25.84M rss, 220.27M vsz</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Current date: Sun May 16 06:57:55 2021</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Hostname: redis-2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Files: slow.log</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Overall: 5 total, 2 unique, 0.00 QPS, 0.00x concurrency ________________</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Time range: 2021-05-15T22:18:38 to 2021-05-15T22:57:52</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Attribute          total     min     max     avg     95%  stddev  median</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ============     ======= ======= ======= ======= ======= ======= =======</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Exec time          136ms     2ms   122ms    27ms   122ms    47ms     4ms</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lock time          797us   108us   190us   159us   185us    31us   176us</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Rows sent          8.67k     239   3.98k   1.73k   3.88k   1.79k  234.30</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Rows examine       8.67k     239   3.98k   1.73k   3.88k   1.79k  234.30</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Query size            99      18      21   19.80   20.43    1.36   20.43</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Rank Query ID                            Response time Calls R/Call V/M</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> ==== =================================== ============= ===== ====== ====</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    1 0x0650A9D6BB81D85C7726C04443A49C26   0.1267 93.5%     3 0.0422  0.08 SELECT country</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    2 0x07CF943F0508576D4A080191A8ED46CC   0.0088  6.5%     2 0.0044  0.00 SELECT city</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="慢日志故障处理"><a href="#慢日志故障处理" class="headerlink" title="慢日志故障处理"></a>慢日志故障处理</h3><p>如果发现慢日志很大，可以通过直接方法就是关闭慢日志，达到释放句柄的目的，然后在重新开启</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//先关闭慢日志在开启</span><br><span class="line">set global slow_query_log=off;</span><br><span class="line">set global slow_query_log=on;</span><br></pre></td></tr></table></figure><p>如果发现审计日志很大，可以通过以下方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global audit_log_flush=on;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis集群-6</title>
      <link href="2021/05/10/dis-%E9%9B%86%E7%BE%A4-6/"/>
      <url>2021/05/10/dis-%E9%9B%86%E7%BE%A4-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><h2 id="Redis单点存在的问题"><a href="#Redis单点存在的问题" class="headerlink" title="Redis单点存在的问题"></a>Redis单点存在的问题</h2><p>redis不仅可以做缓存，也可以做数据库，如果redis是单点会照成哪些问题呢？</p><ul><li>单点故障（节点宕了就得停止对线上提供服务，恢复时间慢）</li><li>容量有限（通过增加多个节点来分担缓存数据）</li><li>访问压力（redis的连接数是有限的，通过增加多个节点分担访问压力）</li></ul><blockquote><p>注意：主备与主从是两种不同的概念</p><ul><li>主备：客户端只能访问主，备节点只能等主宕机之后，变成主后才能进行访问（期间备节点只能充当备份）</li><li>主从：客户端两个都能访问，主节点可以对用户提供增删改，从节点可以对用户提供查询（分工合作）</li></ul></blockquote><h3 id="单点故障解决"><a href="#单点故障解决" class="headerlink" title="单点故障解决"></a>单点故障解决</h3><p>单点故障，我们可以通过AKF（X-Y-Z）的原则，AKF也可以说是微服务4个原则之中的一个，但并不仅限于微服务，对于数据库和redis都可以使用AKF原则</p><ul><li>X轴：做redis的主备，主做增删改，从只做读，解决单点问题和容量的问题（数据是全量、镜像的），也就是下图的X轴</li><li>Y轴：按功能业务存储不同的业务，一个redis变成多个实例，相当于MySQL的分库，还能做实例的备份，也就是下图的Y轴</li><li>Z轴： 解决单业务的数据增长问题，使用分片的模式，通过哈希、取模等方式进行分片。例如：用户信息、订单信息、商品信息等等数据量大的业务，也就是下图的Z轴</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210407221220732.png"></p><h2 id="Redis一致性问题"><a href="#Redis一致性问题" class="headerlink" title="Redis一致性问题"></a>Redis一致性问题</h2><p>上述通过AKF实现了一变多，解决单点故障、容量与压力问题。但这也会引出一个新的问题，那就是redis如何解决数据一致性，下述有三个方法解决</p><ul><li>强一致性（同步方式）</li><li>较强一致性（异步方式）</li><li>最终一致性（通过消息队列）</li></ul><h3 id="强一致性"><a href="#强一致性" class="headerlink" title="强一致性"></a>强一致性</h3><p>所有节点阻塞直到所有数据全部一致（强一致性），如果后端的从节点有问题，比如网络延时，丢包。那么可能会照成客户端获取不到数据或提交不了数据（客户端写的过程中可能会有一个超时时间，等待超时时间过了之后，后端的redis还没有写成功，那么返回给客户端的就是没有写成功）所以强一致性会有可能会破坏服务的可用性，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210407222340991.png"></p><h3 id="较强一致性"><a href="#较强一致性" class="headerlink" title="较强一致性"></a>较强一致性</h3><p>通过异步的方式同步数据，相当于降级，可以容忍数据丢失一部分。比如：主redis先回复，但从还没有同步完，主突然宕机了，就会造成数据的丢失，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210407222716421.png"></p><h3 id="最终一致性"><a href="#最终一致性" class="headerlink" title="最终一致性"></a>最终一致性</h3><p>redis通过中间件消息队列解决异步方式，让数据不丢失。客户端请求数据，主redis先将数据给到消息队列（如：kafka和zookeeper），然后再从kafka专递到从redis。期间主redis与kafka是同步阻塞的，因为是消息队列，所以可以非常的可靠、快速。如果消息中间件再搭上集群就会再多一分保障。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210407223155127.png"></p><h2 id="Redis主单点的问题"><a href="#Redis主单点的问题" class="headerlink" title="Redis主单点的问题"></a>Redis主单点的问题</h2><p>上述解决了单点问题与一致性的问题，但我们的主redis还是单点，如果主宕机了，还是需要人为去实时监控并启动，内部从节点宕了并不影响集群，所以说最主要的还是主节点。而人为去启动是靠谱的，但也不能及时的发现主节点是否宕机，加上宕机之后需要切换从节点变成主节点的时候还需要消耗，明显会影响线上的业务（造成数据的延时和丢失）</p><p>对于这个问题，就需要通过HA（高可用）的方式进行自动恢复故障了，用HA模式来来代替人进行切换的工作</p><p>那么如何自动故障转移，这个就得想想是人怎么监控服务的，比如：有三个监控脚本监控（这个监控，就是下述讲的Sentinel）着redis，但这三个监控脚本如何决定redis是否存活，是都同时给出NO，还是给出两个NO，才确定redis是宕机呢？下面给出三个方案</p><ul><li><p>给出3个NO，那么就是强一致性（上述有说，如果是强一致，那么就会破坏服务的可用性，redis必须等待接收到3个NO）</p></li><li><p>给出1个NO，统计可能不准确（因为中间可能会出现网络延迟或网络分区），也就是势力范围不够（数据会不一至）</p></li><li><p>给出2个NO，代表有双方是连接的，势力是达成一致（只要redis接收到两个NO，就代表redis已经不存活，这种选票方式是最有效的）</p></li></ul><blockquote><p>补充：有些数据可以是分区容忍性，就是投票并不需要两个达成一致，只要有一个是OK的就行（得看对数据的看法）。比如：不是数据全量的，只要能拿到一部分数据就可以的，那么就不用强调最终一致性或强一致性</p></blockquote><h2 id="什么是CAP原则"><a href="#什么是CAP原则" class="headerlink" title="什么是CAP原则"></a>什么是CAP原则</h2><p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency），可用性（Availability），分区容错性（Partition tolerance）。CAP原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾</p><p>分布式系统的节点往往都是分布在不同的机器上进行网络隔离开的，这显然会有网络端口的风险，而这个网段断开的专业词叫做“网络分区”</p><p>在网络分区发生时，两个分布式节点之间是无法进行通信，比如：主节点的修改操作将无法同步到从节点，所以会造成一致性的问题，如果要两个分布式节点数据保持一致，就必须牺牲可用性，也就是暂时停止对外服务，直到网络分区恢复后正常运行再对外提供服务（也就是强一致性），所以说CAP只能实现两点的原因</p><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>通过上述redis单点问题、一致性问题、主单点问题都有了对应的方法解决。相信大家现在对主从已经不陌生了，有了主从机制就有了一个保障，当主节点“Master”宕机时，运维可以让从节点“Slave”进行接管，使得可以继续的为用户提供服务。否则主节点重新启动加载数据会消耗时间长，影响线上的服务</p><p><strong>Redis使用默认的异步复制，其特点是低延迟和高性能</strong>，是绝大多数Redis用例的自然复制模式。但从Redis服务器会异步地确认其从主Redis服务器周期接收到的数据量</p><h3 id="增量同步"><a href="#增量同步" class="headerlink" title="增量同步"></a>增量同步</h3><p>Redis复制同步的是指令流，主节点会将那些对自己的状态产生修改性影响的指令记录在本地的内存buffer中，然后异步将buffer中的指令同步到从节点，从节点一边执行同步的指令流来达到和主节点一样的状态，还会向主节点反馈自己同步的偏移量</p><p>内存中的buffer是有限的，主节点不能将所有的指令都记录在内存buffer中，Redis的复制内存buffer是一个定长的环形数组，如果数组内容满了，就会从头开始覆盖前面的内容。buffer的大小可以通过参数repl-backlog-size来控制，默认是1mb，根据生产环境决定大小</p><p>如果网络出现问题，从节点无法在短时间内与主节点进行同步，之前在buffer中的指令可能就会被后续的指令覆盖掉，从节就无法直接通过指令流来进程同步，这个时候就需要使用——快照同步</p><h3 id="快照同步"><a href="#快照同步" class="headerlink" title="快照同步"></a>快照同步</h3><p>快照同步是非常耗资源的，相当于全量同步数据了。它首先需要在主节点上进行一次bgsave，将当前内存的数据全部快照到磁盘文件中，然后再将快照文件的内存全部传送到从节点。从节点将快照文件接收完毕后，立即执行一次全量加载，加载之前会先将当前内存的数据清空，加载完毕后通知主节点继续进行增量同步</p><p>在整个快照同步过程中，主节点的复制buffer还在不停地往前移动，如果快照同步的时间过长或者复制buffer太小，都会导致同步期间的增量指令在复制buffer中被覆盖。这样快照同步完成后无法进程增量负责，然后会再次发起快照同步，接着可能会陷入快照同步的死循环</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210411213203979.png"></p><h3 id="无盘复制"><a href="#无盘复制" class="headerlink" title="无盘复制"></a>无盘复制</h3><p>主节点在进行快照同步时，会很耗时的文件IO操作，在非SSD磁盘存储时，快照同步会对系统的负载产生较大影响。特别是在进行AOF的fsync操作时，如果发生快照同步，fsync将会被推迟执行，这会严重影响主节点的服务效率</p><p>从Redis2.8.18版本开始，Redis支持无盘复制，所谓无盘复制是指主服务器直接通过套接字将快照内容发送到从节点，生成快照是一个遍历的过程。主节点会一边遍历内容，一边将序列化的内容发送到从节点，从节点还是跟之前一样，先将接收到的内容存储到磁盘文件中，然后再一次性加载</p><h3 id="主从配置文件参数"><a href="#主从配置文件参数" class="headerlink" title="主从配置文件参数"></a>主从配置文件参数</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>replicaof <masterip> <masterport></td><td>配置文件加载主节点信息，随服务启动生效</td></tr><tr><td>masterauth <master-password><br>masteruser <username></td><td>对主从建立添加用户和密码认证</td></tr><tr><td>replica-serve-stale-data yes/no</td><td>从节点跟随主节点后，在同步过程中，是否可以让从节点的数据继续对外查询，yes就是支持，no就是要等同步完才能给与查询</td></tr><tr><td>replica-read-only yes</td><td>复制的节点是否使用只读模式</td></tr><tr><td>repl-diskless-sync no</td><td>启动无盘同步，生成通过套接字将RDB传输到副本的子代</td></tr><tr><td>repl-diskless-sync-delay 5</td><td>无盘同步延迟时间</td></tr><tr><td>repl-diskless-load</td><td>通过什么模式进行无盘加载，默认是disabled<br>disabled：不使用无盘加载（首先将rdb文件存储到磁盘）<br>on-empty-db：仅在完全安全的情况下使用无盘加载<br>swapdb：直接从socket解析数据时，将当前数据库内容的副本保留在RAM中（注意：这需要足够的内存，如果没有足够的内容，则可能会杀死OOM）</td></tr><tr><td>repl-backlog-size 1mb</td><td>增量复制，队列大小（根据生产环境决定）</td></tr><tr><td>repl-backlog-ttl 3600</td><td>主服务器在一段时间内没有连接副本后或是从节点断开后，通过设置的秒数对待办事项缓冲区进行释放</td></tr><tr><td>min-replicas-to-write 3</td><td>同步过程中，副本最少中有几个写成功（默认是不开启，如果开启，就有点强一致性，需要做取舍）</td></tr><tr><td>min-replicas-max-lag 10</td><td>同步过程中，副本中最大延迟，默认不开启，开启则为10s</td></tr></tbody></table><h3 id="wait指令"><a href="#wait指令" class="headerlink" title="wait指令"></a>wait指令</h3><p>Redis的复制是异步进行，wait指令可以让异步复制变成同步复制，确保系统的强一致性（但会失去可用性）。wait指令是Redis3.0版本以后才出现的</p><p>指令示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">wait</span> 1 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>wait提供两个参数，第一个是从节点的<strong>数量N</strong>，第二个参数是<strong>时间t</strong>，以毫秒为单位。两个参数的含义是：等待wait指令之前的所有写操作同步到N个从节点（也就是确保N个从节点的同步没有滞后），最多等待时间t。如果时间t=0，表示无限等待直到N个从节点同步完成</p><p>如果出现了网络分区，wait指令第二个参数时间t=0，主从同步无法继续进行，wait指令会永久阻塞，Redis就会失去可用性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">wait</span> 1 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="主从示例"><a href="#主从示例" class="headerlink" title="主从示例"></a>主从示例</h3><p>规划我们的目录文件，规划的目录可以自己规划，也可以根据我发布的的redis-安装文章进行规划，下述通过脚本进行创建目录规划</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/redis-6.0.6/utils</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./install_server.sh</span> </span><br><span class="line">Welcome to the redis service installer</span><br><span class="line">This script will help you easily set up a running redis server</span><br><span class="line"></span><br><span class="line">Please select the redis port for this instance: [6379] </span><br><span class="line">Selecting default: 6379</span><br><span class="line">Please select the redis config file name [/etc/redis/6379.conf] /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span><br><span class="line">Please select the redis log file name [/var/log/redis_6379.log] /opt/redis_cluster/redis_6379/logs/redis_6379.log           </span><br><span class="line">Please select the data directory for this instance [/var/lib/redis/6379] /data/redis_cluster/redis_6379</span><br><span class="line">Please select the redis executable path [/usr/local/bin/redis-server] </span><br><span class="line">Selected config:</span><br><span class="line">......................省略.............................</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir pid &amp;&amp; <span class="built_in">cd</span> pid &amp;&amp; touch redis_6379.pid  //创建pid文件</span></span><br></pre></td></tr></table></figure><p>规划好的目录是这样的，通过tree进行查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/redis_cluster/</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── <span class="selector-tag">redis_6379</span></span><br><span class="line">│   ├── <span class="selector-tag">conf</span></span><br><span class="line">│   │   └── <span class="selector-tag">redis_6379</span><span class="selector-class">.conf</span></span><br><span class="line">│   ├── <span class="selector-tag">logs</span></span><br><span class="line">│   │   └── <span class="selector-tag">redis_6379</span><span class="selector-class">.log</span></span><br><span class="line">│   └── <span class="selector-tag">pid</span></span><br><span class="line">│       └── <span class="selector-tag">redis_6379</span><span class="selector-class">.pid</span></span><br><span class="line">├── <span class="selector-tag">redis_6380</span></span><br><span class="line">│   ├── <span class="selector-tag">conf</span></span><br><span class="line">│   │   └── <span class="selector-tag">redis_6380</span><span class="selector-class">.conf</span></span><br><span class="line">│   ├── <span class="selector-tag">logs</span></span><br><span class="line">│   │   └── <span class="selector-tag">redis_6380</span><span class="selector-class">.log</span></span><br><span class="line">│   └── <span class="selector-tag">pid</span></span><br><span class="line">│       └── <span class="selector-tag">redis_6380</span><span class="selector-class">.pid</span></span><br><span class="line">└── <span class="selector-tag">redis_6381</span></span><br><span class="line">    ├── <span class="selector-tag">conf</span></span><br><span class="line">    │   └── <span class="selector-tag">redis_6381</span><span class="selector-class">.conf</span></span><br><span class="line">    ├── <span class="selector-tag">logs</span></span><br><span class="line">    │   └── <span class="selector-tag">redis_6381</span><span class="selector-class">.log</span></span><br><span class="line">    └── <span class="selector-tag">pid</span></span><br><span class="line">        └── <span class="selector-tag">redis_6381</span><span class="selector-class">.pid</span></span><br></pre></td></tr></table></figure><p>上述的脚本运行完之后，会帮我们启动redis，我们需要修改编写每个进程的配置文件（6380,6381配置除了端口、pid、日志，数据目录其他根6379一致）,</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt/redis_cluster/redis_6379/conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim redis_6379.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 不以守护进程方式启动，方便通过实验对日志分析</span></span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 绑定的主机地址</span></span></span><br><span class="line">bind 127.0.0.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 监听端口</span></span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## pid文件和log文件的保存路径</span></span></span><br><span class="line">pidfile /opt/redis_cluster/redis_6379/pid/redis_6379.pid</span><br><span class="line"><span class="meta">#</span><span class="bash"> logfile /opt/redis_cluster/redis_6379/logs/redis_6379.log   //该日志直接输出屏幕，不写入文件，方面实验分析</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 设置数据库的数量，默认数据库为0</span></span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 指定本地持久化文件的文件名，默认是dump.rdb</span></span></span><br><span class="line">dbfilename redis_6379.rdb</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 本地数据库的目录</span></span></span><br><span class="line">dir /data/redis_cluster/redis_6379</span><br></pre></td></tr></table></figure><p>修改完配置文件后，重新启动redis实例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pkill redis</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf </span><br></pre></td></tr></table></figure><h4 id="建立复制"><a href="#建立复制" class="headerlink" title="建立复制"></a>建立复制</h4><p>配置主从复制的方式有三种</p><ul><li>配置文件中加入replicaof <masterip> <masterport>随redis启动生效</li><li>在redis-server启动命令加入 –replicaof <masterip> <masterport>启动生效</li><li>进入redis，直接使用命令：–replicaof <masterip> <masterport></li></ul><blockquote><p><strong>注意：replicaof是从5.0版本开始使用的复制参数，在5.0以前使用的是slaveof</strong></p></blockquote><p>建立主从关系，主6379，从6380和6381</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p <span class="number">6380</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6381</span>&gt; REPLICAOF <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">$ redis-cli -p <span class="number">6381</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6381</span>&gt; REPLICAOF <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查看从节点的配置文件，可以看出已经同步完成</span></span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.904</span> * Full resync <span class="keyword">from</span> master: a42c2d2f7bba58efd17dd2736cb41c3040a7b5a6:<span class="number">0</span></span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.904</span> * Discarding previously cached master state.</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.904</span> * MASTER &lt;-&gt; REPLICA sync: receiving <span class="number">175</span> bytes <span class="keyword">from</span> master to disk</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.904</span> * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.905</span> * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.905</span> * Loading RDB produced by version <span class="number">6.0</span><span class="number">.6</span></span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.905</span> * RDB age <span class="number">0</span> seconds</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.905</span> * RDB memory usage when created <span class="number">1.85</span> Mb</span><br><span class="line"><span class="number">2632</span>:S <span class="number">08</span> Apr <span class="number">2021</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">04.905</span> * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br></pre></td></tr></table></figure><blockquote><p>注意：建立复制之后，只有主节点才能进行写入，从节点只能读（当前也可以通过配置文件进行配置，这是默认情况下）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//主</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//从</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica. </span><br></pre></td></tr></table></figure></blockquote><h4 id="关闭复制"><a href="#关闭复制" class="headerlink" title="关闭复制"></a>关闭复制</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1<span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">REPLICAOF</span> <span class="selector-tag">no</span>  <span class="selector-tag">one</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//查看主日志，会发现连接的主机6380已经丢失</span><br><span class="line">2611<span class="selector-pseudo">:M</span> 08 <span class="selector-tag">Apr</span> 2021 12<span class="selector-pseudo">:16</span><span class="selector-pseudo">:44.839</span> # <span class="selector-tag">Connection</span> <span class="selector-tag">with</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:6380</span> <span class="selector-tag">lost</span>.</span><br></pre></td></tr></table></figure><h4 id="增量复制"><a href="#增量复制" class="headerlink" title="增量复制"></a>增量复制</h4><p>首先在主从已经同步，从已经同步过主，并且有了主的数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//主</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//从</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k1</span>&quot;</span><br></pre></td></tr></table></figure><p>然后从宕机了，主库还继续写着数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//从</span><br><span class="line">$ redis-cli -p 6381 shutdown</span><br><span class="line"></span><br><span class="line">//主</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><p>从库通过–replicaof参数进行增量备份，在重新查看数据，会增加主写入的数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf --replicaof 127.0.0.1 6379</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;<span class="selector-tag">k4</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">k2</span>&quot;</span><br></pre></td></tr></table></figure><p>查看主日志文件，可以发现是通过偏移量的形式进行写入从节点的的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2781<span class="selector-pseudo">:M</span> 08 <span class="selector-tag">Apr</span> 2021 12<span class="selector-pseudo">:38</span><span class="selector-pseudo">:48.069</span> * <span class="selector-tag">Replica</span> 127.0.0.1<span class="selector-pseudo">:6381</span> <span class="selector-tag">asks</span> <span class="selector-tag">for</span> <span class="selector-tag">synchronization</span></span><br><span class="line">2781<span class="selector-pseudo">:M</span> 08 <span class="selector-tag">Apr</span> 2021 12<span class="selector-pseudo">:38</span><span class="selector-pseudo">:48.069</span> * <span class="selector-tag">Partial</span> <span class="selector-tag">resynchronization</span> <span class="selector-tag">request</span> <span class="selector-tag">from</span> 127.0.0.1<span class="selector-pseudo">:6381</span> <span class="selector-tag">accepted</span>. <span class="selector-tag">Sending</span> 886 <span class="selector-tag">bytes</span> <span class="selector-tag">of</span> <span class="selector-tag">backlog</span> <span class="selector-tag">starting</span> <span class="selector-tag">from</span> <span class="selector-tag">offset</span> 647.</span><br></pre></td></tr></table></figure><blockquote><p>注：如果是将从节点的数据文件删除，那依然也是使用增量的方式，从库宕机的时间，主库还持续增加写入，同步的过程中并不会只增加（时间段）写的数据，而统一同步全部数据。</p></blockquote><h4 id="全量复制（AOF）"><a href="#全量复制（AOF）" class="headerlink" title="全量复制（AOF）"></a>全量复制（AOF）</h4><p>通过增加参数–appendonly yes，开始AOF日志模式的复制</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf --replicaof 10.0.0.50 6379 --appendonly yes</span><br></pre></td></tr></table></figure><p>查看主节点的日志</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.667</span> * <span class="selector-tag">Replica</span> 127.0.0.1<span class="selector-pseudo">:6380</span> <span class="selector-tag">asks</span> <span class="selector-tag">for</span> <span class="selector-tag">synchronization</span></span><br><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.667</span> * <span class="selector-tag">Full</span> <span class="selector-tag">resync</span> <span class="selector-tag">requested</span> <span class="selector-tag">by</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:6380</span></span><br><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.667</span> * <span class="selector-tag">Starting</span> <span class="selector-tag">BGSAVE</span> <span class="selector-tag">for</span> <span class="selector-tag">SYNC</span> <span class="selector-tag">with</span> <span class="selector-tag">target</span>: <span class="selector-tag">disk</span>   </span><br><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.669</span> * <span class="selector-tag">Background</span> <span class="selector-tag">saving</span> <span class="selector-tag">started</span> <span class="selector-tag">by</span> <span class="selector-tag">pid</span> 28879</span><br><span class="line">28879<span class="selector-pseudo">:C</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.673</span> * <span class="selector-tag">DB</span> <span class="selector-tag">saved</span> <span class="selector-tag">on</span> <span class="selector-tag">disk</span></span><br><span class="line">28879<span class="selector-pseudo">:C</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.674</span> * <span class="selector-tag">RDB</span>: 4 <span class="selector-tag">MB</span> <span class="selector-tag">of</span> <span class="selector-tag">memory</span> <span class="selector-tag">used</span> <span class="selector-tag">by</span> <span class="selector-tag">copy-on-write</span></span><br><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.770</span> * <span class="selector-tag">Background</span> <span class="selector-tag">saving</span> <span class="selector-tag">terminated</span> <span class="selector-tag">with</span> <span class="selector-tag">success</span></span><br><span class="line">26691<span class="selector-pseudo">:M</span> 11 <span class="selector-tag">Apr</span> 2021 21<span class="selector-pseudo">:40</span><span class="selector-pseudo">:41.771</span> * <span class="selector-tag">Synchronization</span> <span class="selector-tag">with</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:6380</span> <span class="selector-tag">succeeded</span></span><br></pre></td></tr></table></figure><h2 id="Sentinel（哨兵）"><a href="#Sentinel（哨兵）" class="headerlink" title="Sentinel（哨兵）"></a>Sentinel（哨兵）</h2><p>通过主从的方式已经可以解决了单点故障问题，包括容量和压力。但是有没有想过，如果在凌晨2点钟出现了故障（主宕机了），那么就需要人起床手工的去对主从的故障转移，这样的人工方式，显然效率会很低。所以出现了高可用的方式（HA）代替人工自动故障转移，Redis官方提供的方案就是——Redis Sentinel（哨兵）</p><p>Sentinel可以看做是对集群高可用的心脏，一般由3 ~ 5个节点组成，主节点挂了，集群也还可以继续正常运转</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210412005505181.png"></p><p>Sentinel负责持续监控主从节点的健康，当主节点宕机是，会自动投票选择一个最优的从节点切换成主节点。</p><p>客户端连接集群，会首先连接Sentinel，通过Sentinel来查询主节点的地址，然后再连接主节点进行交互数据。当主节点故障时，客户端会重新向Sentinel询要地址，Sentinel会将最新的主节点地址告诉客户端，进而无序重启即可自动完成故障转移的节点切换，如下图：主节点宕机后，集群自动转移</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210412010401047.png"></p><p>从图可以看出，如果主节点down了，之前的主从负责也断开，客户端和损坏的主节点也断开。一个从节点被转换为新的主节点，其他从节点开始和新的主节点建立复制关系。客户端通过新的主节点进行继续交互，Sentinel继续监控已经down的主节点，待恢复后，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210412010655821.png"></p><h3 id="Sentinel主要功能"><a href="#Sentinel主要功能" class="headerlink" title="Sentinel主要功能"></a>Sentinel主要功能</h3><ul><li><p>监控（Monitoring）</p><p>Sentinel会不断地定期检查你的主服务器和从服务器是否运行正常</p></li><li><p>提醒（Notification）</p><p> 当被监控的某个redis服务器出现问题时，Sentinel可以通过API将管理员或者其他应用程序发送通知</p></li><li><p>自动故障迁移</p><p>当一个主服务器不能正常工作时，Sentinel会开始一次自动故障迁移操作，它会将失效主服务器的其中一个从服务器升级为新的主服务器，并让失效主服务器的ITA从服务器改为复制新的主服务器；当客户端试图连接失效的主服务器时，Sentinel也会向客户端返回新主服务器的地址，使得可以使用新主服务器代替失效服务器</p></li></ul><h3 id="Sentinel配置文件参数"><a href="#Sentinel配置文件参数" class="headerlink" title="Sentinel配置文件参数"></a>Sentinel配置文件参数</h3><p>Sentinel的配置文件，在源码包中有一个sentinel.conf，可以根据里面的参数进行编写配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/redis-6.0.6</span><br><span class="line">$ ll sentinel.conf</span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 10743 <span class="selector-tag">Jul</span> 21  2020 <span class="selector-tag">sentinel</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>下面列出一些Sentinel常用的配置参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pidfile /var/run/redis-sentinel.pid</td><td>Sentinel运行的进行PID</td></tr><tr><td>port 26379</td><td>Sentinel使用的端口</td></tr><tr><td>daemonize no</td><td>是否在后台运行</td></tr><tr><td>logfile “”</td><td>Sentinel的日志路径</td></tr><tr><td>dir /tmp</td><td>Sentinel的数据路径</td></tr><tr><td>sentinel monitor mymaster 127.0.0.1 6379 2</td><td>mymaster（主节点别名）、主节点IP和端口，2（判断节点的势力，需两个Sentinel节点统一）</td></tr><tr><td>sentinel down-after-milliseconds <master-name> <milliseconds></td><td>选定sentinel认为服务器已经宕机的所需毫秒数</td></tr><tr><td>sentinel parallel-syncs <master-name> <numreplicas></td><td>向新的节点发起复制操作的从节点个数，1为轮询发起复制</td></tr><tr><td>sentinel failover-timeout <master-name> <milliseconds></td><td>故障转移超时时间，默认为3秒</td></tr></tbody></table><h3 id="Sentinel集群搭建"><a href="#Sentinel集群搭建" class="headerlink" title="Sentinel集群搭建"></a>Sentinel集群搭建</h3><h4 id="配置主从关系"><a href="#配置主从关系" class="headerlink" title="配置主从关系"></a>配置主从关系</h4><p>启动6379、80和81三个实例，并设置6389为主，其他节点为从主机</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ pkill redis</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf </span><br><span class="line"></span><br><span class="line">$ redis-cli -p 6380</span><br><span class="line">&gt; <span class="selector-tag">REPLICAOF</span> 127.0.0.1 6379</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">$ redis-cli -p 6381</span><br><span class="line">&gt; <span class="selector-tag">REPLICAOF</span> 127.0.0.1 6379</span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><h4 id="配置sentinel节点"><a href="#配置sentinel节点" class="headerlink" title="配置sentinel节点"></a>配置sentinel节点</h4><p>创建三个sentinel节点，分别为26379、80和81，然后编写配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/redis_cluster/</span><br><span class="line">$ mkdir sentinel &amp;&amp; cd sentinel/</span><br><span class="line">$ touch 26379.conf </span><br><span class="line">$ vi 26379.conf                     //80和81的配置是一样的，只是端口需要改变</span><br><span class="line"><span class="selector-tag">port</span> 26379</span><br><span class="line"><span class="selector-tag">sentinel</span> <span class="selector-tag">monitor</span> <span class="selector-tag">mymaster</span> 10.0.0.40 6379 2</span><br></pre></td></tr></table></figure><p>sentinel有两种不同命令的启动方式</p><ul><li><p>通过redis-server命令启动，但是需要加参数–sentinel</p></li><li><p>通过redis-sentinel命令启动，就不需要添加，可以查看源码的src下的执行命令，会发现redis-sentinel是redis-server的软连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ll</span> <span class="selector-tag">redis-</span>*</span><br><span class="line"><span class="selector-tag">lrwxrwxrwx</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>      12 <span class="selector-tag">Mar</span> 27 21<span class="selector-pseudo">:23</span> <span class="selector-tag">redis-sentinel</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">redis-server</span></span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 2 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 9033504 <span class="selector-tag">Mar</span> 27 21<span class="selector-pseudo">:23</span> <span class="selector-tag">redis-server</span></span><br></pre></td></tr></table></figure><p>启动sentinel节点，并查看输出日志分析</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /opt/redis_cluster/sentinel/26379.conf --sentinel </span><br><span class="line">//输出的日志，会发现只监控6379，会将其他从节点一起监控</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 14 <span class="selector-tag">Apr</span> 2021 23<span class="selector-pseudo">:39</span><span class="selector-pseudo">:45.564</span> # <span class="selector-tag">Sentinel</span> <span class="selector-tag">ID</span> <span class="selector-tag">is</span> <span class="selector-tag">dd03e8536ed70d017cb50b930396aa9146566a72</span></span><br><span class="line">78253<span class="selector-pseudo">:X</span> 14 <span class="selector-tag">Apr</span> 2021 23<span class="selector-pseudo">:39</span><span class="selector-pseudo">:45.564</span> # +<span class="selector-tag">monitor</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379 <span class="selector-tag">quorum</span> 2</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 14 <span class="selector-tag">Apr</span> 2021 23<span class="selector-pseudo">:39</span><span class="selector-pseudo">:45.566</span> * +<span class="selector-tag">slave</span> <span class="selector-tag">slave</span> 127.0.0.1<span class="selector-pseudo">:6380</span> 127.0.0.1 6380 @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">39</span>:<span class="number">45.569</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">//接着启动剩下的两个sentinel，并查看<span class="number">26381</span>日志，会发现，三个sentinel已经全部监控上节点</span><br><span class="line">$ redis-server /opt/redis_cluster/sentinel/<span class="number">26380</span>.conf --sentinel     </span><br><span class="line">$ redis-server /opt/redis_cluster/sentinel/<span class="number">26381</span>.conf --sentinel </span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">09.666</span> # Sentinel ID is <span class="number">1268</span>bda31eea1b390644b6563f8353189dcff4a3</span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">09.666</span> # +monitor master mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> quorum <span class="number">2</span></span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">09.667</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">09.715</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">10.557</span> * +sentinel sentinel dd03e8536ed70d017cb50b930396aa9146566a72 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">26379</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78271</span>:X <span class="number">14</span> Apr <span class="number">2021</span> <span class="number">23</span>:<span class="number">42</span>:<span class="number">10.568</span> * +sentinel sentinel d5a7199dd81724c944309bfde7de0505daa90167 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">26380</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h4 id="查看sentinel信息"><a href="#查看sentinel信息" class="headerlink" title="查看sentinel信息"></a>查看sentinel信息</h4><p>查看26379配置文件情况，也会发现，所有的主从节点和sentinel已经添加到了配置文件（26380与26381也一样）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/sentinel/23769.conf </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">port</span> 26379</span><br><span class="line"><span class="selector-tag">sentinel</span> <span class="selector-tag">myid</span> <span class="selector-tag">dd03e8536ed70d017cb50b930396aa9146566a72</span></span><br><span class="line"># <span class="selector-tag">Generated</span> <span class="selector-tag">by</span> <span class="selector-tag">CONFIG</span> <span class="selector-tag">REWRITE</span></span><br><span class="line"><span class="selector-tag">protected-mode</span> <span class="selector-tag">no</span></span><br><span class="line"><span class="selector-tag">user</span> <span class="selector-tag">default</span> <span class="selector-tag">on</span> <span class="selector-tag">nopass</span> ~* +<span class="keyword">@all</span></span><br><span class="line">dir <span class="string">&quot;/opt/redis_cluster/sentinel&quot;</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line">sentinel monitor mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">2</span></span><br><span class="line">sentinel config-epoch mymaster <span class="number">0</span></span><br><span class="line">sentinel leader-epoch mymaster <span class="number">0</span></span><br><span class="line">sentinel known-replica mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span></span><br><span class="line">sentinel known-replica mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span></span><br><span class="line">sentinel known-sentinel mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">26381</span> <span class="number">1268</span>bda31eea1b390644b6563f8353189dcff4a3</span><br><span class="line">sentinel known-sentinel mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">26380</span> d5a7199dd81724c944309bfde7de0505daa90167</span><br><span class="line">sentinel current-epoch <span class="number">0</span></span><br></pre></td></tr></table></figure><p>还可以登录sentinel节点，查看信息，得到主节点是6379，有2个从主机，sentinel3个</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 26379</span><br><span class="line">&gt; <span class="selector-tag">info</span> <span class="selector-tag">sentinel</span></span><br><span class="line"># <span class="selector-tag">Sentinel</span></span><br><span class="line"><span class="selector-tag">sentinel_masters</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">sentinel_tilt</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_running_scripts</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_scripts_queue_length</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_simulate_failure_flags</span><span class="selector-pseudo">:0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><p>下述是sentinel查看命令总结</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>sentinel masters <master name></td><td>获取主库详细信息</td></tr><tr><td>sentinel slaves <master name></td><td>获取从库详细信息</td></tr><tr><td>sentinel sentinels <master name></td><td>获取那个主库详细信息</td></tr><tr><td>sentinel get-master-addr-by-name <master name></td><td>获取主节点ip和端口</td></tr><tr><td>sentinel flushconfig</td><td>刷新配置文件</td></tr><tr><td>sentinel failover <master name></td><td>故障转移（慎用）</td></tr></tbody></table><p>通过sentinel failover <master name> ，会自动转移主节点，下述的主已经变成了6380，所以要小心使用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sentinel failover mymaster</span><br><span class="line">&gt; <span class="selector-tag">info</span> <span class="selector-tag">sentinel</span></span><br><span class="line"># <span class="selector-tag">Sentinel</span></span><br><span class="line"><span class="selector-tag">sentinel_masters</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">sentinel_tilt</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_running_scripts</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_scripts_queue_length</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_simulate_failure_flags</span><span class="selector-pseudo">:0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6380,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><p>sentinel节点从建立起来之后，会一直发送心跳的信息，可以通过消息订阅的命令进行查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">PSUBSCRIBE</span> *</span><br><span class="line"><span class="selector-tag">Reading</span> <span class="selector-tag">messages</span>... (<span class="selector-tag">press</span> <span class="selector-tag">Ctrl-C</span> <span class="selector-tag">to</span> <span class="selector-tag">quit</span>)</span><br><span class="line">1) &quot;<span class="selector-tag">psubscribe</span>&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">1) &quot;<span class="selector-tag">pmessage</span>&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;__<span class="selector-tag">sentinel__</span><span class="selector-pseudo">:hello&quot;</span></span><br><span class="line">4) &quot;127.0.0.1,26380,<span class="selector-tag">d5a7199dd81724c944309bfde7de0505daa90167</span>,1,<span class="selector-tag">mymaster</span>,127.0.0.1,6380,1&quot;</span><br><span class="line">1) &quot;<span class="selector-tag">pmessage</span>&quot;</span><br><span class="line">2) &quot;*&quot;</span><br><span class="line">3) &quot;__<span class="selector-tag">sentinel__</span><span class="selector-pseudo">:hello&quot;</span></span><br><span class="line">4) &quot;127.0.0.1,26380,<span class="selector-tag">d5a7199dd81724c944309bfde7de0505daa90167</span>,1,<span class="selector-tag">mymaster</span>,127.0.0.1,6380,1&quot;</span><br><span class="line">1) &quot;<span class="selector-tag">pmessage</span>&quot;</span><br><span class="line">2) &quot;*&quot;</span><br></pre></td></tr></table></figure><h3 id="Sentinel故障转移"><a href="#Sentinel故障转移" class="headerlink" title="Sentinel故障转移"></a>Sentinel故障转移</h3><p>模拟主节点突然宕机，然后观察Sentinel节点选主的情况（宕机之后需要3秒钟，sentinel才会故障转移）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6379 shutdown</span><br></pre></td></tr></table></figure><p>查看sentinel节点的日志，可以发现查看这条信息（+switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380 ），主节点已经转移给了6380</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:24.986</span> # +<span class="selector-tag">sdown</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.048</span> # +<span class="selector-tag">odown</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379 <span class="selector-id">#quorum</span> 2/2</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.048</span> # +<span class="selector-tag">new-epoch</span> 3</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.048</span> # +<span class="selector-tag">try-failover</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.053</span> # +<span class="selector-tag">vote-for-leader</span> <span class="selector-tag">dd03e8536ed70d017cb50b930396aa9146566a72</span> 3</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.071</span> # <span class="selector-tag">d5a7199dd81724c944309bfde7de0505daa90167</span> <span class="selector-tag">voted</span> <span class="selector-tag">for</span> <span class="selector-tag">dd03e8536ed70d017cb50b930396aa9146566a72</span> 3</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.077</span> # 1268<span class="selector-tag">bda31eea1b390644b6563f8353189dcff4a3</span> <span class="selector-tag">voted</span> <span class="selector-tag">for</span> <span class="selector-tag">dd03e8536ed70d017cb50b930396aa9146566a72</span> 3</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.106</span> # +<span class="selector-tag">elected-leader</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.106</span> # +<span class="selector-tag">failover-state-select-slave</span> <span class="selector-tag">master</span> <span class="selector-tag">mymaster</span> 127.0.0.1 6379</span><br><span class="line">78253<span class="selector-pseudo">:X</span> 15 <span class="selector-tag">Apr</span> 2021 00<span class="selector-pseudo">:15</span><span class="selector-pseudo">:25.165</span> # +<span class="selector-tag">selected-slave</span> <span class="selector-tag">slave</span> 127.0.0.1<span class="selector-pseudo">:6380</span> 127.0.0.1 6380 @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.165</span> * +failover-state-send-slaveof-noone slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.266</span> * +failover-state-wait-promotion slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.366</span> # +promoted-slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6380</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.366</span> # +failover-state-reconf-slaves master mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.443</span> * +slave-reconf-sent slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">25.765</span> * +slave-reconf-inprog slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.153</span> # -odown master mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.799</span> * +slave-reconf-done slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.861</span> # +failover-end master mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.861</span> # +switch-master mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span>     //转换的主节点，<span class="number">6379</span>变成<span class="number">6380</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.861</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6381</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6381</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">26.862</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span></span><br><span class="line"><span class="number">78253</span>:X <span class="number">15</span> Apr <span class="number">2021</span> <span class="number">00</span>:<span class="number">15</span>:<span class="number">56.925</span> # +sdown slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6379</span> @ mymaster <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">6380</span></span><br></pre></td></tr></table></figure><p>也可以登录sentinel节点查看主节点信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 26379</span><br><span class="line">&gt; <span class="selector-tag">sentinel</span> <span class="selector-tag">get-master-addr-by-name</span> <span class="selector-tag">mymaster</span></span><br><span class="line">1) &quot;127.0.0.1&quot;</span><br><span class="line">2) &quot;6380&quot;</span><br></pre></td></tr></table></figure><h3 id="Sentinel配置优先级"><a href="#Sentinel配置优先级" class="headerlink" title="Sentinel配置优先级"></a>Sentinel配置优先级</h3><p>redis sentinel存在多个从节点时，如果想将指定的从节点晋升为主节点，可以将其他从节点slaver priority配置为0，但是需要注意failover后，将slave-priority调回原值（优先级越高越优先）</p><p>操作过程如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6379  </span><br><span class="line">&gt; <span class="selector-tag">CONFIG</span> <span class="selector-tag">GET</span> <span class="selector-tag">slave-priority</span></span><br><span class="line">1) &quot;<span class="selector-tag">slave-priority</span>&quot;</span><br><span class="line">2) &quot;100&quot;</span><br><span class="line">    </span><br><span class="line">$ redis-cli -h redis-41 6379 CONFIG SET slave-priority 0</span><br><span class="line">$ redis-cli -h redis-42 6379 CONFIG SET slave-priority 0</span><br></pre></td></tr></table></figure><p>通过sentinel命令主动切换，并查新查看主从信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 26379</span><br><span class="line">&gt; <span class="selector-tag">sentinel</span> <span class="selector-tag">failover</span> <span class="selector-tag">mymaster</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">info</span> <span class="selector-tag">sentinel</span></span><br><span class="line"># <span class="selector-tag">Sentinel</span></span><br><span class="line"><span class="selector-tag">sentinel_masters</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">sentinel_tilt</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_running_scripts</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_scripts_queue_length</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sentinel_simulate_failure_flags</span><span class="selector-pseudo">:0</span></span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><h2 id="Redis集群分片模式"><a href="#Redis集群分片模式" class="headerlink" title="Redis集群分片模式"></a>Redis集群分片模式</h2><p>Redis集群数据分片有很多种，如在客户端对业务进行拆分、hash+取模、random，一致性的hash等等，但要认清redis在架构中的位置，在这些功能中<strong>增删会照成时点的丢失</strong>，所以是不能通过这些方法来实现分布式数据库，而只能作为缓存使用，下述是四个不同分区方法</p><ul><li>client融于一部分逻辑代码，实现业务拆分，根据不同的业务访问redis示例</li><li>client按算法拆分，通过hash+取模（modula）的方式，对每台redis进行分区</li><li>client按算法拆份，通过random的方式，随机对每台redis进行分区</li><li>client按算法拆分，通过ketama（一致性hash）的方式，对每台redis进行分区（推荐使用）</li></ul><blockquote><p>PS：这里的客户端是使用的工具，如：redis cluster、twemproxy、predixy等</p></blockquote><h3 id="client业务拆份"><a href="#client业务拆份" class="headerlink" title="client业务拆份"></a>client业务拆份</h3><p>client融于一部分逻辑代码，通过业务进行拆分，根据不同的业务访问的redis实例。对于redis实例互相之间无感知的，所有数据到来都是连接通过client，然后由client连接redis，并分发获取的写或读值交给后端的redis。虽然这种方法可以分类，但是交集数据不多，因为每个实例都是按业务分开的</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510151135416.png" alt="image-20210510151135416"></p><p>而且client连接成本很高，对redis会照成一定的性能影响（网络I/O多），如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418204249667.png"></p><p>那如何解决这个问题，可以使用nginx方法，做一个反向代理，这个时候的连接压力就没有那么大，而且只需要关注proxy的性能就行了。如果后续的并发量增大，可以做proxy的负载均衡（但也将client的逻辑实现，迁移到了由proxy实现，实现可以有modula、random、ketama的三种算法）。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418205008445.png"></p><p>或者通过LVS的四层转发，只需要让客户端访问一个IP地址，使用keepalived做高可用，也可以监控nginx（proxy）的健康值，接收的连接由LVS接收丢给nginx，接着nginx分发给后端的redis处理</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418235511356.png"></p><h3 id="client的hash-取模分片算法"><a href="#client的hash-取模分片算法" class="headerlink" title="client的hash+取模分片算法"></a>client的hash+取模分片算法</h3><p>除了对业务进行拆分，我们还可以通过算法拆分，通过hash+取模的方式，对key进行hash映射成等宽的值（或字符串），然后通过取模的方式分发给后端redis。</p><ul><li>hash运算在这里是一种映射算法（其实就是归类），无论key的值是多长或多短，经过hash算法，都会输出成一个等宽的值（字符串）进行映射，算法有很多，比如：crc16、crc32、fnv、md5等等</li></ul><p>但是hash取模有一个弊端，就是模数值必须是固定的，比如下图：开始%3、%4，如果在后续再增加两台redis，那么这个模数值就需要发生变化， %3（redis1）的取模数据，就会放入到redis3或redis4。如果这个时候别的client去取值的话，数据已经可能不在redis1，所以会出现取不到数据的问题，也会影响分布式下的扩展性</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510151241978.png" alt="image-20210510151241978"></p><h3 id="client的random分片算法"><a href="#client的random分片算法" class="headerlink" title="client的random分片算法"></a>client的random分片算法</h3><p>random的方式，也是数据不能拆分，那么使用random，就是通过随机扔给后端redis，这种方法会照成自己都不知道数据放入在那台redis中</p><p>但是它也有它的应用场景（消息队列），比如看下图：同使用一个k1，k1是list类型（list通过lpush的方式），里面有十个值，这十个值会随机分配到两台redis。另一个段的客户端可以通过rpop进行去除，就散是随机的，也是通过rpush按顺序去除。那么这种模式k1=topic，而每个redis就是parttion，等于topic%partition，与kafka定义是一样的，只不过kafka是基于磁盘的，而redis是使用内存的，而且速度更快。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510151338461.png"></p><p>所以说，虽然redis是基于进程的，进程只有4-5M，但是如果你把一些分布式的方法通过redis来应用也是可以的</p><h3 id="client的ketama算法（一致性hash）"><a href="#client的ketama算法（一致性hash）" class="headerlink" title="client的ketama算法（一致性hash）"></a>client的ketama算法（一致性hash）</h3><h4 id="什么是一致性hash"><a href="#什么是一致性hash" class="headerlink" title="什么是一致性hash"></a>什么是一致性hash</h4><p>在redis中hash算法，是将key映射成等宽长度的字符串，然后均匀的分配到服务器上，确保每台redis不会有太太的存储偏差。但是hash算法也有一个弊端。</p><p>比如：我们有5台服务器，通过hash算法将key的信息分配到5台服务器上，实现负载均衡。如果有一台redis服务器宕机了，key的信息会重新通过hash分配给4台服务器，操作几乎涉及所有服务器上的所有数据，工作量相当大（简而言之：hash算法增加或删除服务器，需要重新分配数据）</p><p>一致性hash算法（Consistent Hashing），就是在增加或删除服务器上，对原有的服务器和用户之间的映射关系产生的影响发挥到最小，算法能满足以下要求：</p><ul><li>平稳性：hash的最基本要求，均衡的分配数据到服务器</li><li>单调性：当date(数据)节点发生变动时，对于相同的date始终映射到相同的node(物理)节点中或者新增加的node节点中，避免无法找到原来的数据（但在redis使用还是会有一部分的数据丢失，新增节点如果接近date节点，那么用户在查询的过程中，会找离date节点近的node节点进行查询，但是新增节点并没有数据，所以会返回一个nil（简单来说：就是增节点可能会照成一些数据不能命中））</li><li>稳定性：当出现节点down掉或热数据访问需要动态扩容时，一致性hash可以尽量减少数据的移动</li></ul><h4 id="一致性hash的原理"><a href="#一致性hash的原理" class="headerlink" title="一致性hash的原理"></a>一致性hash的原理</h4><p>通过上述可以发现，一致性hash也是有弊端的，也会丢失一些数据。但是在增与删节点会对服务影响降到最少，以及对于数据移动会尽量减少。</p><p>那么一致性hash算法没有取模，所以不会有取模的模数固定，但一致性hash算法要求的是，需要date（虚拟）和node（物理）节点都进行hash运算，运算过程中会规划一个环形hash环，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418215601120.png"></p><p>使用一致性hash算法，node1使用自己的参数（IP、host）通过这个算法跟hash映射数值，接着会在映射到圆环上，另一个节点node2也跟node1一样。如果有新的数据key来了，也进行hash映射数值，放入到圆环中。node节点都会具有排序，而通过算法算出的key也会进行排序，接着去找离自己最近的node节点，然后通过node节点存储数据key，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418221454554.png"></p><p>如果在node1前面新增了一个node3，增加节点不会影响node1和node2数据，但是如果要查key的话，就会出现一个问题，它会先找到node3，而node3却没有你的数据。也就是新增节点会照成一部分的数据不能命中，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210418222116285.png"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>所以一致性hash既有优点也有缺点：</p><ul><li>优点：加节点，可以分担其他节点的压力，不会像取模算法照成全局洗牌（不用全部重新分配）</li><li>缺点，新增节点会照成一部分，数据不能命中（比如：查询数据会寻找自己最近的2个物理节点（node），在寻找过程中，如果两个node中都没有找到数据，就会击穿直到数据库，造成数据库压力）</li></ul><h2 id="Redis集群分片使用的工具"><a href="#Redis集群分片使用的工具" class="headerlink" title="Redis集群分片使用的工具"></a>Redis集群分片使用的工具</h2><h3 id="twemproxy分片"><a href="#twemproxy分片" class="headerlink" title="twemproxy分片"></a>twemproxy分片</h3><p>twemporxy（全称为“tow-em-proxy”），也叫nutcracker，是Twtter开源的，用于memcache和redis协议的快速轻量级代理。它的建立主要是为了减少与后端缓存服务器的连接数。</p><p>GitHub：<a href="https://github.com/twitter/twemproxy">https://github.com/twitter/twemproxy</a></p><h4 id="twemporxy特性与缺点"><a href="#twemporxy特性与缺点" class="headerlink" title="twemporxy特性与缺点"></a>twemporxy特性与缺点</h4><p><strong>特性</strong></p><ul><li>快速且轻量级</li><li>可以维护持久的服务器连接</li><li>保持后端缓存服务器的连接数较低</li><li>支持多个服务器代理</li><li>同时支持多个服务器池</li><li>支持多种hash模式，包括一致性hash和分布…等等</li></ul><p><strong>缺点</strong></p><ul><li>不支持Redis事务操作</li><li>不支持对多个值的操作，比如交集并集等</li></ul><h4 id="twemproxy零拷贝"><a href="#twemproxy零拷贝" class="headerlink" title="twemproxy零拷贝"></a>twemproxy零拷贝</h4><p>在twemproxy中，用于传入请求和传输响应的所有内存都在mbuf中，Mbuf启动零拷贝（zero copy）。client会将接收请求相同的缓冲区将其转发到服务器。同样，从服务器接收到响应的同一个mbuf也用于将其转发到客户端</p><p>此外，mbufs的内存使用重用池进行管理，意味着，一旦分配了mbuf，就不会释放它，而是将其放回重用池中。默认情况下，每个mbuf块的大小是16字节。mbuf的大小和twemproxy可以支持的并发连接数之间需要权衡，较大的mbuf会减少读取请求或响应时twemproxy进行的读取系统调用的数量。但是，对于较大的mbuf，每个活动的连接都将占用16K字节的缓冲区，当twemproxy处理来自客户端的大量并发连接时。这可能是一个问题。twemproxy用于处理大量并发客户端连接时，应该使用-m或–mbuf-size = N 参数将块带下设置为较小的值，例如：512字节</p><h4 id="twemproxy的配置说明"><a href="#twemproxy的配置说明" class="headerlink" title="twemproxy的配置说明"></a>twemproxy的配置说明</h4><p>Twemproxy在进程启动时可以通过配置-c或–conf-file，来指定YAML配置文件，该配置文件用于指定的服务器池，以及管理每个池中的服务器，配置文件参数有如下</p><ul><li>listen：侦听的地址与断开，也可以是绝对路径的sock文件（例如：/var/run/nutcracker.sock）</li><li>client_connections：redis client允许最大连接数</li><li>hash：hash的函数名称，指定hash的算法。如：md5、crc16、crc32、fnv1_64等等</li><li>hash_tag：通过tag的方式，将key通过{}或$$的方法映射到同一台服务器上，只要标签中的相同就行。如：{kk}:k1、{kk}:k2、$$:k1、$$:k2</li><li>distribution：分布式的模式。如：ketama、modula、random</li><li>timeout：msec中的超时值，用于建立到服务器的连接或接受服务器的响应，默认情况下，可以不限时间</li><li>backlog：TCP backlog参数，默认为512</li><li>preconnect：布尔值，用于控制twemproxy是否应该在进程启动时预连接到池中的所有服务区，默认为flase</li><li>redis：布尔值，默认情况下是true，连接的是memcache协议，需要通过设置成flase，才是redis的协议</li><li>redis_auth：认证redis server的连接</li><li>redis_db：池服务区上使用的DB，默认值为0，Twemproxy就以DB 0的形成呈现给客户端</li><li>server_connections：可以打开每个服务器的最大连接，默认情况下，最大打开一个服务器连接</li><li>auto_eject_hosts：布尔值，控制当服务器连接失败server_failure_limit次数是否该临时弹出信息。有关信息，可以查询[liveness recommendations][<a href="https://github.com/twitter/twemproxy/blob/master/notes/recommendation.md#liveness]%E8%BF%99%E4%B8%AA%E4%BF%A1%E6%81%AF%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%BAflase">https://github.com/twitter/twemproxy/blob/master/notes/recommendation.md#liveness]这个信息，默认值为flase</a></li><li>server_retry_timeout：当auto_eject_host设置为true时，在临时弹出的服务器上重新尝试之前，mesc中等待的超时值，默认为30000毫秒</li><li>server_failure_limit：当auto_eject_host设置为true是，将导致服务器临时弹出的连续失败次数，默认为2</li><li>server：服务器池的服务器地址，端口和权重</li></ul><p>配置文件的路径，在conf/nutcracker.yml，例如：下述的几个服务器池的配置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">alpha</span>:</span><br><span class="line">  <span class="selector-tag">listen</span>: 127.0.0.1<span class="selector-pseudo">:22121</span>            //侦听的地址和端口</span><br><span class="line">  <span class="selector-tag">hash</span>: <span class="selector-tag">fnv1a_64</span>                     //使用的<span class="selector-tag">hash</span>算法</span><br><span class="line">  <span class="selector-tag">distribution</span>: <span class="selector-tag">ketama</span>               //分布式方式</span><br><span class="line">  <span class="selector-tag">auto_eject_hosts</span>: <span class="selector-tag">true</span>             //连接失败的临时弹出</span><br><span class="line">  <span class="selector-tag">redis</span>: <span class="selector-tag">true</span>                        //使用<span class="selector-tag">redis</span>协议</span><br><span class="line">  <span class="selector-tag">server_retry_timeout</span>: 2000         //连接失败后，2000毫秒，在重新连接</span><br><span class="line">  <span class="selector-tag">server_failure_limit</span>: 1            //连接失败1次，就临时弹出信息</span><br><span class="line">  <span class="selector-tag">servers</span>:                           //<span class="selector-tag">redis</span>服务的地址端口和权重，可以设置多个</span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6379</span><span class="selector-pseudo">:1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">beta</span>:</span><br><span class="line">  <span class="selector-tag">listen</span>: 127.0.0.1<span class="selector-pseudo">:22122</span></span><br><span class="line">  <span class="selector-tag">hash</span>: <span class="selector-tag">fnv1a_64</span></span><br><span class="line">  <span class="selector-tag">hash_tag</span>: &quot;&#123;&#125;&quot;</span><br><span class="line">  <span class="selector-tag">distribution</span>: <span class="selector-tag">ketama</span></span><br><span class="line">  <span class="selector-tag">auto_eject_hosts</span>: <span class="selector-tag">false</span></span><br><span class="line">  <span class="selector-tag">timeout</span>: 400</span><br><span class="line">  <span class="selector-tag">redis</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">servers</span>:                         </span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6380</span><span class="selector-pseudo">:1</span> <span class="selector-tag">server1</span></span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6381</span><span class="selector-pseudo">:1</span> <span class="selector-tag">server2</span></span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6382</span><span class="selector-pseudo">:1</span> <span class="selector-tag">server3</span></span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6383</span><span class="selector-pseudo">:1</span> <span class="selector-tag">server4</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：twemproxy并不支持监控哨兵，只支持监控多个主Redis</p></blockquote><h4 id="twemproxy分配过程"><a href="#twemproxy分配过程" class="headerlink" title="twemproxy分配过程"></a>twemproxy分配过程</h4><p>client通过twemproxy连接redis，twemproxy选择不同的算法，比如：下图，选择了取模的方式，模数值是10，范围从0-9。twemproxy与redis中间会增加一个mapping（映射），将数据分配到两台主机</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210506094557599.png"></p><p>如需要增加节点，会重新进行hash分配给三台redis主机。因为使用的是取模的方法，所以会涉及到所有的数据，负担会加大。建议算法就使用一致性hash（ketama算法）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210506094607448.png"></p><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3><h4 id="Redis-Cluster分配过程"><a href="#Redis-Cluster分配过程" class="headerlink" title="Redis Cluster分配过程"></a>Redis Cluster分配过程</h4><p>redis Cluster是Redis官方提供的集群化方法，是由三个节点组成的集群，集群没有主次关系，客户端可以想连接谁就连谁，一视同仁。</p><p>比如：如下图，客户端get k1，假设k1在redis2，通过hash之后，得到了4号槽位。而每个redis都有一个功能，就是将取模的算法放入到redis，然后根据算法的mapping对k1进行比对，如果redis2自己没有这个k1，就会重定向给其他redis主机。所以每台redis除了算法，还会有一张redis的映射关系表</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210419142327386.png"></p><p>但有一个问题，就是聚合操作很难实现，事务也很难实现，数据一旦被分开，就很难在一起使用</p><h4 id="Redis-Cluster的数据分槽"><a href="#Redis-Cluster的数据分槽" class="headerlink" title="Redis Cluster的数据分槽"></a>Redis Cluster的数据分槽</h4><p>Redis Cluster 将所有数据划分为16384个槽位，每个槽位负责其中一部分，槽位的信息存储于每个节点。每个key通过CRC 16校验后对16384取模来决定放置在哪个槽</p><p>例如：</p><ul><li>节点A包含0到5500号哈希槽</li><li>节点B包含5501到11000号哈希槽</li><li>节点C包含11001到16384号哈希槽</li></ul><p>如果想添加新的节点D，可以从A、B、C之间取一部分槽给D节点上。如果移除节点A，需要将A中的槽移动到B或C节点上，然后将没有任何槽的A节点从集群中移除即可。由于从一个节点将哈希槽移动到另一个节点并不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态</p><p>此外，Redis Clster的每个节点会将集群的配置信息持久化到配置文件中，所以必须确保配置文件时可写的，而且尽量不要依靠人工修改配置文件</p><h3 id="predixy分片"><a href="#predixy分片" class="headerlink" title="predixy分片"></a>predixy分片</h3><p>上述的twemproxy是不支持哨兵的。而predixy是Redis哨兵、Redis集群的高性能和全功能代理。简单来说就是即支持Sentinel也支持Cluster</p><ul><li>后端为Redis Sentinel监控的一组Redis，功能完全等同于原始Redis</li><li>后端为Redis Sentinel监控的多组Redis，则有部分功能受限（如：事务）</li><li>后端为Redis Cluster，功能完全等同于Redis Cluster</li></ul><p>GitHub下载地址：<a href="https://github.com/joyieldInc/predixy">https://github.com/joyieldInc/predixy</a></p><p>博客来源：<a href="https://blog.csdn.net/rebaic/article/details/76384028">https://blog.csdn.net/rebaic/article/details/76384028</a></p><h4 id="predixy与其他工具的功能对比"><a href="#predixy与其他工具的功能对比" class="headerlink" title="predixy与其他工具的功能对比"></a>predixy与其他工具的功能对比</h4><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>predixy</strong></th><th align="left"><strong>twemproxy</strong></th><th align="left"><strong>codis</strong></th><th align="left"><strong>redis-cerberus</strong></th></tr></thead><tbody><tr><td align="left">高可用</td><td align="left">Redis Sentinel或Redis Cluster</td><td align="left">一致性哈希</td><td align="left">Redis Sentinel</td><td align="left">Redis Cluster</td></tr><tr><td align="left">可扩展</td><td align="left">Key哈希分布或Redis Cluster</td><td align="left">Key哈希分布</td><td align="left">Key哈希分布</td><td align="left">Redis Cluster</td></tr><tr><td align="left">开发语言</td><td align="left">C++</td><td align="left">C</td><td align="left">GO</td><td align="left">C++</td></tr><tr><td align="left">多线程</td><td align="left">是</td><td align="left">否</td><td align="left">是</td><td align="left">是</td></tr><tr><td align="left">事务</td><td align="left">Redis Sentinel模式单Redis组下支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">BLPOP/BRPOP/BLPOPRPUSH</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">Pub/Sub</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">支持</td></tr><tr><td align="left">Script</td><td align="left">支持load</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">Scan</td><td align="left">支持</td><td align="left">不支持</td><td align="left">不支持</td><td align="left">不支持</td></tr><tr><td align="left">Select DB</td><td align="left">支持</td><td align="left">不支持</td><td align="left">支持</td><td align="left">Redis Cluster只有一个DB</td></tr><tr><td align="left">Auth</td><td align="left">支持定义多个密码，给予不同读写及管理权限和Key访问空间</td><td align="left">不支持</td><td align="left">同redis</td><td align="left">不支持</td></tr><tr><td align="left">读从节点</td><td align="left">支持，可定义丰富规则读指定的从节点</td><td align="left">不支持</td><td align="left">支持，简单规则</td><td align="left">支持，简单规则</td></tr><tr><td align="left">多机房支持</td><td align="left">支持，可定义丰富规则调度流量</td><td align="left">不支持</td><td align="left">有限支持</td><td align="left">有限支持</td></tr><tr><td align="left">统计信息</td><td align="left">丰富</td><td align="left">丰富</td><td align="left">丰富</td><td align="left">简单</td></tr></tbody></table><blockquote><p>PS：关于更多的性能或其他问题，可以访问上述的GitHub和博客</p></blockquote><h4 id="predixy的配置说明"><a href="#predixy的配置说明" class="headerlink" title="predixy的配置说明"></a>predixy的配置说明</h4><p>predixy的配置类似redis，下载之后是在conf/目录下。每个配置文件的说明如下：</p><ul><li>predixy.conf：整体配置文件，会引用下面的配置文件</li><li>cluster.conf：用于Redis Cluster，配置后端redis信息</li><li>sentinel.conf：用于Redis Sentinel，配置侯丹redis信息</li><li>auth.conf：访问权限控制配置，可以定义多个验证密码，每个密码可设置读、写管理权限，以及定义可访问的键空间</li><li>dc.conf：多数据中心支持，可定义读写分离规则，读流量权重分配</li><li>latency.conf：延迟监控规定定义，可以指定需要监控的命令以及延迟时间间隔</li></ul><p>以sentinel配置文件为例，每个参数定义如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SentinelServerPool &#123;</span><br><span class="line">    <span class="selector-attr">[Password xxx]</span>       <span class="comment">//指定连接的redis实例默认的密码，不指定的情况下表示无密码     </span></span><br><span class="line">    <span class="selector-attr">[Databases number]</span>   <span class="comment">//指定redis db库数量，不指定默认为1</span></span><br><span class="line">    Hash atol|crc16      //对key采用的hash算法，当前只支持atol和crc16</span><br><span class="line">    <span class="selector-attr">[HashTag &quot;xx&quot;]</span>       <span class="comment">//指定哈希标签，不指定的话为&#123;&#125;</span></span><br><span class="line">    Distribution modula|random           //key使用的分片方法，当前只支持modula和random</span><br><span class="line">    <span class="selector-attr">[MasterReadPriority [0-100]</span>]         <span class="comment">//读写分离功能，从redis master节点执行读请求的优先级，默认为50，0表示禁止读redis master</span></span><br><span class="line">    <span class="selector-attr">[StaticSlaveReadPriority [0-100]</span>]    <span class="comment">//读写分离功能，从静态redis slave节点执行读请求的优先级，静态节点是指在本配置文件列出的redis节点，默认为0</span></span><br><span class="line">    <span class="selector-attr">[DynamicSlaveReadPriority [0-100]</span>]   <span class="comment">//动态节点指在本配置文件中没有列出，但是通过redis sentinel动态发现的节点，默认为0</span></span><br><span class="line">    <span class="selector-attr">[RefreshInterval number[s|ms|us]</span>]    <span class="comment">//周期性的请求redis sentinel以获取最新的集群信息，单位为秒，默认为1秒</span></span><br><span class="line">    <span class="selector-attr">[ServerTimeout number[s|ms|us]</span>]      <span class="comment">//请求在predixy中最长的处理/等待时间，如果超过该时间redis没有响应，则关闭连接，并返回错误响应（对于blpop阻塞式命令，该选项不起作用，为0则禁用此功能，即如果redis不返回就一直等待，默认为0）</span></span><br><span class="line">    <span class="selector-attr">[ServerFailureLimit number]</span>          <span class="comment">//一个redis实例出现多少次错误以后将其标记为失效，默认为10</span></span><br><span class="line">    <span class="selector-attr">[ServerRetryTimeout number[s|ms|us]</span>] <span class="comment">//一个redis实例失效后多久去检查是否恢复正常，默认为1</span></span><br><span class="line">    <span class="selector-attr">[KeepAlive seconds]</span>                  <span class="comment">//predixy与redis的tcp连接时间，0表示禁用此功能，默认为0</span></span><br><span class="line">    Sentinels &#123;                          <span class="comment">//指定sentinel的实例地址</span></span><br><span class="line">        + addr             </span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    Group xxx &#123;                          <span class="comment">//定义一个redis组，Group的名字要与sentinel里的名字一直，Group可以显示列出redis地址，列出就是上面的静态节点。当然也可以默认不列出，不列出就会寻找动态节点</span></span><br><span class="line">        <span class="selector-attr">[+ addr]</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下述的配置例子;</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SentinelServerPool &#123;</span><br><span class="line">    Databases 16</span><br><span class="line">    Hash crc16</span><br><span class="line">    HashTag &quot;&#123;&#125;&quot;</span><br><span class="line">    Distribution modula</span><br><span class="line">    MasterReadPriority 60</span><br><span class="line">    StaticSlaveReadPriority 50</span><br><span class="line">    DynamicSlaveReadPriority 50</span><br><span class="line">    RefreshInterval 1</span><br><span class="line">    ServerTimeout 1</span><br><span class="line">    ServerFailureLimit 10</span><br><span class="line">    ServerRetryTimeout 1</span><br><span class="line">    KeepAlive 120</span><br><span class="line">    Sentinels &#123;</span><br><span class="line">        + 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>:<span class="number">26379</span></span><br><span class="line">        + <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26380</span></span><br><span class="line">        + <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26381</span></span><br><span class="line">    &#125;</span><br><span class="line">    Group master1 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Group master2 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>该sentinel参数指定了是三个redis sentinel实例，分别是127.0.0.1:26379、127.0.0.1:26380、127.0.0.1:26381。</p></li><li><p>指定了两组redis，分别是master1和master2（命名可以自己自定义）。</p></li><li><p>没有指定静态节点，所有redis实例没有开启密码认证，指定了16个db，算法使用crc16计算key的哈希值，通过modula（取模）的方式将key分布到master1和master2实例中。</p></li><li><p>MasterReadPriority为60，比DynamicSlaveReadPriority为50的要大，所以读请求都会分到redis master节点。</p></li><li><p>RefreshInterval为1则每一秒钟向redis sentinel发送请求刷新集群信息。</p></li><li><p>ServerFailureLimit为10，表示redis实例失败累计达到10次后将该redis实例标记为失效，ServerRetryTimeout为1，每间隔1秒钟后检查是否恢复</p></li><li><p>KeepAlive为120，表示与tcp连接的时间，超过120没有客户端没有任何操作，则断开tcp连接</p></li></ul><blockquote><p>PS：需要了解更多的其他脚本参数信息，如：Redis Cluster和多数据中心等配置信息，可参考作者GitHub上的[详细文档][<a href="https://github.com/joyieldInc/predixy/blob/master/doc/config_CN.md]">https://github.com/joyieldInc/predixy/blob/master/doc/config_CN.md]</a></p></blockquote><h2 id="Redis集群分片实例"><a href="#Redis集群分片实例" class="headerlink" title="Redis集群分片实例"></a>Redis集群分片实例</h2><h3 id="twemproxy实例"><a href="#twemproxy实例" class="headerlink" title="twemproxy实例"></a>twemproxy实例</h3><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><p>下载twemproxy源码包并进行编译(debug版本)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/twitter/twemproxy.git</span><br><span class="line">$ cd twemproxy</span><br><span class="line">$ autoreconf -fvi</span><br><span class="line">$ ./configure --enable-debug=full</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ nutcracker -h</span><br></pre></td></tr></table></figure><blockquote><p>PS：autoreconf -fvi &amp;&amp; ./configure 在执行前需要安装automake和libtool两个包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y automake libtool</span><br></pre></td></tr></table></figure><p>编译完后复制启动脚本到/etc/init.d</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">opt</span>/<span class="selector-tag">twemproxy</span>/<span class="selector-tag">scripts</span></span><br><span class="line">$ cp nutcracker.init /etc/init.d/nutcracker</span><br><span class="line">$ /etc/init.d/nutcracker [start/stop/restart]</span><br></pre></td></tr></table></figure><h4 id="编写配置文件，启动实例"><a href="#编写配置文件，启动实例" class="headerlink" title="编写配置文件，启动实例"></a>编写配置文件，启动实例</h4><p>编译完成的配置文件在/etc/nutcracker目录下。上文说过，twemproxy是不支持sentinel的，只支持使用多个主的redis</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ cp nutcracker.yml&#123;,.bak&#125;</span><br><span class="line">$ vi /etc/nutcracker/nutcracker.yml</span><br><span class="line"><span class="selector-tag">alpha</span>:</span><br><span class="line">  <span class="selector-tag">listen</span>: 127.0.0.1<span class="selector-pseudo">:22121</span></span><br><span class="line">  <span class="selector-tag">hash</span>: <span class="selector-tag">fnv1a_64</span></span><br><span class="line">  <span class="selector-tag">distribution</span>: <span class="selector-tag">ketama</span></span><br><span class="line">  <span class="selector-tag">auto_eject_hosts</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">redis</span>: <span class="selector-tag">true</span></span><br><span class="line">  <span class="selector-tag">server_retry_timeout</span>: 2000</span><br><span class="line">  <span class="selector-tag">server_failure_limit</span>: 1</span><br><span class="line">  <span class="selector-tag">servers</span>:</span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6379</span><span class="selector-pseudo">:1</span></span><br><span class="line">   <span class="selector-tag">-</span> 127.0.0.1<span class="selector-pseudo">:6380</span><span class="selector-pseudo">:1</span></span><br></pre></td></tr></table></figure><p>启动redis6379和6380主机（两个实例之间是互相独立的），重启nutcracker，并测试查看两台实例的接收的数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span><br><span class="line">$ /etc/init.d/nutcracker</span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">twemproxy</span> (<span class="selector-tag">via</span> <span class="selector-tag">systemctl</span>):                        <span class="selector-attr">[  OK  ]</span></span><br><span class="line"></span><br><span class="line">$ redis-cli -p 22121</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> 1 <span class="selector-tag">sgadfsa</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">Redis</span> 6379实例</span><br><span class="line">$ redis-cli -p 6379</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">Redis</span> 6380实例</span><br><span class="line">$ redis-cli -p 6380</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k1</span>&quot;</span><br></pre></td></tr></table></figure><h3 id="Redis-Cluster实例"><a href="#Redis-Cluster实例" class="headerlink" title="Redis Cluster实例"></a>Redis Cluster实例</h3><h4 id="手动搭建redis-cluster"><a href="#手动搭建redis-cluster" class="headerlink" title="手动搭建redis cluster"></a>手动搭建redis cluster</h4><ul><li>准备三台redis主机，每台主机部署主动节点（这里分别是redis-1(10.0.0.50)、redis-2(10.0.0.51)、redis-3(10.0.0.52)）</li><li>一台配置完，通过rsync或scp发送配置信息修改其他主机（或通过Ansible批量部署）</li><li>一个集群里有16384个槽位（0-16383），平均为5461个槽位</li><li>各个节点主从分配，如下图</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210507111511548.png"></p><p><strong>redis-1部署（地址：10.0.0.50）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /opt/redis_cluster/redis_&#123;6380,6381&#125;/&#123;conf,logs,pid&#125;</span><br><span class="line">$ mkdir -p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br><span class="line"></span><br><span class="line">//创建<span class="selector-tag">redis_6380</span><span class="selector-class">.conf</span>文件，并写入下述内容（6381一致）</span><br><span class="line">$ cat /opt/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class="line"><span class="selector-tag">daemonize</span> <span class="selector-tag">yes</span></span><br><span class="line"><span class="selector-tag">bind</span> 10.0.0.50</span><br><span class="line"><span class="selector-tag">port</span> 6380</span><br><span class="line"><span class="selector-tag">pidfile</span> &quot;/<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis_6380</span>/<span class="selector-tag">pid</span>/<span class="selector-tag">redis_6380</span><span class="selector-class">.pid</span>&quot;</span><br><span class="line"><span class="selector-tag">logfile</span> &quot;/<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis_6380</span>/<span class="selector-tag">logs</span>/<span class="selector-tag">redis_6380</span><span class="selector-class">.log</span>&quot;</span><br><span class="line"><span class="selector-tag">dbfilename</span> &quot;<span class="selector-tag">redis_6380</span><span class="selector-class">.rdb</span>&quot;</span><br><span class="line"><span class="selector-tag">dir</span> &quot;/<span class="selector-tag">data</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis_6380</span>&quot;</span><br><span class="line"><span class="selector-tag">cluster-enabled</span> <span class="selector-tag">yes</span>                      //激活集群模式</span><br><span class="line"><span class="selector-tag">cluster-config-file</span> <span class="selector-tag">nodes_6380</span><span class="selector-class">.conf</span>      //集群的配置文件</span><br><span class="line"><span class="selector-tag">cluster-node-timeout</span> 15000               //集群的超时时间</span><br><span class="line"></span><br><span class="line">$ cd /opt/redis_cluster/</span><br><span class="line">$ cp redis_6380/conf/redis_6380.conf redis_6381/conf/redis_6381.conf</span><br><span class="line">$ sed -i &#x27;s#6380#6381#g&#x27; redis_6381/conf/redis_6381.conf</span><br><span class="line"></span><br><span class="line">//传输到其他<span class="selector-tag">redis</span>主机</span><br><span class="line">$ rsync -avz /opt/redis_cluster/redis_638* redis-2:/opt/redis_cluster/</span><br><span class="line">$ rsync -avz /opt/redis_cluster/redis_638* redis-3:/opt/redis_cluster/</span><br><span class="line"></span><br><span class="line">//启动服务并查看进程</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf </span><br><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       8987      1  0 21<span class="selector-pseudo">:21</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-attr">[cluster]</span></span><br><span class="line"><span class="selector-tag">root</span>       9000      1  0 21<span class="selector-pseudo">:21</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-attr">[cluster]</span></span><br></pre></td></tr></table></figure><p><strong>redis-2部署（地址：10.0.0.51）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ find /opt/redis_cluster/redis_638* -type f -name &#x27;*.conf&#x27;|xargs sed -i &quot;/bind/s#50#51#g&quot;</span><br><span class="line">$ mkdir -p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br><span class="line"></span><br><span class="line">//启动服务并查看进程</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf </span><br><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       7986      1  0 21<span class="selector-pseudo">:24</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.51<span class="selector-pseudo">:6380</span> <span class="selector-attr">[cluster]</span></span><br><span class="line"><span class="selector-tag">root</span>       8022      1  0 21<span class="selector-pseudo">:25</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-attr">[cluster]</span></span><br></pre></td></tr></table></figure><p><strong>redis-3部署（地址：10.0.0.51）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ find /opt/redis_cluster/redis_638* -type f -name &#x27;*.conf&#x27;|xargs sed -i &quot;/bind/s#50#52#g&quot;</span><br><span class="line">$ mkdir -p /data/redis_cluster/redis_&#123;6380,6381&#125;</span><br><span class="line"></span><br><span class="line">//启动服务并查看进程</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6380/conf/redis_6380.conf </span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6381/conf/redis_6381.conf </span><br><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       9140      1  0 21<span class="selector-pseudo">:32</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.42<span class="selector-pseudo">:6380</span> <span class="selector-attr">[cluster]</span></span><br><span class="line"><span class="selector-tag">root</span>       9144      1  0 21<span class="selector-pseudo">:33</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.42<span class="selector-pseudo">:6381</span> <span class="selector-attr">[cluster]</span></span><br></pre></td></tr></table></figure><h5 id="通过脚本启停"><a href="#通过脚本启停" class="headerlink" title="通过脚本启停"></a>通过脚本启停</h5><p>脚本内容，根据自己对redis的启停习惯，不一定要使用脚本启停</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">$ cat redis_shell.sh </span><br><span class="line">#!/<span class="selector-tag">bin</span>/<span class="selector-tag">bash</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">USAG</span>()&#123;</span><br><span class="line">    echo &quot;sh $0 &#123;start|stop|restart|login|ps|tail&#125; PORT&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">if</span> <span class="selector-attr">[ <span class="string">&quot;$#&quot;</span> = 1 ]</span></span><br><span class="line"><span class="selector-tag">then</span></span><br><span class="line">    REDIS_PORT=&#x27;6379&#x27;</span><br><span class="line"><span class="selector-tag">elif</span> </span><br><span class="line">    <span class="selector-attr">[ <span class="string">&quot;$#&quot;</span> = 2 -a -z <span class="string">&quot;$(echo &quot;</span>$2<span class="string">&quot;|sed &#x27;s#[0-9]##g&#x27;)&quot;</span> ]</span></span><br><span class="line"><span class="selector-tag">then</span></span><br><span class="line">    REDIS_PORT=&quot;$2&quot;</span><br><span class="line"><span class="selector-tag">else</span></span><br><span class="line">    <span class="selector-tag">USAG</span></span><br><span class="line">    <span class="selector-tag">exit</span> 0</span><br><span class="line"><span class="selector-tag">fi</span></span><br><span class="line"></span><br><span class="line">REDIS_IP=$(hostname -I|awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">PATH_DIR=/opt/redis_cluster/redis_$&#123;REDIS_PORT&#125;/</span><br><span class="line">PATH_CONF=/opt/redis_cluster/redis_$&#123;REDIS_PORT&#125;/conf/redis_$&#123;REDIS_PORT&#125;.conf</span><br><span class="line">PATH_LOG=/opt/redis_cluster/redis_$&#123;REDIS_PORT&#125;/logs/redis_$&#123;REDIS_PORT&#125;.log</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CMD_START</span>()&#123;</span><br><span class="line">    redis-server $&#123;PATH_CONF&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CMD_SHUTDOWN</span>()&#123;</span><br><span class="line">    redis-cli -c -h $&#123;REDIS_IP&#125; -p $&#123;REDIS_PORT&#125; shutdown</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CMD_LOGIN</span>()&#123;</span><br><span class="line">    redis-cli -c -h $&#123;REDIS_IP&#125; -p $&#123;REDIS_PORT&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CMD_PS</span>()&#123;</span><br><span class="line">    ps -ef|grep redis</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">CMD_TAIL</span>()&#123;</span><br><span class="line">    tail -f $&#123;PATH_LOG&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">    <span class="selector-tag">start</span>)</span><br><span class="line">        <span class="selector-tag">CMD_START</span></span><br><span class="line">        <span class="selector-tag">CMD_PS</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="selector-tag">stop</span>)</span><br><span class="line">        <span class="selector-tag">CMD_SHUTDOWN</span></span><br><span class="line">        <span class="selector-tag">CMD_PS</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="selector-tag">restart</span>)</span><br><span class="line">        <span class="selector-tag">CMD_START</span></span><br><span class="line">        <span class="selector-tag">CMD_SHUTDOWN</span></span><br><span class="line">        <span class="selector-tag">CMD_PS</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="selector-tag">login</span>)</span><br><span class="line">        <span class="selector-tag">CMD_LOGIN</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="selector-tag">ps</span>)</span><br><span class="line">        <span class="selector-tag">CMD_PS</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="selector-tag">tail</span>)</span><br><span class="line">        <span class="selector-tag">CMD_TAIL</span></span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="selector-tag">USAG</span></span><br><span class="line"><span class="selector-tag">esac</span></span><br></pre></td></tr></table></figure><p>我的脚本路径是/server/scripts，在此配置环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tail -n 1 /etc/profile</span><br><span class="line">export PATH=$PATH:/server/scripts</span><br><span class="line">$ chmod u+x /server/scripts/redis_shell.sh</span><br><span class="line">$ source /etc/profile</span><br><span class="line"></span><br><span class="line">//传输到其他主机，然后加载上述的环境变量</span><br><span class="line">$ scp redis_shell.sh redis-2:/server/scripts</span><br><span class="line">$ scp redis_shell.sh redis-3:/server/scripts</span><br></pre></td></tr></table></figure><p>通过脚本启停实例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis_shell.sh stop 6380</span><br><span class="line">$ redis_shell.sh start 6380</span><br><span class="line">$ redis_shell.sh login 6380     //登录</span><br><span class="line">10.0.0.50&gt; </span><br></pre></td></tr></table></figure><h5 id="集群搭建部署"><a href="#集群搭建部署" class="headerlink" title="集群搭建部署"></a>集群搭建部署</h5><p>redis-1可以先查看数据节点文件，登录6380查看，然后进行对比看是否一致</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /data/redis_cluster/redis_6380/nodes_6380.conf </span><br><span class="line">35510f4c3ced3411f7abdf6384e631714f527d6f :<span class="number">0</span>@<span class="number">0</span> myself,master - <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> connected</span><br><span class="line">vars currentEpoch <span class="number">0</span> lastVoteEpoch <span class="number">0</span></span><br><span class="line">$ redis_shell.sh login <span class="number">6380</span></span><br><span class="line"><span class="number">10.0</span>.<span class="number">0.50</span>&gt; cluster nodes</span><br><span class="line"><span class="number">35510</span>f4c3ced3411f7abdf6384e631714f527d6f :<span class="number">6380</span>@<span class="number">16380</span> myself,master - <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> connected</span><br></pre></td></tr></table></figure><p>redis-1（10.0.0.50）寻找6380其他节点加入集群：CLUSTER MEET</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">meet</span> 10.0.0.51 6380</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">meet</span> 10.0.0.52 6380</span><br><span class="line"><span class="selector-tag">OK</span>  </span><br><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">meet</span> 10.0.0.50 6381</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">meet</span> 10.0.0.51 6381</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">meet</span> 10.0.0.52 6381</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">CLUSTER</span> <span class="selector-tag">NODES</span></span><br><span class="line">69614421<span class="selector-tag">b333bb23a4a5e5bac3dbf0f316f6f1d8</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601906195574 4 <span class="selector-tag">connected</span></span><br><span class="line">655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 10.0.0.52<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601906196583 2 <span class="selector-tag">connected</span></span><br><span class="line">0<span class="selector-tag">f5d52468b67497d4cee08c5556c530737e9d04b</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601906194567 3 <span class="selector-tag">connected</span></span><br><span class="line">2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">myself</span>,<span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 0 1 <span class="selector-tag">connected</span></span><br><span class="line"><span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 10.0.0.51<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601906197589 0 <span class="selector-tag">connected</span></span><br><span class="line">0<span class="selector-tag">b176001007771efe27cf46053802b419768fa06</span> 10.0.0.52<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601906196179 0 <span class="selector-tag">connected</span></span><br></pre></td></tr></table></figure><p>集群现在还没有分槽，所以查看cluster info，集群是显示失败的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.50<span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">cluster_state</span><span class="selector-pseudo">:fail</span></span><br><span class="line"><span class="selector-tag">cluster_slots_assigned</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_ok</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_pfail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_fail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_known_nodes</span><span class="selector-pseudo">:6</span></span><br><span class="line"><span class="selector-tag">cluster_size</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_current_epoch</span><span class="selector-pseudo">:5</span></span><br><span class="line"><span class="selector-tag">cluster_my_epoch</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_sent</span><span class="selector-pseudo">:5009</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_received</span><span class="selector-pseudo">:4110</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>分槽位需要在每个主节点上配置，此时有2中方法执行</p><ul><li>分别登陆到每个主节点的客户端来执行命令</li><li>在其他一台redis主机上通过远程方式登陆到其他机器的主机点上执行命令</li></ul><p>下述是通过每个节点执行命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h redis-1 -p 6380 cluster addslots &#123;0..5461&#125;</span><br><span class="line">$ redis-cli -h redis-2 -p 6380 cluster addslots &#123;5462..10922&#125;</span><br><span class="line">$ redis-cli -h redis-3 -p 6380 cluster addslots &#123;10923..16383&#125;</span><br></pre></td></tr></table></figure><p>分配完所有槽位之后再去查看集群的节点状态，并查看每个节点的分配情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h redis-1 -p 6380</span><br><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">cluster_state</span><span class="selector-pseudo">:ok</span></span><br><span class="line"><span class="selector-tag">cluster_slots_assigned</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_ok</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_pfail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_fail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_known_nodes</span><span class="selector-pseudo">:6</span></span><br><span class="line"><span class="selector-tag">cluster_size</span><span class="selector-pseudo">:3</span></span><br><span class="line"><span class="selector-tag">cluster_current_epoch</span><span class="selector-pseudo">:5</span></span><br><span class="line"><span class="selector-tag">cluster_my_epoch</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_sent</span><span class="selector-pseudo">:5888</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_received</span><span class="selector-pseudo">:4989</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">//查看每个节点分配</span><br><span class="line"><span class="selector-tag">redis-1</span><span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">nodes</span></span><br><span class="line">69614421<span class="selector-tag">b333bb23a4a5e5bac3dbf0f316f6f1d8</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601908073592 4 <span class="selector-tag">connected</span></span><br><span class="line">655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 10.0.0.52<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601908069562 2 <span class="selector-tag">connected</span> 10923<span class="selector-tag">-16383</span></span><br><span class="line">0<span class="selector-tag">f5d52468b67497d4cee08c5556c530737e9d04b</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601908072584 3 <span class="selector-tag">connected</span></span><br><span class="line">2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">myself</span>,<span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 0 1 <span class="selector-tag">connected</span> 0<span class="selector-tag">-5461</span></span><br><span class="line"><span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 10.0.0.51<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601908070569 0 <span class="selector-tag">connected</span> 5462<span class="selector-tag">-10922</span></span><br><span class="line">0<span class="selector-tag">b17600100771efe27cf46053802b419768fa06</span> 10.0.0.52<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601908071576 5 <span class="selector-tag">connected</span></span><br></pre></td></tr></table></figure><h5 id="创建每个节点的复制关系"><a href="#创建每个节点的复制关系" class="headerlink" title="创建每个节点的复制关系"></a>创建每个节点的复制关系</h5><ul><li>redis-1 6380为主，redis-3 6381为从</li><li>redis-2 6380为主，redis-1 6381为从</li><li>redis-3 6380为主，redis-2 6381为从</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h redis-1 -p 6381 cluster replicate de5e61d765498747d46957b73fc55e413f58e0a9</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">$ redis-cli -h redis-2 -p 6381 cluster replicate 655d56a8b9448dcc16f765268c65618a762588ae</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">$ redis-cli -h redis-3 -p 6381 cluster replicate 2da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><p>查看集群情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -c  -h redis-1 -p 6380 </span><br><span class="line"><span class="selector-tag">redis-1</span>&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">nodes</span></span><br><span class="line">69614421<span class="selector-tag">b333bb23a4a5e5bac3dbf0f316f6f1d8</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-tag">slave</span> 655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 0 1601910928235 4 <span class="selector-tag">connected</span></span><br><span class="line">655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 10.0.0.52<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601910931256 2 <span class="selector-tag">connected</span> 10923<span class="selector-tag">-16383</span></span><br><span class="line">0<span class="selector-tag">f5d52468b67497d4cee08c5556c530737e9d04b</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-tag">slave</span> <span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 0 1601910929242 3 <span class="selector-tag">connected</span></span><br><span class="line">2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">myself</span>,<span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 0 1 <span class="selector-tag">connected</span> 0<span class="selector-tag">-5461</span></span><br><span class="line"><span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 10.0.0.51<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601910932263 0 <span class="selector-tag">connected</span> 5462<span class="selector-tag">-10922</span></span><br><span class="line">0<span class="selector-tag">b17600100771efe27cf46053802b419768fa06</span> 10.0.0.52<span class="selector-pseudo">:6381</span> <span class="selector-tag">slave</span> 2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span> 0 1601908071576 5 <span class="selector-tag">connected</span></span><br></pre></td></tr></table></figure><h5 id="redis-cluster-故障转移"><a href="#redis-cluster-故障转移" class="headerlink" title="redis cluster 故障转移"></a>redis cluster 故障转移</h5><p>模拟一台主机的redis节点down机，然后查看集群的变化。使用暴力的方法kill -9杀掉redis-1的6380节点，理想情况下是redis-3的6381会升级为主节点</p><p>kill -9 杀掉 redis-1的6380节点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       9152      1  0 21<span class="selector-pseudo">:34</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:12</span> <span class="selector-tag">redis-server</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-attr">[cluster]</span></span><br><span class="line"><span class="selector-tag">root</span>       9173      1  0 21<span class="selector-pseudo">:34</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:11</span> <span class="selector-tag">redis-server</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-attr">[cluster]</span></span><br><span class="line">$ kill -9 9152</span><br><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       9173      1  0 21<span class="selector-pseudo">:34</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:11</span> <span class="selector-tag">redis-server</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-attr">[cluster]</span></span><br></pre></td></tr></table></figure><p>这里需要注意故障转移的时间，我们在配置文件的故障转移的时间设置是15秒，所以需要等待一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /opt/redis_cluster/redis_6381/conf/redis_6381.conf|grep cluster-node</span><br><span class="line"><span class="selector-tag">cluster-node-timeout</span> 15000</span><br></pre></td></tr></table></figure><p>查看日志变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tail -f /opt/redis_cluster/redis_6381/logs/redis_6381.log </span><br><span class="line">9173<span class="selector-pseudo">:S</span> 05 <span class="selector-tag">Oct</span> 23<span class="selector-pseudo">:21</span><span class="selector-pseudo">:12.044</span> * <span class="selector-tag">FAIL</span> <span class="selector-tag">message</span> <span class="selector-tag">received</span> <span class="selector-tag">from</span> 655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> <span class="selector-tag">about</span> 2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span></span><br><span class="line">9173<span class="selector-pseudo">:S</span> 05 <span class="selector-tag">Oct</span> 23<span class="selector-pseudo">:21</span><span class="selector-pseudo">:12.045</span> # <span class="selector-tag">Cluster</span> <span class="selector-tag">state</span> <span class="selector-tag">changed</span>: <span class="selector-tag">fail</span></span><br><span class="line">9173<span class="selector-pseudo">:S</span> 05 <span class="selector-tag">Oct</span> 23<span class="selector-pseudo">:22</span><span class="selector-pseudo">:12.165</span> # <span class="selector-tag">Cluster</span> <span class="selector-tag">state</span> <span class="selector-tag">changed</span>: <span class="selector-tag">ok</span></span><br></pre></td></tr></table></figure><p>登录任意一个节点查看集群的状态，状态是ok就代表集群是可用的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">cluster</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">cluster_state</span><span class="selector-pseudo">:ok</span></span><br><span class="line"><span class="selector-tag">cluster_slots_assigned</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_ok</span><span class="selector-pseudo">:16384</span></span><br><span class="line"><span class="selector-tag">cluster_slots_pfail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_slots_fail</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_known_nodes</span><span class="selector-pseudo">:6</span></span><br><span class="line"><span class="selector-tag">cluster_size</span><span class="selector-pseudo">:3</span></span><br><span class="line"><span class="selector-tag">cluster_current_epoch</span><span class="selector-pseudo">:7</span></span><br><span class="line"><span class="selector-tag">cluster_my_epoch</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_sent</span><span class="selector-pseudo">:13994</span></span><br><span class="line"><span class="selector-tag">cluster_stats_messages_received</span><span class="selector-pseudo">:11384</span></span><br></pre></td></tr></table></figure><p>在查看集群节点的变化情况，会发现10.0.0.50:6380主机是显示fail的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">Cluster</span> <span class="selector-tag">nodes</span></span><br><span class="line">69614421<span class="selector-tag">b333bb23a4a5e5bac3dbf0f316f6f1d8</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-tag">slave</span> 655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 0 1601911527064 4 <span class="selector-tag">connected</span></span><br><span class="line">2<span class="selector-tag">da9331b3c2edaf0a2e46b19219f7dc0e5b703af</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span>,<span class="selector-tag">fail</span> <span class="selector-tag">-</span> 1601911253618 1601911247570 1 <span class="selector-tag">disconnected</span></span><br><span class="line">655<span class="selector-tag">d56a8b9448dcc16f765268c65618a762588ae</span> 10.0.0.52<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601911524038 2 <span class="selector-tag">connected</span> 10923<span class="selector-tag">-16383</span></span><br><span class="line"><span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 10.0.0.51<span class="selector-pseudo">:6380</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601911526055 0 <span class="selector-tag">connected</span> 5462<span class="selector-tag">-10922</span></span><br><span class="line">0<span class="selector-tag">b176001007771efe27cf46053802b419768fa06</span> 10.0.0.52<span class="selector-pseudo">:6381</span> <span class="selector-tag">master</span> <span class="selector-tag">-</span> 0 1601911525046 7 <span class="selector-tag">connected</span> 0<span class="selector-tag">-5461</span></span><br><span class="line">0<span class="selector-tag">f5d52468b67497d4cee08c5556c530737e9d04b</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-tag">myself</span>,<span class="selector-tag">slave</span> <span class="selector-tag">de5e61d765498747d46957b73fc55e413f58e0a9</span> 0 0 3 <span class="selector-tag">connected</span></span><br></pre></td></tr></table></figure><h4 id="redis脚本部署redis-cluster"><a href="#redis脚本部署redis-cluster" class="headerlink" title="redis脚本部署redis cluster"></a>redis脚本部署redis cluster</h4><h5 id="自动创建集群实例和分槽"><a href="#自动创建集群实例和分槽" class="headerlink" title="自动创建集群实例和分槽"></a>自动创建集群实例和分槽</h5><p>上述可以看出，手动搭建随便于理解集群创建的流程和细节，但是需要花费更多的时间和步骤。当集群节点更多时，就会加大搭建集群的复杂度和运行成本。因此可以使用redis脚本简化集群创建、检查、槽迁移和均衡等常见运行操作</p><p>脚本的位置在utils/create-cluster目录下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">opt</span>/<span class="selector-tag">redis-6</span>.0.6/<span class="selector-tag">utils</span>/<span class="selector-tag">create-cluster</span></span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">total</span> 8</span><br><span class="line"><span class="selector-tag">-rwxrwxr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 2694 <span class="selector-tag">Jul</span> 21  2020 <span class="selector-tag">create-cluster</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 1436 <span class="selector-tag">Jul</span> 21  2020 <span class="selector-tag">README</span></span><br></pre></td></tr></table></figure><p>查看README文件，可见创建redis cluster只需要两个步骤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vi README</span><br><span class="line"><span class="selector-tag">USAGE</span></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">instances</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">create</span>.</span><br><span class="line">2. <span class="selector-tag">Use</span> &quot;./<span class="selector-tag">create-cluster</span> <span class="selector-tag">start</span>&quot; <span class="selector-tag">in</span> <span class="selector-tag">order</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">the</span> <span class="selector-tag">instances</span>.</span><br><span class="line">3. <span class="selector-tag">Use</span> &quot;./<span class="selector-tag">create-cluster</span> <span class="selector-tag">create</span>&quot; <span class="selector-tag">in</span> <span class="selector-tag">order</span> <span class="selector-tag">to</span> <span class="selector-tag">execute</span> <span class="selector-tag">redis-cli</span> <span class="selector-tag">--cluster</span> <span class="selector-tag">create</span>, <span class="selector-tag">so</span> <span class="selector-tag">that</span></span><br></pre></td></tr></table></figure><p>启动运行实例，创建槽位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ ./create-cluster start</span><br><span class="line"><span class="selector-tag">Starting</span> 30001</span><br><span class="line"><span class="selector-tag">Starting</span> 30002</span><br><span class="line"><span class="selector-tag">Starting</span> 30003</span><br><span class="line"><span class="selector-tag">Starting</span> 30004</span><br><span class="line"><span class="selector-tag">Starting</span> 30005</span><br><span class="line"><span class="selector-tag">Starting</span> 30006</span><br><span class="line"></span><br><span class="line">$ ./create-cluster create</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Performing</span> <span class="selector-tag">hash</span> <span class="selector-tag">slots</span> <span class="selector-tag">allocation</span> <span class="selector-tag">on</span> 6 <span class="selector-tag">nodes</span>...</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[0]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 0 <span class="selector-tag">-</span> 5460</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[1]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 5461 <span class="selector-tag">-</span> 10922</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[2]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 10923 <span class="selector-tag">-</span> 16383</span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:30005</span> <span class="selector-tag">to</span> 127.0.0.1<span class="selector-pseudo">:30001</span></span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:30006</span> <span class="selector-tag">to</span> 127.0.0.1<span class="selector-pseudo">:30002</span></span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 127.0.0.1<span class="selector-pseudo">:30004</span> <span class="selector-tag">to</span> 127.0.0.1<span class="selector-pseudo">:30003</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Trying</span> <span class="selector-tag">to</span> <span class="selector-tag">optimize</span> <span class="selector-tag">slaves</span> <span class="selector-tag">allocation</span> <span class="selector-tag">for</span> <span class="selector-tag">anti-affinity</span></span><br><span class="line"><span class="selector-attr">[WARNING]</span> <span class="selector-tag">Some</span> <span class="selector-tag">slaves</span> <span class="selector-tag">are</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">same</span> <span class="selector-tag">host</span> <span class="selector-tag">as</span> <span class="selector-tag">their</span> <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">M</span>: <span class="selector-tag">eb77582251a92944351a610d7198a62121d06178</span> 127.0.0.1<span class="selector-pseudo">:30001</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[0-5460]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">M</span>: 4<span class="selector-tag">fda08789f270af5c0b9d00e9ff9ac3eb38c471c</span> 127.0.0.1<span class="selector-pseudo">:30002</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[5461-10922]</span> (5462 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">M</span>: 1<span class="selector-tag">f9ad023299ad60df2762c92783f3cfdc6b25b7f</span> 127.0.0.1<span class="selector-pseudo">:30003</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[10923-16383]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">S</span>: <span class="selector-tag">ca7bf6dfe825ae02708b0a05fe8ee497eafd3a04</span> 127.0.0.1<span class="selector-pseudo">:30004</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 1<span class="selector-tag">f9ad023299ad60df2762c92783f3cfdc6b25b7f</span></span><br><span class="line"><span class="selector-tag">S</span>: 6<span class="selector-tag">b8ba0b8d0ede30d6fc2ec14a8c913673e1c512a</span> 127.0.0.1<span class="selector-pseudo">:30005</span></span><br><span class="line">   <span class="selector-tag">replicates</span> <span class="selector-tag">eb77582251a92944351a610d7198a62121d06178</span></span><br><span class="line"><span class="selector-tag">S</span>: 0<span class="selector-tag">ab4a3a309afc0184dd5cfbe6d82c4ba2ad2f16c</span> 127.0.0.1<span class="selector-pseudo">:30006</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 4<span class="selector-tag">fda08789f270af5c0b9d00e9ff9ac3eb38c471c</span></span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes   //输入yes，表示开始分槽位</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Nodes</span> <span class="selector-tag">configuration</span> <span class="selector-tag">updated</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Assign</span> <span class="selector-tag">a</span> <span class="selector-tag">different</span> <span class="selector-tag">config</span> <span class="selector-tag">epoch</span> <span class="selector-tag">to</span> <span class="selector-tag">each</span> <span class="selector-tag">node</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Sending</span> <span class="selector-tag">CLUSTER</span> <span class="selector-tag">MEET</span> <span class="selector-tag">messages</span> <span class="selector-tag">to</span> <span class="selector-tag">join</span> <span class="selector-tag">the</span> <span class="selector-tag">cluster</span></span><br><span class="line"><span class="selector-tag">Waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">cluster</span> <span class="selector-tag">to</span> <span class="selector-tag">join</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Performing</span> <span class="selector-tag">Cluster</span> <span class="selector-tag">Check</span> (<span class="selector-tag">using</span> <span class="selector-tag">node</span> 127.0.0.1<span class="selector-pseudo">:30001)</span></span><br><span class="line"><span class="selector-tag">M</span>: <span class="selector-tag">eb77582251a92944351a610d7198a62121d06178</span> 127.0.0.1<span class="selector-pseudo">:30001</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[0-5460]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">M</span>: 4<span class="selector-tag">fda08789f270af5c0b9d00e9ff9ac3eb38c471c</span> 127.0.0.1<span class="selector-pseudo">:30002</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[5461-10922]</span> (5462 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">S</span>: <span class="selector-tag">ca7bf6dfe825ae02708b0a05fe8ee497eafd3a04</span> 127.0.0.1<span class="selector-pseudo">:30004</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 1<span class="selector-tag">f9ad023299ad60df2762c92783f3cfdc6b25b7f</span></span><br><span class="line"><span class="selector-tag">S</span>: 6<span class="selector-tag">b8ba0b8d0ede30d6fc2ec14a8c913673e1c512a</span> 127.0.0.1<span class="selector-pseudo">:30005</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> <span class="selector-tag">eb77582251a92944351a610d7198a62121d06178</span></span><br><span class="line"><span class="selector-tag">S</span>: 0<span class="selector-tag">ab4a3a309afc0184dd5cfbe6d82c4ba2ad2f16c</span> 127.0.0.1<span class="selector-pseudo">:30006</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 4<span class="selector-tag">fda08789f270af5c0b9d00e9ff9ac3eb38c471c</span></span><br><span class="line"><span class="selector-tag">M</span>: 1<span class="selector-tag">f9ad023299ad60df2762c92783f3cfdc6b25b7f</span> 127.0.0.1<span class="selector-pseudo">:30003</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[10923-16383]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> <span class="selector-tag">nodes</span> <span class="selector-tag">agree</span> <span class="selector-tag">about</span> <span class="selector-tag">slots</span> <span class="selector-tag">configuration</span>.</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">for</span> <span class="selector-tag">open</span> <span class="selector-tag">slots</span>...</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">slots</span> <span class="selector-tag">coverage</span>...</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> 16384 <span class="selector-tag">slots</span> <span class="selector-tag">covered</span>.</span><br></pre></td></tr></table></figure><h5 id="路由与事务"><a href="#路由与事务" class="headerlink" title="路由与事务"></a>路由与事务</h5><p>连接30001端口，在不加-c的情况下写入数据，会发现需要移动主机才能写入，这里是引入ASK路由的功能，下述目录章节有详细说明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 30001</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">error</span>) <span class="selector-tag">MOVED</span> 12706 127.0.0.1<span class="selector-pseudo">:30003</span>           //需要移动</span><br><span class="line"></span><br><span class="line">//加上<span class="selector-tag">-c</span>参数进行<span class="selector-tag">ASK</span>路由</span><br><span class="line">$ redis-cli -c -p 30001</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">Redirected</span> <span class="selector-tag">to</span> <span class="selector-tag">slot</span> <span class="selector-attr">[12706]</span> <span class="selector-tag">located</span> <span class="selector-tag">at</span> 127.0.0.1<span class="selector-pseudo">:30003</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><p>对key开始事务</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">watch</span> <span class="selector-tag">k1</span></span><br><span class="line">&gt; <span class="selector-tag">multi</span> </span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">Redirected</span> <span class="selector-tag">to</span> <span class="selector-tag">slot</span> <span class="selector-attr">[449]</span> <span class="selector-tag">located</span> <span class="selector-tag">at</span> 127.0.0.1<span class="selector-pseudo">:30001</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">exec</span>                                   //但由于在设置<span class="selector-tag">key</span>会重新跳转，所以对这种<span class="selector-tag">key</span>不能开启事务</span><br><span class="line">(<span class="selector-tag">error</span>) <span class="selector-tag">ERR</span> <span class="selector-tag">EXEC</span> <span class="selector-tag">without</span> <span class="selector-tag">MULTI</span></span><br><span class="line"></span><br><span class="line">//通过&#123;&#125;<span class="selector-tag">tag</span>的方式创建，然后开启事务</span><br><span class="line">&gt; set &#123;kk&#125;1 v1</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; watch &#123;kk&#125;1</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:30001</span>&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1:30001&gt; set &#123;kk&#125;2 v2</span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">127.0.0.1:30001&gt; get &#123;kk&#125;2</span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:30001</span>&gt; <span class="selector-tag">exec</span></span><br><span class="line">1) <span class="selector-tag">OK</span></span><br><span class="line">2) &quot;<span class="selector-tag">v2</span>&quot;</span><br></pre></td></tr></table></figure><blockquote><p>PS：通过打tag的方式创建key，就会只指定在自身实例下。所以在创建同样的tag是就不会跳转到其他节点</p></blockquote><h5 id="指定地址-端口创建集群"><a href="#指定地址-端口创建集群" class="headerlink" title="指定地址/端口创建集群"></a>指定地址/端口创建集群</h5><p>通过客户端命令redis-cli + –cluster参数可以指定要创建的地址和端口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli --cluster help   //查看更多的参数操作</span><br><span class="line">$ redis-cli --cluster create 10.0.0.50:6380 10.0.0.51:6380 10.0.0.52:6380 10.0.0.50:6381 10.0.0.51:6381 10.0.0.52:6381 --cluster-replicas 1</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Performing</span> <span class="selector-tag">hash</span> <span class="selector-tag">slots</span> <span class="selector-tag">allocation</span> <span class="selector-tag">on</span> 6 <span class="selector-tag">nodes</span>...</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[0]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 0 <span class="selector-tag">-</span> 5460</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[1]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 5461 <span class="selector-tag">-</span> 10922</span><br><span class="line"><span class="selector-tag">Master</span><span class="selector-attr">[2]</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">Slots</span> 10923 <span class="selector-tag">-</span> 16383</span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 10.0.0.51<span class="selector-pseudo">:6381</span> <span class="selector-tag">to</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 10.0.0.52<span class="selector-pseudo">:6381</span> <span class="selector-tag">to</span> 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">Adding</span> <span class="selector-tag">replica</span> 10.0.0.50<span class="selector-pseudo">:6381</span> <span class="selector-tag">to</span> 10.0.0.52<span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">M</span>: 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[0-5460]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">M</span>: 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span> 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[5461-10922]</span> (5462 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">M</span>: 2<span class="selector-tag">de412dddf4d09fa5095ee3f3d9503c447e22e27</span> 10.0.0.52<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[10923-16383]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line"><span class="selector-tag">S</span>: 31<span class="selector-tag">e0c9ecabe77f920ad0b4db0323fa1c1ab5d7a3</span> 10.0.0.50<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 2<span class="selector-tag">de412dddf4d09fa5095ee3f3d9503c447e22e27</span></span><br><span class="line"><span class="selector-tag">S</span>: <span class="selector-tag">fef0a1ad39d605393b0b629924ead9db2c6cee54</span> 10.0.0.51<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span></span><br><span class="line"><span class="selector-tag">S</span>: 30651<span class="selector-tag">b452124b6fd1e4457e30238f2fd068b5d35</span> 10.0.0.52<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span></span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line">...后面的信息分配槽位与上述一样</span><br></pre></td></tr></table></figure><h5 id="槽位迁移与增删查cluster信息"><a href="#槽位迁移与增删查cluster信息" class="headerlink" title="槽位迁移与增删查cluster信息"></a>槽位迁移与增删查cluster信息</h5><p>槽位迁移操作步骤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli --cluster reshard 10.0.0.50:6380</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Performing</span> <span class="selector-tag">Cluster</span> <span class="selector-tag">Check</span> (<span class="selector-tag">using</span> <span class="selector-tag">node</span> 10.0.0.50<span class="selector-pseudo">:6380)</span></span><br><span class="line"><span class="selector-tag">M</span>: 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[0-5460]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line">...</span><br><span class="line"><span class="selector-tag">M</span>: 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span> 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[5461-10922]</span> (5462 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> <span class="selector-tag">nodes</span> <span class="selector-tag">agree</span> <span class="selector-tag">about</span> <span class="selector-tag">slots</span> <span class="selector-tag">configuration</span>.</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">for</span> <span class="selector-tag">open</span> <span class="selector-tag">slots</span>...</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">slots</span> <span class="selector-tag">coverage</span>...</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> 16384 <span class="selector-tag">slots</span> <span class="selector-tag">covered</span>.</span><br><span class="line"><span class="selector-tag">How</span> <span class="selector-tag">many</span> <span class="selector-tag">slots</span> <span class="selector-tag">do</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">move</span> (<span class="selector-tag">from</span> 1 <span class="selector-tag">to</span> 16384)? 2000   //需要移动多少槽位</span><br><span class="line"><span class="selector-tag">What</span> <span class="selector-tag">is</span> <span class="selector-tag">the</span> <span class="selector-tag">receiving</span> <span class="selector-tag">node</span> <span class="selector-tag">ID</span>? 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span>   //移动给那台<span class="selector-tag">redis</span>节点，输入<span class="selector-tag">node</span> <span class="selector-tag">ID</span>，这里移动给10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">enter</span> <span class="selector-tag">all</span> <span class="selector-tag">the</span> <span class="selector-tag">source</span> <span class="selector-tag">node</span> <span class="selector-tag">IDs</span>.                                    </span><br><span class="line">  Type &#x27;all&#x27; to use all the nodes as source nodes for the hash slots.     //输入all，表示重其他节点平均迁移</span><br><span class="line">  Type &#x27;done&#x27; once you entered all the source nodes IDs.                  //done表示结束</span><br><span class="line"><span class="selector-tag">Source</span> <span class="selector-tag">node</span> <span class="selector-id">#1</span>: 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span>    //需要移动槽位的源<span class="selector-tag">node</span>，可以有多个，这里只移动了10.0.0.50<span class="selector-pseudo">:6380</span>的槽位</span><br><span class="line"><span class="selector-tag">Source</span> <span class="selector-tag">node</span> <span class="selector-id">#2</span>: <span class="selector-tag">done</span>                                       //<span class="selector-tag">done</span>结束</span><br><span class="line"><span class="selector-tag">Ready</span> <span class="selector-tag">to</span> <span class="selector-tag">move</span> 2000 <span class="selector-tag">slots</span>.</span><br><span class="line">  <span class="selector-tag">Source</span> <span class="selector-tag">nodes</span>:</span><br><span class="line">    <span class="selector-tag">M</span>: 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line">       <span class="selector-tag">slots</span>:<span class="selector-attr">[0-5460]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">       1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line">...</span><br><span class="line">    <span class="selector-tag">Moving</span> <span class="selector-tag">slot</span> 2 <span class="selector-tag">from</span> 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span>          //列出需要移动的槽位有哪些</span><br><span class="line"><span class="selector-tag">Do</span> <span class="selector-tag">you</span> <span class="selector-tag">want</span> <span class="selector-tag">to</span> <span class="selector-tag">proceed</span> <span class="selector-tag">with</span> <span class="selector-tag">the</span> <span class="selector-tag">proposed</span> <span class="selector-tag">reshard</span> <span class="selector-tag">plan</span> (<span class="selector-tag">yes</span>/<span class="selector-tag">no</span>)? <span class="selector-tag">yes</span>      //输入<span class="selector-tag">yes</span>表示开始迁移</span><br><span class="line"><span class="selector-tag">Moving</span> <span class="selector-tag">slot</span> 0 <span class="selector-tag">from</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">to</span> 10.0.0.51<span class="selector-pseudo">:6380</span>: </span><br><span class="line"><span class="selector-tag">Moving</span> <span class="selector-tag">slot</span> 1 <span class="selector-tag">from</span> 10.0.0.50<span class="selector-pseudo">:6380</span> <span class="selector-tag">to</span> 10.0.0.51<span class="selector-pseudo">:6380</span>:</span><br></pre></td></tr></table></figure><p>通过info或者check检查redis cluster的信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli --cluster info 10.0.0.50:6380</span><br><span class="line">10.0.0.50:6380 (9d5083b9...) -&gt; 0 keys | 3461 slots | 1 slaves.      </span><br><span class="line">10.0.0.52:6380 (2de412dd...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">10.0.0.51:6380 (0fdf8f79...) -&gt; 0 keys | 7462 slots | 1 slaves.      //增加了两千槽位</span><br><span class="line"></span><br><span class="line">$ redis-cli --cluster check 10.0.0.50:6380                           //check信息内容会比info更丰富些</span><br><span class="line">10.0.0.50:6380 (9d5083b9...) -&gt; 0 keys | 3461 slots | 1 slaves.</span><br><span class="line">10.0.0.52:6380 (2de412dd...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">10.0.0.51:6380 (0fdf8f79...) -&gt; 0 keys | 7462 slots | 1 slaves.</span><br><span class="line"><span class="selector-attr">[OK]</span> 0 <span class="selector-tag">keys</span> <span class="selector-tag">in</span> 3 <span class="selector-tag">masters</span>.</span><br><span class="line">0.00 <span class="selector-tag">keys</span> <span class="selector-tag">per</span> <span class="selector-tag">slot</span> <span class="selector-tag">on</span> <span class="selector-tag">average</span>.</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Performing</span> <span class="selector-tag">Cluster</span> <span class="selector-tag">Check</span> (<span class="selector-tag">using</span> <span class="selector-tag">node</span> 10.0.0.50<span class="selector-pseudo">:6380)</span></span><br><span class="line"><span class="selector-tag">M</span>: 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[2000-5460]</span> (3461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">S</span>: 30651<span class="selector-tag">b452124b6fd1e4457e30238f2fd068b5d35</span> 10.0.0.52<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span></span><br><span class="line"><span class="selector-tag">M</span>: 2<span class="selector-tag">de412dddf4d09fa5095ee3f3d9503c447e22e27</span> 10.0.0.52<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[10923-16383]</span> (5461 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-tag">S</span>: 31<span class="selector-tag">e0c9ecabe77f920ad0b4db0323fa1c1ab5d7a3</span> 10.0.0.50<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 2<span class="selector-tag">de412dddf4d09fa5095ee3f3d9503c447e22e27</span></span><br><span class="line"><span class="selector-tag">S</span>: <span class="selector-tag">fef0a1ad39d605393b0b629924ead9db2c6cee54</span> 10.0.0.51<span class="selector-pseudo">:6381</span></span><br><span class="line">   <span class="selector-tag">slots</span>: (0 <span class="selector-tag">slots</span>) <span class="selector-tag">slave</span></span><br><span class="line">   <span class="selector-tag">replicates</span> 9<span class="selector-tag">d5083b940b8e5aae963b042d2be0ad9f4c9529d</span></span><br><span class="line"><span class="selector-tag">M</span>: 0<span class="selector-tag">fdf8f7922fe38ba9837cd2fa3e5c9f1ab0d649a</span> 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line">   <span class="selector-tag">slots</span>:<span class="selector-attr">[0-1999]</span>,<span class="selector-attr">[5461-10922]</span> (7462 <span class="selector-tag">slots</span>) <span class="selector-tag">master</span></span><br><span class="line">   1 <span class="selector-tag">additional</span> <span class="selector-tag">replica</span>(<span class="selector-tag">s</span>)</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> <span class="selector-tag">nodes</span> <span class="selector-tag">agree</span> <span class="selector-tag">about</span> <span class="selector-tag">slots</span> <span class="selector-tag">configuration</span>.</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">for</span> <span class="selector-tag">open</span> <span class="selector-tag">slots</span>...</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Check</span> <span class="selector-tag">slots</span> <span class="selector-tag">coverage</span>...</span><br><span class="line"><span class="selector-attr">[OK]</span> <span class="selector-tag">All</span> 16384 <span class="selector-tag">slots</span> <span class="selector-tag">covered</span>.</span><br></pre></td></tr></table></figure><p>删除节点与添加节点</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//删除节点</span><br><span class="line">$ redis-cli --cluster del-node 10.0.0.50:6381 31e0c9ecabe77f920ad0b4db0323fa1c1ab5d7a3</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Removing</span> <span class="selector-tag">node</span> 31<span class="selector-tag">e0c9ecabe77f920ad0b4db0323fa1c1ab5d7a3</span> <span class="selector-tag">from</span> <span class="selector-tag">cluster</span> 10.0.0.50<span class="selector-pseudo">:6381</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Sending</span> <span class="selector-tag">CLUSTER</span> <span class="selector-tag">FORGET</span> <span class="selector-tag">messages</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">cluster</span>...</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">Sending</span> <span class="selector-tag">CLUSTER</span> <span class="selector-tag">RESET</span> <span class="selector-tag">SOFT</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">deleted</span> <span class="selector-tag">node</span>.</span><br><span class="line"></span><br><span class="line">//添加节点，添加的从在前，主在后</span><br><span class="line">$ redis-cli --cluster add-node --cluster-slave 10.0.0.50:6381 10.0.0.50:6380 </span><br></pre></td></tr></table></figure><h4 id="redis-cluster通讯过程"><a href="#redis-cluster通讯过程" class="headerlink" title="redis cluster通讯过程"></a>redis cluster通讯过程</h4><p>在分布式存储中需要提供维护节点元数据信息的机制，所谓的元数据是指：节点负责哪些数据，是否出现故障灯状态信息，redis集群采用Gossip（流言）协议。Gossip协议工作原理就是节点不断的交互信息，一段时间后所有的节点都会知道集群完整信息。</p><p><strong>通讯过程</strong></p><ul><li>集群中的每一个节点都会单独开辟一个TCP通道，用于节点之间彼此通信，通信端口在基础端口上加10000</li><li>每个节点在固定周期内荣国特定规则选择结构节点发送ping消息</li><li>接收到ping消息的节点用pong消息作为回应。集群中每个节点通过一定规则挑选要通信的节点，每个节点可能知道全部节点，也可能仅知道部分节点，只要这些节点彼此可以通信，最终它们都会达成一致的状态。当节点出现故障，新节点加入，主从角色会随着变换</li></ul><p>查看通信端口</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ss -lnp|grep redis</span><br><span class="line">tcp    LISTEN     0      128    10.0.0.50:16380                 *:*                   users:((&quot;redis-server&quot;,pid=47847,fd=8))</span><br><span class="line">tcp    LISTEN     0      128    10.0.0.50:16381                 *:*                   users:((&quot;redis-server&quot;,pid=47853,fd=8))</span><br></pre></td></tr></table></figure><p><strong>通讯消息类型</strong></p><p>Gossip协议：负责信息交换，节点彼此发送Gossip消息。常见的消息有：ping、pong、meet和fail等</p><ul><li>meet消息：用于通知新节点加入，消息发送者通知接受者加入到集群，meet消息通信正常后，接收节点会加入到集群中并进行ping和pong的消息交换</li><li>ping消息：集群内交换最频繁的消息，集群内每个节点每秒与其他节点发送ping消息，用于检测节点是否在线和交换彼此信息</li><li>pong消息：接收ping、meet消息时，作为响应消息回复给发送方确认消息正常通信，节点也可以向集群内广播自身的pong消息来通知整个集群对自身状态更新</li><li>fail消息：当有节点下线时，则会在集群内广播一个fail消息，告诉其他节点更新自己的状态</li></ul><p><strong>通讯示意图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210507155750212.png"></p><h4 id="redis-cluster-ASK路由介绍"><a href="#redis-cluster-ASK路由介绍" class="headerlink" title="redis cluster ASK路由介绍"></a>redis cluster ASK路由介绍</h4><p>在集群模式下，redis接收任何键相关命令时首先会计算键对应的槽，再根据槽找出所对应的节点。如果节点是自身，则处理该指令，否则回复MOVED重定向错误，通知客户端请求正确的节点，这个过程称为重定向。如以下例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h redis-1 -p 6381</span><br><span class="line"><span class="selector-tag">redis-1</span><span class="selector-pseudo">:6381</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">vv</span></span><br><span class="line">(<span class="selector-tag">error</span>) <span class="selector-tag">MOVED</span> 12706 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line"></span><br><span class="line">//登录<span class="selector-tag">redis-2</span>主机</span><br><span class="line">$ redis-cli -h redis-2 -p 6380</span><br><span class="line"><span class="selector-tag">redis-2</span><span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">vv</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：可以看出，在实例redis-1的6381不能进行写入的功能，错误的提醒需跳转到redis-2的6380主机才能进行写入。所涉及的跳转就是ASK路由的一种方法</p></blockquote><p>如下图所示，可以看出ASK路由的过程</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210507161106355.png"></p><p>ask路由：在命令行下可以加上-c命令，表示可以允许重定向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli --help</span><br><span class="line"><span class="selector-tag">-c</span>                 <span class="selector-tag">Enable</span> <span class="selector-tag">cluster</span> <span class="selector-tag">mode</span> (<span class="selector-tag">follow</span> <span class="selector-tag">-ASK</span> <span class="selector-tag">and</span> <span class="selector-tag">-MOVED</span> <span class="selector-tag">redirections</span>).</span><br><span class="line"></span><br><span class="line">$ redis-cli -c -h redis-1 -p 6380    //将上-c参数</span><br><span class="line"><span class="selector-tag">redis-1</span><span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">Redirected</span> <span class="selector-tag">to</span> <span class="selector-tag">slot</span> <span class="selector-attr">[12706]</span> <span class="selector-tag">located</span> <span class="selector-tag">at</span> 10.0.0.52<span class="selector-pseudo">:6380</span>  </span><br><span class="line">&quot;<span class="selector-tag">vv</span>&quot;</span><br><span class="line">10.0.0.52<span class="selector-pseudo">:6380</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span>                              //跳转到10.0.0.42主机点解</span><br><span class="line"><span class="selector-tag">-</span>&gt; <span class="selector-tag">Redirected</span> <span class="selector-tag">to</span> <span class="selector-tag">slot</span> <span class="selector-attr">[449]</span> <span class="selector-tag">located</span> <span class="selector-tag">at</span> 10.0.0.50<span class="selector-pseudo">:6380</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><h3 id="predixy实例"><a href="#predixy实例" class="headerlink" title="predixy实例"></a>predixy实例</h3><h4 id="下载predixy包"><a href="#下载predixy包" class="headerlink" title="下载predixy包"></a>下载predixy包</h4><p>下载编译好的二进制安装包</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/joyieldInc/predixy/releases/download/1.0.5/predixy-1.0.5-bin-amd64-linux.tar.gz</span><br><span class="line">$ tar xf predixy-1.0.5-bin-amd64-linux.tar.gz  -C /opt</span><br><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">opt</span>/<span class="selector-tag">predixy-1</span>.0.5/<span class="selector-tag">conf</span></span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">total</span> 36</span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 2395 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">auth</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 1041 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">cluster</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 3426 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">command</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501  781 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">dc</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 2121 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">latency</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 2547 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">predixy</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 1421 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">sentinel</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501 2016 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">standalone</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-rw-r--</span> 1 501 501   98 <span class="selector-tag">Oct</span> 20  2018 <span class="selector-tag">try</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><h4 id="编辑配置文件，启动实例"><a href="#编辑配置文件，启动实例" class="headerlink" title="编辑配置文件，启动实例"></a>编辑配置文件，启动实例</h4><p>Redis实例配置部分，predixy支持Redis Sentinel和Redis Cluster来使用redis，<strong>一个配置里这两种形式只能出现一种</strong>。下述先配置Sentinel</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi predixy.conf</span><br><span class="line"><span class="selector-tag">Bind</span> 127.0.0.1<span class="selector-pseudo">:7617</span></span><br><span class="line"><span class="selector-tag">Include</span> <span class="selector-tag">sentinel</span><span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><p>编辑predixy的sentinel.conf文件，添加三个哨兵，两组redis主从</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ cp sentinel<span class="selector-class">.conf</span>&#123;,<span class="selector-class">.bak</span>&#125;</span><br><span class="line">$ vi sentinel<span class="selector-class">.conf</span></span><br><span class="line">## Examples:</span><br><span class="line">SentinelServerPool &#123;</span><br><span class="line">    Databases <span class="number">16</span></span><br><span class="line">    Hash crc16</span><br><span class="line">    HashTag <span class="string">&quot;&#123;&#125;&quot;</span></span><br><span class="line">    Distribution modula</span><br><span class="line">    MasterReadPriority <span class="number">60</span></span><br><span class="line">    StaticSlaveReadPriority <span class="number">50</span></span><br><span class="line">    DynamicSlaveReadPriority <span class="number">50</span></span><br><span class="line">    RefreshInterval <span class="number">1</span></span><br><span class="line">    ServerTimeout <span class="number">1</span></span><br><span class="line">    ServerFailureLimit <span class="number">10</span></span><br><span class="line">    ServerRetryTimeout <span class="number">1</span></span><br><span class="line">    KeepAlive <span class="number">120</span></span><br><span class="line">    Sentinels &#123;</span><br><span class="line">        + <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26379</span></span><br><span class="line">        + <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26380</span></span><br><span class="line">        + <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">26381</span></span><br><span class="line">    &#125;</span><br><span class="line">    Group master1 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Group master2 &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写redis sentinel脚本，监控两组redis主从</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">sentine</span></span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">total</span> 12</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 904 <span class="selector-tag">May</span>  6 18<span class="selector-pseudo">:04</span> 26379<span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 904 <span class="selector-tag">May</span>  6 18<span class="selector-pseudo">:04</span> 26380<span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 904 <span class="selector-tag">May</span>  6 18<span class="selector-pseudo">:04</span> 26381<span class="selector-class">.conf</span></span><br><span class="line"></span><br><span class="line">//26380和26381实例的配置与26379保持一致</span><br><span class="line">$ vi 26379.conf</span><br><span class="line"><span class="selector-tag">sentinel</span> <span class="selector-tag">known-replica</span> <span class="selector-tag">master1</span> 127.0.0.1 36380</span><br><span class="line"><span class="selector-tag">sentinel</span> <span class="selector-tag">known-replica</span> <span class="selector-tag">master2</span> 127.0.0.1 46380</span><br><span class="line"></span><br><span class="line">//启动</span><br><span class="line">$ redis-server 26379.conf --sentinel</span><br><span class="line">$ redis-server 26380.conf --sentinel</span><br><span class="line">$ redis-server 26381.conf --sentinel</span><br></pre></td></tr></table></figure><p>创建两组redis主从，并启动</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span></span><br><span class="line">$ mkdir redis_36379  redis_36380  redis_46379  redis_46380</span><br><span class="line"></span><br><span class="line">//启动第一组主从</span><br><span class="line">$ cd redis_36379/</span><br><span class="line">$ redis-server --port 36379</span><br><span class="line">$ cd redis_36380</span><br><span class="line">$ redis-server --port 36380 --replicaof 127.0.0.1 36379</span><br><span class="line"></span><br><span class="line">//启动第二组主从</span><br><span class="line">$ cd redis_46379</span><br><span class="line">$ redis-server --port 46379</span><br><span class="line">$ cd redis_46380</span><br><span class="line">$ redis-server --port 46380 --replicaof 127.0.0.1 46379</span><br></pre></td></tr></table></figure><p>连接predixy的7617端口，写入数据并查看数据分配</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 7617</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k4</span> <span class="selector-tag">v4</span></span><br><span class="line"></span><br><span class="line">//连接两组<span class="selector-tag">redis</span>主并查看</span><br><span class="line">$ redis-cli -p 36379</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">2) &quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line"></span><br><span class="line">$ redis-cli -p 46379</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">2) &quot;<span class="selector-tag">k4</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k2</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="通过Tag的方式分配数据"><a href="#通过Tag的方式分配数据" class="headerlink" title="通过Tag的方式分配数据"></a>通过Tag的方式分配数据</h4><p>默认情况下，predixy可以通过<code>&#123;&#125; values</code>进行打tag（也可以自己修改其他的方式）来统一分配到一个redis主，如下述操作</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 7617</span><br><span class="line">&gt; set &#123;kk&#125;q1 v1</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; set &#123;kk&#125;q2 v2</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; set &#123;kk&#125;q3 v3</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//查看两组<span class="selector-tag">redis</span>主情况</span><br><span class="line">$ redis-cli -p 36379</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br><span class="line"></span><br><span class="line">$ redis-cli -p 46379</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;&#123;kk&#125;q3&quot;</span><br><span class="line">2) &quot;&#123;kk&#125;q1&quot;</span><br><span class="line">3) &quot;&#123;kk&#125;q4&quot;</span><br><span class="line">4) &quot;&#123;kk&#125;q2&quot;</span><br></pre></td></tr></table></figure><h4 id="predixy支持单组redis事务"><a href="#predixy支持单组redis事务" class="headerlink" title="predixy支持单组redis事务"></a>predixy支持单组redis事务</h4><p>predixy如果存在两组redis主从，是不能对key执行事务的。但是在使用一组的情况下，是可以对key进行监控和事务的</p><p>查看两组redis主从执行事务情况下的</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -<span class="selector-tag">p</span> 7617</span><br><span class="line">&gt; multi</span><br><span class="line">(error) ERR forbid transaction in current server pool</span><br><span class="line">&gt; watch &#123;kk&#125;q1</span><br><span class="line">(error) ERR forbid transaction in current server pool</span><br></pre></td></tr></table></figure><p>删除master2组，只留master1，查看只有一组的redis主从执行事务情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/predixy-1.0.5/conf/sentinel.conf       </span><br><span class="line">    <span class="selector-tag">Group</span> <span class="selector-tag">master1</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">$ pkill predixy</span><br><span class="line">$ /opt/predixy-1.0.5/bin/predixy /opt/predixy-1.0.5/conf/predixy.conf </span><br><span class="line">$ redis-cli -p 7617</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">watch</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">MULTI</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">exec</span></span><br><span class="line">1) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">2) <span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><h4 id="predixy故障转移"><a href="#predixy故障转移" class="headerlink" title="predixy故障转移"></a>predixy故障转移</h4><p>predixy使用sentinel的配置文件，在监控sentinel的前提下，sentinel监控了redis 主从。所以当主down主的时候，会有新的slave进行替代主。无论后端配置的实例有多少，或多复杂。对于连接predixy的端口，进行写入和读取都是在无感知的（当然在选主的过程中可能会丢失一些数据）</p><p>模拟redis 主down机，查看sentinel日志与主从日志</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 36379 shutdown</span><br><span class="line"></span><br><span class="line">//<span class="selector-tag">sentinel</span>日志，发现<span class="selector-tag">master1</span>组的36379已经<span class="selector-tag">down</span>，开始自动故障转移，将<span class="selector-tag">master1</span>组的主设置为36380</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:19.006</span> # +<span class="selector-tag">sdown</span> <span class="selector-tag">master</span> <span class="selector-tag">master1</span> 127.0.0.1 36379</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:19.066</span> # +<span class="selector-tag">odown</span> <span class="selector-tag">master</span> <span class="selector-tag">master1</span> 127.0.0.1 36379 <span class="selector-id">#quorum</span> 2/2</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:19.136</span> # +<span class="selector-tag">new-epoch</span> 3</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:19.142</span> # +<span class="selector-tag">vote-for-leader</span> 32<span class="selector-tag">e218675943fa543acbeebd6bc9ed68bf7940ec</span> 3</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:19.142</span> # <span class="selector-tag">Next</span> <span class="selector-tag">failover</span> <span class="selector-tag">delay</span>: <span class="selector-tag">I</span> <span class="selector-tag">will</span> <span class="selector-tag">not</span> <span class="selector-tag">start</span> <span class="selector-tag">a</span> <span class="selector-tag">failover</span> <span class="selector-tag">before</span> <span class="selector-tag">Fri</span> <span class="selector-tag">May</span>  7 01<span class="selector-pseudo">:30</span><span class="selector-pseudo">:19</span> 2021</span><br><span class="line">46847<span class="selector-pseudo">:X</span> 07 <span class="selector-tag">May</span> 2021 01<span class="selector-pseudo">:24</span><span class="selector-pseudo">:20.317</span> # +<span class="selector-tag">config-update-from</span> <span class="selector-tag">sentinel</span> 32<span class="selector-tag">e218675943fa543acbeebd6bc9ed68bf7940ec</span> 127.0.0.1 26381 @ master1 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36379</span></span><br><span class="line"><span class="number">46847</span>:X <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">20.317</span> # +switch-master master1 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36380</span></span><br><span class="line"><span class="number">46847</span>:X <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">20.317</span> * +slave slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">36379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36379</span> @ master1 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36380</span></span><br><span class="line"><span class="number">46847</span>:X <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">50.398</span> # +sdown slave <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">36379</span> <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36379</span> @ master1 <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">36380</span></span><br><span class="line"></span><br><span class="line">//redis-<span class="number">36380</span>的日志，丢弃之前缓存的master状态，然后将自己设置成主</span><br><span class="line"><span class="number">6889</span>:M <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">19.364</span> * Discarding previously cached master state.</span><br><span class="line"><span class="number">46889</span>:M <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">19.364</span> # Setting secondary replication ID to <span class="number">714747</span>f58da66e26759ff73049ed3b859dd4e748, valid up to <span class="attribute">offset:</span> <span class="number">31403</span>. New replication ID is <span class="number">71</span>fd48c254418326c844bbd110d39536457dfaf6</span><br><span class="line"><span class="number">46889</span>:M <span class="number">07</span> May <span class="number">2021</span> <span class="number">01</span>:<span class="number">24</span>:<span class="number">19.364</span> * MASTER MODE enabled (user request from <span class="string">&#x27;id=9 addr=127.0.0.1:36114 fd=13 name=sentinel-32e21867-cmd age=104 idle=0 flags=x db=0 sub=0 psub=0 multi=4 qbuf=202 qbuf-free=32566 obl=45 oll=0 omem=0 events=r cmd=exec user=default&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Redis数据导入导出"><a href="#Redis数据导入导出" class="headerlink" title="Redis数据导入导出"></a>Redis数据导入导出</h2><p>下载地址与参考：<a href="https://github.com/vipshop/redis-migrate-tool">https://github.com/vipshop/redis-migrate-tool</a></p><p>安装下载工具</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y libtool bzip2 git -y</span><br><span class="line">$ cd /opt/</span><br><span class="line">$ git clone https://github.com/vipshop/redis-migrate-tool.git</span><br><span class="line">$ cd redis-migrate-tool/</span><br><span class="line">$ autoreconf -fvi</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ src/redis-migrate-tool -h</span><br></pre></td></tr></table></figure><blockquote><p>PS：如果使用git下载不了，那么直接下载.zip包，然后上传解压</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rz -E</span><br><span class="line">$ unzip redis-migrate-tool-master.zip -d /opt/</span><br></pre></td></tr></table></figure><p>创建配置文件</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat redis_6379_to6380_.conf</span><br><span class="line"><span class="selector-attr">[source]</span></span><br><span class="line"><span class="selector-tag">type</span>: <span class="selector-tag">single</span></span><br><span class="line"><span class="selector-tag">servers</span>:</span><br><span class="line"><span class="selector-tag">-</span> 10.0.0.50<span class="selector-pseudo">:6379</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[target]</span></span><br><span class="line"><span class="selector-tag">type</span>: <span class="selector-tag">redis</span> <span class="selector-tag">cluster</span></span><br><span class="line"><span class="selector-tag">servers</span>:</span><br><span class="line"><span class="selector-tag">-</span> 10.0.0.51<span class="selector-pseudo">:6380</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[common]</span></span><br><span class="line"><span class="selector-tag">listen</span>: 0.0.0.0<span class="selector-pseudo">:8888</span></span><br><span class="line"><span class="selector-tag">source</span> <span class="selector-tag">safe</span><span class="selector-pseudo">:true</span></span><br></pre></td></tr></table></figure><p>生成测试数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat for.sh </span><br><span class="line">#!/<span class="selector-tag">bin</span>/<span class="selector-tag">bash</span></span><br><span class="line"></span><br><span class="line">for i in &#123;1..1000&#125;</span><br><span class="line"><span class="selector-tag">do</span></span><br><span class="line">  redis-cli -c -h 10.0.0.40 -p 6379 set yes_k$&#123;i&#125; no_v$&#123;i&#125;</span><br><span class="line">  echo $&#123;i&#125;</span><br><span class="line"><span class="selector-tag">done</span></span><br></pre></td></tr></table></figure><p>开启6379进程，并指定导入命令</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis_shell.sh start 6379</span><br><span class="line">$ redis-migrate-tool -c redis_6379_to6380_.conf </span><br></pre></td></tr></table></figure><p>检查数据是否导入成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ redis-migrate-tool -c redis_6379_to6380_.conf -C redis_check</span><br><span class="line"><span class="selector-tag">Check</span> <span class="selector-tag">job</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span>...</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Checked</span> <span class="selector-tag">keys</span>: 1000</span><br><span class="line"><span class="selector-tag">Inconsistent</span> <span class="selector-tag">value</span> <span class="selector-tag">keys</span>: 0</span><br><span class="line"><span class="selector-tag">Inconsistent</span> <span class="selector-tag">expire</span> <span class="selector-tag">keys</span> : 0</span><br><span class="line"><span class="selector-tag">Other</span> <span class="selector-tag">check</span> <span class="selector-tag">error</span> <span class="selector-tag">keys</span>: 0</span><br><span class="line"><span class="selector-tag">Checked</span> <span class="selector-tag">OK</span> <span class="selector-tag">keys</span>: 1000</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">All</span> <span class="selector-tag">keys</span> <span class="selector-tag">checked</span> <span class="selector-tag">OK</span>!</span><br><span class="line"><span class="selector-tag">Check</span> <span class="selector-tag">job</span> <span class="selector-tag">finished</span>, <span class="selector-tag">used</span> 0.021<span class="selector-tag">s</span></span><br></pre></td></tr></table></figure><h2 id="Redis分析键值大小"><a href="#Redis分析键值大小" class="headerlink" title="Redis分析键值大小"></a>Redis分析键值大小</h2><p>redis的内存使用太太的键值过多，不知如何判断哪些键值占用的容量较大，而在线分析会影响性能。</p><p>下载工具进行分析</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python-pip gcc python-devel -y</span><br><span class="line">$ cd /opt/</span><br><span class="line">$ git clone https://github.com/sripathikrishnan/redis-rdb-tools.git</span><br><span class="line">$ cd redis-rdb-tools</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/redis_cluster/redis_6380/</span><br><span class="line">$ rdb -c memory redis_6380.rdb -f redis_6380.rdb.csv</span><br></pre></td></tr></table></figure><p>分析导出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awk -f &#x27;,&#x27; &#x27;&#123;print $4,$2,$3,$1&#125;&#x27; redis_6380.rdb.csv | sort &gt;6380.txt</span><br></pre></td></tr></table></figure><blockquote><p>PS：更多详细的操作请参考作者的[GitHub][<a href="https://github.com/sripathikrishnan/redis-rdb-tools]%E4%BF%A1%E6%81%AF">https://github.com/sripathikrishnan/redis-rdb-tools]信息</a></p></blockquote><h2 id="Redis作为缓存的问题"><a href="#Redis作为缓存的问题" class="headerlink" title="Redis作为缓存的问题"></a>Redis作为缓存的问题</h2><p>通过下图了解，redis作为缓存在架构中的一个位置，在前端的nginx接收请求会缓解几万的并发压力，分发到后端client server（web集群，微服务spring等服务），再到redis缓存减压几万的数据并发压力，最后到DB（数据库）也就不会有太大的压力（可能就几百或几千的压力）</p><p>那么redis的击穿、穿透和雪崩，是在redis充当缓存的角色才有。充当缓存的过程中，可以设置key的过期时间和使用不同的算法来维持内存的使用。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415121050234.png"></p><h3 id="击穿"><a href="#击穿" class="headerlink" title="击穿"></a>击穿</h3><p><strong>击穿：</strong>是由于key的过期了造成并发访问数据库，前提是发生了高并发的情况（如：且key刚好过期，但过期之后有一大批并发数据过来访问刚好过期的key，由于已经没有该key，所以会造成直接访问数据库获取数据，就会造成所谓的击穿）</p><p><strong>如何解决击穿问题</strong></p><p>那么解决击穿问题，就要先解决并发的问题，需要阻塞并发的数据访问数据库</p><ul><li>可以设置setnx命令（判断key存不存在，不存在才设置），形成分布式锁</li></ul><p>分布式锁本质上要实现的目标就是在Redis里面占一个“位”，当别的进程也要占“位”时，发现已经有人存在了，就会放弃去请求或稍后再试</p><p>占“位”就是通过setnx（set if not exists）命令，只允许被一个客户端占“位”，先到先占，用完了，再调用del命令指令释放，如下述操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k1</span> <span class="selector-tag">true</span>    //<span class="selector-tag">lock</span><span class="selector-pseudo">:k1</span>是一个<span class="selector-tag">key</span>，可以随意起名</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">...........</span><br><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>如下图，这是一个分布式锁通过setex的请求的过程</p><ul><li>请求发现没有该key，并返回nil（get key）</li><li>通过setnx创建没有的key</li><li>只有通过setnx创建了（就是获得锁的人），才能去访问DB</li><li>如果没有成功设置的key，则sleep（睡眠几秒）</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415160611640.png"></p><p>但如果在setnx过程中，逻辑执行中间出现异常了，请求的数据挂了（就是没有设置成功）或del指令没有被调用，那么后面的请求就会一直等着这个锁，直到成功了，就会照成<strong>死锁</strong>的问题。</p><p><strong>如何解决死锁问题</strong></p><p>那么如何解决将死锁变成活锁的问题？</p><ul><li>设置锁的过期时间，但设置锁的过期，设置多久才合适（如果设置了5秒钟，但请求不到1秒就挂了，剩下的时候就需要等待4秒钟。如果设置小了，没更新完或是数据库连接过程中产生拥塞了，就会照成锁超时（显然由产生一个问题）</li><li>那就设置使用多线程，一个线程取库，一个线程监控是否取回来更新锁时间（但是需要代码逻辑的提高）</li><li>当前最好的使用分布式锁，如zookeeper（但比较耗费经费）</li></ul><p>通过setnx设置时间的操作，比如增加5s，这样即使中间出现异常也可以保证5s之后锁会自动释放</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k2</span> <span class="selector-tag">true</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">expire</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k2</span> 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k2</span></span><br><span class="line">&quot;<span class="selector-tag">true</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k2</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">...............</span><br><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>但是还有一个小问题，如果在setnx和expire之间服务器进程突然down了，可能是因为掉电或是人为照成，就会导致expire得不到执行，间接照成死锁</p><p>这种问题的根源在于setnx和expire是两条指令而不是原子指令。如果这两条指令可以一起执行就会出问题。事务也解决不了这个问题，因为expire需要依赖于setnx的执行结构，如果没有抢到锁，expire是不应该执行的，而事务是需要一次性执行的，要么全部执行，要么都不执行</p><ul><li>原子操作：指不会被线程调度机制打断的操作，一旦操作开始，就会一直运行到结束，中间不会有任何线程切换</li></ul><p>解决这个问题，Redis在2.8版本中，加入了set指令的扩展参数，使用的setnx和expire指令可以一起执行，彻底解决了分布式的问题。如下面的操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span> <span class="selector-tag">true</span> <span class="selector-tag">ex</span> 5 <span class="selector-tag">nx</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span> <span class="selector-tag">true</span> <span class="selector-tag">ex</span> 5 <span class="selector-tag">nx</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span></span><br><span class="line">&quot;<span class="selector-tag">true</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">...............</span><br><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">lock</span><span class="selector-pseudo">:k3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>但还是因为不能确定每个key锁等待的时间，所以引出了多线程和zookeeper。如下图，描述解决死锁的三种方法</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415160812865.png"></p><h3 id="穿透"><a href="#穿透" class="headerlink" title="穿透"></a>穿透</h3><p><strong>穿透：</strong>是业务在接收查询过程中，系统根本不存在的这些业务数据（比如：公司是做食品产品的，数据库会将一些热数据放入的redis缓存，但是在前面的业务搜索时候，没有搜索数据库中的全量产品，而搜索了一些不存在的产品，这些数据是在数据库没有的（缓存就更加没有了）。然后这些数据会全部通过数据库查询，本来就没有的数据，却还要消耗资源去查询，这就形成了一种穿透的概念</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415145322542.png"></p><p><strong>如何解决穿透</strong></p><p>得通过布隆过滤器，判断缓存中是否存在，如果存在，就说明可能有一个这个数据（布隆过滤器不是100%判断成功的），那么布隆过滤器有三种采用的算法就，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415150925140.png"></p><ul><li>Client实现bloom算法，自己承载bitmap（位图），redis服务只做缓存</li><li>Client实现bloom算法，将bitmap后置到redis，redis承载bitmap </li><li>Client没有算法，使用redis集成的bloom模块</li></ul><blockquote><p>注：这里的Client不是代表用户客户端，而是在redis前面的服务作为client（如web集群，spring等等服务）</p></blockquote><p>但是布隆过滤有一个缺点，就是不能删除，可能需要选择布隆鸟或者布隆+解决删除的问题（有兴趣的可以去了解）</p><h3 id="雪崩"><a href="#雪崩" class="headerlink" title="雪崩"></a>雪崩</h3><p><strong>雪崩：</strong>跟击穿差不多，雪崩比击穿更真实一些。击穿是一下子一个key产生多个并发请求，而雪崩是几百个key同时生效，然后每个key有20-30个请求，照成数据库的压力。（比如：一些key，设置过期时间是晚上零点整（24:00）过期，结果到24:00过期后，需要等待加载一批新的数据过来，而在这个等待过程中，可能会间接照成大量的key失效，这些失效的key就会去访问数据库，照成数据库的压力）。还有如果设置的过期时间key是24:00，那么过期key必须24:00更新，如果24::00点过了1分，那么获取的就是老数据的，就相当于脏读了</p><p><strong>如何解决雪崩</strong></p><p>在考虑如何解决的雪崩时候，你需要知道什么最容易产生雪崩。通过上述你可能已经知道零点整是最容易产生雪崩，那么解决方案呢，就是使用下述的均匀分布过期时间</p><ul><li><p>均匀分布过期时间（随机），分开3种情况</p><p>1）key必须零点整过期（有时点性），到达一致性的效果</p><p>2）时点性无关，就是key的过期时间是随机的（只要是跟时间点没关的话，就不用考虑那么多了，直接使用随机分布过期时间）</p></li><li><p>怎么解决key有时点性，也有两种方法</p><p>1）跟击穿相差不多，为了达到一致性，第一个过期的key偷偷的向数据库把24:00点的数据更回来（取回来之后，后续的key继续更新回来）</p><p>2）在业务层加上一个判断，零点整延迟（业务只要到24:00了，就随机sleep几秒），这样的小延迟是随机的，在加上redis的过期key也是随机的，所以可以避免不会有太太的请求到数据库</p></li></ul><blockquote><p>注：两种方法需要做一个取舍，要么达到数据库的一致性，一个个更新回来，要么就是随机不管，但也会照成少量的key访问数据库</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210415155827844.png"></p><h2 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h2><p>redis分布式锁，在击穿事件中已经说明，分别是以下方法</p><ul><li>当key过期之后，通过setnx设置key值，判断key是否存在，不存在才能进行创建，只有设置完成的才能访问DB</li><li>合理设置锁的过期时间，锁时间多了，会等待，锁时间少了，锁会过期</li><li>多线程（守护线程，延迟过期时间），一个线程取库，一个线程监控更新回来的锁时间</li><li>zookeeper（最容易的分布式锁），虽然速率是没有redis快，但可以达到准确性和一致性</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis消息队列-5</title>
      <link href="2021/05/10/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-5/"/>
      <url>2021/05/10/Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-5/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis消息订阅"><a href="#Redis消息订阅" class="headerlink" title="Redis消息订阅"></a>Redis消息订阅</h1><h2 id="Pub-Sub（消息订阅）"><a href="#Pub-Sub（消息订阅）" class="headerlink" title="Pub/Sub（消息订阅）"></a>Pub/Sub（消息订阅）</h2><p>消息订阅，发布者不是计划发送消息给特定的订阅者，而是发布的消息分布到不同的频道，不需要知道什么样的订阅者订阅，订阅者对一个或多个频道感兴趣，只需要接收感兴趣的消息，不需要知道什么样的发布者发布的</p><p>消息订阅也可以理解是消息多播，在Redis消息队列中，不支持消息的多播机制。所以为了支持消息多播，Redis不能再依赖5中基本数据类型了，单独使用了一个模块支持消息多播，这个模块就是PubSub，也就是PublisherSubscriber（发布者/订阅者模式）</p><h3 id="推送消息的格式"><a href="#推送消息的格式" class="headerlink" title="推送消息的格式"></a>推送消息的格式</h3><p>消息是一个有三个元素的多块响应，第一个元素是消息类型</p><ul><li>subscribe：表示成功订阅到响应的第二个元素提供的频道，第三个参数代表现在订阅的频道的数量</li><li>unsubscribe：表示成功取消订阅到响应的第二个元素提供的频道，第三个参数代表目前订阅的频道的数据，当最后一个参数是0的时候，不再订阅到任何频道，当在Pub/Sub以外状态，客户端可以发出任何redis命令</li><li>message：这是客户端发出的发布命令的结果，第二个元素是源频道的名称，第三个参数是实际消息的内容</li><li>pmessage：匹配一个模式匹配订阅，第一个元素是原匹配的模式，第三个元素是原频道名称，最后一个元素是实习消息内容</li></ul><h3 id="Pub-Sub示例"><a href="#Pub-Sub示例" class="headerlink" title="Pub/Sub示例"></a>Pub/Sub示例</h3><p>我们查看消息订阅的命令，help @pubsub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">help</span> @pubsub</span></span><br><span class="line">  PUBSUB subcommand [argument [argument ...]]</span><br><span class="line">  summary: Inspect the state of the Pub/Sub subsystem</span><br><span class="line">            发布/订阅子系统的状态</span><br><span class="line">  since: 2.8.0</span><br><span class="line"></span><br><span class="line">  SUBSCRIBE channel [channel ...]</span><br><span class="line">  summary: Listen for messages published to the given channels</span><br><span class="line">            侦听发布到给定频道的消息</span><br><span class="line">  since: 2.0.0</span><br><span class="line">    </span><br><span class="line">  UNSUBSCRIBE [channel [channel ...]]</span><br><span class="line">  summary: Stop listening for messages posted to the given channels</span><br><span class="line">            停止发布到给定频道的消息</span><br><span class="line">  since: 2.0.0</span><br></pre></td></tr></table></figure><p>准备两个窗口，一个窗口订阅（客户端），一个窗口发布（另一个客户端）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">SUBSCRIBE</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">Reading</span> <span class="selector-tag">messages</span>... (<span class="selector-tag">press</span> <span class="selector-tag">Ctrl-C</span> <span class="selector-tag">to</span> <span class="selector-tag">quit</span>)</span><br><span class="line">1) &quot;<span class="selector-tag">subscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">1) &quot;<span class="selector-tag">subscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 2</span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line">&gt; <span class="selector-tag">PUBLISH</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">PUBLISH</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">//回到窗口1会发现多了<span class="selector-tag">k1</span>、<span class="selector-tag">k2</span>的消息信息</span><br><span class="line">&gt; <span class="selector-tag">SUBSCRIBE</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">Reading</span> <span class="selector-tag">messages</span>... (<span class="selector-tag">press</span> <span class="selector-tag">Ctrl-C</span> <span class="selector-tag">to</span> <span class="selector-tag">quit</span>)</span><br><span class="line">1) &quot;<span class="selector-tag">subscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">1) &quot;<span class="selector-tag">subscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 2</span><br><span class="line">1) &quot;<span class="selector-tag">message</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">1) &quot;<span class="selector-tag">message</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">v2</span>&quot;</span><br></pre></td></tr></table></figure><p>UNSUBSCRIBE命令取消订阅所有频道</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">UNSUBSCRIBE</span></span><br><span class="line">1) &quot;<span class="selector-tag">unsubscribe</span>&quot;</span><br><span class="line">2) (<span class="selector-tag">nil</span>)</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="模式订阅"><a href="#模式订阅" class="headerlink" title="模式订阅"></a>模式订阅</h3><p>上面的订阅方式是基本名称订阅的，订阅者订阅一个主题是必须需要明确指定的名称。如果想订阅多个主题，那么就需要subscribe多个名称，那么有没有什么方法可以同时订阅多个名称呢</p><p>答案是有的，就是通过模式匹配订阅，比如下述操作：订阅多个k.aa、k.bb、k.cc发布消息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">PSUBSCRIBE</span> <span class="selector-tag">k</span>.*</span><br><span class="line"><span class="selector-tag">Reading</span> <span class="selector-tag">messages</span>... (<span class="selector-tag">press</span> <span class="selector-tag">Ctrl-C</span> <span class="selector-tag">to</span> <span class="selector-tag">quit</span>)</span><br><span class="line">1) &quot;<span class="selector-tag">psubscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k</span>.*&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">//另一个窗口推送信息，在回去查看就能看见订阅信息了</span><br><span class="line">&gt; <span class="selector-tag">PUBLISH</span> <span class="selector-tag">k</span><span class="selector-class">.aa</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">PUBLISH</span> <span class="selector-tag">k</span><span class="selector-class">.bb</span> <span class="selector-tag">v2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">PUBLISH</span> <span class="selector-tag">k</span><span class="selector-class">.cc</span> <span class="selector-tag">v3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>通过punsubscribe取消模式匹配的订阅消息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">PUNSUBSCRIBE</span> <span class="selector-tag">k</span>.*</span><br><span class="line">1) &quot;<span class="selector-tag">punsubscribe</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k</span>.*&quot;</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="同时匹配模式和频道订阅的消息"><a href="#同时匹配模式和频道订阅的消息" class="headerlink" title="同时匹配模式和频道订阅的消息"></a>同时匹配模式和频道订阅的消息</h3><p>客户端可能多次接收一个消息，如果它订阅的多个模式匹配了同一个发布的消息，或者它订阅的模式和频道同时匹配到一个消息，如以下例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SUBSCRIBE</span> <span class="selector-tag">k1</span></span><br><span class="line">&gt; <span class="selector-tag">PSUBSCRIBE</span> <span class="selector-tag">k</span>*</span><br></pre></td></tr></table></figure><p>如果一个消息被发送到k1，客户端会接收到两条消息：一条是message类型，一条pmessage类型</p><h3 id="Pub-Sub的缺点"><a href="#Pub-Sub的缺点" class="headerlink" title="Pub/Sub的缺点"></a>Pub/Sub的缺点</h3><p>PubSub的发布者发布一个消息，Redis会直接找到相应的订阅者传递过去，如果一个订阅者都没有，那么消息会被直接丢弃。如果有三个订阅者，一个订阅者突然down掉了，发布者还会继续发送信息，另外两个可以实时收到，但是down的订阅者重新连接上之后，就会断链期间产生的消息，从而彻底丢失</p><p>如果Redis重启，PubSub的消息不会持久化，当Redis宕机之后就相当于一个订阅者都没有，所有的消息都会被直接丢弃</p><p>所以这些缺点导致PubSub很少找到应用场景，不过下述还是提到Pub/Sub的一个应用场景</p><h3 id="Pub-Sub应用场景"><a href="#Pub-Sub应用场景" class="headerlink" title="Pub/Sub应用场景"></a>Pub/Sub应用场景</h3><p>对于消息订阅，可以用在一些聊天软件。比如：用户发送一个消息，可以通过订阅该用户的消息，达到实时性的接收，对于内存级别的redis来说，实时接收速度是非常之快的。如果是对于是历史性消息，比如三天以前的数据，可以通过zset类型。如果是更久的消息，那么就要到数据库里取了。如下图简略结构</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210328132033467.png"></p><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Redis 5.0作者发布了Stream结构，它是一个新的支持多播（并可持久化）的消息队列</p><p>Redis Stream它有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的ID和对应的内存。消息是持久化的，Redis重启后，数据还在。结构图如下</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210423161906303.png"></p><p>每个Stream都有唯一的名称，它就是Redis的key，在使用xadd指令追加消息时自动创建。每个Stream都可以挂多个消费组（Consumer Group），每个消费组会有个游标（last_delivered_id）在Stream数组之上往前移动，表示当前消费组已经消费到哪条消息了。每个消费组都有一个Stream内唯一的名称，消费组不会自动创建，它需要单独的指令xgroup create来创建，需要制定从Stream的某个消息ID开始消费，这个ID用来初始化last_delivered_id变量</p><p>每个消费组的状态都是独立的，相互不受影响。也就是说同一份Stream内存的消息会被每个消息组都消费到</p><p>同一个消费组可以挂接多个消费者（Consumer），这些消费组之间是竞争关系，任意一个消费者读取了消息都会使游标last_delivered_id往前移动。每个消费者有个组内唯一名称</p><p>消费者内部会有一个状态变量pending_ids，它记录了当前已经被客户端读取，但是还没有ack的消息。如果客户端没有ack，这个变量里面的消息ID就会越来越多，一旦某个消息被ack，它就开始减少。这个pending_ids变量在Redis官方被称为PEL，也就是Pending Entries List，这是一个核心的数据结构，它用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了而没被处理</p><h3 id="消息ID"><a href="#消息ID" class="headerlink" title="消息ID"></a>消息ID</h3><p>消息ID的形式是timestampInMillis-sequence，例如1527846880572-5，它表示当前的消息在毫米时间戳1527846880572是产生，并且是该毫秒内产生的第5条消息。消息ID可以有服务器自动生成，也可以由客户端自己指定，但是形式必须是“整数-整数”，而且后面加入的消息的ID必须要大于前面的消息ID</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>增删改查指令说明如下</p><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>xadd</td><td>向Stream追加消息</td></tr><tr><td>xdel</td><td>从Stream中删除消息，这里的删除仅仅是设置标志位，不影响消息总长度</td></tr><tr><td>xrange</td><td>获取Stream中的消息列表，会自动过滤已经删除的消息</td></tr><tr><td>xlen</td><td>获取Stream消息长度</td></tr><tr><td>del</td><td>删除整个Stream消息列表中的所有消息</td></tr></tbody></table><p>操作如下：* 号表示服务器自动生成ID，后跟着key、value。名字叫wu，年龄20</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">wu</span> <span class="selector-tag">age</span> 20</span><br><span class="line">&quot;1619189241697<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">li</span> <span class="selector-tag">age</span> 25</span><br><span class="line">&quot;1619189271262<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">zhang</span> <span class="selector-tag">age</span> 30</span><br><span class="line">&quot;1619189279229<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xlen</span> <span class="selector-tag">user</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure><p>xrange的使用，-表示最小值，+表示最大值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> <span class="selector-tag">-</span> +</span><br><span class="line">1) 1) &quot;1619189241697<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;20&quot;</span><br><span class="line">2) 1) &quot;1619189271262<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;25&quot;</span><br><span class="line">3) 1) &quot;1619189279229<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;30&quot;</span><br></pre></td></tr></table></figure><p>指定最小消息ID的列表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> 1619189241697<span class="selector-tag">-0</span> +</span><br><span class="line">1) 1) &quot;1619189241697<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;20&quot;</span><br><span class="line">2) 1) &quot;1619189271262<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;25&quot;</span><br><span class="line">3) 1) &quot;1619189279229<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;30&quot;</span><br><span class="line"></span><br><span class="line">// 指定最大消息<span class="selector-tag">ID</span>的列表</span><br><span class="line">&gt;  <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> <span class="selector-tag">-</span> 1619189279229<span class="selector-tag">-0</span></span><br><span class="line">1) 1) &quot;1619189271262<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;25&quot;</span><br><span class="line">2) 1) &quot;1619189279229<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;30&quot;</span><br><span class="line">3) 1) &quot;1619189241697<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;20&quot;</span><br></pre></td></tr></table></figure><p>xdel删除id</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xdel</span> <span class="selector-tag">user</span> 1619189241697<span class="selector-tag">-0</span>  </span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">xlen</span> <span class="selector-tag">user</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> <span class="selector-tag">-</span> +</span><br><span class="line">1) 1) &quot;1619189271262<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;25&quot;</span><br><span class="line">2) 1) &quot;1619189279229<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;30&quot;</span><br></pre></td></tr></table></figure><p>删除整个Stream</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">user</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> <span class="selector-tag">-</span> +</span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br></pre></td></tr></table></figure><h3 id="独立消费"><a href="#独立消费" class="headerlink" title="独立消费"></a>独立消费</h3><p>可以在不定义消费组的情况下进行Stream消息的独立消费，当Stream没有新消息时，甚至可以阻塞等待。Redis设计了一个单独的消费指令xread，可以将Stream当成普通的消息队列（list）来使用。使用xread时，可以完全忽略消费组的存储，就好像Stream是一个普通的列表一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">wu</span> <span class="selector-tag">age</span> 20</span><br><span class="line">&quot;1619190038141<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">li</span> <span class="selector-tag">age</span> 25</span><br><span class="line">&quot;1619190049414<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">zhang</span> <span class="selector-tag">age</span> 25</span><br><span class="line">&quot;1619190055507<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xread</span> <span class="selector-tag">count</span> 2 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> 0<span class="selector-tag">-0</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">user</span>&quot;</span><br><span class="line">   2) 1) 1) &quot;1619190038141<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;20&quot;</span><br><span class="line">      2) 1) &quot;1619190049414<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;25&quot;</span><br></pre></td></tr></table></figure><p>从Stream尾部读取一条消息，但不会返回任何消息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; xread count 1 streams user $</span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><p>从尾部阻塞等待新消息到来，下面的指令会堵住，直到新消息到来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; xread block 0 count 1 streams user $</span><br><span class="line"></span><br><span class="line">//重新打开一个创建，往这个<span class="selector-tag">streams</span> <span class="selector-tag">key</span>里塞消息</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">zhang</span> <span class="selector-tag">age</span> 30</span><br><span class="line">&quot;1619192318067<span class="selector-tag">-0</span>&quot;</span><br><span class="line"></span><br><span class="line">//在切换到当前窗口，就可以看到阻塞已经解除了</span><br><span class="line">&gt; xread block 0 count 1 streams user $</span><br><span class="line">1) 1) &quot;<span class="selector-tag">user</span>&quot;</span><br><span class="line">   2) 1) 1) &quot;1619192318067<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;30&quot;</span><br><span class="line">(69.62<span class="selector-tag">s</span>)  // 显示的等待时间</span><br></pre></td></tr></table></figure><p>客户端如果使用xread进行顺序消费，那么一定要记住当前消费到哪里了，也就是返回的消息ID。下次继续调用xread，将上次返回的最后一个消息ID作为参数传递过去，就可以继续消费后续的消息</p><p>block 0表示永久阻塞，直到消息到来；block 1000表示阻塞1s，如果1s内没有任何消息到来，就返回nil。它与list的BLPOP功能是一样的，但list并没有那么都参数，只有key和时间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; xread block 1000 count 1 streams user $</span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">(1.03<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><h3 id="创建消费组"><a href="#创建消费组" class="headerlink" title="创建消费组"></a>创建消费组</h3><p>Stream通过xgroup create 指令创建消费组，创建消费组需要提供起始消息ID参数用来初始化last_delivered_id变量，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210423173758945.png"></p><p>操作如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 表示从头部开始消费</span><br><span class="line">&gt; <span class="selector-tag">xgroup</span> <span class="selector-tag">create</span> <span class="selector-tag">user</span> <span class="selector-tag">u1</span> 0<span class="selector-tag">-0</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">// $ 表示从尾部开始消费，只接受新消息，当前Stream消息会全部忽略</span><br><span class="line">&gt; xgroup create user u2 $</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">// 获取<span class="selector-tag">Stream</span>消息</span><br><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">stream</span> <span class="selector-tag">user</span></span><br><span class="line"> 1) &quot;<span class="selector-tag">length</span>&quot;</span><br><span class="line"> 2) (<span class="selector-tag">integer</span>) 4                // 共4个消息</span><br><span class="line"> 3) &quot;<span class="selector-tag">radix-tree-keys</span>&quot;</span><br><span class="line"> 4) (<span class="selector-tag">integer</span>) 1</span><br><span class="line"> 5) &quot;<span class="selector-tag">radix-tree-nodes</span>&quot;</span><br><span class="line"> 6) (<span class="selector-tag">integer</span>) 2</span><br><span class="line"> 7) &quot;<span class="selector-tag">last-generated-id</span>&quot;</span><br><span class="line"> 8) &quot;1619192318067<span class="selector-tag">-0</span>&quot;</span><br><span class="line"> 9) &quot;<span class="selector-tag">groups</span>&quot;</span><br><span class="line">10) (<span class="selector-tag">integer</span>) 2             // 2个消费组</span><br><span class="line">11) &quot;<span class="selector-tag">first-entry</span>&quot;           // 第一个消息</span><br><span class="line">12) 1) &quot;1619190038141<span class="selector-tag">-0</span>&quot;</span><br><span class="line">    2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">       2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">       3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">       4) &quot;20&quot;</span><br><span class="line">13) &quot;<span class="selector-tag">last-entry</span>&quot;           // 最后一个消息</span><br><span class="line">14) 1) &quot;1619192318067<span class="selector-tag">-0</span>&quot;</span><br><span class="line">    2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">       2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">       3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">       4) &quot;30&quot;</span><br></pre></td></tr></table></figure><p>获取Stream的消息组信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">groups</span> <span class="selector-tag">user</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">u1</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">consumers</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 0               // 该消费组还没有消费者</span><br><span class="line">   5) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 0               // 该消费组没有正在处理的消息</span><br><span class="line">   7) &quot;<span class="selector-tag">last-delivered-id</span>&quot;</span><br><span class="line">   8) &quot;0<span class="selector-tag">-0</span>&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">u2</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">consumers</span>&quot;               </span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 0               // 该消费组还没有消费者</span><br><span class="line">   5) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 0               // 该消费组没有正在处理的消息</span><br><span class="line">   7) &quot;<span class="selector-tag">last-delivered-id</span>&quot;</span><br><span class="line">   8) &quot;1619192318067<span class="selector-tag">-0</span>&quot;</span><br></pre></td></tr></table></figure><h3 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h3><p>Stream提供了xreadgroup指令可以进行消费组的组内消费，需要提供消费组名称、消费者名称和起始消息ID。它与xread一样，也可以阻塞等待新消息。读到新消息后，对应的消息ID就会进入消费者的PEL（正在处理的消息）结构里，客户端处理完毕后使用xack指令通知服务器，说明本条消息已经处理完毕，该消息ID就会从PEL中移除</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// &gt; 号表示从当前消费组的 <span class="selector-tag">last_delivered_id</span> 后面开始读</span><br><span class="line">// 每当消费者读取一条消息，<span class="selector-tag">last_deliverd_id</span> 变量就会前进</span><br><span class="line">&gt; <span class="selector-tag">xreadgroup</span> <span class="selector-tag">group</span> <span class="selector-tag">cg1</span> <span class="selector-tag">c1</span> <span class="selector-tag">count</span> 1 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> &gt;</span><br><span class="line">1) 1) &quot;<span class="selector-tag">user</span>&quot;</span><br><span class="line">   2) 1) 1) &quot;1619351012169<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;20&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">xreadgroup</span> <span class="selector-tag">group</span> <span class="selector-tag">cg1</span> <span class="selector-tag">c2</span> <span class="selector-tag">count</span> 2 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> &gt;</span><br><span class="line">1) 1) &quot;<span class="selector-tag">user</span>&quot;</span><br><span class="line">   2) 1) 1) &quot;1619351016477<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;20&quot;</span><br><span class="line">   2) 1) 1) &quot;1619351021008<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;20&quot;</span><br><span class="line"></span><br><span class="line">// 再继续读取，就没有消息了</span><br><span class="line">&gt; <span class="selector-tag">xreadgroup</span> <span class="selector-tag">group</span> <span class="selector-tag">cg1</span> <span class="selector-tag">c1</span> <span class="selector-tag">count</span> 1 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> &gt;</span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line"></span><br><span class="line">// 可以使用阻塞，等待信息</span><br><span class="line">&gt; <span class="selector-tag">xreadgroup</span> <span class="selector-tag">group</span> <span class="selector-tag">cg1</span> <span class="selector-tag">c1</span> <span class="selector-tag">block</span> 0 <span class="selector-tag">count</span> 1 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> &gt;</span><br><span class="line"></span><br><span class="line">//到另一个窗口发布消息</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> * <span class="selector-tag">name</span> <span class="selector-tag">tian</span> <span class="selector-tag">age</span> 40</span><br><span class="line">&quot;1619351579794<span class="selector-tag">-0</span>&quot;</span><br><span class="line"></span><br><span class="line">// 在回到当前窗口，阻塞以解除，收到新消息</span><br><span class="line">&gt; <span class="selector-tag">xreadgroup</span> <span class="selector-tag">group</span> <span class="selector-tag">cg1</span> <span class="selector-tag">c1</span> <span class="selector-tag">block</span> 0 <span class="selector-tag">count</span> 1 <span class="selector-tag">streams</span> <span class="selector-tag">user</span> &gt;</span><br><span class="line">1) 1) &quot;<span class="selector-tag">user</span>&quot;</span><br><span class="line">   2) 1) 1) &quot;1619351579794<span class="selector-tag">-0</span>&quot;</span><br><span class="line">         2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">            2) &quot;<span class="selector-tag">tian</span>&quot;</span><br><span class="line">            3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">            4) &quot;40&quot;</span><br><span class="line">(33.89<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><p>观察消费组信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">groups</span> <span class="selector-tag">user</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">cg1</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">consumers</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 2        // 两个消费者</span><br><span class="line">   5) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 4        // 共5条正在处理的信息还没有 <span class="selector-tag">ack</span></span><br><span class="line">   7) &quot;<span class="selector-tag">last-delivered-id</span>&quot;</span><br><span class="line">   8) &quot;1619351579794<span class="selector-tag">-0</span>&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">cg2</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">consumers</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 0     // 消费组 <span class="selector-tag">cg2</span>没有任何变化，前面的信息一直操作的是<span class="selector-tag">cg1</span></span><br><span class="line">   5) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 0    </span><br><span class="line">   7) &quot;<span class="selector-tag">last-delivered-id</span>&quot;</span><br><span class="line">   8) &quot;1619351021008<span class="selector-tag">-0</span>&quot;</span><br><span class="line"></span><br><span class="line">// 如果同一个消费组有多个消费者，则可以通过 <span class="selector-tag">xinfo</span> <span class="selector-tag">consumers</span> 指令观察每个消费者的状态</span><br><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">consumers</span> <span class="selector-tag">user</span> <span class="selector-tag">cg1</span> </span><br><span class="line">1) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c1</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 3        // 共3条待处理消息</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 265012   // 空闲了多长时间<span class="selector-tag">ms</span>没有读取消息了</span><br><span class="line">2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c2</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 526555</span><br></pre></td></tr></table></figure><p>接下来我们ack 一条信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xack</span> <span class="selector-tag">user</span> <span class="selector-tag">cg1</span> 1619351579794<span class="selector-tag">-0</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">consumers</span> <span class="selector-tag">user</span> <span class="selector-tag">cg1</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c1</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 2      // 变成了两条信息</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 405718</span><br><span class="line">2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c2</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 667261</span><br></pre></td></tr></table></figure><p>ack所有消息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xack</span> <span class="selector-tag">user</span> <span class="selector-tag">cg1</span> 1619351021008<span class="selector-tag">-0</span> 1619351016477<span class="selector-tag">-0</span> 1619351012169<span class="selector-tag">-0</span></span><br><span class="line">&gt; <span class="selector-tag">xinfo</span> <span class="selector-tag">consumers</span> <span class="selector-tag">user</span> <span class="selector-tag">cg1</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c1</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 0</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 513734</span><br><span class="line">2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">c2</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">pending</span>&quot;</span><br><span class="line">   4) (<span class="selector-tag">integer</span>) 0</span><br><span class="line">   5) &quot;<span class="selector-tag">idle</span>&quot;</span><br><span class="line">   6) (<span class="selector-tag">integer</span>) 775277</span><br></pre></td></tr></table></figure><h3 id="限制创建Stream的问题"><a href="#限制创建Stream的问题" class="headerlink" title="限制创建Stream的问题"></a>限制创建Stream的问题</h3><p>如果消息积累太多，Stream的链表很长，内容会不会溢出。xdel指令又不会删除消息，它只是给消息做了个标志位</p><p>Redis提供了一个定长Stream功能。在xadd的指令中提供一个定长长度参数maxlen，就可以将老的消息杀敌，而且确保链表不超过指定长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">xlen</span> <span class="selector-tag">user</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">xadd</span> <span class="selector-tag">user</span> <span class="selector-tag">maxlen</span> 3 * <span class="selector-tag">name</span> <span class="selector-tag">lu</span> <span class="selector-tag">age</span> 20</span><br><span class="line">&quot;1619352319696<span class="selector-tag">-0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">xlen</span> <span class="selector-tag">user</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">xrange</span> <span class="selector-tag">user</span> <span class="selector-tag">-</span> +</span><br><span class="line">1) 1) &quot;1619351021008<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;20&quot;</span><br><span class="line">2) 1) &quot;1619351579794<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">tian</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;40&quot;</span><br><span class="line">3) 1) &quot;1619352319696<span class="selector-tag">-0</span>&quot;</span><br><span class="line">   2) 1) &quot;<span class="selector-tag">name</span>&quot;</span><br><span class="line">      2) &quot;<span class="selector-tag">lu</span>&quot;</span><br><span class="line">      3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">      4) &quot;20&quot;</span><br></pre></td></tr></table></figure><h3 id="消息忘记ack的结果"><a href="#消息忘记ack的结果" class="headerlink" title="消息忘记ack的结果"></a>消息忘记ack的结果</h3><p>Stream在每个消费者结构中保存了正在处理中的消息ID列表PEL，如果消费者收到了消息，处理完了但是没有回复ack，就会导致PEL列表不端增长。如果有很多消费组，那么这个PEL占用的内存就会越大</p><h3 id="PEL如何避免消息丢失"><a href="#PEL如何避免消息丢失" class="headerlink" title="PEL如何避免消息丢失"></a>PEL如何避免消息丢失</h3><p>当客户端消费者读取Stream消息时，在Redis服务器将消息回复给客户端的过程中，如果客户端突然断开了连接，那么这个消息客户端还没有被收到就丢失了。</p><p>PEL里会保存发出去的消息ID。待客户端重新连接上之后，可以再次收到PEL中的消息ID列表。此时xreadgroup的起始消息ID必须是任意有效的消息ID，一般将参数设为0-0，表示读取所有的PEL消息以及自last_delivered_id之后的新消息</p><h3 id="Stream的高可用"><a href="#Stream的高可用" class="headerlink" title="Stream的高可用"></a>Stream的高可用</h3><p>Stream的高可用是建立在主从复制基础上的，它和其他数据结构的复制机制没有区别，也就是说在Sentinel和Cluster集群环境下，Stream是可以支持高可用的。</p><p>不过鉴于Redis的指令复制是异步的，在failover发生时，Redis可能会丢失极小部分数据，这一点Redis的其他数据结构是一样的</p><h3 id="分区Partition"><a href="#分区Partition" class="headerlink" title="分区Partition"></a>分区Partition</h3><p>Redis的服务器没有原生支持分区能力，如果想要使用分区，那就需要分配多个Stream，然后在客户端使用一定的策略在生产消息到不同的Stream。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Stream的消费模型借鉴了Kafka的消费分组的概念，弥补了Redis PubSub不能持久化消息的缺点。Stream又不同于Kafka，Kafka的消息可以分Partition，而Stream不行。如果非要分Parition的话，得在客户端做，提供不同的Stream名称，对消息进行hash取模来选择往哪个Stream里赛</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis扩展功能-4（Pipeline、事务与Bloom等...）</title>
      <link href="2021/05/10/Redis%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD-4%EF%BC%88Pipeline%E3%80%81%E4%BA%8B%E5%8A%A1%E4%B8%8EBloom%E7%AD%89%EF%BC%89/"/>
      <url>2021/05/10/Redis%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD-4%EF%BC%88Pipeline%E3%80%81%E4%BA%8B%E5%8A%A1%E4%B8%8EBloom%E7%AD%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-扩展功能"><a href="#Redis-扩展功能" class="headerlink" title="Redis-扩展功能"></a>Redis-扩展功能</h1><h2 id="Pipelining-管道"><a href="#Pipelining-管道" class="headerlink" title="Pipelining(管道)"></a>Pipelining(管道)</h2><p>Pipeline是Redis服务提供的一种特别技术，这种技术可以加速Redis的存储效率，但是Pipeline本身并不是Redis服务器直接提供的技术，是由客户端提供的，跟服务器没有什么直接的关系</p><p>Redis其实与HTTP协议相似，都是请求-应答的模式，客户端请求传送给服务器，服务器处理完后，再响应回复给客户端，期间需要消耗一个数据包的来回时间。当你执行多个请求时，那就需要花费多个数据包来回时间</p><p>那么一个请求相当于一个写，一个响应相当于一个读，客户端是进行 写-读-写-读 完整指令的，如果将读写顺序调整，改成 写-写-读-读，这些指令就可以同时完成。这样的连续 写-读 就只需要花费一次网络来回</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210327211424622.png"></p><p>这就是Pipeline的作用，客户端通过对管道中的指令列表改变读写顺序来减少网络的的IO时间，指令越多，效果越好</p><h3 id="Pipeline示例"><a href="#Pipeline示例" class="headerlink" title="Pipeline示例"></a>Pipeline示例</h3><p>安装一个nc连接，通过nc对redis进行一个socket连接，然后等待服务端响应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y nmap-ncat</span><br><span class="line">$ nc localhost 6379</span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">+<span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">+<span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-tag">keys</span> *</span><br><span class="line">*2</span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">k2</span></span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">k1</span></span><br></pre></td></tr></table></figure><p>也可以通过系统的“|”进行连接写入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ echo -e &quot;set k3 99\nincr k3\n get k2&quot; | nc localhost 6379</span><br><span class="line">+<span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-pseudo">:100</span></span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">v2</span></span><br><span class="line">$ redis-cli get k3</span><br><span class="line">&quot;100&quot;</span><br></pre></td></tr></table></figure><h3 id="Pipeline管道压力测试"><a href="#Pipeline管道压力测试" class="headerlink" title="Pipeline管道压力测试"></a>Pipeline管道压力测试</h3><p>Redis自来一款压力测试工具redis-benchmark，使用这个工具可以进行管道的测试</p><p>对于普通的set指令进行测试，QPS大约3w/s左右</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark -t set -q</span><br><span class="line"><span class="selector-tag">SET</span>: 31407.04 <span class="selector-tag">requests</span> <span class="selector-tag">per</span> <span class="selector-tag">second</span></span><br></pre></td></tr></table></figure><p>可以加入Pipeline选项P参数，它表示单个管道内并行的其你去数量，如下所示，当P=2时，QPS达到了5w/s，当P=3时达到了9w/s</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark -t set -P 2 -q</span><br><span class="line"><span class="selector-tag">SET</span>: 58582.31 <span class="selector-tag">requests</span> <span class="selector-tag">per</span> <span class="selector-tag">second</span></span><br><span class="line">$ redis-benchmark -t set -P 3 -q</span><br><span class="line"><span class="selector-tag">SET</span>: 90954.55 <span class="selector-tag">requests</span> <span class="selector-tag">per</span> <span class="selector-tag">second</span></span><br></pre></td></tr></table></figure><p>还可以通过多个请求，通过不加管道和加管道的差异</p><ul><li>-n测试请求的个数</li><li>-t是只运行以逗号分隔的测试列表，</li><li>-r是对SET/GET/INCR使用随机键，对SADD使用随机值</li><li>-P是以管道传输，默认1表示无管道</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark -t set -n 1000000 -r 1000 </span><br><span class="line">====== SET ======8.10</span><br><span class="line">  1000000 <span class="selector-tag">requests</span> <span class="selector-tag">completed</span> <span class="selector-tag">in</span> 35.12 <span class="selector-tag">seconds</span></span><br><span class="line">  50 <span class="selector-tag">parallel</span> <span class="selector-tag">clients</span></span><br><span class="line">................................省略...........................</span><br><span class="line"></span><br><span class="line">$ redis-benchmark -t set -n 1000000 -r 1000 -P 2</span><br><span class="line">====== SET ======</span><br><span class="line">  1000066 <span class="selector-tag">requests</span> <span class="selector-tag">completed</span> <span class="selector-tag">in</span> 19.40 <span class="selector-tag">seconds</span></span><br><span class="line">  50 <span class="selector-tag">parallel</span> <span class="selector-tag">clients</span></span><br><span class="line">................................省略...........................</span><br></pre></td></tr></table></figure><p>可以看出使用管道之后速度明显是更快完成100w个请求，使用越多的管道，则执行的时间越少。当然如果发现QPS已经上不去了，就代表CPU处理能力已经达到了瓶颈，Redis的单线程CPU消耗已经100%了，所以无法在继续提升</p><h2 id="Redis从文件批量插入数据"><a href="#Redis从文件批量插入数据" class="headerlink" title="Redis从文件批量插入数据"></a>Redis从文件批量插入数据</h2><p>通过一条条写入的执行命令，这对于大量的数据，实在麻烦了些，如果能将一条条命令存储到文件中，那麻烦的步骤会少很多，Redis就支持文件批量插入数据，可看如下步骤</p><p><strong>创建文件</strong></p><p>首先创建一个文件，将要执行的命令写入进去</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat a.txt</span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">sadd</span> <span class="selector-tag">xuexi</span> 90 <span class="selector-tag">wu</span> 80 <span class="selector-tag">li</span> 70 <span class="selector-tag">liu</span></span><br><span class="line"><span class="selector-tag">hset</span> <span class="selector-tag">username</span> <span class="selector-tag">user</span> <span class="selector-tag">liu</span></span><br></pre></td></tr></table></figure><p>执行导入，导入使用cat和redis-cli的命令组合，一个用来读取文件内容，一个用来发送文件到redis执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat a.txt | redis-cli</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>然后进入redis查看是否成功导入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6379</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;<span class="selector-tag">xuexi</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">username</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">k1</span>&quot;</span><br></pre></td></tr></table></figure><p>可以看到，输入的命令是多少，那么返回的记录就是多少，并且告诉我们执行的结果。如果有更多的导入指令，可以使用–pipe这个参数来启动pipe协议，减少返回结果的输出，还能更快的执行命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat a.txt | redis-cli --pipe</span><br><span class="line"><span class="selector-tag">All</span> <span class="selector-tag">data</span> <span class="selector-tag">transferred</span>. <span class="selector-tag">Waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">last</span> <span class="selector-tag">reply</span>...</span><br><span class="line"><span class="selector-tag">Last</span> <span class="selector-tag">reply</span> <span class="selector-tag">received</span> <span class="selector-tag">from</span> <span class="selector-tag">server</span>.</span><br><span class="line"><span class="selector-tag">errors</span>: 0, <span class="selector-tag">replies</span>: 4</span><br></pre></td></tr></table></figure><h3 id="文件的转码"><a href="#文件的转码" class="headerlink" title="文件的转码"></a>文件的转码</h3><p>redis-cli中只支持dos格式的换行符\r\n，如果是Linux、Mac下或者Windows下，最好转个码，如果导入失败，可能就是没有转码的原因</p><p>下载的转码的命令，进行转码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y unix2dos</span><br><span class="line">$ unix2dos a.txt </span><br><span class="line"><span class="selector-tag">unix2dos</span>: <span class="selector-tag">converting</span> <span class="selector-tag">file</span> <span class="selector-tag">a</span><span class="selector-class">.txt</span> <span class="selector-tag">to</span> <span class="selector-tag">DOS</span> <span class="selector-tag">format</span> ...</span><br></pre></td></tr></table></figure><h3 id="文件导入的注意事项"><a href="#文件导入的注意事项" class="headerlink" title="文件导入的注意事项"></a>文件导入的注意事项</h3><ul><li>导入指令文件最好不要一行结束后留空格或留空行，否则可能会出现问题</li><li>文件导入前，先转码，这样可以保证文件是可导入的。当然要注意，如果转码失败，导入肯定也失败</li></ul><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><p>为了保证连续多个操作的原子性，数据库通常都会存在事务的支持。比如mysql，每个事务的操作指令begin、commit和roollback，begin是开启事务，commit时提交事务，rollback是事务的回滚</p><p>Redis在事务的处理形式也差不多，命令分别是multi、exec、discard。multi是事务的开始，exec是事务的执行，discard是事务的丢弃，可以看出redis是没有回滚功能的，虽然没有回滚功能，但是这种做法也有如下优点：</p><ul><li>Redis的事务命令只会因为错误的语法才会报错，或是使用错误类型。从实用性的角度来看，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中发现，而不是出现在生产环境</li><li>Redis的特点就是速度快，所以在不需要回滚的功能，则可以在内容保持简单和快速</li></ul><p>可以通过帮助查看redis的事务，获取事务命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@transactions</span></span><br><span class="line"></span><br><span class="line">  DISCARD -</span><br><span class="line">  <span class="attribute">summary:</span> Discard all commands issued after MULTI</span><br><span class="line">           丢弃MULTI之后发出所有命令</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  EXEC -</span><br><span class="line">  <span class="attribute">summary:</span> Execute all commands issued after MULTI</span><br><span class="line">           执行MULTI之后发出所有命令</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  MULTI -</span><br><span class="line">  <span class="attribute">summary:</span> Mark the start of a transaction block</span><br><span class="line">           标记事务快的开始</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  UNWATCH -</span><br><span class="line">  <span class="attribute">summary:</span> Forget about all watched keys</span><br><span class="line">           去除所有已观看的按键</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">2.2</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">  WATCH key [key ...]</span><br><span class="line">  <span class="attribute">summary:</span> Watch the given keys to determine execution of the MULTI/EXEC block</span><br><span class="line">           监视给定的键以确定MULTI/EXEC快的执行</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">2.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="事务示例"><a href="#事务示例" class="headerlink" title="事务示例"></a>事务示例</h3><h4 id="事务的开启与执行"><a href="#事务的开启与执行" class="headerlink" title="事务的开启与执行"></a>事务的开启与执行</h4><p>multi开始事务时，所有的指令在exec之前是不执行的，而是缓存在服务器的一个事务队列中，当服务器收到exec指令，则开始执行事务队列，执行完后一次性返回所有命令的运行结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">MULTI</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">EXEC</span></span><br><span class="line">1) <span class="selector-tag">OK</span></span><br><span class="line">2) <span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><p>QUEUED返回结果是一个简单字符串，它表示指令已经被服务器缓存在队列中了</p><h4 id="事务的执行先后顺序"><a href="#事务的执行先后顺序" class="headerlink" title="事务的执行先后顺序"></a>事务的执行先后顺序</h4><p>redis是一个单进程的服务，所以在执行过程都会以队列的形式进行处理，不用担心被其他指令打搅，保证执行的“原子性”，比如下图的两个操作，删除一个key和查询一个key，如果删除key的执行先到达到，那么在查询的就会出现nil</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210329144348795.png"></p><p><strong>操作示例</strong></p><p>打开两个窗口，同时开启事务，分别执行上述图的命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line">&gt; <span class="selector-tag">MULTI</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">exec</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">//回到窗口1</span><br><span class="line">&gt; <span class="selector-tag">exec</span></span><br><span class="line">1) (<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="事务原子性"><a href="#事务原子性" class="headerlink" title="事务原子性"></a>事务原子性</h3><p>事务原子性可以简单的理解，在指事务执行过程中要么全部成功，要么全部失败，但redis事务是不支持原子性的，如下面例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">incr</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">EXEC</span></span><br><span class="line">1) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">2) (<span class="selector-tag">error</span>) <span class="selector-tag">ERR</span> <span class="selector-tag">value</span> <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">an</span> <span class="selector-tag">integer</span> <span class="selector-tag">or</span> <span class="selector-tag">out</span> <span class="selector-tag">of</span> <span class="selector-tag">range</span></span><br><span class="line">3) <span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k3</span></span><br><span class="line">&quot;<span class="selector-tag">v3</span>&quot;</span><br></pre></td></tr></table></figure><p>上述的例子事务过程中间有一个执行失败了因为之前设置的k2是字符串，所以不能使用数学运算。但事务的失败，并不影响后面的执行，所以我们查看k3的值依然是设置到的。可以看出Redis事务是不具备”原子性”，而只是满足了事务的“隔离性”中的串行化</p><h3 id="事务的WATCH"><a href="#事务的WATCH" class="headerlink" title="事务的WATCH"></a>事务的WATCH</h3><p>WATCH使得EXEC命令需要有条件地执行：事务只能在所有被监视键都没有被修改的前提下执行，如果这个前提不能满足，事务是不会执行的，如下述的例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span>                </span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">watch</span> <span class="selector-tag">k1</span>               //开启监控</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line">&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">sdfdgsd</span>       //修改<span class="selector-tag">k1</span>的值     </span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">exec</span></span><br><span class="line">1) <span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//在回到窗口1执行<span class="selector-tag">exex</span>，会发现什么也没有执行，因为<span class="selector-tag">k1</span>值已经变动，所以窗口1的事务不会执行</span><br><span class="line">&gt; <span class="selector-tag">exec</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">sdfdgsd</span>&quot;</span><br></pre></td></tr></table></figure><p>WATCH命令还可以被调用多次，对多个键从WATCH执行之后开始生效，直到调用EXEC为止，如下述操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">watch</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span> <span class="selector-tag">k3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><p>使用无参数的UNWATH命令可以手动取消对所有键的监视</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">unwatch</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span> </span><br></pre></td></tr></table></figure><h3 id="事务的DISCARD"><a href="#事务的DISCARD" class="headerlink" title="事务的DISCARD"></a>事务的DISCARD</h3><p>Redis事务提供一个discard指令，用于丢弃事务缓存队列中的所有指令，不过要在exec之前执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> 10</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;10&quot;</span><br><span class="line">&gt; <span class="selector-tag">multi</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">incr</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">incr</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">QUEUED</span></span><br><span class="line">&gt; <span class="selector-tag">discard</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;10&quot;</span><br></pre></td></tr></table></figure><h3 id="事务小结"><a href="#事务小结" class="headerlink" title="事务小结"></a>事务小结</h3><ul><li>从事务的执行先后顺序，可以看出事务的执行是原子性的（对于每一个指令），开启事务之后执行exec，那么事务的所有指令都会被执行</li><li>但事务原子性是不支持，开启事务到结束事务过程中，每个事务都可以被执行，不管是否发生错误。但这样只满足了事务的隔离性，并没有满足原子性</li><li>使用watch监视的key过程中，事务只能在所有被监视键都没有被修改的前提下执行。如果被修改，则执行返回nil（这个功能是通过redis的check-and-set（CAS）行为，也称乐观锁）</li><li>事务不支持回滚，保持简单和速度</li></ul><h2 id="Bloom-布隆过滤器"><a href="#Bloom-布隆过滤器" class="headerlink" title="Bloom(布隆过滤器)"></a>Bloom(布隆过滤器)</h2><h3 id="Bloom是什么"><a href="#Bloom是什么" class="headerlink" title="Bloom是什么"></a>Bloom是什么</h3><p>可以理解Bloom过滤器是不怎么精确的set结构，使用它的方法判断某个对象存不存在，比如：黑客攻击你的服务器，大量搜索一些网站没有的数据，缓存也没有，就会全部压到数据库，使数据库处理压力增大，处理效率降低，甚至整个数据库崩溃。那么Bloom过滤器就是处理该问题的一种方法</p><p>Bloom过滤器有可能会误判，不是真正的到达100%精确。但设置参数合理，它的精确度也可以很高，只有小小的误判概率，这个误判可以说是当Bloom布隆器说某个值存在时，这个值有可能不存在；当它说某个不存在时，那这个值肯定不存在。</p><h3 id="Bloom过滤器不同算法及原理"><a href="#Bloom过滤器不同算法及原理" class="headerlink" title="Bloom过滤器不同算法及原理"></a>Bloom过滤器不同算法及原理</h3><ul><li>Client实现bloom算法，自己承载bitmap（位图），redis服务只做缓存</li><li>Client实现bloom算法，将bitmap后置到redis，redis承载bitmap </li><li>Client没有算法，使用redis集成的bloom模块</li></ul><blockquote><p>注：这里的Client不是代表用户客户端，而是在redis前面的服务作为client（如web集群，spring等等服务）</p></blockquote><p>每个Bloom过滤器对应到Redis的数据结构里面的就是一个大型的位数组和几个不一样的无偏hash函数，所谓的无偏就是能够把元素的hash值均匀的分配，让元素被hash映射到位数组中，位置是随机的，比如下图元素e、g、f</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210331100422012.png"></p><p>当Bloom过滤器添加key时，会使用hash函数对key进行hash，算出一个整数索引值，，然后对位数组长度进行取模运算得到一个位置，每个hash函数都会算得一个不同的位置。再将位数组的这几个位置置为1，完成add添加的操作</p><p>向Bloom过滤器询问key是否存在时，跟add一样，也会把hash的几个位置算出来，看看位数组中这几个位置是否都为1，只要有一个位为0，就说明Bloom过滤器中这个key是不存在的。如果几个位都是1，也不能说明这个key就一定存在，只是极有可能存在，因为这些位被置为1可能是因为其他的key存在所致。如果这个位数组比较宽松，判断正确的概率就会很大，再者这个位数组比较拥挤，判断正确的概率就会降低。计算判断概率的公式复杂，大概了解就行</p><blockquote><p>注意：使用时不要让实际元素数量远大于初始化数量，当实际元素数量超出初始化数量时，要对Bloom过滤器进行重建，重新分配一个更大的过滤器，再将所有的历史元素批量添加进</p></blockquote><h3 id="Bloom模块安装"><a href="#Bloom模块安装" class="headerlink" title="Bloom模块安装"></a>Bloom模块安装</h3><p>这里的部署，我是通过redis集成的模块安装，需要进入官网找到Bloom模块</p><ul><li>可以通过GitHub提供docket进行安装</li><li>也可以通过下载包之后编译安装</li></ul><p>这里演示的是下载之后编译安装</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210330155428792.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210330155501200.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210330155546086.png"></p><p>通过wget命令下载blomm过滤器，如果下载不了，则选择下载在本地的.zip压缩包，然后进行上传</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wegt https://github.com/RedisBloom/RedisBloom.git</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">$ rz -E</span><br><span class="line">$ ls</span><br><span class="line"><span class="selector-tag">RedisBloom-master</span><span class="selector-class">.zip</span></span><br></pre></td></tr></table></figure><p>解压之后进行make编译</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ unzip RedisBloom-master.zip </span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>加载redisblomm.so文件到redis，加载之后进行测试，如果导入之后多出BF.xx和CF.xx的命令，那么就是导入成功。可通过help @generic</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server --loadmodule /server/soft/RedisBloom-master/redisbloom.so</span><br><span class="line">$ help @generic</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210330161839592.png"></p><blockquote><p>PS：加载模块也可以通过配置文件进行加载：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"># <span class="selector-tag">Load</span> <span class="selector-tag">modules</span> <span class="selector-tag">at</span> <span class="selector-tag">startup</span>. <span class="selector-tag">If</span> <span class="selector-tag">the</span> <span class="selector-tag">server</span> <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">able</span> <span class="selector-tag">to</span> <span class="selector-tag">load</span> <span class="selector-tag">modules</span></span><br><span class="line"># <span class="selector-tag">it</span> <span class="selector-tag">will</span> <span class="selector-tag">abort</span>. <span class="selector-tag">It</span> <span class="selector-tag">is</span> <span class="selector-tag">possible</span> <span class="selector-tag">to</span> <span class="selector-tag">use</span> <span class="selector-tag">multiple</span> <span class="selector-tag">loadmodule</span> <span class="selector-tag">directives</span>.</span><br><span class="line">#</span><br><span class="line"># <span class="selector-tag">loadmodule</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">my_module</span><span class="selector-class">.so</span></span><br><span class="line"># <span class="selector-tag">loadmodule</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">other_module</span><span class="selector-class">.so</span></span><br><span class="line"><span class="selector-tag">loadmodule</span> /<span class="selector-tag">server</span>/<span class="selector-tag">soft</span>/<span class="selector-tag">RedisBloom-master</span>/<span class="selector-tag">redisbloom</span><span class="selector-class">.so</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="Bloom的数据结构（RedisBloom模块）"><a href="#Bloom的数据结构（RedisBloom模块）" class="headerlink" title="Bloom的数据结构（RedisBloom模块）"></a>Bloom的数据结构（RedisBloom模块）</h3><blockquote><p>模块的使用与操作地址：<a href="https://oss.redislabs.com/redisbloom/">https://oss.redislabs.com/redisbloom/</a></p></blockquote><p>RedisBloom模块提供了四种数据结构，可扩展的Bloom filter，cuckoo filter(布谷鸟过滤器），count-min sketch（计算最小草图）和top-k。数据结构</p><ul><li>Bloom and cuckoo filters 用于高度精确的确定元素是否是set的成员</li><li>count-min sketch 通常用于确定流中事件的频率，可以查询计算最小草图，以获得给定时间概率的估计值</li><li>top-k 维护k个最常出现的项目列表</li></ul><h4 id="Bloom-vs-Cuckoo"><a href="#Bloom-vs-Cuckoo" class="headerlink" title="Bloom vs Cuckoo"></a>Bloom vs Cuckoo</h4><p>Bloom过滤器通过在插入项目时表现出更好性能和可伸缩性（如果经常添加数据集到你的项目，则Blomm过滤器会是理想的原则）</p><p>Cuckoo过滤器可以快速执行检查操作，以及可以删除（Bloom过滤器是不能删除元素的）</p><h4 id="Bloom的基本用法"><a href="#Bloom的基本用法" class="headerlink" title="Bloom的基本用法"></a>Bloom的基本用法</h4><p>bf.add和bf.exists。bf.add添加元素，bf.exists查询元素是否存在，用法与set集合的sadd和sismember。bf.add只能添加一个元素，如果要添加多个需要使用bf.madd，同样如果需要查询多个元素是否存在，需要用到bf.mexists指令</p><p><strong>操作示例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">BF</span><span class="selector-class">.ADD</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">BF</span><span class="selector-class">.EXISTS</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">BF</span><span class="selector-class">.EXISTS</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">BF</span><span class="selector-class">.MADD</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span> <span class="selector-tag">a2</span> <span class="selector-tag">c2</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">2) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">BF</span><span class="selector-class">.MEXISTS</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span> <span class="selector-tag">a2</span> <span class="selector-tag">c2</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">2) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>测试的结果很精确，但毕竟是少量的，在添加多个元素下，Bloom过滤器才会出现误判</p><h4 id="Cuckoo的基本用法"><a href="#Cuckoo的基本用法" class="headerlink" title="Cuckoo的基本用法"></a>Cuckoo的基本用法</h4><p>Cuckoo只有cf.add和cf.addnx添加key，没有批量添加，但是有批量查询cf.mexists，命令的操作方法与blomm过滤器差不多，但是cuckoo还多出了cf.del可以删除key</p><p><strong>操作示例</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.add</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">CF</span><span class="selector-class">.EXISTS</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.add</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.add</span> <span class="selector-tag">k2</span> <span class="selector-tag">c2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.mexists</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span> <span class="selector-tag">c2</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 1</span><br><span class="line">2) (<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.del</span> <span class="selector-tag">k2</span> <span class="selector-tag">c2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">cf</span><span class="selector-class">.exists</span> <span class="selector-tag">k2</span> <span class="selector-tag">c2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h2 id="缓存LRU-LFU算法"><a href="#缓存LRU-LFU算法" class="headerlink" title="缓存LRU/LFU算法"></a>缓存LRU/LFU算法</h2><h3 id="LRU回收算法"><a href="#LRU回收算法" class="headerlink" title="LRU回收算法"></a>LRU回收算法</h3><p>当Redis内存超出了物理内存限制时，内存的数据就会开始于磁盘产生频繁的交换（swap）。这会使得Redis的性能急剧下降，对于高访问两点redis来说，这样极大限制redis的存取效率</p><p>为了限制最大使用的内存，Redis了提供了配置参数maxmemory来限制内存超出期望的大小。当超出限制时，Redis提供了集中可选的策略（maxmemory-policy）来让用户自己决定使用哪种方法进行存取空间的限制</p><ul><li>noeviction：尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。这种策略不会继续服务写请求，读请求可以进行，这样保证不会丢失数据（对于redis作为缓存是不会选择该策略的，但作为数据库则默认选择该策略，来保证数据不丢失）</li><li>allkeys-lru：尝试回收最少使用的键（LRU），使得新添加的数据有空间释放（淘汰的key对象是全体的key集合，而不只是过期key的集合，也就是没有设置过期时间的也会被淘汰）</li><li>volatile-lru：尝试回收最少使用的键（LRU），使得新添加的数据有空间释放（但仅限于设置了过期时间的key，没有设置过期的时间key不会淘汰）</li><li>allkeys-random：跟allkey-lru相同，淘汰的全体key是随机的（太随意）</li><li>volatile-random：跟volatile-lru相同，淘汰的过期key是随机的（太随意）</li><li>volatile-ttl：回收再过期集合的键，并且优先回收存货时间（TTL）较短的键（这种策略会根据设置的TTL值，TTL值越小的将被淘汰）</li></ul><p>如果上述的策略，除了noeviction，没有键满足回收的条件的话，那么久相当于没有设置，和noeviction差不多</p><p>volatile-xxx策略只针对过期时间的key进行淘汰，allkeys-xxx策略是所有key进行淘汰，如果将redis作为缓存使用，那么选择allkeys-xx策略优先，客户端写缓存时不必携带过期时间，可以让缓存更高效。如果还想同时使用Redis的持久化功能，那就使用volatile-xxx策略，这样可以保留没有设置过期时间的key，不会被LRU算法淘汰</p><h3 id="近似LRU算法"><a href="#近似LRU算法" class="headerlink" title="近似LRU算法"></a>近似LRU算法</h3><p>Redis使用的是还有近似LRU算法，它跟LRU算法还不太一样，之所以使用LRU算法，那是因为其需要消耗大量的额外内存。近似LRU算法在现有数据结构的基础上使用随机采样法来淘汰元素，能够到达和LRU算法非常相似的效果</p><p>LRU算法对少量的keys进行取样，然后收取其中一个最好的key（被访问时间最早的），比如：Redis在执行写操作时，发现内存超出maxmemroy设置的值，就会执行一个LRU淘汰算法，算法会随机取样除5（数据可以自己设置）个key，然后淘汰最旧的key。如果淘汰后内存还超出maxmemory，那就会继续取样淘汰，知道内存低于maxmemory为止</p><p>取样的参数通过maxmemory-samples进行调整，如果是设置allkeys，就从所有的key集合中随机取样，如果是volatile，就从带过期时间的key集合做随机取样，取样的key默认值是5</p><p><strong>真实的LRU算法与近似的算法通过下图图像对比</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210331140054592.png"></p><ul><li>浅灰色是已经被回收的对象</li><li>灰色待是没有被回收的对象</li><li>绿色是被添加的对象</li></ul><p>在LRU实现的理论中，在旧键中的第一半将会过期，Redis的LRU算法则是概率的过期旧的键，对于Redis2.8和3.0，3.0算法效果更接近LRU算法。因为Redis3.0在算法中增加了淘汰池，淘汰池是一个数组，它的大小是maxmemory_samples，在每一次淘汰循环中，新的随机得出的key列表会和淘汰池中的key列表进行融合，淘汰掉最旧的一个key之后，保留剩余较旧的key列表放入淘汰池中，等待下一次循环</p><blockquote><p>注意：LRU只是个预测键将如何被访问的模型。另外，如果你的数据访问模式非常接近幂定律，大部分的访问将集中在一个键的集合中，LRU的近似算法将会处理的很好</p></blockquote><h3 id="LFU回收算法"><a href="#LFU回收算法" class="headerlink" title="LFU回收算法"></a>LFU回收算法</h3><p>LFU是Redis4.0开始有的，全称是Least Frequently Used，表示按最近的访问频率进行淘汰，它更精准地表示一个key被访问的热度。如果一个key长时间不馁访问，只是偶然被访问了一下，那在LRU算法下，是不容易被淘汰的。因为LRU算法认为这个key是热键，而LFU算法需要追踪最近一段时间的访问频率，如果某个key只是偶然被访问一下，是不足以为热键的，它需要在近一段时间访问多次才会被LFU认为是热键</p><p>配置LFU模式，可使用一下策略如下：</p><ul><li>volatile-lfu：对带过期时间段key执行LFU淘汰算法</li><li>allkeys-lfu：对所有的key执行LFU淘汰算法</li></ul><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><h3 id="key过期策略"><a href="#key过期策略" class="headerlink" title="key过期策略"></a>key过期策略</h3><p>Redis所有的数据结构都可以设置过期时间，过期时间一到，就会被自动删除。Redis会将每个设置了过期时间的key放入一个独立的字典中，以后会定时遍历这个字段来删除到期的key。除了定时遍历，Redis还使用惰性策略来删除过期的key，就是在客户端访问这个key的时候，对这个key过期时间进行检查，如果过期了就立即删除。可以说定时遍历是集中处理，而惰性策略就是零散处理。</p><h3 id="定时扫描策略"><a href="#定时扫描策略" class="headerlink" title="定时扫描策略"></a>定时扫描策略</h3><p>Redis默认每秒进行10次过期扫描，过期扫描不会遍历过期字典中所有的key，而是采用一种贪心策略。比如：从过期字典中随机选出20个key，删除这个20个key中已经过期的key，如果过期的key的比例超过1/4，那就重复字典选key</p><p>同时，为了保证过期扫描不会出现循环过度，导致线程卡死的现象，算法还增加了扫描时间的上限，默认不会超过25ms</p><p><strong>假设一个大型的Redis实例中所有的key在同一时间过期了，会出现怎样的结果？</strong></p><p>Redis会持续扫描过期字典（循环多次），直到过期字典中过期的key变得稀疏，才会定制（循环次数）下降。这就会导致线上读写请求出现明显的卡顿情况。导致这种卡顿的另外一种原因是内存管理器需要频繁回收内存页，这也会产生一定的CPU消耗</p><p>当客户端请求到来时，服务器如果正好进入过期扫描状态，客户端的请求将会等待至少25ms后才会进行处理，如果客户端将超时时间设置得比较短。如10ms，那么就会出现大量的链接因为超时而关闭，业务端就会出现很多异常，而且这时你还无法从Redis的slowlog中看到慢查询记录，因为慢查询指的是逻辑处理过程慢，不包含等待时间</p><p>所以业务开发人员一定要注意过期时间，如果有大批量的key过期，要给过期时间设置一个随机范围，而不能全部在同一时间过期</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在目标过期时间上增加一天的随机事件</span><br><span class="line"><span class="selector-tag">redis</span><span class="selector-class">.expire_at</span>(<span class="selector-tag">key</span>, <span class="selector-tag">random</span><span class="selector-class">.randint</span>(86400) + <span class="selector-tag">expire_ts</span>)</span><br></pre></td></tr></table></figure><p>在一些活动系统中，因为活动是一期一会，下一期活动举办时，前面几期活动的很多数据都可以丢弃了，所以需要给相关的活动数据设置一个过期时间，以减少不必要的Redis内存占用。如果不加注意，你可能会将过期时间设置为活动结束时间在增加一个常量的冗余时间，如果参与活动的人数太多，就会导致大量的key同时过期</p><h3 id="过期的问题"><a href="#过期的问题" class="headerlink" title="过期的问题"></a>过期的问题</h3><ul><li>设置过期key，重新读之后，会不会根据访问的时间延长？</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">expire</span> <span class="selector-tag">k1</span> 50</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 48</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 39</span><br></pre></td></tr></table></figure><p>从示例可以看出，在发生读时，设置过期的key是不会根据访问的时间进行延长</p><ul><li>设置过期key，在重新设置值之后，key的过期是否会重置时间？</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">expire</span> <span class="selector-tag">k1</span> 50</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 48</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">a1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">a1</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-1</span></span><br></pre></td></tr></table></figure><p>从示例可以看出，如果发生写，就会直接剔除key的过期时间</p><h2 id="懒惰删除"><a href="#懒惰删除" class="headerlink" title="懒惰删除"></a>懒惰删除</h2><h3 id="Redis使用unlink懒惰删除"><a href="#Redis使用unlink懒惰删除" class="headerlink" title="Redis使用unlink懒惰删除"></a>Redis使用unlink懒惰删除</h3><p>删除指令del，会直接释放对象的内存，大部分情况下，这个指令非常快，没有明显延迟。不过如果被删除的key是一个非常大的对象。比如一个包含了上千万个元素的hash，那么删除操作就会导致单线程卡顿</p><p>Redis为了解决卡顿这个问题，在4.0版本中引入了unlink指令，它能对删除操作进行懒处理，丢给后台线程来异步回收内存</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span> <span class="selector-tag">ex</span> 50</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 48</span><br><span class="line">&gt; <span class="selector-tag">unlink</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-2</span></span><br></pre></td></tr></table></figure><p>但是不是所有的unlink操作都会延后处理，如果对应key所占用的内存很小，延后处理就没有必要了，这时候Redis会将对应key的内存立即回收，跟del指令一样</p><h3 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h3><p>Redis提供了flushdb和flushall指令，用来清空数据库，这也是极其缓慢的操作。Redis4.0同样给这个两个指令带来了异步化，在指令后面增加async参数就可以丢给后台线程慢慢处理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">flushall</span> <span class="selector-tag">async</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br></pre></td></tr></table></figure><h3 id="AOF-Sync"><a href="#AOF-Sync" class="headerlink" title="AOF Sync"></a>AOF Sync</h3><p>Redis需要每秒（该数量可设置）1次同步AOF日志到磁盘，确保消息尽量不丢失。但需要调用sync函数，这个操作比较耗时，会导致主线程的效率下降，所以Redis也将这个操作移到异步线程来完成。执行AOF Sync操作的线程是一个独立的异步线程，和前面的懒惰删除线程不是一个线程，同样它也有一个属于自己的任务队列，队列里只用来存放AOF Sync任务</p><h3 id="更多异步删除点"><a href="#更多异步删除点" class="headerlink" title="更多异步删除点"></a>更多异步删除点</h3><p>除了del指令和flush操作之外，Redis在key的过期、LRU淘汰、rename指令过程中，也会实施回收内存。此外，还有一种特殊的flush操作，其发生于正在进行全量同步的从节点中，在接受完整的rdb文件后，也需要将当前的内存一次性清空，以加载整个rdb文件的内容到内存</p><p>Redis4.0位这些删除点也带来了异步删除机制，打开这些点需要额外的设置选项</p><ul><li>slave-lazy-flush：从节点接受完rdb文件后的flush操作</li><li>lazyfree-lazy-eviction：内存达到maxmemory时进行淘汰</li><li>lazyfree-lazy-expire key：过期删除</li><li>lazyfree-lazy-server-del rename：指令删除destKey</li></ul><h2 id="RESP通信协议"><a href="#RESP通信协议" class="headerlink" title="RESP通信协议"></a>RESP通信协议</h2><p>RESP是Redis序列化协议（Redis Serialization Protocol）的简写。它是一种直观的文本协议，实现过程简单，快速地被计算机解析</p><p>Redis协议将传输的结构数据分为5中最小单元类型，单元结束时统一加上回车换行符号\r\n</p><ul><li>单行字符串回复（单行回复）以“+”符号开头</li><li>多行字符串回复（批量回复）以“$”符号开头，后跟字符串长度</li><li>整数回复（正整形数字回复）值以“:”符号开头，后跟整数的字符串形式</li><li>错误消息（单行字符串回复的另一种展示形式）以“-”符号开头</li><li>数组（多个批量回复）以“*”号开头，后跟数组的长度</li></ul><p><strong>单行字符串（单行回复）</strong></p><p>状态回复（或者单行回复）以“+”开头，然后以“\r\n”结尾的单行字符串形式，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span>          //客户端返回的显示</span><br><span class="line"></span><br><span class="line">+<span class="selector-tag">OK</span>\<span class="selector-tag">r</span>\<span class="selector-tag">n</span>     //实际服务端返回</span><br></pre></td></tr></table></figure><p><strong>多行字符串回复（批量回复）</strong></p><p>多行字符串回复被服务器用于返回一个单二进制安全字符串。服务器发送第一行回复，该行以“$”开始，后跟实际要发送的字节数，接着就是CRLF，然后是实际数据，最后是2个字节的CRLF。如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span>&quot;              // 客户端实际返回</span><br><span class="line">  </span><br><span class="line">$5\r\nhello\r\n      // 服务端实际返回 </span><br></pre></td></tr></table></figure><p>如果请求的值不存在，多行字符回复使用特殊的-1来作为数据长度，如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k2</span></span><br><span class="line">(<span class="selector-tag">nil</span>)               // 客户端实际返回</span><br><span class="line"></span><br><span class="line">$-1\r\n            // 服务端实际返回</span><br></pre></td></tr></table></figure><p><strong>整数回复（正整数）</strong></p><p>整数回复使用以“:”作为开头，如“:10\r\n”。像INCR、DECR或者STRLEN等用整形回复作为实际回复值，还有EXIST将true返回1，为false返回0。如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">lpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">v1</span> <span class="selector-tag">v2</span> <span class="selector-tag">v3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3     //客户端实际返回</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:3</span>\<span class="selector-tag">r</span>\<span class="selector-tag">r</span>         //服务端实际返回</span><br></pre></td></tr></table></figure><p><strong>错误消息</strong></p><p>错误消息发送类似于状态回复。唯一的不同是第一个字节用“-”代替“+”。错误的消息即在你执行的过程使用错误的参数或者命令不存在等问题。如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sset</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">error</span>) <span class="selector-tag">ERR</span> <span class="selector-tag">unknown</span> <span class="selector-tag">command</span> `<span class="selector-tag">sset</span>`, <span class="selector-tag">with</span> <span class="selector-tag">args</span> <span class="selector-tag">beginning</span> <span class="selector-tag">with</span>: `<span class="selector-tag">k1</span>`,  //客户端返回的显示</span><br><span class="line">...</span><br><span class="line"><span class="selector-tag">-</span>(<span class="selector-tag">error</span>) <span class="selector-tag">ERR</span> <span class="selector-tag">unknown</span> <span class="selector-tag">command</span> `<span class="selector-tag">sset</span>`, <span class="selector-tag">with</span> <span class="selector-tag">args</span> <span class="selector-tag">beginning</span> <span class="selector-tag">with</span>: `<span class="selector-tag">k1</span>`,\<span class="selector-tag">r</span>\<span class="selector-tag">n</span>  //服务端实现返回</span><br></pre></td></tr></table></figure><p><strong>数组回复（多个批量回复）</strong></p><p>数组回复，以“*”为开头，后跟实际要发送的行数以及CRLF，接着后面的参数跟多行字符串回复一样。像list类型的LRANGE指令返回多于一个单元素。用一个初始行作为前缀来指示多少个批量写在后面。如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">lpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">v1</span> <span class="selector-tag">v2</span> <span class="selector-tag">v3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3             </span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span>     // 客户端实际回复</span><br><span class="line">1) &quot;<span class="selector-tag">v3</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">v2</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line"></span><br><span class="line">*3\r\n$2\r\nv3$2\r\nv2$2\r\nv1\r\n   // 服务端实际回复</span><br></pre></td></tr></table></figure><p>如果指定的key不存在，则被认为是空的列表，且数值0被当做数组回复计数值来发送：如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list2</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)     // 客户端实际回复</span><br><span class="line"></span><br><span class="line">*0\<span class="selector-tag">r</span>\<span class="selector-tag">n</span>            // 服务端实际回复</span><br></pre></td></tr></table></figure><p>如果使用BLPOP指令超时，它返回nil多批量回复。这种类型多批量回复的计数器是-1，且值用nil来解析。如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">BLPOP</span> <span class="selector-tag">list1</span> 5</span><br><span class="line">(<span class="selector-tag">nil</span>)             // 客户端实际回复</span><br><span class="line">(5.09<span class="selector-tag">s</span>)          </span><br><span class="line"></span><br><span class="line">*<span class="selector-tag">-1</span>              // 服务端实际回复   </span><br></pre></td></tr></table></figure><p>而这种情况，客户端返回的是一个空对象，就不是一个空列表。</p><p><strong>嵌套消息</strong></p><p>scan命令可以用来扫描服务器包含的所有key列表，它是以游标的形式获取，一次只获取部分</p><p>scan命令返回的是一个嵌套数组。数组的第一个值表示游标的值，如果这个值为零，说明已经遍历完成。如果不为零，则可以使用下一个游标值继续遍历。数组的第二个值又是一个数组，这个数组就是key列表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">a</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">...</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k4</span> <span class="selector-tag">d</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">scan</span> 0</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">k2</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">k4</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">   4) &quot;<span class="selector-tag">k1</span>&quot;</span><br></pre></td></tr></table></figure><p>上述是客户端实际回复，下面是服务端实际回复</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">*3</span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">k2</span></span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">k4</span></span><br><span class="line">$2</span><br><span class="line"><span class="selector-tag">k3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>PS：Redis协议里有大量冗余回车换行符，但这不影响它成为一个互联网技术领域受欢迎的文本协议。因为使用来简单，易理解和易实现，有很多开源项目也是用RESP作为它的通讯协议</p></blockquote><h2 id="Redis内部简化"><a href="#Redis内部简化" class="headerlink" title="Redis内部简化"></a>Redis内部简化</h2><p>Redis是一个非常耗费内存的数据库，它的数据都会放在内存中，如果不注意节约内存使用，Redis就可能会出现溢出。虽然有LRU和LFU的这些回收策略，但是我也还是要关注如果去优化或压缩自己所用的内存。Redis作者为数据结构的内存占用增加了非常多的优化点，这些优化也是以牺牲代码的可读性为代价的，但都是值得的</p><h3 id="32bit-VS-64bit"><a href="#32bit-VS-64bit" class="headerlink" title="32bit VS 64bit"></a>32bit VS 64bit</h3><p>Redis如果使用32bit进行编译，内部所有数据结构所使用的指针空间占用会少一半。如果你的Redis使用内存不超过4GB，可以考虑使用32bit进行编译，能够节约大量的内存空间</p><p>4GB的容量作为一些小型站点的缓存数据已经是够了的，如果不足在通过添加的方式来解决</p><h3 id="小对象压缩存储"><a href="#小对象压缩存储" class="headerlink" title="小对象压缩存储"></a>小对象压缩存储</h3><h4 id="ziplist"><a href="#ziplist" class="headerlink" title="ziplist"></a>ziplist</h4><p>如果Redis内存管理的集合数据结构小，它会使用紧凑存储形式压缩存储。Redis的ziplist是一个紧凑的字节数组结构，每个元素之间是紧挨着的，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210423120215479.png"></p><p>如果存储的是hash结构，那么key和value会作为两个entry被相邻存储</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">us</span> <span class="selector-tag">user1</span> <span class="selector-tag">wu</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">us</span> <span class="selector-tag">user2</span> <span class="selector-tag">li</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">us</span></span><br><span class="line">&quot;<span class="selector-tag">ziplist</span>&quot;</span><br></pre></td></tr></table></figure><p>如果它存储的是zset结果，那么value和score会作为两个entry被相邻存储</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 90 <span class="selector-tag">wu</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 80 <span class="selector-tag">li</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">ziplist</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="intset和hashtable"><a href="#intset和hashtable" class="headerlink" title="intset和hashtable"></a>intset和hashtable</h4><p>Redis的intset是一个紧凑的整数数组结构，用于存放元素都是整数且元素个数较少的set集合。</p><p>如果整数可以用uint16表示，那么intset的元素就是16位的数组。如果新加入的整数超过了unit16的表示范围，那么就使用uint32表示。如果新加入的元素超过了unit32的表示范围，那么就使用unit64表示。Redis支持set集合动态从uint16升级到unit32，再升级到uint64</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210423140943378.png"></p><p>操作如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> 1 2 3</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">intset</span>&quot;</span><br></pre></td></tr></table></figure><p>如果set里存储的是字符串，那么set立即升级为hashtable结构</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k2</span> <span class="selector-tag">v1</span> <span class="selector-tag">v2</span> <span class="selector-tag">v3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">object</span> <span class="selector-tag">encoding</span> <span class="selector-tag">k2</span></span><br><span class="line">&quot;<span class="selector-tag">hashtable</span></span><br></pre></td></tr></table></figure><h4 id="小对象压缩参数"><a href="#小对象压缩参数" class="headerlink" title="小对象压缩参数"></a>小对象压缩参数</h4><p>存储界限：当集合对象的元素不断增加，或者某个value值过大，这种小对象存储也会被升级为标准结构。Redis规定了小对象存储结构的限制条件如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>hash-max-ziplist-entries 512</td><td>hash的元素个数超过512就必须用标准结构存储</td></tr><tr><td>hash-max-ziplist-value 64</td><td>hash的任意元素的key/value的长度超过64就必须用标准结构存储</td></tr><tr><td>list-max-ziplist-entries 512</td><td>list的元素个数超过512就必须用标准结构存储</td></tr><tr><td>list-max-ziplist-value 64</td><td>list的任意元素的长度超过64就必须用标准结构存储</td></tr><tr><td>zset-max-ziplist-entries 128</td><td>zset的袁术个数超过128就必须用标准结构存储</td></tr><tr><td>zset-max-ziplist-value 64</td><td>zset的任意元素的长度超过64就必须用标准结构存储</td></tr><tr><td>set-max-intset-entries 512</td><td>set的整数元素个数超过612就必须用标准结构存储</td></tr></tbody></table><p>通过python脚本做一个实现，看看界限是否真的起作用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">redis</span></span><br><span class="line"></span><br><span class="line">client = redis.StrictRedis()</span><br><span class="line"># <span class="selector-tag">client</span><span class="selector-class">.delete</span>(&quot;<span class="selector-tag">k1</span>&quot;)</span><br><span class="line"><span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(512):</span><br><span class="line">    <span class="selector-tag">client</span><span class="selector-class">.hset</span>(&quot;<span class="selector-tag">k1</span>&quot;, <span class="selector-tag">str</span>(<span class="selector-tag">i</span>), <span class="selector-tag">str</span>(<span class="selector-tag">i</span>))</span><br><span class="line"><span class="selector-tag">print</span> (<span class="selector-tag">client</span><span class="selector-class">.object</span>(&quot;<span class="selector-tag">encoding</span>&quot;, &quot;<span class="selector-tag">k1</span>&quot;))   // 获取对象的存结构</span><br><span class="line"><span class="selector-tag">client</span><span class="selector-class">.hset</span>(&quot;<span class="selector-tag">k1</span>&quot;, &quot;512&quot;, &quot;512&quot;) </span><br><span class="line"><span class="selector-tag">print</span> (<span class="selector-tag">client</span><span class="selector-class">.object</span>(&quot;<span class="selector-tag">encoding</span>&quot;, &quot;<span class="selector-tag">k1</span>&quot;))   //再次获取超过512对象的存储结构</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;ziplist&#x27;</span><br><span class="line">&#x27;hashtable&#x27;</span><br></pre></td></tr></table></figure><p>查看当前hash键值数量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hlen</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 513</span><br></pre></td></tr></table></figure><p>可以看到当hash结构的元素个数超过512的时候，存储结构就发生了变化</p><p>接下来再试试递增value的长度，在python里面对字符串乘以一个整数n相当于重复n次</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">redis</span></span><br><span class="line"></span><br><span class="line">client = redis.StrictRedis()</span><br><span class="line"><span class="selector-tag">client</span><span class="selector-class">.delete</span>(&quot;<span class="selector-tag">k1</span>&quot;)</span><br><span class="line"><span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(64):</span><br><span class="line">    <span class="selector-tag">client</span><span class="selector-class">.hset</span>(&quot;<span class="selector-tag">k1</span>&quot;, <span class="selector-tag">str</span>(<span class="selector-tag">i</span>), &quot;0&quot; * (<span class="selector-tag">i</span>+1))</span><br><span class="line"><span class="selector-tag">print</span> (<span class="selector-tag">client</span><span class="selector-class">.object</span>(&quot;<span class="selector-tag">encoding</span>&quot;, &quot;<span class="selector-tag">k1</span>&quot;))</span><br><span class="line"><span class="selector-tag">client</span><span class="selector-class">.hset</span>(&quot;<span class="selector-tag">k1</span>&quot;, &quot;512&quot;, &quot;0&quot; * 65)</span><br><span class="line"><span class="selector-tag">print</span> (<span class="selector-tag">client</span><span class="selector-class">.object</span>(&quot;<span class="selector-tag">encoding</span>&quot;, &quot;<span class="selector-tag">k1</span>&quot;))</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x27;ziplist&#x27;</span><br><span class="line">&#x27;hashtable&#x27;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">hlen</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 65</span><br></pre></td></tr></table></figure><p>可以看出来当hash结构的任意entry的value超过了64，存储结构就升级成标准结构了</p><h3 id="内存回收机制"><a href="#内存回收机制" class="headerlink" title="内存回收机制"></a>内存回收机制</h3><p>Redis并不总是将空闲内存立即归还给操作系统</p><p>如果当前redis内存有10GB，当你删除了1GB的key后，再去观察内存，会发现内存变化不会太大。原因是操作系统是以页为单位来回收内存的，这个页上只要还有一个key在使用，那么它就不能被回收。Redis虽然删除了1GB的key，但是这些key分散到了很多页面中，每个页面都还其他key存在，这就导致了内存不会被立即回收</p><p>不过，如果你执行flushdb，然后再观察内存，会发现内存确实被回收了。原因是所有的key都被删除了，大部分之前使用的页面都清理干净，所以就会立即被操作系统回收</p><p>Redis虽然无法保证立即回收已经删除的key的内存，但是它会重新使用那些尚未回收的空闲内存。</p><h3 id="内存分配算法"><a href="#内存分配算法" class="headerlink" title="内存分配算法"></a>内存分配算法</h3><p>内存分配需要适当的算法划分内存页，需要考虑内存碎片，需要平衡性能和效率</p><p>Redis为了保持自身结构的简单性，在内存分配方面直接丢给了第三方内存分配库去实现。目前Redis可以使用jemalloc(facebook)库来管理内存，也可以切换到tcmalloc(google)库，因为jemalloc的性能相比tcmalloc要稍好一些，所以Redis默认使用jemalloc</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">info</span> <span class="selector-tag">memory</span></span><br><span class="line"><span class="selector-tag">mem_allocator</span><span class="selector-pseudo">:jemalloc-5.1.0</span></span><br></pre></td></tr></table></figure><p>通过info memory指令可以看到Redis使用的mem_allocator是jemalloc</p><h2 id="INFO指令"><a href="#INFO指令" class="headerlink" title="INFO指令"></a>INFO指令</h2><p>在使用Redis时，有时会遇到很多问题需要诊断，在诊断之前需要了解Redis的运行状态，可以通过强大的Info指令，清楚的知道Redis内部一系列运行的参数</p><p>Info指令显示的信息繁多，分为9大块，每个块都有非常多的参数，9大块如下：</p><ul><li>Server：服务器运行的环境参数</li><li>Clients：客户端相关信息</li><li>Memory：服务器运行内存统计数据</li><li>Persistence：持久化信息</li><li>Stats：通用统计数据</li><li>Replication：主从复制相关信息</li><li>CPU：CPU使用情况</li><li>Cluster：集群相关信息</li><li>KeySpace：键值对统计数量信息</li></ul><p>Info可以一次性获取所有的信息，也可以按块获取信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 获取所有信息</span><br><span class="line">&gt; <span class="selector-tag">info</span></span><br><span class="line"></span><br><span class="line">// 获取内存相关信息</span><br><span class="line">&gt; <span class="selector-tag">info</span> <span class="selector-tag">memory</span></span><br><span class="line"></span><br><span class="line">// <span class="selector-tag">info</span> <span class="selector-tag">CPU</span></span><br><span class="line">&gt; 获取<span class="selector-tag">CPU</span>相关信息</span><br></pre></td></tr></table></figure><p>下述的内容是挑选实用和常用的参数进行讲解，如果想了解全部的内容信息，可以查看[Redis官网文档][<a href="https://redis.io/commands/info]">https://redis.io/commands/info]</a></p><h3 id="Redis每秒发送的指令"><a href="#Redis每秒发送的指令" class="headerlink" title="Redis每秒发送的指令"></a>Redis每秒发送的指令</h3><p>这个信息在Stats快里，可以通过info stats看到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// <span class="selector-tag">ops_per_sec</span>：<span class="selector-tag">operations</span> <span class="selector-tag">per</span> <span class="selector-tag">second</span>，每秒操作数</span><br><span class="line">$ redis-cli info stats| grep ops</span><br><span class="line"><span class="selector-tag">instantaneous_ops_per_sec</span><span class="selector-pseudo">:256</span></span><br></pre></td></tr></table></figure><p>osp:256，也就是所有客户端每秒发送256条指令到服务器执行。在极限情况下，Redis可以每秒执行10万次指令。如果ops过高，可以考虑通过monitor指令快速观察一下究竟是哪些key被访问得比较频繁</p><p>从而在相应的业务上进行，以减少IO次数。monitor指令会瞬间吐出巨量的指令文本，所以一般在执行monitor后立即使用ctrl+c中断输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli monitor</span><br></pre></td></tr></table></figure><h3 id="Redis连接客户端数"><a href="#Redis连接客户端数" class="headerlink" title="Redis连接客户端数"></a>Redis连接客户端数</h3><p>连接的客户端数在Clients块里，可以通过info clients看到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info clients</span><br><span class="line"># <span class="selector-tag">Clients</span></span><br><span class="line"><span class="selector-tag">connected_clients</span><span class="selector-pseudo">:1</span>                // 正在连接的客户端数量</span><br><span class="line"><span class="selector-tag">client_recent_max_input_buffer</span><span class="selector-pseudo">:4</span></span><br><span class="line"><span class="selector-tag">client_recent_max_output_buffer</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">blocked_clients</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">tracking_clients</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">clients_in_timeout_table</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><p>通过这个信息观察其数量，确定是否存在其他连接情况。如果发现数量不对劲，就可以使用client list指令列出所有的客户端链接地址来确定源头</p><p>关于客户端的数量，还有一个需要关注的参数，那就是rejected_connections，该参数字面可看出，表示超出最大连接数限制而被拒绝的客户端连接次数，如果这个数字多，则意味着服务器的最大连接数设置过低，需要吊证maxclients参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info stats|grep reject</span><br><span class="line"><span class="selector-tag">rejected_connections</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><h3 id="Redis内存占用"><a href="#Redis内存占用" class="headerlink" title="Redis内存占用"></a>Redis内存占用</h3><p>查案内存是在Memory块里</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info memory |grep used|grep human</span><br><span class="line"><span class="selector-tag">used_memory_human</span><span class="selector-pseudo">:1.55M</span>        // 内存分配器（<span class="selector-tag">jemalloc</span>）从操作系统分配的内存总量</span><br><span class="line"><span class="selector-tag">used_memory_rss_human</span><span class="selector-pseudo">:11.74M</span>   // 操作系统看到的内存占用，<span class="selector-tag">top</span>命令看到的内存</span><br><span class="line"><span class="selector-tag">used_memory_peak_human</span><span class="selector-pseudo">:1.61M</span>   // <span class="selector-tag">Redis</span>内存消耗的峰值</span><br><span class="line"><span class="selector-tag">used_memory_lua_human</span><span class="selector-pseudo">:37.00K</span>   // <span class="selector-tag">lua</span> 脚本引擎占用的内存大小</span><br><span class="line"><span class="selector-tag">used_memory_scripts_human</span><span class="selector-pseudo">:0B</span>   // 脚本占用的内存大小</span><br></pre></td></tr></table></figure><p>如果单个redis内存占用过大，并且在业务上没有太多压缩的空间，可考虑集群化</p><h3 id="复制积压缓冲区大小"><a href="#复制积压缓冲区大小" class="headerlink" title="复制积压缓冲区大小"></a>复制积压缓冲区大小</h3><p>这个信息在Replication，可通过info replication查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info replication |grep backlog</span><br><span class="line"><span class="selector-tag">repl_backlog_active</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">repl_backlog_size</span><span class="selector-pseudo">:1048576</span>         // 积压缓冲区大小</span><br><span class="line"><span class="selector-tag">repl_backlog_first_byte_offset</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">repl_backlog_histlen</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><p>复制集积压缓冲区大小很重要，它严重影响主从复制的效率。当从节点因为网络原因临时断开了与主节点的连接，重新连接上后。这段断开的时间内发生了在主节点上的修改操作，而这些都会被放在积压缓冲区中，这样从节点可以通过积压缓冲区恢复中断的主从同步过程</p><p>积压缓冲区是环形的，后来的指令会覆盖掉前面的内容。如果从节点断开的时间过长，或者缓冲区的容量设置的小。都会导致从节点无法快速恢复中断的主从同步过程，因为中间的修改指令会被覆盖掉。这时从节点就会进入全量同步模式，非常耗费CPU和网络资源</p><p>如果有多个从节点复制，积压缓冲区是共享的，它不会因为从节点过多而线性增长。如果实力的修改指令请求频繁，那就把积压的缓冲区设置大一些，几十个MB大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info stats |grep sync</span><br><span class="line"><span class="selector-tag">sync_full</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sync_partial_ok</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">sync_partial_err</span><span class="selector-pseudo">:0</span>   // 半同步失败次数</span><br></pre></td></tr></table></figure><p>通过查看sysc_partial_err变量的次数来决定是否需要扩大积压缓冲区，它表示主从半同步复制失败的次数</p><h2 id="Redis安全"><a href="#Redis安全" class="headerlink" title="Redis安全"></a>Redis安全</h2><p>Redis有一些非常危险的指令，这些指令会对Redis的稳定以及数据造成严重的影响。比如使用keys指令会导致Redis卡顿，flushdb和flushall会让Redis的所有数据全部清空你，那么如何避免这些指令被误操作呢</p><p>Redis在配置文件中提供了rename-command指令用于将某些危险的指令修改成特别的名称，用来避免人为误操作。比如在配置文件的security块中增加如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/redis/6379.conf</span><br><span class="line"><span class="selector-tag">rename-command</span> <span class="selector-tag">keys</span> <span class="selector-tag">abckeys</span></span><br></pre></td></tr></table></figure><p>通过上述的参数改变了使用的指令，如果想执行keys，就能敲keys指令了，而是需要键入abckeys。如果想完全封杀某条命令，可以将该指令rename成空字符串，就无法通过任务字符指令来执行这条命令了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rename-command</span> <span class="selector-tag">flushdb</span> &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="端口安全"><a href="#端口安全" class="headerlink" title="端口安全"></a>端口安全</h3><p>Redis默认会监听6379端口，如果当前的服务器主机有外网地址，Redis的服务将会直接暴露在公网上，任何一个初级黑客都可以使用工具对IP地址进行端口扫描就可以探测出来</p><p>Redis的服务地址一旦可以被外网直接访问，内部的数据就彻底失去了安全性。高级一点的黑客们可以通过Redis指令Lua脚本拿到服务器权限，恶意的对手们甚至会直接清空你的Redis数据库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bind</span> 10.0.0.50</span><br></pre></td></tr></table></figure><p>所以，运维人员务必在Redis的配置文件中指定监听的IP地址，避免这样的发生。更进一步，还可以增加Redis的密码访问限制，客户端必须使用auth指令，传入正确的密码才可以访问Redis，这样即使地址暴露出去了，普通黑客也无法对Redis进行任何指令操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">requirepass</span> !<span class="selector-tag">idf3Bf3</span>*&amp;</span><br></pre></td></tr></table></figure><p>密码控制也会影响到从节点复制，从节点必须在配置文件里使用masterauth指令配置相应的密码才可以进行复制操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">masterauth</span>  !<span class="selector-tag">idf3Bf3</span>*&amp;</span><br></pre></td></tr></table></figure><p>验证方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/redis/6379.conf</span><br><span class="line"><span class="selector-tag">requirepass</span> !<span class="selector-tag">idf3Bf3</span>*&amp;</span><br><span class="line">$ redis-server /etc/redis/6379.conf</span><br><span class="line">$ redis-cli -p 6379</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">(<span class="selector-tag">error</span>) <span class="selector-tag">NOAUTH</span> <span class="selector-tag">Authentication</span> <span class="selector-tag">required</span>.</span><br><span class="line">&gt; <span class="selector-tag">auth</span> !<span class="selector-tag">idf3Bf3</span>*&amp;</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">// 或下述这种，但是这种不安全</span><br><span class="line">$ redis-cli -p 6379 -a 123456  </span><br><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br></pre></td></tr></table></figure><h3 id="SSL代理"><a href="#SSL代理" class="headerlink" title="SSL代理"></a>SSL代理</h3><p>Redis以前的版本并不支持SSL连接，说明客户端和服务器之间交互的数据不应该直接暴露在公网上传输，否则会有窃听数据的风险。如果必须要用在公网上，可以考虑使用SSL代理</p><p>SSL里常见的有SSH，不过Redis官方推荐使用spiped工具，可能是因为spiped的功能相对单一，使用起来简单，易于理解</p><p>下图是spiped对ssh通道进行二次加密（因为SSH通道也可以存在bug）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510094439991.png"></p><p>同样SSL代理也可以用在主从复制上，如果Redis主从实例需要跨机房复制，spiped就能排上用场</p><h3 id="Redis安全通信"><a href="#Redis安全通信" class="headerlink" title="Redis安全通信"></a>Redis安全通信</h3><p>想到一个应用场景，公司有两个机房。因为一个紧急需求，需要跨机房读取Redis数据。应用部署在A机房，存储部署在B机房。如果使用普通TCP直接访问，数据的传输就会暴露在公网上，这是非常不安全的。客户端服务器交互的数据存在被窃听的风险。如图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510102843215.png"></p><p>Redis本身并不支持SSL安全链接，不过有了SSL代理软件，可以让通信数据得到加密，使用Redis推荐的代理软件spiped，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510103243499.png">    </p><h3 id="spiped原理"><a href="#spiped原理" class="headerlink" title="spiped原理"></a>spiped原理</h3><p>spiped会在客户端和服务器各启动一个spiped进程</p><p>左边的spiped进程负责接受来自Redis Client发送过来的请求数据，加密后传送到右边的spiped进程。右边的spiped进程将接收到的数据解密后传递到Redis Server。然后Redis Server再走一个反向的流程将响应回复给Redis Client。如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210510104217811.png"></p><p>每一个spiped进程都会有一个监听端口（server socket）用来接收数据，同时还会作为一个客户端（socket client）将数据转发到目标地址</p><p>spiped进程需要成对出现，相互之间需要使用相同的共享秘钥来加密消息</p><h3 id="spiped使用"><a href="#spiped使用" class="headerlink" title="spiped使用"></a>spiped使用</h3><p>准备两台主机</p><ul><li>10.0.0.50:6379(Master)</li><li>10.0.0.52:6379(Slave)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bind</span> 10.0.0.50</span><br><span class="line"><span class="selector-tag">bind</span> 10.0.0.52</span><br><span class="line">重启<span class="selector-tag">redis</span></span><br><span class="line"><span class="selector-tag">redis-cli</span> <span class="selector-tag">-p</span> 10.0.0.50</span><br><span class="line"><span class="selector-tag">redis-cli</span> <span class="selector-tag">-p</span> 10.0.0.52</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">wget</span> <span class="selector-tag">https</span>://<span class="selector-tag">github</span><span class="selector-class">.com</span>/<span class="selector-tag">Tarsnap</span>/<span class="selector-tag">spiped</span>/<span class="selector-tag">archive</span>/<span class="selector-tag">refs</span>/<span class="selector-tag">tags</span>/1.6.1<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">$ tar xf 1.6.1.tar.gz</span><br><span class="line"><span class="selector-tag">cd</span> <span class="selector-tag">spiped-1</span>.6.1</span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">openssl-devel</span></span><br><span class="line"><span class="selector-tag">make</span> &amp;&amp; <span class="selector-tag">make</span> <span class="selector-tag">install</span></span><br></pre></td></tr></table></figure><p>生成随机的密钥文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dd if=/dev/urandom bs=32 count=1 of=spiped.key</span><br><span class="line">1+0 <span class="selector-tag">records</span> <span class="selector-tag">in</span></span><br><span class="line">1+0 <span class="selector-tag">records</span> <span class="selector-tag">out</span></span><br><span class="line">32 <span class="selector-tag">bytes</span> (32 <span class="selector-tag">B</span>) <span class="selector-tag">copied</span>, 0.000237921 <span class="selector-tag">s</span>, 134 <span class="selector-tag">kB</span>/<span class="selector-tag">s</span></span><br></pre></td></tr></table></figure><p>使用密钥文件启动服务器spiped进程，10.0.0.50是我本机的公网IP地址</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-d</span> 表示<span class="selector-tag">decrypt</span>（对输入数据进行解密），<span class="selector-tag">-s</span>为源监听地址，<span class="selector-tag">-t</span>为转发目标地址</span><br><span class="line">spiped -d -s &#x27;[10.0.0.50]:6479&#x27; -t &#x27;[127.0.0.1]:6379&#x27; -k spiped.key</span><br></pre></td></tr></table></figure><p>这个spiped进程监听公网IP的6479端口接收公网上的数据，将数据解密后转发到本机回环地址的6379端口，也就是redis-server监听的端口</p><p>使用密钥文件启动客户端spiped进程，10.0.0.50是我本机的公网IP地址</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// <span class="selector-tag">-e</span>表示 <span class="selector-tag">encrypt</span>，对输入数据进行加密</span><br><span class="line">spiped -e -s &#x27;[127.0.0.1]:6579&#x27; -t &#x27;[10.0.0.50]:6479&#x27; -k spiped.key</span><br></pre></td></tr></table></figure><p>查看spiped进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep spiped</span><br><span class="line"><span class="selector-tag">root</span>      64187      1  0 14<span class="selector-pseudo">:34</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">spiped</span> <span class="selector-tag">-d</span> <span class="selector-tag">-s</span> <span class="selector-attr">[10.0.0.50]</span><span class="selector-pseudo">:6479</span> <span class="selector-tag">-t</span> <span class="selector-attr">[127.0.0.1]</span><span class="selector-pseudo">:6379</span> <span class="selector-tag">-k</span> <span class="selector-tag">spiped</span><span class="selector-class">.key</span></span><br><span class="line"><span class="selector-tag">root</span>      64249      1  0 14<span class="selector-pseudo">:35</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">spiped</span> <span class="selector-tag">-e</span> <span class="selector-tag">-s</span> <span class="selector-attr">[127.0.0.1]</span><span class="selector-pseudo">:6579</span> <span class="selector-tag">-t</span> <span class="selector-attr">[10.0.0.50]</span><span class="selector-pseudo">:6479</span> <span class="selector-tag">-k</span> <span class="selector-tag">spiped</span><span class="selector-class">.key</span></span><br></pre></td></tr></table></figure><p>客户端spiped进程监听了本地回环地址的6579端口，将该端口上收到的数据加密转发到服务器spiped进程</p><p>启动客户端连接，使用python代码来启动redis的客户端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">import</span> <span class="selector-tag">redis</span></span><br><span class="line">&gt;&gt;&gt; c=redis.StrictRedis(host=&#x27;localhost&#x27;, port=6379)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">c</span><span class="selector-class">.ping</span>()</span><br><span class="line"><span class="selector-tag">True</span></span><br><span class="line">&gt;&gt;&gt; c.info(&#x27;cpu&#x27;)</span><br><span class="line">&#123;&#x27;used_cpu_sys&#x27;: 0.408888, &#x27;used_cpu_user&#x27;: 0.475312, &#x27;used_cpu_sys_children&#x27;: 0.004183, &#x27;used_cpu_user_children&#x27;: 0.0&#125;</span><br></pre></td></tr></table></figure><p>可以看出客户端和服务已经通了，如果我们尝试直接连接服务器spiped进程（加密的端口6379），看看会发生什么</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">import</span> <span class="selector-tag">redis</span></span><br><span class="line">&gt;&gt;&gt; c=redis.StrictRedis(host=&#x27;10.0.0.50&#x27;, port=6479)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">c</span><span class="selector-class">.ping</span>()</span><br><span class="line"><span class="selector-tag">Traceback</span> (<span class="selector-tag">most</span> <span class="selector-tag">recent</span> <span class="selector-tag">call</span> <span class="selector-tag">last</span>):</span><br><span class="line">  <span class="selector-tag">File</span> &quot;&lt;<span class="selector-tag">stdin</span>&gt;&quot;, <span class="selector-tag">line</span> 1, <span class="selector-tag">in</span> &lt;<span class="selector-tag">module</span>&gt;</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">client</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 1378, <span class="selector-tag">in</span> <span class="selector-tag">ping</span></span><br><span class="line">    return self.execute_command(&#x27;PING&#x27;)</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">client</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 901, <span class="selector-tag">in</span> <span class="selector-tag">execute_command</span></span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">self</span><span class="selector-class">.parse_response</span>(<span class="selector-tag">conn</span>, <span class="selector-tag">command_name</span>, **<span class="selector-tag">options</span>)</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">client</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 915, <span class="selector-tag">in</span> <span class="selector-tag">parse_response</span></span><br><span class="line">    response = connection.read_response()</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">connection</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 739, <span class="selector-tag">in</span> <span class="selector-tag">read_response</span></span><br><span class="line">    response = self._parser.read_response()</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">connection</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 324, <span class="selector-tag">in</span> <span class="selector-tag">read_response</span></span><br><span class="line">    raw = self._buffer.readline()</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">connection</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 256, <span class="selector-tag">in</span> <span class="selector-tag">readline</span></span><br><span class="line">    <span class="selector-tag">self</span>._<span class="selector-tag">read_from_socket</span>()</span><br><span class="line">  <span class="selector-tag">File</span> &quot;/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">python3</span>.6/<span class="selector-tag">site-packages</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">connection</span><span class="selector-class">.py</span>&quot;, <span class="selector-tag">line</span> 201, <span class="selector-tag">in</span> _<span class="selector-tag">read_from_socket</span></span><br><span class="line">    <span class="selector-tag">raise</span> <span class="selector-tag">ConnectionError</span>(<span class="selector-tag">SERVER_CLOSED_CONNECTION_ERROR</span>)</span><br><span class="line"><span class="selector-tag">redis</span><span class="selector-class">.exceptions</span><span class="selector-class">.ConnectionError</span>: <span class="selector-tag">Connection</span> <span class="selector-tag">closed</span> <span class="selector-tag">by</span> <span class="selector-tag">server</span>.</span><br></pre></td></tr></table></figure><p>从输出中可以看出请求时发送过去了，但是却出现了超时，要么是服务器在默认的超时时间内内有返回数据，要么是服务器没有返回客户端想要的数据</p><p>spiped可以同时支持多个客户端连接的数据转发工作，还可以通过参数来限定允许的最大客户端连接数，但是对于服务器spiped，它不能同时支持多个服务器之间的转发。这意味着在集群环境下，需要为每个server节点启动一个spiped进程来代收消息</p><h3 id="redis6-0版本支持SSL-TLS"><a href="#redis6-0版本支持SSL-TLS" class="headerlink" title="redis6.0版本支持SSL/TLS"></a>redis6.0版本支持SSL/TLS</h3><p>Redis从版本6开始支持SSL/TLS，这是一项可选功能，需要在编译时启用</p><h4 id="SSL-TLS配置"><a href="#SSL-TLS配置" class="headerlink" title="SSL/TLS配置"></a>SSL/TLS配置</h4><p><strong>构建</strong></p><p>要使用TLS支持进行构建，需要OpenSSL 开发库，运行make BUILD_TLS=yes</p><p>要使用TLS运行Redis测试套件，需要TLS支持TCL（即tcl-tls包）</p><ul><li>运行 <code>./utils/gen-test-certs.sh</code>生成根CA和服务器证书</li><li>运行<code>./runtest --tls</code> or <code>./runtest-cluster --tls</code>运行Redis和Redis集群</li></ul><p><strong>手动运行</strong></p><p>要以TLS模式手动运行Redis服务器（假设已调用gen-test-certs.sh，因此示例证书/密钥可用）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./<span class="selector-tag">src</span>/<span class="selector-tag">redis-server</span> <span class="selector-tag">--tls-port</span> 6379 <span class="selector-tag">--port</span> 0 \</span><br><span class="line">    <span class="selector-tag">--tls-cert-file</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">redis</span><span class="selector-class">.crt</span> \</span><br><span class="line">    <span class="selector-tag">--tls-key-file</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">redis</span><span class="selector-class">.key</span> \</span><br><span class="line">    <span class="selector-tag">--tls-ca-cert-file</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">ca</span><span class="selector-class">.crt</span></span><br></pre></td></tr></table></figure><p>使用redis-cli连接Redis服务器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./<span class="selector-tag">src</span>/<span class="selector-tag">redis-cli</span> <span class="selector-tag">--tls</span> \</span><br><span class="line">    <span class="selector-tag">--cert</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">redis</span><span class="selector-class">.crt</span> \</span><br><span class="line">    <span class="selector-tag">--key</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">redis</span><span class="selector-class">.key</span> \</span><br><span class="line">    <span class="selector-tag">--cacert</span> ./<span class="selector-tag">tests</span>/<span class="selector-tag">tls</span>/<span class="selector-tag">ca</span><span class="selector-class">.crt</span></span><br></pre></td></tr></table></figure><p><strong>证书配置</strong></p><p>为了支持TLS，Redis必须配置x.509证书和密钥。另外，在验证证书时，必须指定可信任根的CA证书捆绑文件或路径。为了支持基于DH密钥，还可以配置DH 参数文件。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tls-cert-file</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">redis</span><span class="selector-class">.crt</span></span><br><span class="line"><span class="selector-tag">tls-key-file</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">redis</span><span class="selector-class">.key</span></span><br><span class="line"><span class="selector-tag">tls-ca-cert-file</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">ca</span><span class="selector-class">.crt</span></span><br><span class="line"><span class="selector-tag">tls-dh-params-file</span> /<span class="selector-tag">path</span>/<span class="selector-tag">to</span>/<span class="selector-tag">redis</span><span class="selector-class">.dh</span></span><br></pre></td></tr></table></figure><h4 id="TLS端口侦听"><a href="#TLS端口侦听" class="headerlink" title="TLS端口侦听"></a>TLS端口侦听</h4><p>tls-port配置伪指令可在指定端口上接收SSL/TLS连接，这不仅是侦听TCP连接的端口，还同时使用TLS和non-TLS连接访问不同端口上的Redis</p><p>你可以指定port 0以完全禁用non-TLS端口，仅在默认Redis端口上启动TLS，如下述操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">port</span> 0</span><br><span class="line"><span class="selector-tag">tls0port</span> 6379</span><br></pre></td></tr></table></figure><h4 id="客户端认证证书"><a href="#客户端认证证书" class="headerlink" title="客户端认证证书"></a>客户端认证证书</h4><p>默认情况下，Redis使用双向TLS并要求客户端使用有效证书进行身份认证（根据ca-cert-file<code>or</code>ca-cert-dir指定受信任的根CA进行身份认证）</p><p>你可以使用tls-auth-clients no 去禁用客户端身份认证</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p>Redis master服务以相同方法处理连接客户端和副本服务器，因此上述tls-port 和 tls-auth-clients指令也适用于复制链接</p><p>在副本服务端，必须指定tls-replication yes才能使用TLS到主服务器的传出连接</p><h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p>使用Redis集群时，则使用tls-cluster yes以便为了启动集群总线和跨节点连接TLS</p><h4 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h4><p>Sentinel从通过redis配置继承其网咯配置，因此上述所有内容都适用于sentinel</p><p>连接master服务器时，Sentinel使用tls-replication指令来确定是否需要使用TLS和non-TLS连接</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化-3（RDB与AOF）</title>
      <link href="2021/05/08/Redis%E6%8C%81%E4%B9%85%E5%8C%96-3%EF%BC%88RDB%E4%B8%8EAOF%EF%BC%89/"/>
      <url>2021/05/08/Redis%E6%8C%81%E4%B9%85%E5%8C%96-3%EF%BC%88RDB%E4%B8%8EAOF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis-持久化"></a>Redis-持久化</h1><h2 id="Redis两种持久化"><a href="#Redis两种持久化" class="headerlink" title="Redis两种持久化"></a>Redis两种持久化</h2><p><strong>Redis的使用定位</strong></p><ul><li>如果redis是作为缓存，那么数据是避免不了丢失的情况。缓存丢失一些数据之后会到达后端的数据库，数据不多是不会照成数据库的压力，而redis的缓存效果却是可以达到急速的状态</li><li>如果redis是作为数据库，那么数据是不能丢失的。必须加上持久化的功能和一些落磁盘的参数配置，当然redis速度就不能达到急速的状态</li></ul><p>Redis的数据全部都是存在内存中，如果服务突然死机或者宕机，数据就会照成丢失。因为redis使用了一种机制保证redis的数据不会因为故障而丢失，这种机制就是redis的持久化机制</p><p>Redis的持久化机制有两种，一种RDB快照/副本，另一种是AOF日志（类似于mysql的binlog日志）。快照是一次全量备份，而日志是连续的增量备份。快照的内存数据是二进制序列化的形式，在存储中是非常紧凑的，而日志记录的是内存数据修改的指令记录文本，日志会在长期中变得越来越大，使得在恢复或者是重新加载日志时会非常的漫长，所以需要定期的对日志进行重写/瘦身（在4.0版本的AOF日志已经结合RDB快照的二进制序列化形式进行存储，下述文章有详细讲解）</p><blockquote><p>PS：不管redis作为缓存还是数据库，都需要持久化的支持。只是在redis充当缓存的时候，选择的持久化可以不用实时写入，而是使用RDB快照的方式进行落磁盘。</p></blockquote><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><h3 id="Redis快照"><a href="#Redis快照" class="headerlink" title="Redis快照"></a>Redis快照</h3><p>RDB的持久化就是快照的方式。Redis是单线程程序，这个程序同时负责多个客户端套接字的并发读写操作和内存数据结构的逻辑读写</p><p>在多个请求的同时，redis还需要进行内存快照，内存快照是需要文件IO操作的。但文件IO因为单线程的redis不能使用多路复用API，因此文件IO操作会影响服务器的性能</p><p>Redis需要一边持久化和一边响应客户端的请求，在持久化的同时，内存数据结构还在变化。如下图，键值a=3和b=5，在写入文件（持久化）过程中，内存中的a值变成了7，此时之前值已经写入了disk，如果又将a=7的值写入disk，那么就不能形成快照。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210324133222845.png"></p><p>因为数据在一直变化，变化的过程会覆盖之前的落入disk的数据。所以在提供业务阶段就不能对redis进行快照，显然这种方法无法保证数据的持久性。那么对于解决这个问题，redis提供两种模式进行进入RDB的持久化。如下图</p><ul><li>阻塞，不对外提供（这种情况，一般是很明确的时候，业务不对外提供时进行持久化）</li><li>非阻塞，对外提供，而且数据落disk（通过fork进程）</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210324133752688.png"></p><p>非阻塞能解决在对外提供业务时，也能进行数据的落地。而redis是调用了操作系统中的fork进程中COW（copy On Write）机制来实现快照持久化。在了解这个fork进程之前，我们先来了解下一Linux系统中的一些知识</p><h3 id="Linux系统的父子进程"><a href="#Linux系统的父子进程" class="headerlink" title="Linux系统的父子进程"></a>Linux系统的父子进程</h3><h4 id="系统管道"><a href="#系统管道" class="headerlink" title="系统管道"></a>系统管道</h4><p>管道：将前一个命令的输出作为后一个命令的输入，后者会触发创建子进程（也就是当前执行的命令是父进程，通过管道执行之后会触发一个子进程，然后由子进程进行处理）</p><p>通过$$与$BASHPID可以获取当前的进程id号</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo $$</span><br><span class="line">71565  //取进程<span class="selector-tag">id</span>号</span><br><span class="line">$ echo $BASHPID</span><br><span class="line">71565  //相同</span><br></pre></td></tr></table></figure><p>$$与$BASHPID有一点不同</p><ul><li>$$是高于管道的，所以不会被管道触发的子进程进行执行</li><li>$BASHPID是低于管道，所以会将前面输出的内容，通过管道后的命令（也是一个子进程）输入，然后将其输出到屏幕上</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo $$ | more</span><br><span class="line">71565 </span><br><span class="line">$ echo $BASHPID |more </span><br><span class="line">71661  //进程为子进程了</span><br></pre></td></tr></table></figure><h4 id="父子进程之间的关系"><a href="#父子进程之间的关系" class="headerlink" title="父子进程之间的关系"></a>父子进程之间的关系</h4><p>上述系统管道，可以让我们知道，每当我们执行管道的时候都会创建一个子进程，那么子进程和父进程两者之间的修改是否会有影响？看下述测试</p><ul><li><strong>1. 父进程的数据，子进程可以看到么</strong></li></ul><p>通过下述脚本测试一下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ num=1</span><br><span class="line">$ echo $$</span><br><span class="line">108254</span><br><span class="line">$ /bin/bash                                       //执行一个/bin/bash</span><br><span class="line">$ echo $$                                         //会发现进程变成了一个子进程</span><br><span class="line">108266</span><br><span class="line">$ pstree                                          //可以使用pstree进行查看，如果没有，可使用yum install -y pstree安装</span><br><span class="line"><span class="selector-tag">systemd</span>─┬─<span class="selector-tag">NetworkManager</span>───2*<span class="selector-attr">[&#123;NetworkManager&#125;]</span></span><br><span class="line">..........................................................</span><br><span class="line">        ├─<span class="selector-tag">sshd</span>───<span class="selector-tag">sshd</span>───<span class="selector-tag">bash</span>───<span class="selector-tag">bash</span>───<span class="selector-tag">pstree</span>      //可以看到会多出一个<span class="selector-tag">bash</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-journal</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-logind</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-udevd</span></span><br><span class="line">        ├─<span class="selector-tag">tuned</span>───4*<span class="selector-attr">[&#123;tuned&#125;]</span></span><br><span class="line">        └─vmtoolsd───&#123;vmtoolsd&#125;</span><br><span class="line">$ echo $num                                      //接着继续查看num的值，已经变成了空数据</span><br></pre></td></tr></table></figure><p>在这里可以可以看出父进程与子进程是隔离的，切换到一个bash之后，就看不到num的值。当使用exit退出这个bash，就能重新看到num值了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br><span class="line"><span class="selector-tag">exit</span></span><br><span class="line">$ echo $num</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li><strong>2. 如何让父进程的数据可以让子进程看到</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ export num                                    //通过export导入到环境中</span><br><span class="line">$ echo $num</span><br><span class="line">1</span><br><span class="line">$ /bin/bash</span><br><span class="line">$ pstree</span><br><span class="line"><span class="selector-tag">systemd</span>─┬─<span class="selector-tag">NetworkManager</span>───2*<span class="selector-attr">[&#123;NetworkManager&#125;]</span></span><br><span class="line">......................................................</span><br><span class="line">        ├─<span class="selector-tag">sshd</span>─┬─<span class="selector-tag">sshd</span>───<span class="selector-tag">bash</span></span><br><span class="line">        │      └─<span class="selector-tag">sshd</span>───<span class="selector-tag">bash</span>───<span class="selector-tag">bash</span>───<span class="selector-tag">pstree</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-journal</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-logind</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-udevd</span></span><br><span class="line">        ├─<span class="selector-tag">tuned</span>───4*<span class="selector-attr">[&#123;tuned&#125;]</span></span><br><span class="line">        └─vmtoolsd───&#123;vmtoolsd&#125;</span><br><span class="line">$ echo $num                                 //在查看num值时就能看到了</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>此时退回父进程，num依然是1，所以通过export输入到环境中父子进程是同时共有一个内存空间的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ exit</span><br><span class="line"><span class="selector-tag">exit</span></span><br><span class="line">$ echo $num</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li><strong>3. 子进程的修改是否影响父进程</strong></li></ul><p>我们来使用下述的一个简单脚本测试一下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat for.sh</span><br><span class="line">#!/<span class="selector-tag">bin</span>/<span class="selector-tag">bash</span></span><br><span class="line"></span><br><span class="line">echo $$            //子进程</span><br><span class="line">echo $num          //输出子进程的值</span><br><span class="line">num=999            //改变子进程的值</span><br><span class="line">echo num=$num      //输出</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sleep</span> 10           //等待10秒钟</span><br><span class="line"></span><br><span class="line">echo $num          //10秒后查看</span><br></pre></td></tr></table></figure><p>执行脚本查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ [root@localhost ~]# num=100     //父进程赋值                      </span><br><span class="line">$ [root@localhost ~]# ./for.sh &amp;  //在后台运行脚本</span><br><span class="line"><span class="selector-attr">[1]</span> 71840</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># 71840</span><br><span class="line"></span><br><span class="line">num=999                            //子进程修改的值999</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# echo $$        //输出父进程</span><br><span class="line">71768 </span><br><span class="line">[root@localhost ~]# echo $num      //输出父进程的值，依然是100</span><br><span class="line">100</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># <span class="selector-tag">pstree</span></span><br><span class="line"><span class="selector-tag">systemd</span>─┬─<span class="selector-tag">NetworkManager</span>───2*<span class="selector-attr">[&#123;NetworkManager&#125;]</span></span><br><span class="line">......................................................</span><br><span class="line">        ├─<span class="selector-tag">sshd</span>─┬─<span class="selector-tag">sshd</span>───<span class="selector-tag">bash</span></span><br><span class="line">        │      └─<span class="selector-tag">sshd</span>───<span class="selector-tag">bash</span>─┬─<span class="selector-tag">bash</span>───<span class="selector-tag">sleep</span></span><br><span class="line">        │                    └─<span class="selector-tag">pstree</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-journal</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-logind</span></span><br><span class="line">        ├─<span class="selector-tag">systemd-udevd</span></span><br><span class="line">        ├─<span class="selector-tag">tuned</span>───4*<span class="selector-attr">[&#123;tuned&#125;]</span></span><br><span class="line">        └─vmtoolsd───&#123;vmtoolsd&#125;</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># 999           </span><br></pre></td></tr></table></figure><p>可以看到10秒过后，子进程的num还是等于999，说明父进程的修改是不会影响子进程的</p><ul><li><strong>4. 相反，父进程修改是否会影响子进程</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[root@localhost ~]</span># ./1<span class="selector-class">.sh</span> &amp;</span><br><span class="line"><span class="selector-attr">[1]</span> 71846</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># 71846</span><br><span class="line">1</span><br><span class="line"><span class="selector-tag">num</span><span class="selector-pseudo">:999</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]# echo $$</span><br><span class="line">71768</span><br><span class="line">[root@localhost ~]# echo $num</span><br><span class="line">100</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># ((<span class="selector-tag">num</span>++))       //父进程<span class="selector-tag">num</span>+1</span><br><span class="line">[root@localhost ~]# echo $num</span><br><span class="line">101</span><br><span class="line"><span class="selector-attr">[root@localhost ~]</span># 999            </span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[1]</span>+  <span class="selector-tag">Done</span>                    ./1<span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure><p>从上述脚本例子来看，子进程的值还是不变，说明父子进程都是不互相影响的</p><h3 id="fork（多进程）"><a href="#fork（多进程）" class="headerlink" title="fork（多进程）"></a>fork（多进程）</h3><p>接下来就是引出redis调用系统内存的fork（多进程）参数，通过该参数可以快速创建子进程，而且速度是非常快的，空间也小</p><p>首先子进程做持久时，不会修改现有的内存数据结构，它只是对数据结构进行遍历读取，然后序列化写到磁盘中。而父进程向外一直提供服务，处理客户端的请求，然后对内存数据结构进行不间段的修改</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326103443229.png"></p><p>接着会使用操作系统的copy on write（简称COW）机制来进行数据段页面的分离。首先数据段是由很多系统的页面组成的，当父进程对一个页面的数据修改时，会被共享的页面复制一份分离，然后对这个复制页面进行修改，子进程相应的页面是没有变化的，还是进程之前产生数据的页面</p><p>父进程的修改操作持续进行，会将越来越多的页面分离出来，内存也会持续增长，但是也不会超过原有数据内存的2倍大小，而且每个页面的大小只有4KB。</p><p>当需要重新持久化时，子进程是不会重新复制一份（因为是和父进程一个共享页面，重新复制会大大消耗内存），而是通过指针指向内存已经改变的值，然后持久化</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326103451334.png"></p><p>Redis在使用持久化时会调用glibc的函数fork产生一个子进程，快照持久化完全交给子进程处理，父进程继续处理客户端的增删改查，父进程与子进程的代码段和数据段是共同存储在内存中的。这是Linux操作系统的机制，为了节省内存资源，所以尽可能的共享起来</p><p>持久化的过程是需要时间点的，比如在8点时间进行持久化，那么落入磁盘的时间就是8点，期间父进程的修改是不会影响子进程，而子进程也会根据8点的时间进行持久化全部到磁盘。这也是为什么redis的持久化叫“快照”的原因</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326104449935.png"></p><h3 id="RDB两种落入磁盘的指令"><a href="#RDB两种落入磁盘的指令" class="headerlink" title="RDB两种落入磁盘的指令"></a>RDB两种落入磁盘的指令</h3><ul><li><p>save：明确的时候使用save，比如关机维护</p></li><li><p>bgsave：是后台，执行之后会创建fork，然后进行持久化</p><p>Redis持久化过程由子进程负责，完成后自动结束，阻塞只发生fork阶段，一般时间会很短；默认情况下执行redis-cli shutdown命令时，如果没有开启AOF持久化功能则自动执行bgsave；如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发给从节点</p></li></ul><p>查看配置文件中给出bgsave的规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"><span class="selector-tag">save</span> 900 1           //900内只有1个操作，也会触动写的操作</span><br><span class="line"><span class="selector-tag">save</span> 300 10          //300内只有10个操作，也会触动写的操作</span><br><span class="line"><span class="selector-tag">save</span> 60 10000        //60到达超过10000操作，就会触动写的操作</span><br><span class="line"></span><br><span class="line">//如果需要关闭，后面加“”或者注释<span class="selector-tag">save</span></span><br><span class="line"><span class="selector-tag">save</span> “”</span><br></pre></td></tr></table></figure><p><strong>其他rdb相关参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>rdbcompression yes</td><td>是否开启压缩格式，默认使用LZF算法</td></tr><tr><td>rdbchecksum yes</td><td>是否对数据进行校验</td></tr><tr><td>dbfilename dump.rdb</td><td>持久化文件的名字</td></tr><tr><td>rdb-del-sync-files no</td><td>是否删除没有持久化情况的rdb文件</td></tr><tr><td>dir /opt/redis_cluster/data/6379</td><td>持久化文件的路径</td></tr></tbody></table><h4 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326111744114.png"></p><p><strong>相关步骤</strong></p><ul><li>执行bgsave命令redis父进程判断当前是否存在执行的子进程。如RDB/AOF子进程，如果存在bgsave命令直接返回</li><li>父进程执行fock创建子进程，fork操作过程中父进程会阻塞，通过info starts命令查看lastest_fork_usec选项，可以获取最近一个fork操作的耗时，单位微妙</li><li>父进程创建fork完成后，bgsave命令返回”Background saving stated”信息并不在阻塞父进程，可以继续响应其他命令</li><li>子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后对源文件进程原子替换。执行lastsave命令可以获取最后一次生成RDB的时间，对应info统计的rdb_last_bgsave_time选项</li><li>子进程发送信号给父进程表示完成，父进程更新统计信息，具体信息需要看info Persistence下的rdb_*相关选项</li></ul><h3 id="RDB的优缺点"><a href="#RDB的优缺点" class="headerlink" title="RDB的优缺点"></a>RDB的优缺点</h3><p><strong>RDB的优点</strong></p><ul><li>RDB是一个紧凑压缩的二进制文件，代表Redis在某个时间点上的数据快照，非常适用于备份，全量复制等场景。比如每5小时执行bgsave备份，并把RDB文件拷贝到远程机器，用于备份恢复</li><li>RDB的恢复数据远远快于AOF的方式</li></ul><p><strong>RDB的缺点</strong></p><ul><li><p>不支持拉链，永远只有一个持久化文件，不能覆盖也不能更新，只有一份数据，所以也需要运维定制保存数据和恢复的策略</p></li><li><p>丢失数据相对多一些，因为它不是实时的写数据，是时点与时点之间窗口数据容易丢失，如果今天数据丢失了，那么就只能恢复昨天的数据或者是恢复前几个小时的数据。总之数据还是会丢失，但作为缓存数据库，对于数据丢失还是可以弥补的</p></li><li><p>因为bgsave每次运行都要执行fork操作创建子进程，属于重量级操作，执行频繁成本过高</p></li><li><p>RDB文件使用特定二进制格式存储，redi在版本演变过程有多个RDB版本，存在老版本的redis不谦容新版本的RDB格式问题</p></li></ul><h3 id="RDB实验"><a href="#RDB实验" class="headerlink" title="RDB实验"></a>RDB实验</h3><p>修改配置文件的几个参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"><span class="selector-tag">daemonize</span> <span class="selector-tag">no</span>                           //不在后台运行</span><br><span class="line"><span class="selector-id">#logfile</span> /<span class="selector-tag">var</span>/<span class="selector-tag">log</span>/<span class="selector-tag">redis_6379</span><span class="selector-class">.log</span>       //不将日志写入到日志文件，而是直接输出到屏幕</span><br></pre></td></tr></table></figure><p>将之前的持久化文件删除(这里是我自己设置的data目录，所以请根据自己定制的数据目录找到并删除)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /opt/redis_cluster/data/6379/*</span><br></pre></td></tr></table></figure><p>重新开启服务，指定配置文件开启</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pkill redis</span><br><span class="line">$ redis-server /opt/redis_cluster/6379.conf</span><br><span class="line">12467<span class="selector-pseudo">:M</span> 26 <span class="selector-tag">Mar</span> 2021 23<span class="selector-pseudo">:37</span><span class="selector-pseudo">:27.229</span> * <span class="selector-tag">Loading</span> <span class="selector-tag">RDB</span> <span class="selector-tag">produced</span> <span class="selector-tag">by</span> <span class="selector-tag">version</span> 6.0.6</span><br><span class="line">12467<span class="selector-pseudo">:M</span> 26 <span class="selector-tag">Mar</span> 2021 23<span class="selector-pseudo">:37</span><span class="selector-pseudo">:27.229</span> * <span class="selector-tag">RDB</span> <span class="selector-tag">age</span> 1119 <span class="selector-tag">seconds</span></span><br><span class="line">12467<span class="selector-pseudo">:M</span> 26 <span class="selector-tag">Mar</span> 2021 23<span class="selector-pseudo">:37</span><span class="selector-pseudo">:27.229</span> * <span class="selector-tag">RDB</span> <span class="selector-tag">memory</span> <span class="selector-tag">usage</span> <span class="selector-tag">when</span> <span class="selector-tag">created</span> 0.77 <span class="selector-tag">Mb</span></span><br><span class="line">12467<span class="selector-pseudo">:M</span> 26 <span class="selector-tag">Mar</span> 2021 23<span class="selector-pseudo">:37</span><span class="selector-pseudo">:27.229</span> * <span class="selector-tag">DB</span> <span class="selector-tag">loaded</span> <span class="selector-tag">from</span> <span class="selector-tag">disk</span>: 0.000 <span class="selector-tag">seconds</span></span><br><span class="line">12467<span class="selector-pseudo">:M</span> 26 <span class="selector-tag">Mar</span> 2021 23<span class="selector-pseudo">:37</span><span class="selector-pseudo">:27.229</span> * <span class="selector-tag">Ready</span> <span class="selector-tag">to</span> <span class="selector-tag">accept</span> <span class="selector-tag">connections</span></span><br></pre></td></tr></table></figure><p>写入几行数据然后使用bgsave持久化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -p 6379</span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">127.0.0.1<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">BGSAVE</span>         //写入<span class="selector-tag">dump</span><span class="selector-class">.rdb</span></span><br><span class="line"><span class="selector-tag">Background</span> <span class="selector-tag">saving</span> <span class="selector-tag">started</span></span><br></pre></td></tr></table></figure><p>查输出的日志和持久化文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">71989<span class="selector-pseudo">:M</span> 21 <span class="selector-tag">Mar</span> 2021 21<span class="selector-pseudo">:29</span><span class="selector-pseudo">:05.413</span> * <span class="selector-tag">Ready</span> <span class="selector-tag">to</span> <span class="selector-tag">accept</span> <span class="selector-tag">connections</span></span><br><span class="line">72002<span class="selector-pseudo">:C</span> 21 <span class="selector-tag">Mar</span> 2021 21<span class="selector-pseudo">:33</span><span class="selector-pseudo">:00.868</span> * <span class="selector-tag">DB</span> <span class="selector-tag">saved</span> <span class="selector-tag">on</span> <span class="selector-tag">disk</span>                           //数据保存到<span class="selector-tag">dick</span></span><br><span class="line">72002<span class="selector-pseudo">:C</span> 21 <span class="selector-tag">Mar</span> 2021 21<span class="selector-pseudo">:33</span><span class="selector-pseudo">:00.893</span> * <span class="selector-tag">RDB</span>: 2 <span class="selector-tag">MB</span> <span class="selector-tag">of</span> <span class="selector-tag">memory</span> <span class="selector-tag">used</span> <span class="selector-tag">by</span> <span class="selector-tag">copy-on-write</span>  //<span class="selector-tag">cow</span>使用2<span class="selector-tag">MB</span>的内存</span><br><span class="line">71989<span class="selector-pseudo">:M</span> 21 <span class="selector-tag">Mar</span> 2021 21<span class="selector-pseudo">:33</span><span class="selector-pseudo">:00.926</span> * <span class="selector-tag">Background</span> <span class="selector-tag">saving</span> <span class="selector-tag">started</span> <span class="selector-tag">by</span> <span class="selector-tag">pid</span> 72002     //由后台<span class="selector-tag">pid72002</span>保存</span><br><span class="line">71989<span class="selector-pseudo">:M</span> 21 <span class="selector-tag">Mar</span> 2021 21<span class="selector-pseudo">:33</span><span class="selector-pseudo">:00.926</span> * <span class="selector-tag">Background</span> <span class="selector-tag">saving</span> <span class="selector-tag">terminated</span> <span class="selector-tag">with</span> <span class="selector-tag">success</span>  //成功完成后台保存</span><br><span class="line"></span><br><span class="line">//查看日志内容，可以看到内容很紧凑，是二进制的格式</span><br><span class="line">$ vi dump.rdb </span><br><span class="line"><span class="selector-tag">REDIS0009</span>ú      <span class="selector-tag">redis-ver</span>^<span class="selector-tag">E6</span>.0.6ú</span><br><span class="line"><span class="selector-tag">redis-bits</span>À@ú^EctimeÂ^LKW`ú^Hused-memÂÀ/^M^@ú^Laof-preambleÀ^@þ^@û^B^@^@^Bk1^Bv1^@^Bk2^Bv2ÿ^]*©wX0f&lt;91&gt;</span><br></pre></td></tr></table></figure><p>查看文件校验是否ok</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ redis-check-rdb /opt/redis_cluster/data/6379/dump.rdb </span><br><span class="line"><span class="selector-attr">[offset 0]</span> <span class="selector-tag">Checking</span> <span class="selector-tag">RDB</span> <span class="selector-tag">file</span> /<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">data</span>/6379/<span class="selector-tag">dump</span><span class="selector-class">.rdb</span></span><br><span class="line">[offset 26] AUX FIELD redis-ver = &#x27;6.0.6&#x27;</span><br><span class="line">[offset 40] AUX FIELD redis-bits = &#x27;64&#x27;</span><br><span class="line">[offset 52] AUX FIELD ctime = &#x27;1616333580&#x27;</span><br><span class="line">[offset 67] AUX FIELD used-mem = &#x27;864192&#x27;</span><br><span class="line">[offset 83] AUX FIELD aof-preamble = &#x27;0&#x27;</span><br><span class="line"><span class="selector-attr">[offset 85]</span> <span class="selector-tag">Selecting</span> <span class="selector-tag">DB</span> <span class="selector-tag">ID</span> 0</span><br><span class="line"><span class="selector-attr">[offset 111]</span> <span class="selector-tag">Checksum</span> <span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-attr">[offset 111]</span> \<span class="selector-tag">o</span>/ <span class="selector-tag">RDB</span> <span class="selector-tag">looks</span> <span class="selector-tag">OK</span>! \<span class="selector-tag">o</span>/</span><br><span class="line"><span class="selector-attr">[info]</span> 2 <span class="selector-tag">keys</span> <span class="selector-tag">read</span></span><br><span class="line"><span class="selector-attr">[info]</span> 0 <span class="selector-tag">expires</span></span><br><span class="line"><span class="selector-attr">[info]</span> 0 <span class="selector-tag">already</span> <span class="selector-tag">expired</span></span><br></pre></td></tr></table></figure><h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>AOF（append only file）持久化，以独立日志的方式记录每次写命令，重启时再执行AOF文件中的命令，使其可以重写数据的目的，AOF的主要作用是解决数据持久化的实时性</p><p>Redis在长期运行的过程中，AOF的日志会越来越大。如果实例的宕机重启，重放整个AOF日志会非常耗时。导致Redis长时间无法对外提供服务，所以在AOF日志数据较大时，需要对AOF进行日志重写/瘦身</p><h3 id="使用AOF"><a href="#使用AOF" class="headerlink" title="使用AOF"></a>使用AOF</h3><p>开始AOF功能需要设置配置，AOF功能模式不开启，需要通过appendonly yes开启，通过appendfilename配置AOF的文件名，默认名称是appendonly.aof，保存路径与RDB持久化方式一致，通过dir进行配置指定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"><span class="selector-tag">appendonly</span> <span class="selector-tag">no</span></span><br><span class="line"><span class="selector-tag">appendfilename</span> &quot;<span class="selector-tag">appendonly</span><span class="selector-class">.aof</span>&quot;</span><br><span class="line"><span class="selector-tag">no-appendfsync-on-rewrite</span> <span class="selector-tag">no</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td>appendonly no</td><td>是否开启AOF功能</td></tr><tr><td>appendfilename “appendonly.aof”</td><td>AOF文件名称</td></tr><tr><td>no-appendfsync-on-rewrite no</td><td>如果你的redis抛出一个子进程，子进程可能是做besave到rdb，或重写的时候，父进程就不会向磁盘写入的操作，no是就是不写入</td></tr></tbody></table><h4 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326143114562.png"></p><p><strong>相关步骤</strong></p><ul><li>所有写入命令会append到aof_buf（缓冲区）中</li><li>AOF缓存区根据对应的策略对磁盘进刷写（由内核fsync，将文件的核心状态与存储设备同步）</li><li>AOF文件越来越大，需要定期对AOF文件进行瘦身，压缩文件</li><li>当Redis服务重启时，可以加载AOF文件进行数据恢复</li></ul><h3 id="fsync"><a href="#fsync" class="headerlink" title="fsync"></a>fsync</h3><p>AOF日志是以文件的形式存在的，当程序对AOF日志文件进行写操作时，实际上是将内容写到了内核为文件描述（fd）的一个内存缓存中，然后内核会异步将脏数据刷写到磁盘</p><p>如果机器突然宕机，AOF日志内容可能还没来得及刷写到磁盘中，日志就已经出现丢失了那么怎么解决这个问题呢？</p><p>Linux的glibc提供了fsync(int fd)函数可以将指定文件的内容强制从内核缓存刷写到磁盘。Redis进程实时调用fsync函数就可以保证AOF日志不会丢失，因为fsync会强制磁盘同步，将阻塞直达写入磁盘完成后返回保证了数据持久化。但这又会产生一个问题，因为fysnc是一个刷新到磁盘的IO操作，速度会慢，如果Redis执行一条指令就要fsync一次，那么Redis的快的说法将会受到限制</p><p>所以通常是每隔1s左右执行一次fsync操作，这个1s的周期是可以通过参数配置的，如配置appendfsync参数的以下几个配置值可以对AOF写入操作</p><table><thead><tr><th>参数配置的值</th><th>说明</th></tr></thead><tbody><tr><td>always</td><td>命令写入aof_buf后调用系统fsync操作同步到AOF文件（实时性的）</td></tr><tr><td>everysec</td><td>命令写入aof_buf后调用系统write操作，write完成后线程返回fsync同步文件操作由专门线程每秒调用一次（每秒写入磁盘）</td></tr><tr><td>no</td><td>命令写入aof_buf后调用系统write操作，不对AOF文件做fsync同步，同步磁盘操作由操作系统负责，通常同步周期最长30秒（由系统的缓存页满了或者是超过周期时间才写入磁盘）</td></tr></tbody></table><p>write操作会触发延迟写（delayed write）机制，Linux在内核提供了缓存区的页作为提高磁盘IO性能，write操作写入系统缓冲区后会直接返回，同步磁盘的操作依赖于系统调度机制。比如：缓存区提供的页满了或者是到达一定的时间周期，就会对磁盘写入。当然如果此时服务出现了宕机，那么存在系统的缓冲区的数据将会丢失</p><h3 id="AOF重写机制"><a href="#AOF重写机制" class="headerlink" title="AOF重写机制"></a>AOF重写机制</h3><p>Redis提供了bgrewriteaof指令用于对AOF日志进行瘦身，其原理就是开辟一个子进程对内存进行遍历，将数据写入到一个新的AOF日志文件中。写入完毕再讲操作期间发生的增量AOF日志追加到这个新的AOF日志文件中，追加完后就立即替代旧的AOF日志文件</p><p>瘦身其实就是对AOF文件含有无效命令或者是重复的命令进行删除，如del key1，del hdel key2，set k1 v1，set k1 v2等，将AOF重写的文件只保留最终数据的写入命令</p><p>AOF重写降低了文件占用的空间，还有就是更小的AOF可以更快的被redis加载</p><p><strong>AOF重写过程的手动与自动</strong></p><ul><li><p>手动触发：通过命令bgrewriteaof</p></li><li><p>自动触发：根据autoauto-aof-rewrite-percentage和auto-aof-rewrite-min-size参数确定自动触发机制</p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>autoauto-aof-rewrite-percentage</td><td>代表当前AOF文件空间（aof_current_size）和上一次重写后AOF文件空间（aof_base_size）的比值</td></tr><tr><td>auto-aof-rewrite-min-size</td><td>表示运行AOF重写时文件最小体积，默认为64M</td></tr></tbody></table><p><code>自动触发时机=aof_current_size(当前大小) &gt; auto-aof-rewrite-min-size &amp;&amp; (aof_current_size - aof_base_size) / aof_base_size &gt;= auto-aof-rewrite-percentage</code></p><p>aof_current_size和aof_base_size可以通过命令info Persistence统计信息中查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli info persistence|grep aof</span><br><span class="line"><span class="selector-tag">aof_enabled</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">aof_rewrite_in_progress</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_rewrite_scheduled</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_last_rewrite_time_sec</span><span class="selector-pseudo">:-1</span></span><br><span class="line"><span class="selector-tag">aof_current_rewrite_time_sec</span><span class="selector-pseudo">:-1</span></span><br><span class="line"><span class="selector-tag">aof_last_bgrewrite_status</span><span class="selector-pseudo">:ok</span></span><br><span class="line"><span class="selector-tag">aof_last_write_status</span><span class="selector-pseudo">:ok</span></span><br><span class="line"><span class="selector-tag">aof_last_cow_size</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_current_size</span><span class="selector-pseudo">:391185</span></span><br><span class="line"><span class="selector-tag">aof_base_size</span><span class="selector-pseudo">:43169</span></span><br><span class="line"><span class="selector-tag">aof_pending_rewrite</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_buffer_length</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_rewrite_buffer_length</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_pending_bio_fsync</span><span class="selector-pseudo">:0</span></span><br><span class="line"><span class="selector-tag">aof_delayed_fsync</span><span class="selector-pseudo">:0</span></span><br></pre></td></tr></table></figure><h4 id="AOF重写流程"><a href="#AOF重写流程" class="headerlink" title="AOF重写流程"></a>AOF重写流程</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210326152730108.png"></p><p><strong>相关流程</strong></p><ul><li>1）执行AOF重写bgrewriteaof</li><li>2）父进程执行fork创建子进程，开销等同于bgsave过程</li><li>3-1）父进程执行fork完成后，会继续响应其他命令，所有修改命令依然写入AOF缓冲区并根据appendfsync策略同步到磁盘，保证原有AOF机制原子性</li><li>3-2）fork运用cow技术，子进程只能共享父进程操作写入时的内存数据。由于父进程依然要处理响应请求，redis会使用“AOF重写缓冲区”即aof_rewrite_buf保存这部分新数据，防止新AOF文件生成期间丢失这部分数据</li><li>4）子进程根据内存快照，按照命令合并规则写入到新的AOF文件，每次批量写入磁盘数据量由配置aof-rewrite-incremental-fsync控制，默认为32M，防止单次刷盘数据过多造成磁盘阻塞</li><li>5-1）新AOF文件写入完成后，子进程发送新号给父进程，父进程更新统计信息，具体需要使用info persistence下aof_*查看相关统计</li><li>5-2）父进程把AOF重写缓存区（aof_rewirte_buf）的数据写入到新的AOF文件</li><li>5-3）使用新AOF文件替换旧的AOF文件，完成AOF重写</li></ul><h3 id="Redis4-0之后的AOF混合持久化"><a href="#Redis4-0之后的AOF混合持久化" class="headerlink" title="Redis4.0之后的AOF混合持久化"></a>Redis4.0之后的AOF混合持久化</h3><p>重启redis时，很少使用RDB来恢复内存状态。因为会丢失大量数据，通常使用AOF日志重放，但是重放AOF日志相对于RDB要慢许多，这样在启动实例时会花费很长时间</p><p>Redis4.0版本后解决了这个文件，带来了一个新的持久化选项——混合持久化，将RDB文件的内容和增量的AOF日志文件存放在一起，这里的AOF日志不再是全量的日志，而是自持久化开始到持久化结束的这段时间发生的增量AOF日志，通常这部分AOF日志很小</p><p>于是在Redis重启的时间，可以先加载RDB的内容，然后在重放增量AOF日志，就可以完全替代之前的AOF全量文件重放，重启效率大大的提升，开启混合持久化参数是aof-use-rdb-preamble，开启之后持久化文件第一行出现“REDIS”的字符，说明就是使用混合持久化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"># <span class="selector-tag">When</span> <span class="selector-tag">loading</span> <span class="selector-tag">Redis</span> <span class="selector-tag">recognizes</span> <span class="selector-tag">that</span> <span class="selector-tag">the</span> <span class="selector-tag">AOF</span> <span class="selector-tag">file</span> <span class="selector-tag">starts</span> <span class="selector-tag">with</span> <span class="selector-tag">the</span> &quot;<span class="selector-tag">REDIS</span>&quot;</span><br><span class="line"># <span class="selector-tag">string</span> <span class="selector-tag">and</span> <span class="selector-tag">loads</span> <span class="selector-tag">the</span> <span class="selector-tag">prefixed</span> <span class="selector-tag">RDB</span> <span class="selector-tag">file</span>, <span class="selector-tag">and</span> <span class="selector-tag">continues</span> <span class="selector-tag">loading</span> <span class="selector-tag">the</span> <span class="selector-tag">AOF</span></span><br><span class="line"># <span class="selector-tag">tail</span>.</span><br><span class="line"><span class="selector-tag">aof-use-rdb-preamble</span> <span class="selector-tag">yes</span></span><br></pre></td></tr></table></figure><h3 id="AOF实验"><a href="#AOF实验" class="headerlink" title="AOF实验"></a>AOF实验</h3><h4 id="4-0版本以前的AOF"><a href="#4-0版本以前的AOF" class="headerlink" title="4.0版本以前的AOF"></a>4.0版本以前的AOF</h4><p>修改配置文件下述的参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"><span class="selector-tag">daemonize</span> <span class="selector-tag">no</span>                           //不在后台运行</span><br><span class="line"><span class="selector-id">#logfile</span> /<span class="selector-tag">var</span>/<span class="selector-tag">log</span>/<span class="selector-tag">redis_6379</span><span class="selector-class">.log</span>       //不将日志写入到日志文件，而是直接输出到屏幕</span><br><span class="line"><span class="selector-tag">aof-use-rdb-preamble</span>  <span class="selector-tag">no</span>               //不开启混合模式</span><br></pre></td></tr></table></figure><p>接着重启服务，写入数据，查看文件内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli shutdown</span><br><span class="line">$ redis-server /opt/redis_cluster/6379.conf</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">BGREWRITEAOF</span></span><br><span class="line"></span><br><span class="line">$ cat appendonly.aof</span><br><span class="line">*2         /<span class="comment">/*号代表是下述的元素组成，如select 0就是两个元素</span></span><br><span class="line"><span class="comment">$6</span></span><br><span class="line"><span class="comment">SELECT</span></span><br><span class="line"><span class="comment">$1         </span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">*3         //set k1 v1就是三个元素</span></span><br><span class="line"><span class="comment">$3</span></span><br><span class="line"><span class="comment">SET</span></span><br><span class="line"><span class="comment">$2</span></span><br><span class="line"><span class="comment">kv</span></span><br><span class="line"><span class="comment">$2</span></span><br><span class="line"><span class="comment">v2</span></span><br><span class="line"><span class="comment">*3</span></span><br><span class="line"><span class="comment">$3</span></span><br><span class="line"><span class="comment">SET</span></span><br><span class="line"><span class="comment">$2</span></span><br><span class="line"><span class="comment">k1</span></span><br><span class="line"><span class="comment">$2</span></span><br><span class="line"><span class="comment">v2</span></span><br></pre></td></tr></table></figure><p>通过bgrewriteaof重写过</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//首先先查看文件的大小</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">total</span> 8</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 81 <span class="selector-tag">Mar</span> 27 15<span class="selector-pseudo">:17</span> <span class="selector-tag">appendonly</span><span class="selector-class">.aof</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 92 <span class="selector-tag">Mar</span> 27 15<span class="selector-pseudo">:16</span> <span class="selector-tag">dump</span><span class="selector-class">.rdb</span></span><br><span class="line"></span><br><span class="line">//写入两条重复的<span class="selector-tag">key</span>的数据</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">value1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">value2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">//重写过程，在查看数据</span><br><span class="line">&gt; <span class="selector-tag">BGREWRITEAOF</span></span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">total</span> 8</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 110 <span class="selector-tag">Mar</span> 21 21<span class="selector-pseudo">:38</span> <span class="selector-tag">appendonly</span><span class="selector-class">.aof</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 111 <span class="selector-tag">Mar</span> 21 21<span class="selector-pseudo">:33</span> <span class="selector-tag">dump</span><span class="selector-class">.rdb</span></span><br><span class="line">$ cat appendonly.aof                 //可以发现k1这个key已经被刷新了，旧的key会被删除</span><br><span class="line">.................省略..................</span><br><span class="line">*3</span><br><span class="line"><span class="selector-tag">k1</span></span><br><span class="line">$6</span><br><span class="line"><span class="selector-tag">value1</span></span><br></pre></td></tr></table></figure><h4 id="4-0版本后的AOF"><a href="#4-0版本后的AOF" class="headerlink" title="4.0版本后的AOF"></a>4.0版本后的AOF</h4><p>开启aof-use-rdb-preamble参数，并重启服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /opt/redis_cluster/6379.conf</span><br><span class="line"><span class="selector-tag">aof-use-rdb-preamble</span> <span class="selector-tag">yes</span></span><br><span class="line">$ redis-cli shutdown</span><br><span class="line">$ redis-server /opt/redis_cluster/6379.conf</span><br></pre></td></tr></table></figure><p>加入一些数据，然后bgrewriteaof重写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">bgrewriteaof</span></span><br></pre></td></tr></table></figure><p>查看文件内容改变，会发现在开头加入了REDIS的字符，而且追加的参数都是RDB</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi appendonly.aof </span><br><span class="line"><span class="selector-tag">REDIS0009</span>ú      <span class="selector-tag">redis-ver</span>^<span class="selector-tag">E6</span>.0.6ú</span><br><span class="line"><span class="selector-tag">redis-bits</span>À@ú^EctimeÂðÞ^`ú^Hused-memÂÈ3^M^@ú^Laof-preambleÀ^Aþ^@û^D^@^@^Bk1^Bv1^@^Bk2^Bv2^@^Bk3^Bv3^@^Bkv^Bv2ÿ½R^KywèêÞ</span><br></pre></td></tr></table></figure><h2 id="Redis运维选择"><a href="#Redis运维选择" class="headerlink" title="Redis运维选择"></a>Redis运维选择</h2><ul><li>RDB是通过子进程的方式进行快照配置，遍历整个内存，大块写磁盘会加重系统负载</li><li>AOF的fsync是一个耗时的IO操作，它会降低Redis性能，同时也会增加系统的IO负载</li></ul><p>AOF和RDB文件都可以用于服务器重启的数据恢复，但如果同时开启AOF和RDB，则会优先加载AOF文件，如果没有才会使用RDB</p><p>所以redis在做主从或哨兵时，通常主节点不会进行持久化操作，持久化操作主要是在从节点进行。从节点是备份节点，没有来自客户端的请求压力，所以持久化操作不会影响正常业务</p><p>但如果出现网络问题，从节点长期连接不上主节点，或者是延迟很长时间，就会出现数据不一致的问题。特别是在网络分区出现的情况下，主节点一旦不小心宕机了，那么数据就将会丢失。对于这个问题需要做好监控的工作保证网络通畅，当然也可以多起几个从节点来同步主节点的数据，从而降低网络分区的概率，让数据不会轻易丢失</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用结构类型-2（详细讲解）</title>
      <link href="2021/05/08/Redis%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2%EF%BC%88%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3%EF%BC%89/"/>
      <url>2021/05/08/Redis%E5%B8%B8%E7%94%A8%E7%BB%93%E6%9E%84%E7%B1%BB%E5%9E%8B-2%EF%BC%88%E8%AF%A6%E7%BB%86%E8%AE%B2%E8%A7%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis结构"><a href="#Redis结构" class="headerlink" title="Redis结构"></a>Redis结构</h1><h2 id="Redis的库"><a href="#Redis的库" class="headerlink" title="Redis的库"></a>Redis的库</h2><p>Redis一共有16个库，从0-15，每个库之间是互相隔离的，默认进入是在0库中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span>&quot; </span><br><span class="line">&gt; <span class="selector-tag">select</span> 1    //切换至1库</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"><span class="selector-attr">[1]</span>&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span>   //在<span class="selector-tag">get</span>查询是空的</span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><p><strong>命令行方式进入库</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.0.0.50 -n 8  //进入8号库</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span><span class="selector-attr">[8]</span>&gt; </span><br><span class="line"></span><br><span class="line">$ redis-cli --help</span><br><span class="line"><span class="selector-tag">-n</span> &lt;<span class="selector-tag">db</span>&gt;            <span class="selector-tag">Database</span> <span class="selector-tag">number</span>.</span><br></pre></td></tr></table></figure><h2 id="Redis的5中数据结构"><a href="#Redis的5中数据结构" class="headerlink" title="Redis的5中数据结构"></a>Redis的5中数据结构</h2><p>Redis有 5 种基础数据结构，分别为：string（字符串）、list（列表）、hash（字典）、set（集合）和sorted set（有序集合，也叫zset）。而不同类型应用于不同的场景，所以我们不仅要学会如果使用，还要知道如何应用在不同的场景。这五种类型在redis中扮演者重要的角色，也是基础最重要部分</p><h3 id="string（字符串）-数据结构"><a href="#string（字符串）-数据结构" class="headerlink" title="string（字符串） 数据结构"></a>string（字符串） 数据结构</h3><p>字符串<code>string</code>是Redis最简单的数据结构，Redis所有的数据结构都以唯一的key字符串作为名称，然后通过这个key值来获取相应的value数据。但也不是简单地key-value存储，实际上它是一个数据结构服务器，支持不同类型的值，如还有int（数字类型）、bitmap（位图，二进制类型）</p><p>字符串结构使用广泛，常见的用途就是缓存用户信息，将用户信息结构使用JSON序列化成字符串，然后将序列化后的字符串塞进Redis来缓存。同样，取用户信息会经过一次反序列化的过程</p><blockquote><p>注意：字符串最大长度为512MB</p></blockquote><p><strong>字符串下的三种类型</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210316140455861.png"></p><h4 id="string类型"><a href="#string类型" class="headerlink" title="string类型"></a>string类型</h4><h5 id="string-设置键值对"><a href="#string-设置键值对" class="headerlink" title="string-设置键值对"></a>string-设置键值对</h5><ul><li>相当于字典的key和value，支持简单的增删改查操作</li><li>通常用SET command和GET command来设置和获取字符串值</li></ul><p>查看帮助@string可以看到string的所有命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@string</span></span><br></pre></td></tr></table></figure><p>单独查看set命令的帮助，可以看到使用的方法，还有它创建的key的组是属于字符串的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">set</span></span><br><span class="line">  <span class="selector-tag">SET</span> <span class="selector-tag">key</span> <span class="selector-tag">value</span> <span class="selector-attr">[EX seconds|PX milliseconds]</span> <span class="selector-attr">[NX|XX]</span> <span class="selector-attr">[KEEPTTL]</span></span><br><span class="line">  <span class="selector-tag">summary</span>: <span class="selector-tag">Set</span> <span class="selector-tag">the</span> <span class="selector-tag">string</span> <span class="selector-tag">value</span> <span class="selector-tag">of</span> <span class="selector-tag">a</span> <span class="selector-tag">key</span></span><br><span class="line">  <span class="selector-tag">since</span>: 1.0.0</span><br><span class="line">  <span class="selector-tag">group</span>: <span class="selector-tag">string</span></span><br></pre></td></tr></table></figure><p>新建一个key，“k1”是字典key，而value是字符串‘v1’</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span> </span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span>           //<span class="selector-tag">get</span>查看一个<span class="selector-tag">key</span></span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot; </span><br><span class="line">&gt; <span class="selector-tag">mget</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span>       //<span class="selector-tag">mget</span>可以查看多个</span><br><span class="line">1) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">v2</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">keys</span> *           //查看所有键（慎用）</span><br><span class="line">1) &quot;<span class="selector-tag">k1</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>SET命令的NX与XX参数作用</strong></p><ul><li>NX：判断该key是否存在，存在则不创建，不存在则新建</li><li>XX：判断该key是否存在，存在则更新，不存在则不设置</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">vv</span> <span class="selector-tag">nx</span>    </span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span>         </span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span> <span class="selector-tag">nx</span>   //<span class="selector-tag">k2</span>没有<span class="selector-tag">value</span>，所以可以创建</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k2</span></span><br><span class="line">&quot;<span class="selector-tag">v2</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">vv</span> <span class="selector-tag">xx</span>  </span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">vv</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span> <span class="selector-tag">xx</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h5 id="string-设置多个键值对"><a href="#string-设置多个键值对" class="headerlink" title="string-设置多个键值对"></a>string-设置多个键值对</h5><p>MSET、MGET 批量增和查看键值对，可以对多个字符串进行批量读写，节省网络耗时开销</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">MSET</span> <span class="selector-tag">key1</span> <span class="selector-tag">v1</span> <span class="selector-tag">key2</span> <span class="selector-tag">v2</span> <span class="selector-tag">key3</span> <span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">MGET</span> <span class="selector-tag">key1</span> <span class="selector-tag">key2</span> <span class="selector-tag">key3</span></span><br><span class="line">1) &quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">v2</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">v3</span>&quot;</span><br></pre></td></tr></table></figure><p>MESTNX（对多值的原子性操作）有一个失败，就代表都不能成功设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">MSET</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span> <span class="selector-tag">k2</span> <span class="selector-tag">v2</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">MGET</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">v1</span></span><br><span class="line"><span class="selector-tag">v2</span></span><br><span class="line">&gt; <span class="selector-tag">MSETNX</span> <span class="selector-tag">k1</span> <span class="selector-tag">a</span> <span class="selector-tag">k2</span> <span class="selector-tag">b</span>            //<span class="selector-tag">k1</span>，<span class="selector-tag">k2</span>都有值，所以不能成功，返回0</span><br><span class="line">0</span><br><span class="line">&gt; <span class="selector-tag">MSETNX</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span> <span class="selector-tag">k4</span> <span class="selector-tag">v4</span>          //<span class="selector-tag">k3</span>，<span class="selector-tag">k4</span>不用值，设置陈宫，返回1</span><br><span class="line">1</span><br><span class="line">&gt; <span class="selector-tag">MGET</span> <span class="selector-tag">k3</span> <span class="selector-tag">k4</span></span><br><span class="line"><span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">v4</span></span><br><span class="line">&gt; <span class="selector-tag">MSETNX</span> <span class="selector-tag">k3</span> <span class="selector-tag">v3</span> <span class="selector-tag">k4</span> <span class="selector-tag">v4</span> <span class="selector-tag">k5</span> <span class="selector-tag">v5</span>    //设置<span class="selector-tag">k5</span>值，但之前<span class="selector-tag">k3</span>、<span class="selector-tag">k4</span>已经设置过了，所以不能成功，查看<span class="selector-tag">k5</span>是空的</span><br><span class="line">0</span><br><span class="line">&gt; <span class="selector-tag">MGET</span> <span class="selector-tag">k3</span> <span class="selector-tag">k4</span> <span class="selector-tag">k5</span></span><br><span class="line"><span class="selector-tag">v3</span></span><br><span class="line"><span class="selector-tag">v4</span></span><br></pre></td></tr></table></figure><h5 id="string-其他命令使用"><a href="#string-其他命令使用" class="headerlink" title="string-其他命令使用"></a>string-其他命令使用</h5><p>APPEND 追加字符创</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">append</span> <span class="selector-tag">k1</span> &quot; <span class="selector-tag">world</span>&quot;</span><br><span class="line">(<span class="selector-tag">integer</span>) 11</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span> <span class="selector-tag">world</span>&quot;</span><br></pre></td></tr></table></figure><p>GETRANGE 取值范围值，redis有正反向索引，第一个字符开始是从0位置开始（正向索引），最后的字符从-1开始（反向索引）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span> <span class="selector-tag">world</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">GETRANGE</span> <span class="selector-tag">k1</span> 6 11</span><br><span class="line">&quot;<span class="selector-tag">world</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">GETRANGE</span> <span class="selector-tag">k1</span> 6 <span class="selector-tag">-1</span>       </span><br><span class="line">&quot;<span class="selector-tag">world</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">GETRANGE</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-7</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span>&quot;</span><br></pre></td></tr></table></figure><p>SETRANGE 设置范围值，可以将设置的值对之前的值进行覆盖</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span> <span class="selector-tag">world</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SETRANGE</span> <span class="selector-tag">k1</span> 6 <span class="selector-tag">hello</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 11</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span> <span class="selector-tag">hello</span>&quot;</span><br></pre></td></tr></table></figure><p>STRLEN 获取值的长度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span> <span class="selector-tag">hell0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">STRLEN</span> <span class="selector-tag">k1</span>         </span><br><span class="line">(<span class="selector-tag">integer</span>) 11    //有11个字符</span><br></pre></td></tr></table></figure><p>SETEX、SETNX设置过期时间，可以对key设置过期时间，到时间会被自动删除，这个功能常用来控制缓存的失效时间。</p><ul><li>setex命令，是设置x秒后过期，等同于set+expire，expire是设置时间过期（是在全局范围的命令）</li><li>setnx命令，如果key不存在就执行set创建</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setex</span> <span class="selector-tag">key2</span> 5 <span class="selector-tag">v2</span>         </span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key2</span></span><br><span class="line">&quot;<span class="selector-tag">v2</span>&quot;</span><br><span class="line">...........5秒后............</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">key3</span> <span class="selector-tag">k3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key3</span></span><br><span class="line">&quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">setnx</span> <span class="selector-tag">key3</span> <span class="selector-tag">k33</span>          //因为<span class="selector-tag">name</span>已经存在，所以<span class="selector-tag">set</span>创建不成功</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">name</span></span><br><span class="line">“<span class="selector-tag">k3</span>”                      //值没有改变</span><br></pre></td></tr></table></figure><p>GETSET(将一个旧值刷新为新值)，其实就是减少操作步骤，如果使用这个就不需要先set，在get查看值，而是直接使用一次GETSET，设置并能查看到值，相当于减少了一次IO</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">GETSET</span> <span class="selector-tag">k1</span> <span class="selector-tag">world</span>         //刷新为新值，查看旧值 </span><br><span class="line"><span class="selector-tag">hello</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">world</span></span><br></pre></td></tr></table></figure><h4 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h4><p>INCR、INCRBY、INCRBYFLOAT、DECR、DECRBY命令将字符串值解析成整型，但是通过TYPE查看value也还是属于字符串，需要通过命令OBJECT ENCODING 进行查看</p><ul><li><p>TYPE 查看类型</p></li><li><p>OBJECT 查看对象</p></li><li><p>ENCODING 查看对象的编码模式</p></li></ul><p>在字符串结构类型中，不只有string，也有int和bitmap，在使用set设置一个key时，底层会使用encoding进行判断编码模式，对于数值虽然在表面上用TYPE查看是string类型，但使用encoding查看是属于int类型</p><p>作用是通过encoding进行判断，减少类型转换的操作，起到加速的作用。当不能使用INCR增加的使用，encoding自然会报错，</p><h5 id="int-类型示例"><a href="#int-类型示例" class="headerlink" title="int-类型示例"></a>int-类型示例</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">key1</span> 99</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">TYPE</span> <span class="selector-tag">key1</span></span><br><span class="line"><span class="selector-tag">string</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">OBJECT</span> <span class="selector-tag">help</span>             //查看<span class="selector-tag">OBJECT</span>帮助可以看到<span class="selector-tag">ENCODING</span></span><br><span class="line"><span class="selector-tag">ENCODING</span> &lt;<span class="selector-tag">key</span>&gt; <span class="selector-tag">--</span> <span class="selector-tag">Return</span> <span class="selector-tag">the</span> <span class="selector-tag">kind</span> <span class="selector-tag">of</span> <span class="selector-tag">internal</span> <span class="selector-tag">representation</span> <span class="selector-tag">used</span> <span class="selector-tag">in</span> <span class="selector-tag">order</span> <span class="selector-tag">to</span> <span class="selector-tag">store</span> <span class="selector-tag">the</span> <span class="selector-tag">value</span> <span class="selector-tag">associated</span> <span class="selector-tag">with</span> <span class="selector-tag">a</span> <span class="selector-tag">key</span></span><br><span class="line">意思是：返回用于存储与键关联的值，显示内存表示的种类</span><br><span class="line">.</span><br><span class="line">&gt; <span class="selector-tag">OBJECT</span> <span class="selector-tag">encoding</span> <span class="selector-tag">key1</span></span><br><span class="line">&quot;<span class="selector-tag">int</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">INCR</span> <span class="selector-tag">key1</span>               //加1</span><br><span class="line">(<span class="selector-tag">integer</span>) 100</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">INCRBY</span> <span class="selector-tag">key1</span> 1000       //加多值</span><br><span class="line">(<span class="selector-tag">integer</span>) 1102</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">&quot;1102&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">DECR</span> <span class="selector-tag">key1</span>               //减1</span><br><span class="line">(<span class="selector-tag">integer</span>) 1096 </span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">DECRBY</span> <span class="selector-tag">key1</span> 100         //减100，也可以</span><br></pre></td></tr></table></figure><h4 id="bitmap（位图）"><a href="#bitmap（位图）" class="headerlink" title="bitmap（位图）"></a>bitmap（位图）</h4><p>字符串由多个字节组成，每个字节又由8个bit组成，将一个字符串看成很多bit的组合。字节有字节的索引（从0开始），而位（bit）有位的索引（也是从0开始）。在下述内容我称字节索引位=byte索引，位索引=bit索引</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315213803912.png"></p><h5 id="bitmap的使用"><a href="#bitmap的使用" class="headerlink" title="bitmap的使用"></a>bitmap的使用</h5><p><strong>SETBIT：设置key的二进制位</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">setbit</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">SETBIT</span> <span class="selector-tag">key</span> <span class="selector-tag">offset</span> <span class="selector-tag">value</span></span><br><span class="line">  <span class="selector-tag">summary</span>: <span class="selector-tag">Sets</span> <span class="selector-tag">or</span> <span class="selector-tag">clears</span> <span class="selector-tag">the</span> <span class="selector-tag">bit</span> <span class="selector-tag">at</span> <span class="selector-tag">offset</span> <span class="selector-tag">in</span> <span class="selector-tag">the</span> <span class="selector-tag">string</span> <span class="selector-tag">value</span> <span class="selector-tag">stored</span> <span class="selector-tag">at</span> <span class="selector-tag">key</span></span><br><span class="line">           设置或清除存储在<span class="selector-tag">key</span>字符串值的二进制位</span><br><span class="line">  <span class="selector-tag">since</span>: 2.2.0</span><br><span class="line">  <span class="selector-tag">group</span>: <span class="selector-tag">string</span></span><br></pre></td></tr></table></figure><p>SETBIT的k1值，第一个1是bit索引，第二个1是将bit索引对应的0设置成1。获取到的是”@”，这是根据ASCII码所定义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 1 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">STRLEN</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;@&quot;                 //ASCII码</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315214636807.png"></p><p>在设置bit索引第5位设置成1，得到D。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SETBIT</span> <span class="selector-tag">k1</span> 5 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">D</span>&quot;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315215248143.png"></p><p>可以通过Linux的（man ascii ）查看ascii表是否正确</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ man ascii</span><br><span class="line"><span class="selector-tag">Oct</span>   <span class="selector-tag">Dec</span>   <span class="selector-tag">Hex</span>   <span class="selector-tag">Char</span>                        <span class="selector-tag">Oct</span>   <span class="selector-tag">Dec</span>   <span class="selector-tag">Hex</span>   <span class="selector-tag">Char</span></span><br><span class="line">────────────────────────────────────────────────────────────────────────</span><br><span class="line">000   0     00    NUL &#x27;\0&#x27;                    100   64    40    @</span><br><span class="line">001   1     01    <span class="selector-tag">SOH</span> (<span class="selector-tag">start</span> <span class="selector-tag">of</span> <span class="selector-tag">heading</span>)      101   65    41    <span class="selector-tag">A</span></span><br><span class="line">002   2     02    <span class="selector-tag">STX</span> (<span class="selector-tag">start</span> <span class="selector-tag">of</span> <span class="selector-tag">text</span>)         102   66    42    <span class="selector-tag">B</span></span><br><span class="line">003   3     03    <span class="selector-tag">ETX</span> (<span class="selector-tag">end</span> <span class="selector-tag">of</span> <span class="selector-tag">text</span>)           103   67    43    <span class="selector-tag">C</span></span><br><span class="line">004   4     04    <span class="selector-tag">EOT</span> (<span class="selector-tag">end</span> <span class="selector-tag">of</span> <span class="selector-tag">transmission</span>)   104   68    44    <span class="selector-tag">D</span></span><br><span class="line">005   5     05    <span class="selector-tag">ENQ</span> (<span class="selector-tag">enquiry</span>)               105   69    45    <span class="selector-tag">E</span></span><br></pre></td></tr></table></figure><p>可以看到“D”的Hex（十六进制）是44，拆分换算0100=4，0100=4，合并就是等于44。当然你也可以使用十进制来换算，如上述01000100，换算成十进制就等于64+4=68，刚好对应着”D”的字符</p><p>再看看设置k1在bit索引第9位设置成1，9是第二个字节，也就是byte索引1，加起来就是“D@”</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SETBIT</span> <span class="selector-tag">k1</span> 9 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">D</span>@&quot;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315220417905.png"></p><p><strong>GETBIT：返回key存储字符串值中偏移量的位值</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 1 1     //<span class="selector-tag">bit</span>索引的1，置为1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0 </span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 8 1     //<span class="selector-tag">bit</span>索引的8，置为1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 1       </span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 8</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 5      //因为没有设置，所以返回0</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>还可以通过set设置值，然后通过getbit查找它在bit索引的位置，比如设置一个A。那么通过ascii，它所置为1的bit索引就是1和7（上述的setbit例子可以设置和查看）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">A</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 7</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">getbit</span> <span class="selector-tag">k1</span> 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p><strong>BITPOS：通过字节索引查找第一个bit</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">BITPOS</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">BITPOS</span> <span class="selector-tag">key</span> <span class="selector-tag">bit</span> <span class="selector-attr">[start]</span> <span class="selector-attr">[end]</span>（<span class="selector-tag">start</span> <span class="selector-tag">end</span>字节索引）</span><br><span class="line">  <span class="selector-tag">summary</span>: <span class="selector-tag">Find</span> <span class="selector-tag">first</span> <span class="selector-tag">bit</span> <span class="selector-tag">set</span> <span class="selector-tag">or</span> <span class="selector-tag">clear</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">string</span></span><br><span class="line">           查找第一<span class="selector-tag">bit</span>设置或清除字符串</span><br><span class="line">  <span class="selector-tag">since</span>: 2.8.7</span><br><span class="line">  <span class="selector-tag">group</span>: <span class="selector-tag">string</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 1 1</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 9 1</span><br><span class="line"></span><br><span class="line">&gt; BITPOS k1 1 0 0       //查找bit=1，byte索引0到0</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; BITPOS k1 1 1 1       //查找bit=1，byte索引1到1</span><br><span class="line">(<span class="selector-tag">integer</span>) 9</span><br><span class="line">&gt; BITPOS k1 1 0 1       //查找bit=1，byte索引0到1，谁先查找到，则显示该1的bit索引</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315222757007.png"></p><p>设置k2和k3值，k2分别在8和16位的bit索引置为1，k3在0和7位置为1</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k2</span> 8 1 </span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k2</span> 16 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k3</span> 0 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k3</span> 7 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; BITPOS k2 1 0 1    //查找字节索引0和1，bit=1的第一个bit</span><br><span class="line">(<span class="selector-tag">integer</span>) 8</span><br><span class="line">&gt; <span class="selector-tag">BITPOS</span> <span class="selector-tag">k2</span> 1 1 2    </span><br><span class="line">(<span class="selector-tag">integer</span>) 8</span><br><span class="line">&gt; BITPOS k2 1 2 2    //查看字节索引2到2，bit=1的第一个bit</span><br><span class="line">(<span class="selector-tag">integer</span>) 16</span><br><span class="line"></span><br><span class="line">&gt; BITPOS k3 1 0 0    //查看字节索引0和0，bit=1的第一个bit</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">BITPOS</span> <span class="selector-tag">k3</span> 1 0 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">BITPOS</span> <span class="selector-tag">k3</span> 1 1 1   //<span class="selector-tag">-1</span>是反向表示，7是<span class="selector-tag">bit</span>索引的最后一个，所以使用了<span class="selector-tag">-1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-1</span></span><br></pre></td></tr></table></figure><p><strong>BITCOUNT：统计在字节索引中出现的bit数</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">BITCOUNT</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">key</span> <span class="selector-attr">[start end]</span></span><br><span class="line">  <span class="selector-tag">summary</span>: <span class="selector-tag">Count</span> <span class="selector-tag">set</span> <span class="selector-tag">bits</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">string</span></span><br><span class="line">           统计字节索引存在的<span class="selector-tag">bit</span>位</span><br><span class="line">  <span class="selector-tag">since</span>: 2.6.0</span><br><span class="line">  <span class="selector-tag">group</span>: <span class="selector-tag">string</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">k2</span> 0 2      //<span class="selector-tag">k2</span>在8和16 <span class="selector-tag">bit</span>索引分别设置了1，所以有两个</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">k3</span> 0 0     //<span class="selector-tag">k3</span>在0和7 <span class="selector-tag">bit</span>索引分别设置了1，所以也有两个</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br></pre></td></tr></table></figure><p><strong>bitop：与运算 两者的之间byte索引存在的bit位</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="selector-tag">BITOP</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">BITOP</span> <span class="selector-tag">operation</span> <span class="selector-tag">destkey</span> <span class="selector-tag">key</span> <span class="selector-attr">[key ...]</span></span><br><span class="line">  <span class="selector-tag">summary</span>: <span class="selector-tag">Perform</span> <span class="selector-tag">bitwise</span> <span class="selector-tag">operations</span> <span class="selector-tag">between</span> <span class="selector-tag">strings</span></span><br><span class="line">           在字符索引之间执行按位的 与运算</span><br><span class="line">  <span class="selector-tag">since</span>: 2.6.0</span><br><span class="line">  <span class="selector-tag">group</span>: <span class="selector-tag">string</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 1 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k1</span> 7 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">A</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k2</span> 1 1       </span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">k2</span> 6 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k2</span></span><br><span class="line">&quot;<span class="selector-tag">B</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">BITOP</span> <span class="selector-tag">and</span> <span class="selector-tag">andkey</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span>    //<span class="selector-tag">k1</span>和<span class="selector-tag">k2</span>都将<span class="selector-tag">bit</span>索引1置为1，所以相同的就是“@”</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">&gt; get andkey</span><br><span class="line"><span class="string">&quot;@&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; BITOP <span class="keyword">or</span> orkey k1 k2     //k1和k2的异或运算，k1得出A=<span class="number">41</span>，k2得出B=<span class="number">42</span>，异或之后得出<span class="number">43</span>=C。可通过ascii查看对应的值</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">&gt; get orkey</span><br><span class="line"><span class="string">&quot;C&quot;</span></span><br></pre></td></tr></table></figure><p><strong>bitfield：对字符串执行任意bitfield（位域）整数运算</strong></p><p>setbit和getbit指定位的值都是单个位的，如果要操作多个，就必须使用管道处理。在redis的3.2版本之后新增了一个强大的指令，就是bitfield。它可执行多个操作，这样就不需要通过管道来处理</p><p>bitfield有三个指令：分别是get、set、incrby，它们都可以对指定位片段进行读写，但是最多只能处理64个连续的位。如果超过64位，就得使用子指令，bitfield可以一次执行多个指令</p><p>如下图，可以看到每个字符的对应的二进制位，以及分低位和高位。箭头指向的数字，代表bit索引，框框中代表的就是二进制位</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210420105118132.png"></p><p>通过查看man ascii表，可以找到对应字符的八进制、十进制以及十六，你可以选择任意一种推算出二进制，如图</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man ascii</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210420105449838.png"></p><p>创建一个key，分别通过bitfield进行查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">get</span> <span class="selector-tag">u4</span> 0   // <span class="selector-tag">u4</span>表示(<span class="selector-tag">u</span>)无符号的取值，从第一个位开始取 4 个位</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 6 </span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">get</span> <span class="selector-tag">u3</span> 2   // <span class="selector-tag">u3</span>表示(<span class="selector-tag">u</span>)无符号的取值，从第三个位开始取 3 个位</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">get</span> <span class="selector-tag">i4</span> 0   // <span class="selector-tag">i4</span>表示(<span class="selector-tag">i</span>)有符号的取值，从第一个位开始取 4 个位</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 6</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">get</span> <span class="selector-tag">i3</span> 2   // <span class="selector-tag">i3</span>表示(<span class="selector-tag">i</span>)有符号的取值，从第三个位开始取 3 个位</span><br><span class="line">1) (<span class="selector-tag">integer</span>) <span class="selector-tag">-3</span></span><br></pre></td></tr></table></figure><p>所谓有符号数是指获取的位数组中第一个位是符号位，剩下的才是值。如果第一位是1，那就是负数（也就是用负数来表示）。无符号数表示非负数，没有符号位，获取的位数全部都是值（也就是用正数来表示）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210420165536085.png"></p><p>有符号最多可以获取64位，无符号只能获取63位（因为Redis协议中的integer是有符号数，最大64位，不能传递64位无符号值）。如果超出位数限制，redis就会告诉参数错误</p><p>bitfield执行多个自指令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">get</span> <span class="selector-tag">u4</span> 0 <span class="selector-tag">get</span> <span class="selector-tag">u3</span> 2 <span class="selector-tag">get</span> <span class="selector-tag">i4</span> 0 <span class="selector-tag">get</span> <span class="selector-tag">i3</span> 2</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 6</span><br><span class="line">2) (<span class="selector-tag">integer</span>) 5</span><br><span class="line">3) (<span class="selector-tag">integer</span>) 6</span><br><span class="line">4) (<span class="selector-tag">integer</span>) <span class="selector-tag">-3</span></span><br></pre></td></tr></table></figure><p>使用set子指令将第二个字符e改成a，a在ASCII码是97（十进制的）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">set</span> <span class="selector-tag">u8</span> 8 97   //从第9个位开始，将接下来的8个位用无符号97替换</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 101</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hallo</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">set</span> <span class="selector-tag">u8</span> 16 109  //从第17个位开始，将接下来的8个位用无符号108替换，108等于<span class="selector-tag">m</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 108</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hamlo</span>&quot;</span><br></pre></td></tr></table></figure><p>第三个指令incrby，它用来指定范围的位的进行自增操作。提供自增就有可能会出现溢出。如果增加了正数，会出现上溢出，如果增加的是负数，会出现下溢出</p><p>Redis默认的处理是折返。如果出现了溢出，就将溢出的符号位丢掉。如果8位无符号数255，加1后就会溢出，会全部变零。如果是8位有符号数127，加1后就会溢出变成-128</p><p>接下来我们用incrby实践一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1    //从第三个位开始，对接下来的4位无符号数+1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 11</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 12</span><br><span class="line">....一直加到15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1   //溢出折返，加到16就会溢出，因为<span class="selector-tag">e</span>的范围是8<span class="selector-tag">-15</span></span><br><span class="line">1) (<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><p>bitfiled指令提供了溢出策略子指令overflow，用户可以选择溢出行为，默认是折返（wrap），也可以选择失败（fail，报错不执行），以及饱和截断（sat，超过了范围就停留在最大或最小值）。overflow指令只影响接下来的第一条指令，这条指令执行完后溢出策略会变成默认值折返（wrap)</p><p><strong>饱和截断（sat）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span> </span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">overflow</span> <span class="selector-tag">sat</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 11</span><br><span class="line">....一直加到15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">overflow</span> <span class="selector-tag">sat</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k1</span> <span class="selector-tag">overflow</span> <span class="selector-tag">sat</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1       //保持最大值</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 15 </span><br></pre></td></tr></table></figure><p><strong>失败不执行（fail）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">hello</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k2</span> <span class="selector-tag">overflow</span> <span class="selector-tag">fail</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 11</span><br><span class="line">....一直加到15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k2</span> <span class="selector-tag">overflow</span> <span class="selector-tag">fail</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1</span><br><span class="line">1) (<span class="selector-tag">integer</span>) 15</span><br><span class="line">&gt; <span class="selector-tag">bitfield</span> <span class="selector-tag">k2</span> <span class="selector-tag">overflow</span> <span class="selector-tag">fail</span> <span class="selector-tag">incrby</span> <span class="selector-tag">u4</span> 2 1    //不在执行</span><br><span class="line">1) (<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h5 id="bitmap-例子用法"><a href="#bitmap-例子用法" class="headerlink" title="bitmap-例子用法"></a>bitmap-例子用法</h5><ul><li><p>用户系统，统计用户登录天数，且窗口随机</p><p>1）可以使用关系型数据库（mysql），但登录时最少要三个字段（id,name,date），假设一个字段4个字节，那么就要耗费12个字节，一个用户需要12字节（1000个用户 x 12 x 365天 = 4380000字节 约=4G）</p><p>2）使用redis，一年365天，一个天计一个二进制位，使用400个二进制位（400 / 8 = 50字节），1000个用户（1000 x 50 = 50000 = 50KB）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">wuwei</span> 1 1       //按<span class="selector-tag">bit</span>索引来看，1<span class="selector-tag">bit</span>索引是第二天，<span class="selector-tag">wuwei</span>在第二天登录了</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">wuwei</span> 2 1       //第三天<span class="selector-tag">wuwei</span>登录了</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> <span class="selector-tag">wuwei</span> 364 1     //第三百六十五天也登录了</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; STRLEN wuwei           //长度365 / 8 == 46</span><br><span class="line">(<span class="selector-tag">integer</span>) 46</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">wuwei</span> 0 10    //统计<span class="selector-tag">wuwei</span>用户第一天(0)到第十一(10) 共登录了多少次</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">wuwei</span> <span class="selector-tag">-2</span> <span class="selector-tag">-1</span>   //统计<span class="selector-tag">wuwei</span>用户第三百六十四天到三百六十五天 共登录了几次</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">wuwei</span> 0 <span class="selector-tag">-1</span>    //统计<span class="selector-tag">wuwei</span>用户第一天到第三百六十五天 共登录了几次</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure></li><li><p>某电商，做双11活动，送小礼品，假设该电商用户有1亿人，则需要备货多少礼物，当然需要挑选出僵尸用户、冷/热用户和忠诚用户</p><p>活跃用户统计，随机窗口，比如说1号-3号访问了电商，连续登陆的需要去重</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210316112053470.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">setbit</span> 202103016 1 1    //2021年3月16号 1用户登陆一次，<span class="selector-tag">bit</span>索引代表用户</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> 202103016 2 1    //2021年3月16号 2用户登陆二次</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> 202103016 10 1   //2021年3月16号 10用户登陆三次</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> 202103017 1 1    //2021年3月17号 1用户登陆一次</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">setbit</span> 202103017 2 1    //2021年3月17号 2用户登陆两次</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> 202103016 0 <span class="selector-tag">-1</span>  //2021年3月16号统计有多少个用户登录</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> 202103017 0 <span class="selector-tag">-1</span>  //2021年3月17号统计有多少个用户登录</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line"></span><br><span class="line">//去重</span><br><span class="line">&gt; <span class="selector-tag">BITOP</span> <span class="selector-tag">or</span> <span class="selector-tag">datekey</span> 202103016 202103017  </span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">BITCOUNT</span> <span class="selector-tag">datekey</span> 0 <span class="selector-tag">-1</span>  //统计有三个不同用户登陆在这两天登录了</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure><h4 id="小结string命令"><a href="#小结string命令" class="headerlink" title="小结string命令"></a>小结string命令</h4></li></ul><h5 id="string类型-1"><a href="#string类型-1" class="headerlink" title="string类型"></a>string类型</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SET [NX|XX]</td><td>设置键值 NX(没有则创建)，XX(有值则更新)</td></tr><tr><td>GET</td><td>查询键值</td></tr><tr><td>APPEND</td><td>追加值到key中</td></tr><tr><td>GETRABGE</td><td>取值（范围值）</td></tr><tr><td>SETRANGE</td><td>设置（覆盖）选中的范围值</td></tr><tr><td>STRLEN</td><td>获取值的长度</td></tr><tr><td>MSET</td><td>批量设置键值</td></tr><tr><td>MGET</td><td>批量查看键值</td></tr><tr><td>MESTNX</td><td>批量设置键值（但有原子性，已创建或错误不能成功设置）</td></tr><tr><td>SETEX</td><td>设置过期时间，等同于set+expire</td></tr><tr><td>SETNX</td><td>设置过期时间，如果key不存在就执行set创建</td></tr><tr><td>GETSET</td><td>将一个旧值刷新为新值</td></tr></tbody></table><h5 id="int类型-1"><a href="#int类型-1" class="headerlink" title="int类型"></a>int类型</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>INCR</td><td>对key的值进行+1</td></tr><tr><td>INCRBY</td><td>对key的值自由加</td></tr><tr><td>DECR</td><td>对key的值进行-1</td></tr><tr><td>DECRBY</td><td>对key的值自由减</td></tr><tr><td>INCRBYFLOAT</td><td>对key的值+小数</td></tr></tbody></table><h5 id="bitmap（位图）-1"><a href="#bitmap（位图）-1" class="headerlink" title="bitmap（位图）"></a>bitmap（位图）</h5><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SETBIT</td><td>设置或清除存储在key字符串值的二进制位</td></tr><tr><td>BITPOS</td><td>查找在字节索引的第一bit位</td></tr><tr><td>BITCOUNT</td><td>统计在字节索引存在的bit位</td></tr><tr><td>BITOP</td><td>与运算两者的之间字符索引存在的bit位</td></tr></tbody></table><h3 id="list（列表）"><a href="#list（列表）" class="headerlink" title="list（列表）"></a>list（列表）</h3><p>Redis的列表插入和删除操作是非常快的，因为它是属于链表，列表中的每个元素都是用双向指针顺序，串联起来可以同时支持前后向的遍历</p><p>Redis的列表结构常用来做异步队列使用，将需要延后处理的任务结构体序列化成字符串，塞进Redis的列表，另一个线程从这个列表中轮询数据进行处理</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320211922874.png"></p><p><strong>list下的分类</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320223455871.png"></p><h4 id="list-队列"><a href="#list-队列" class="headerlink" title="list-队列"></a>list-队列</h4><p>队列是先进先出的数据结构，常用于消息排队和异步逻辑处理，它会确保元素的访问顺序性（反向命令）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@list</span></span><br><span class="line"></span><br><span class="line">  RPUSH key element [element ...]</span><br><span class="line">  <span class="attribute">summary:</span> Append one <span class="keyword">or</span> multiple elements to a list</span><br><span class="line">           将一个或多个元素附加到list</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">group:</span> list</span><br><span class="line">    </span><br><span class="line">  LPUSH key element [element ...]</span><br><span class="line">  <span class="attribute">summary:</span> Prepend one <span class="keyword">or</span> multiple elements to a list</span><br><span class="line">          添加一个或多个元素到list</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">  LPOP key</span><br><span class="line">  <span class="attribute">summary:</span> Remove <span class="keyword">and</span> get the first element in a list</span><br><span class="line">           删除并获取list第一个元素</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.0</span>.<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">  RPOP key</span><br><span class="line">  <span class="attribute">summary:</span> Remove <span class="keyword">and</span> get the last element in a list</span><br><span class="line">           删除并获取list最后一个元素</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">A</span> <span class="selector-tag">B</span> <span class="selector-tag">C</span>   //添加三个元素</span><br><span class="line">&gt; <span class="selector-tag">lpop</span> <span class="selector-tag">list1</span>          //移除右边1个元素</span><br><span class="line">&quot;<span class="selector-tag">A</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">lpop</span> <span class="selector-tag">list1</span></span><br><span class="line">&quot;<span class="selector-tag">B</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">lpop</span> <span class="selector-tag">list1</span></span><br><span class="line">&quot;<span class="selector-tag">C</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="list-栈"><a href="#list-栈" class="headerlink" title="list-栈"></a>list-栈</h4><p>栈是先进后出的数据结构，跟队列正好相反（同向命令）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">A</span> <span class="selector-tag">B</span> <span class="selector-tag">C</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">rpop</span> <span class="selector-tag">list1</span>         //移除右边1个元素</span><br><span class="line">&quot;<span class="selector-tag">C</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">rpop</span> <span class="selector-tag">list1</span></span><br><span class="line">&quot;<span class="selector-tag">B</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">rpop</span> <span class="selector-tag">list1</span></span><br><span class="line">&quot;<span class="selector-tag">A</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="list-数组"><a href="#list-数组" class="headerlink" title="list-数组"></a>list-数组</h4><p><strong>LINDEX命令</strong></p><ul><li>lindex需要对链表进行遍历，性能随着参数index增大而变差</li></ul><ul><li>index可以为负数，index=-1表示倒数第一个元素，同理index=-2表示倒数第二个元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LINDEX</span> <span class="selector-tag">key</span> <span class="selector-tag">index</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Get</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">from</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span> <span class="selector-tag">by</span> <span class="selector-tag">its</span> <span class="selector-tag">index</span></span><br><span class="line">         通过索引你从列表中获取元素</span><br><span class="line"><span class="selector-tag">since</span>: 1.0.0</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">LRANGE</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">stop</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Get</span> <span class="selector-tag">a</span> <span class="selector-tag">range</span> <span class="selector-tag">of</span> <span class="selector-tag">elements</span> <span class="selector-tag">from</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span></span><br><span class="line">         从列表中获取一系列元素</span><br><span class="line"><span class="selector-tag">since</span>: 1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span> <span class="selector-tag">e</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">lindex</span> <span class="selector-tag">list1</span> 1           //查看1索引对应的元素</span><br><span class="line">&quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">d</span>&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">e</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>LTRIM命令</strong></p><ul><li>ltrim的两个参数start_index和end_index定义了一个区间，在这个区间内的值，ltrim要保留，区间之外的则统统删掉</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LTRIM</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">stop</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Trim</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">specified</span> <span class="selector-tag">range</span></span><br><span class="line">         将<span class="selector-tag">list</span>修剪到指定范围</span><br><span class="line"><span class="selector-tag">since</span>: 1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span> <span class="selector-tag">e</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">ltrim</span> <span class="selector-tag">list1</span> 1 <span class="selector-tag">-1</span>         //不移除范围1到<span class="selector-tag">-1</span>的，所以移除0索引对应的元素</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span>          </span><br><span class="line">1) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">d</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">e</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">ltrim</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span>         //什么都删不了，因为0到<span class="selector-tag">-1</span>包括了所有元素，所以都保留</span><br><span class="line">&gt; <span class="selector-tag">ltrim</span> <span class="selector-tag">list1</span> 1 1          //不移除1索引对应的元素</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span>       </span><br><span class="line">1) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">ltrim</span> <span class="selector-tag">list1</span> 1 0         //清空整个列表，因为区间范围长度为负，可以为负，所以会清空</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br></pre></td></tr></table></figure><p><strong>LINSERT命令</strong></p><p>linsert插入元素，如果有相同得到元素，会先从前面插入，而后面的元素则不会插入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LINSERT key BEFORE|AFTER pivot element</span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Insert</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">before</span> <span class="selector-tag">or</span> <span class="selector-tag">after</span> <span class="selector-tag">another</span> <span class="selector-tag">element</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span></span><br><span class="line">         在<span class="selector-tag">list</span>中的另一个元素之前或之后插入一个元素</span><br><span class="line"><span class="selector-tag">since</span>: 2.2.0</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">linsert</span> <span class="selector-tag">list1</span> <span class="selector-tag">after</span> <span class="selector-tag">c</span> <span class="selector-tag">a</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">linsert</span> <span class="selector-tag">list1</span> <span class="selector-tag">before</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">LPUSH</span> <span class="selector-tag">k2</span> 1 <span class="selector-tag">a</span> 1 <span class="selector-tag">b</span> 1 <span class="selector-tag">c</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 6</span><br><span class="line">&gt; <span class="selector-tag">LINSERT</span> <span class="selector-tag">k2</span> <span class="selector-tag">after</span> 1 <span class="selector-tag">d</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 7</span><br><span class="line">&gt; <span class="selector-tag">LRANGE</span> <span class="selector-tag">k2</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">d</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">6) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">7) &quot;1&quot;</span><br></pre></td></tr></table></figure><h4 id="list-阻塞使用"><a href="#list-阻塞使用" class="headerlink" title="list-阻塞使用"></a>list-阻塞使用</h4><p><strong>BRPOP、LRPOP命令</strong></p><p>brpop、lrpop阻塞弹出元素，无论这个key否存在，而且是单播队列（FIFO先进先出，也就是当一个key可以在（窗口）插入值之后，就会解除阻塞，不然就要等待超时时间）</p><ul><li>BRPOP 删除并获取列表中的第一个元素，或者阻塞值直到一个可用</li><li>LRPOP同上，只是方向不同</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@list</span></span><br><span class="line">  BLPOP key [key ...] timeout</span><br><span class="line">  <span class="attribute">summary:</span> Remove <span class="keyword">and</span> get the first element in a list, <span class="keyword">or</span> block until one is available</span><br><span class="line">           删除并获取列表中的第一个元素，或者阻塞值直到一个可用</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">group:</span> list</span><br><span class="line"></span><br><span class="line">  BRPOP key [key ...] timeout</span><br><span class="line">  <span class="attribute">summary:</span> Remove <span class="keyword">and</span> get the last element in a list, <span class="keyword">or</span> block until one is available</span><br><span class="line">           同上，只是方向不同</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">  <span class="attribute">group:</span> list</span><br></pre></td></tr></table></figure><p>开启三个窗口，可以多个key，0代表就是一直阻塞</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">blpop</span> <span class="selector-tag">list1</span> 0    </span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line">&gt; <span class="selector-tag">blpop</span> <span class="selector-tag">list1</span> 0</span><br><span class="line"></span><br><span class="line">//窗口3</span><br><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">hello</span>  </span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>查看窗口1的反应，会发现已经插入一个值，而窗口2是没有变化的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">blpop</span> <span class="selector-tag">list1</span> 0</span><br><span class="line">1) &quot;<span class="selector-tag">list1</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">hello</span>&quot;</span><br><span class="line">(73.88<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><p>窗口3在插入值，在查看窗口2变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//窗口3</span><br><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">world</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line"> <span class="selector-tag">blpop</span> <span class="selector-tag">list1</span> 0</span><br><span class="line">1) &quot;<span class="selector-tag">list1</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">world</span>&quot;</span><br><span class="line">(44.92<span class="selector-tag">s</span>)</span><br></pre></td></tr></table></figure><p>可以看出，阻塞是单播队列的，需要等上一个解除之后，才能解除下一个</p><p><strong>BRPOPLPUSH命令</strong></p><ul><li>BRPOPLPUSH 从list弹出一个元素，将其推送到另一个list并返回，或封住直到一个可用</li></ul><p>创建list1和list2，list1一个元素，list2三个元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">BRPOPLPUSH</span> <span class="selector-tag">source</span> <span class="selector-tag">destination</span> <span class="selector-tag">timeout</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Pop</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">from</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span>, <span class="selector-tag">push</span> <span class="selector-tag">it</span> <span class="selector-tag">to</span> <span class="selector-tag">another</span> <span class="selector-tag">list</span> <span class="selector-tag">and</span> <span class="selector-tag">return</span> <span class="selector-tag">it</span>; <span class="selector-tag">or</span> <span class="selector-tag">block</span> <span class="selector-tag">until</span> <span class="selector-tag">one</span> <span class="selector-tag">is</span> <span class="selector-tag">available</span></span><br><span class="line">        从<span class="selector-tag">list</span>弹出一个元素，将其推送到另一个<span class="selector-tag">list</span>并返回，或封住知道一个可用</span><br><span class="line"><span class="selector-tag">since</span>: 2.2.0</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; </span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list2</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure><p>打开两个窗口，使用BRPOPLPUSH进行追加，时间设定200秒</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">brpoplpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">list2</span> 200</span><br><span class="line">&quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list2</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">d</span>&quot;</span><br></pre></td></tr></table></figure><p>此时list1是没有数据，如果在追加就会起锁，如果在200秒以内插入了数据就会解锁，否则需要等200后解锁</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//窗口1</span><br><span class="line">&gt; <span class="selector-tag">brpoplpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">list2</span> 200</span><br><span class="line"></span><br><span class="line">//窗口2</span><br><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">z</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line"></span><br><span class="line">//窗口1查看</span><br><span class="line">&quot;<span class="selector-tag">z</span>&quot;</span><br><span class="line">(20.59<span class="selector-tag">s</span>)</span><br><span class="line">&gt; <span class="selector-tag">llen</span> <span class="selector-tag">list2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list2</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">z</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">b</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">d</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="list-其他命令使用"><a href="#list-其他命令使用" class="headerlink" title="list-其他命令使用"></a>list-其他命令使用</h4><p><strong>RPOPLPUSH、LLEN命令</strong></p><ul><li>RPOPLPUSH删除list最后一个元素，将添加到另一个list并返回</li><li>LLEN查看list的长度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@list</span></span><br><span class="line"></span><br><span class="line">  RPOPLPUSH source destination</span><br><span class="line">  <span class="attribute">summary:</span> Remove the last element in a list, prepend it to another list <span class="keyword">and</span> return it</span><br><span class="line">           删除list最后一个元素，将添加到另一个list并返回</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.2</span>.<span class="number">0</span></span><br><span class="line">    </span><br><span class="line">  LLEN key</span><br><span class="line">  <span class="attribute">summary:</span> Get the length of a list</span><br><span class="line">           查看list的长度</span><br><span class="line">  <span class="attribute">since:</span> <span class="number">1.0</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>创建list1、list2，都添加3个元素，list1移除前两个元素，并将最后一个元素添加到list2，然后查看长度和元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">A</span> <span class="selector-tag">B</span> <span class="selector-tag">C</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list2</span> <span class="selector-tag">D</span> <span class="selector-tag">E</span> <span class="selector-tag">F</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">lpop</span> <span class="selector-tag">list1</span> </span><br><span class="line">&quot;<span class="selector-tag">A</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">lpop</span> <span class="selector-tag">list1</span> </span><br><span class="line">&quot;<span class="selector-tag">B</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">rpoplpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">list2</span>     //将<span class="selector-tag">list1</span>的元素添加到<span class="selector-tag">list2</span></span><br><span class="line">&quot;<span class="selector-tag">C</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list2</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">C</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">D</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">E</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">F</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">llen</span> <span class="selector-tag">list1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">llen</span> <span class="selector-tag">list2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br></pre></td></tr></table></figure><p><strong>RPUSHX、LPUSHX命令</strong></p><ul><li>RPUSHX 如果list表存在，则附加元素到list</li><li>LPUSHX 如果list表存在，则添加元素到list</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">RPUSHX</span> <span class="selector-tag">key</span> <span class="selector-tag">element</span> <span class="selector-attr">[element ...]</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Append</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">to</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span>, <span class="selector-tag">only</span> <span class="selector-tag">if</span> <span class="selector-tag">the</span> <span class="selector-tag">list</span> <span class="selector-tag">exists</span></span><br><span class="line">         如果<span class="selector-tag">list</span>表存在，则附加元素到<span class="selector-tag">list</span></span><br><span class="line"><span class="selector-tag">since</span>: 2.2.0</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">LPUSHX</span> <span class="selector-tag">key</span> <span class="selector-tag">element</span> <span class="selector-attr">[element ...]</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Prepend</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">to</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span>, <span class="selector-tag">only</span> <span class="selector-tag">if</span> <span class="selector-tag">the</span> <span class="selector-tag">list</span> <span class="selector-tag">exists</span></span><br><span class="line"><span class="selector-tag">since</span>: 2.2.0</span><br><span class="line"><span class="selector-tag">group</span>: <span class="selector-tag">list</span></span><br></pre></td></tr></table></figure><p><strong>LSET命令</strong></p><ul><li>通过其设置list中元素的值  </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LSET</span> <span class="selector-tag">key</span> <span class="selector-tag">index</span> <span class="selector-tag">element</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Set</span> <span class="selector-tag">the</span> <span class="selector-tag">value</span> <span class="selector-tag">of</span> <span class="selector-tag">an</span> <span class="selector-tag">element</span> <span class="selector-tag">in</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span> <span class="selector-tag">by</span> <span class="selector-tag">its</span> <span class="selector-tag">index</span></span><br><span class="line">         通过其索引设置<span class="selector-tag">list</span>中元素的值  </span><br><span class="line"><span class="selector-tag">since</span>: 1.0.0</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">RPUSH</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">lset</span> <span class="selector-tag">list1</span> 1 <span class="selector-tag">c</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">c</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>LERM命令</strong></p><ul><li>从list中移除元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LREM</span> <span class="selector-tag">key</span> <span class="selector-tag">count</span> <span class="selector-tag">element</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Remove</span> <span class="selector-tag">elements</span> <span class="selector-tag">from</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span></span><br><span class="line">         从<span class="selector-tag">list</span>中移除元素</span><br><span class="line"><span class="selector-tag">since</span>: 1.0.0</span><br></pre></td></tr></table></figure><p>lrem可以移除一个或多个的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">d</span> <span class="selector-tag">d</span> <span class="selector-tag">b</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 7</span><br><span class="line">&gt; <span class="selector-tag">lrem</span> <span class="selector-tag">list1</span> 2 <span class="selector-tag">d</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">lrem</span> <span class="selector-tag">list1</span> 1 <span class="selector-tag">b</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line"> <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span></span><br><span class="line">&gt; <span class="selector-tag">lrange</span> <span class="selector-tag">list1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">a</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">c</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">b</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>LPOS命令</strong></p><ul><li>返回list中匹配元素的索引</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">LPOS</span> <span class="selector-tag">key</span> <span class="selector-tag">element</span> <span class="selector-attr">[RANK rank]</span> <span class="selector-attr">[COUNT num-matches]</span> <span class="selector-attr">[MAXLEN len]</span></span><br><span class="line"><span class="selector-tag">summary</span>: <span class="selector-tag">Return</span> <span class="selector-tag">the</span> <span class="selector-tag">index</span> <span class="selector-tag">of</span> <span class="selector-tag">matching</span> <span class="selector-tag">elements</span> <span class="selector-tag">on</span> <span class="selector-tag">a</span> <span class="selector-tag">list</span></span><br><span class="line">        返回<span class="selector-tag">list</span>中匹配元素的索引 </span><br><span class="line"><span class="selector-tag">since</span>: 6.0.6</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rpush</span> <span class="selector-tag">list1</span> 1 <span class="selector-tag">a</span> 2 <span class="selector-tag">b</span> 3 <span class="selector-tag">c</span> 4 <span class="selector-tag">d</span></span><br><span class="line">&gt; <span class="selector-tag">lpos</span> <span class="selector-tag">list1</span> <span class="selector-tag">a</span>    //<span class="selector-tag">a</span>的索引位置</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">lpos</span> <span class="selector-tag">list1</span> <span class="selector-tag">c</span>    //<span class="selector-tag">c</span>的索引位置</span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">lpos</span> <span class="selector-tag">list1</span> <span class="selector-tag">d</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 7</span><br></pre></td></tr></table></figure><h4 id="小结list命令"><a href="#小结list命令" class="headerlink" title="小结list命令"></a>小结list命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>RPUSH</td><td>将一个或多个元素附加到list</td></tr><tr><td>LPUSH</td><td>添加一个或多个元素到list</td></tr><tr><td>LPOP</td><td>删除并获取list第一个元素</td></tr><tr><td>RPOP</td><td>删除并获取list最后一个元素</td></tr><tr><td>RPOPLPUSH</td><td>删除list最后一个元素，将添加到另一个list并返回</td></tr><tr><td>LRANGE</td><td>从列表中获取一系列元素</td></tr><tr><td>LLEN</td><td>查看list的长度</td></tr><tr><td>RPUSHX</td><td>如果list表存在，则附加元素到list</td></tr><tr><td>LPUSHX</td><td>跟RPUSHX操作相同，方向不同</td></tr><tr><td>BRPOP</td><td>删除并获取列表中的第一个元素，或者阻塞值直到一个可用</td></tr><tr><td>LRPOP</td><td>跟BRPOP操作相同，方向不同</td></tr><tr><td>BRPOPLPUSH</td><td>从list弹出一个元素，将其推送到另一个list并返回，或封住知道一个可用</td></tr><tr><td>LSET</td><td>通过其设置list中元素的值</td></tr><tr><td>LERM</td><td>从list中移除元素</td></tr><tr><td>LPOS</td><td>返回list中匹配元素的索引</td></tr><tr><td>lindex</td><td>通过索引从列表中获取元素</td></tr><tr><td>ltrim</td><td>将list修建到指定范围</td></tr><tr><td>linsert</td><td>在list中的另一个元素之前或之后插入一个元素</td></tr></tbody></table><h3 id="hash（哈希）"><a href="#hash（哈希）" class="headerlink" title="hash（哈希）"></a>hash（哈希）</h3><p>hash是无序字典，内部存储了很多键值对，第一维hash的数组位置碰撞时，就会将碰撞的元素使用链表串联起来</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320214712427.png"></p><p>Redis的字典值只能是字符串，hash结构也可以用来存储用户信息，与字符串需要一次性全部序列化整个对象不同，hash可以对用户结构中的每个字段单独存储。这样当需要获取用户信息时可以进行部分获取。而以整个字符串的形式去保存用户信息的话，就只能一次性全部读取，这样就会浪费网络流量</p><p>hash缺点：hash结构存储消耗要高于单个字符串，所以到底该使用hash还是字符串，需要根据实际情况使用</p><h4 id="hash-命令使用"><a href="#hash-命令使用" class="headerlink" title="hash-命令使用"></a>hash-命令使用</h4><p>hash很多方法同字符串一样，只有前面加了h，hash结构中的单个子key也可以进行计数，它对应的指令是hincrby，和incr的使用方法基本一样，也有hincrybyfloat，所以只列出命令的使用</p><p><strong>HSET、HMSET，HGET，HMGET、HGETALL、HVALS、HINCRBY、HINCRBYFLOAT命令</strong></p><ul><li>HSET和HMSET 设置单个域或多个</li><li>HGET和HMGET 查看单个或多个</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span> <span class="selector-tag">username</span> <span class="selector-tag">liu</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">hget</span> <span class="selector-tag">user</span> <span class="selector-tag">username</span></span><br><span class="line">&quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">HMSET</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1000</span> <span class="selector-tag">username</span> <span class="selector-tag">zhang</span> <span class="selector-tag">age</span> 27 <span class="selector-tag">job</span> <span class="selector-tag">it</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">HGET</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1000</span> <span class="selector-tag">username</span></span><br><span class="line">&quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">HMGET</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1000</span> <span class="selector-tag">username</span> <span class="selector-tag">age</span> <span class="selector-tag">job</span> </span><br><span class="line">1) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">2) &quot;27&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">it</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>HGETALL 获取hash中的域和值，间隔出现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">HGETALL</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1000</span>   </span><br><span class="line">1) &quot;<span class="selector-tag">username</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">zhang</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">age</span>&quot;</span><br><span class="line">4) &quot;27&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">job</span>&quot;</span><br><span class="line">6) &quot;<span class="selector-tag">it</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>HVALS查看key下的所有值</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hvals</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1000</span></span><br><span class="line">1) &quot;<span class="selector-tag">zhange</span>&quot;</span><br><span class="line">2) &quot;28&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">IT</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>HINCRBY 将hash域的整数值增加给定数字</li><li>HINCRBYFLOAT 将hash域的整数值增加给定浮点数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user-liu</span> <span class="selector-tag">age</span> 20</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">hincrby</span> <span class="selector-tag">user-liu</span> <span class="selector-tag">age</span> 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 21</span><br><span class="line">&gt; <span class="selector-tag">hget</span> <span class="selector-tag">user-liu</span> <span class="selector-tag">age</span></span><br><span class="line">&quot;21&quot;</span><br><span class="line">&gt; <span class="selector-tag">hincrbyfloat</span> <span class="selector-tag">user-list</span> <span class="selector-tag">age</span> 0.5</span><br><span class="line">&quot;21.5&quot;</span><br><span class="line">&gt; <span class="selector-tag">hincrbyfloat</span> <span class="selector-tag">user-list</span> <span class="selector-tag">age</span> <span class="selector-tag">-1</span>.5</span><br><span class="line">&quot;20&quot;</span><br></pre></td></tr></table></figure><p><strong>HLEN与HSTRLEN命令</strong></p><ul><li>HLEN查看字段数</li><li>HSTRLEN查看字段值中的字符数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span> <span class="selector-tag">username</span> <span class="selector-tag">liu</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1 </span><br><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span> <span class="selector-tag">username</span> <span class="selector-tag">wang</span> <span class="selector-tag">age</span> 18</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">hlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">hlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">hstrlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:1</span> <span class="selector-tag">username</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">hstrlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span> <span class="selector-tag">username</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">hstrlen</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span> <span class="selector-tag">age</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br></pre></td></tr></table></figure><h4 id="hash-应用场景"><a href="#hash-应用场景" class="headerlink" title="hash-应用场景"></a>hash-应用场景</h4><p>redis是内存的数据库，所有键值的操作速度都非常快，而hash是单元数的，但不能做复杂的文档（但hash恰恰是键值对的，所以说的上是文档类型的数据），只能做一些简单的</p><p>场景：点赞、关注、收藏、详情页，总之面向个人和事务的一些小操作都可以使用HASH</p><h4 id="小结hash命令"><a href="#小结hash命令" class="headerlink" title="小结hash命令"></a>小结hash命令</h4><table><thead><tr><th>命令</th><th>参数</th></tr></thead><tbody><tr><td>HSET</td><td>设置hash域的字符串值</td></tr><tr><td>HMSET</td><td>将多个hash域设置为多个值</td></tr><tr><td>HGET</td><td>获取hash域的值</td></tr><tr><td>HMGET</td><td>获取所有给定hash域的值</td></tr><tr><td>HGETALL</td><td>获取hash中的域和值</td></tr><tr><td>HVALS</td><td>获取hash域中所有值</td></tr><tr><td>HINCRBY</td><td>将hash域整数增加</td></tr><tr><td>HINCRBYFLOAT</td><td>将hash域浮点数增加</td></tr><tr><td>HLEN</td><td>获取hash中的域数</td></tr><tr><td>HVALS</td><td>获取hash中的所有值</td></tr><tr><td>HDEL</td><td>删除一个或多个hash域</td></tr><tr><td>HEXISTS</td><td>判断hash域是否存在</td></tr><tr><td>HKEYS</td><td>获取所有hash域</td></tr><tr><td>HSCAN</td><td>递增迭代hash域和关联值</td></tr><tr><td>HSEINX</td><td>设置hash域的值，仅当字段不存在的时候</td></tr><tr><td>HSTRLEN</td><td>获取hash域值的长度</td></tr></tbody></table><h3 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h3><p>set是字符串的无序列表，是唯一的，它的内部实现相当于一个特殊的字典，字典中所有的value都是一个值NULL。当set最后一个元素被移除之后，数据结构被自动删除，内存被回收</p><p>SET结构可以用来存储在某活动中中奖的用户ID，因为有去重功能，可以保证同一个用户不会中奖两次</p><ul><li>优点：无序（乱序）、去重</li></ul><p><strong>SET下的分类</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320225104821.png"></p><h4 id="set-设置成员"><a href="#set-设置成员" class="headerlink" title="set-设置成员"></a>set-设置成员</h4><p><strong>SADD、SREM、SMEMBERS命令</strong></p><ul><li>SADD 添加元素，可以看到插入的顺序是乱的，不会进行排序</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> <span class="selector-tag">aa</span> <span class="selector-tag">bb</span> <span class="selector-tag">dd</span> <span class="selector-tag">cc</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">k1</span></span><br><span class="line">1) &quot;<span class="selector-tag">aa</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">cc</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">dd</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">bb</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>SREM 用来删除一个或多个指定的值</li><li>SMEMBERS 查看key中的成员</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">srem</span> <span class="selector-tag">k1</span> <span class="selector-tag">dd</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">k1</span></span><br><span class="line">1) &quot;<span class="selector-tag">aa</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">cc</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">bb</span>&quot;</span><br></pre></td></tr></table></figure><h4 id="set-集合操作"><a href="#set-集合操作" class="headerlink" title="set-集合操作"></a>set-集合操作</h4><p><strong>SDIFF、SINTER、SUNION、SDIFFSTORE、SINTERSTORE、SUNIONSTORE命令</strong></p><ul><li>SDIFF 计算集合的差异，SDIFFSTORE计算差集结果进行存储</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> 1 3 4 5 6</span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k2</span> 2 3 4 7 6</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">SDIFF</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span>      //去求差集</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SDIFFSTORE</span> <span class="selector-tag">dest</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span>   //存储差集</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">dest</span>                         //查看<span class="selector-tag">dest</span></span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;5&quot;</span><br></pre></td></tr></table></figure><p>SINTER 求出成员的并集，SINTERSTORE计算并集结果进行存储</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SINTER</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">&gt; <span class="selector-tag">SINTERSTORE</span> <span class="selector-tag">dest</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">dest</span></span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;6&quot;</span><br></pre></td></tr></table></figure><p>SUNION 求出成员的合集，SUNIONSTROE计算合集结果进行存储</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SUNION</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;7&quot;</span><br><span class="line">&gt; <span class="selector-tag">SUNIONSTORE</span> <span class="selector-tag">dest</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span></span><br><span class="line">(<span class="selector-tag">integer</span>)7</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">dest</span></span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">6) &quot;6&quot;</span><br><span class="line">7) &quot;7&quot;</span><br></pre></td></tr></table></figure><h4 id="set-随机事件"><a href="#set-随机事件" class="headerlink" title="set-随机事件"></a>set-随机事件</h4><p><strong>SRANDMEMBER命令</strong></p><p>SRANDMEMBER 取key值的范围值，而且每次获去都是不一样的</p><ul><li>正数：取出去重的结果集（不能超过已有集）</li><li>负数：取出有重复的结果集</li><li>0：则不返回</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> <span class="selector-tag">wu</span> <span class="selector-tag">liu</span> <span class="selector-tag">wang</span> <span class="selector-tag">chen</span> <span class="selector-tag">li</span> <span class="selector-tag">fan</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 6</span><br><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> 3</span><br><span class="line">1) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> 3</span><br><span class="line">1) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> 3</span><br><span class="line">1) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">fan</span>&quot;</span><br></pre></td></tr></table></figure><p>如果count数值是负数，那么就会出现重复的人名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> <span class="selector-tag">-3</span></span><br><span class="line">1) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> <span class="selector-tag">-3</span></span><br><span class="line">1) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wu</span>&quot;</span><br></pre></td></tr></table></figure><p>SRANDMEMBER 还可以用来抽奖，因为正数是不能重复的，而负数是可以重复，所以可以有以下两个抽奖模式</p><ul><li>可以用于人多礼物少的时候（当然这只能是一次性的，因为在使用命令还会出现同样的名字）</li><li>可以用于人少礼物多的时候，每人可以领多件礼物</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> 3         //获取的前三名</span><br><span class="line">1) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SRANDMEMBER</span> <span class="selector-tag">k1</span> <span class="selector-tag">-10</span>    </span><br><span class="line"> 1) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line"> 2) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line"> 3) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line"> 4) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line"> 5) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line"> 6) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line"> 7) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line"> 8) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line"> 9) &quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">10) &quot;<span class="selector-tag">fan</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>SPOP命令</strong></p><p>SPOP命令可以解决抽中奖的人不会再出现，就是取出抽中奖品的人，这样在使用命令就不会有重复的名字了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">chen</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">&quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">k1</span> </span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h4 id="set-其他命令使用"><a href="#set-其他命令使用" class="headerlink" title="set-其他命令使用"></a>set-其他命令使用</h4><p><strong>SCARD、SISMEMBER、SMOVE、SREM命令</strong></p><ul><li>SCARD 可以获取成员的数值</li><li>SISMEMBER 可以确认该set有没有该值，1表示存在，0表示不存在</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> 1 2 3 4 </span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">scard</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">SISMEMBER</span> <span class="selector-tag">k1</span> 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">SISMEMBER</span> <span class="selector-tag">k1</span> 5</span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><ul><li>SMOVE 移除成员到另一个set</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k2</span> 5 6 7 8</span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">SMOVE</span> <span class="selector-tag">k1</span> <span class="selector-tag">k2</span> 3</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">smembers</span> <span class="selector-tag">k2</span></span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;7&quot;</span><br><span class="line">5) &quot;8&quot;</span><br></pre></td></tr></table></figure><h4 id="小结SET命令"><a href="#小结SET命令" class="headerlink" title="小结SET命令"></a>小结SET命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SADD</td><td>添加一个或多个成员添加到set</td></tr><tr><td>SCARD</td><td>获取set中成员的数</td></tr><tr><td>SDIFF</td><td>求出多个set的差集</td></tr><tr><td>SDIFFSTORE</td><td>将求出的set差集进行存储</td></tr><tr><td>SINTER</td><td>求出多个set的并集</td></tr><tr><td>SINTERSTORE</td><td>将求出的set并集进行存储</td></tr><tr><td>SUNION</td><td>求出多个set的合集</td></tr><tr><td>SUNIONSTORE</td><td>将求出的set合集进行存储</td></tr><tr><td>SISMEMBER</td><td>确定给定值是否是set的成员</td></tr><tr><td>SMEMBERS</td><td>获取set中所有的成员</td></tr><tr><td>SMOVE</td><td>从set中移动成员到另一个set</td></tr><tr><td>SPOP</td><td>从set中删除并返回一个或多个随机成员</td></tr><tr><td>SRANDMEMBER</td><td>从set中获取一个或多个随机成员</td></tr><tr><td>SREM</td><td>从set中移除一个或多个成员</td></tr><tr><td>SSCAN</td><td>递增迭代set元素</td></tr></tbody></table><h3 id="sorted-set（有序集合）"><a href="#sorted-set（有序集合）" class="headerlink" title="sorted set（有序集合）"></a>sorted set（有序集合）</h3><p>Redis 有序集合和集合一样也是 string 类型元素的集合，且不允许重复的成员。</p><ul><li>sorted set也称为zset，因为命令是由z开头，s开头已经被set集合占用了，zset不同的是每个元素都会关联一个double（双重）类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</li></ul><ul><li>有序集合的成员是唯一的，但分数(score)却可以重复。</li></ul><ul><li>zset是Redis提供的最有特色的数据结构，一方面它是一个set，保证了内部value的唯一性，另一方面它可以给每个value赋予一个score(分数)，代表这个value的排序权重。它的内部实现用的是一种叫做“跳跃列表”的数据结构</li></ul><ul><li>zset中最后一个value被移除后，数据结构被自动删除，内存被回收</li></ul><ul><li>zset可以用来存储粉丝列表，value值是粉丝的用户ID，score是关注事件。可以对粉丝列表按关注时间进行排序</li></ul><ul><li>zset还可以用来存储学生的成绩，value值是学生的ID，score是他的考试成绩，可以对成绩按分数进行排序就可以得到他的名次</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320225356762.png"></p><p><strong>sorted set下的分类</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320230936247.png"></p><h4 id="zset-设置成员"><a href="#zset-设置成员" class="headerlink" title="zset-设置成员"></a>zset-设置成员</h4><p><strong>ZADD、ZRANGE、ZRANGEBYSCORE命令</strong></p><ul><li><p>zadd 添加一个或多个成员到sorted set，或更新其分数（如果已经存在）</p></li><li><p>zrange 按索引返回sorted set中成员范围</p></li><li><p>zrangebyscore 按分值返回sorted set中成员范围</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 80 <span class="selector-tag">wu</span> 70 <span class="selector-tag">liu</span> 90 <span class="selector-tag">wang</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">zrange</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-1</span>                 //只显示所有的值，不显示分数</span><br><span class="line">1) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">zrange</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span>      //加上<span class="selector-tag">withscores</span>，就同时都显示</span><br><span class="line">1) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">2) &quot;70&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">4) &quot;80&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">6) &quot;90&quot;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zrangebyscore</span> <span class="selector-tag">k1</span> 70 80</span><br><span class="line">1) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">zrangebyscore</span> <span class="selector-tag">k1</span> 70 90</span><br><span class="line">1) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>ZREVRANGE、ZREMRANGEBYSCORE命令</strong></p><ul><li><p>zrevrange 按索引返回sorted set中一组成员，其得分从高到低排序（反向）</p></li><li><p>zrevrangebyscore 按分数返回sorted set中一组成员，其得分从高到低排序（反向）</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zrevrange</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">zrevrangebyscore</span> <span class="selector-tag">k1</span> 90 70</span><br><span class="line">1) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">liu</span>&quot;</span><br></pre></td></tr></table></figure><p><strong>ZSCORE、ZCARD、ZCOUNT</strong></p><ul><li>zscore 是通过成员获取分数</li><li>zcard 是获取成员的数量</li><li>zcout 通过分数范围统计有多少成员</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zscore</span> <span class="selector-tag">k1</span> <span class="selector-tag">wu</span></span><br><span class="line">&quot;80&quot;</span><br><span class="line">&gt; <span class="selector-tag">zscore</span> <span class="selector-tag">k1</span> <span class="selector-tag">liu</span></span><br><span class="line">&quot;70&quot;</span><br><span class="line">&gt; <span class="selector-tag">zcard</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">zcount</span> <span class="selector-tag">k1</span> 70 90</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">zcount</span> <span class="selector-tag">k1</span> 70 80</span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br></pre></td></tr></table></figure><h4 id="zset-集合操作"><a href="#zset-集合操作" class="headerlink" title="zset-集合操作"></a>zset-集合操作</h4><p><strong>ZINTERSTORE、ZUNIONSTORE命令</strong></p><ul><li><p>ZINTERSTORE计算给定的numkeys有序集合的交集，并且把结果放到destination中，要与多个计算时，必须先给定key个数(numberkeys)，也就是用多少个key进行交集</p></li><li><p>ZUNIONSTORE计算给定numkeys有限集合的并集</p></li></ul><p>创建language和english两个集合，求ZINTERSTORE的交集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">language</span> 90 <span class="selector-tag">wu</span> 70 <span class="selector-tag">li</span> 80 <span class="selector-tag">wang</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">english</span> 80 <span class="selector-tag">wu</span> 80 <span class="selector-tag">li</span> 90 <span class="selector-tag">wang</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">ZINTERSTORE</span> <span class="selector-tag">dest</span> 2 <span class="selector-tag">language</span> <span class="selector-tag">english</span> <span class="selector-tag">weights</span> 1 2      //权重会增加分数的值，2表示2*分数值</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">dest</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span>        </span><br><span class="line">1) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">2) &quot;230&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">4) &quot;250&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">6) &quot;260&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">ZINTERSTORE</span> <span class="selector-tag">dest2</span> 2 <span class="selector-tag">language</span> <span class="selector-tag">english</span> <span class="selector-tag">aggregate</span> <span class="selector-tag">sum</span>   //还可以求交集的总数</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">dest2</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></span><br><span class="line">1) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">2) &quot;150&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">4) &quot;170&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">6) &quot;170&quot;</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">ZINTERSTORE</span> <span class="selector-tag">dest3</span> 2 <span class="selector-tag">language</span> <span class="selector-tag">english</span> <span class="selector-tag">aggregate</span> <span class="selector-tag">min</span>  //求交集中最小的数</span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">10.0.0.50<span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">dest3</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></span><br><span class="line">1) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">2) &quot;70&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">4) &quot;80&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line">6) &quot;80&quot;</span><br></pre></td></tr></table></figure><p>创建language和english两个集合，求ZUNIONSTORE的并集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k2</span> 70 <span class="selector-tag">liu</span> 80 <span class="selector-tag">wang</span> 50 <span class="selector-tag">li</span> 70 <span class="selector-tag">ke</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 70 <span class="selector-tag">liu</span> 80 <span class="selector-tag">wang</span> 50 <span class="selector-tag">li</span> 70 <span class="selector-tag">wu</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">ZUNIONSTORE</span> <span class="selector-tag">new_key</span> 2 <span class="selector-tag">k1</span> <span class="selector-tag">k2</span> <span class="selector-tag">weights</span> 1 1</span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">&gt; <span class="selector-tag">zrange</span> <span class="selector-tag">new_key</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">withscores</span></span><br><span class="line"> 1) &quot;<span class="selector-tag">ke</span>&quot;</span><br><span class="line"> 2) &quot;70&quot;</span><br><span class="line"> 3) &quot;<span class="selector-tag">wu</span>&quot;</span><br><span class="line"> 4) &quot;70&quot;</span><br><span class="line"> 5) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line"> 6) &quot;100&quot;</span><br><span class="line"> 7) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line"> 8) &quot;140&quot;</span><br><span class="line"> 9) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">10) &quot;160&quot;</span><br></pre></td></tr></table></figure><h4 id="zset-其他命令使用"><a href="#zset-其他命令使用" class="headerlink" title="zset-其他命令使用"></a>zset-其他命令使用</h4><p><strong>ZLECOUNT、ZRANGEBYLEX、ZREVRANGEBYLEX、ZREMRANGEBYLEX命令</strong></p><ul><li>ZLEXCOUNT命令用于计算sorted set中指定成员之间的成员数量，由”-“表示得分最小的成员，”+”表示得分最大值的成员</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 70 <span class="selector-tag">liu</span> 80 <span class="selector-tag">wang</span> 60 <span class="selector-tag">li</span> 100 <span class="selector-tag">fan</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">zlexcount</span> <span class="selector-tag">k1</span> <span class="selector-tag">-</span> +</span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line"> <span class="selector-tag">zrange</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">1) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">fan</span>&quot;</span><br></pre></td></tr></table></figure><ul><li><p>ZRANGEBYLEX 返回指定成员区间内的成员，按成员字典正序排序</p></li><li><p>ZREVRANGEBYLEX 是反向获取成员区间内的成员，反序排序</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zadd</span> <span class="selector-tag">k1</span> 70 <span class="selector-tag">liu</span> 80 <span class="selector-tag">wang</span> 60 <span class="selector-tag">li</span> 100 <span class="selector-tag">fan</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">ZRANGEBYLEX</span> <span class="selector-tag">k1</span> <span class="selector-tag">-</span> +   //分数大的在最先，正序</span><br><span class="line">1) &quot;<span class="selector-tag">li</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">ZREVRANGEBYLEX</span> <span class="selector-tag">k1</span> + <span class="selector-tag">-</span></span><br><span class="line">1) &quot;<span class="selector-tag">fan</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">wang</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">liu</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">li</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>ZREMRANGEBYLEX是删除成员之间的数量</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">ZREMRANGEBYLEX</span> <span class="selector-tag">k1</span> <span class="selector-tag">-</span> +</span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">zrange</span> <span class="selector-tag">k1</span> 0 <span class="selector-tag">-1</span></span><br><span class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br></pre></td></tr></table></figure><h4 id="zset-skip-list（跳跃列表）"><a href="#zset-skip-list（跳跃列表）" class="headerlink" title="zset-skip list（跳跃列表）"></a>zset-skip list（跳跃列表）</h4><p>作用：间接跳层，牺牲系统存储空间，换未来的查询速度</p><p>zset内部的排序功能是通过“跳跃列表”的数据结构来实现的，因为zset要支持随机的插入和删除，所以它不宜使用数组来表示，看看普通的链表数据结构</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320231318575.png"></p><p>链表是按照score值进行排序，当有新元素需要插入时，要定位到特定位置的插入点，来保证链表是有序的，通常会通过二分查找来找到插入点，但是二分查找的对象必须是数组，只有数组才可以支持快速位置定位，但是链表做不到，如果让链表做到快速插入和查询呢，可以看下述这张图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210320233437814.png"></p><p>跳跃列表类似于层级结构，最下面的层所有的元素都会串起来，然后每隔几个元素挑选一个代表，接着再将这几个代表用指针连接起来，接着继续挑选上层代表，最终形成一个倒立的树（跳跃列表采取一个随机策略来决定新元素可以下沉到几层）</p><p>当有数据插入列表时，在定位插入点时，会现在顶层定位，然后到下一层定位，一直到最底层找到合适的为止，将新元素插入进列表</p><p>位于L0层的概率是100%，而兼到 L1层只有 50% 的概率，到L2层只有 25% 的概率，到 L3 层只有 12.5% 的概率，以此类推， 一直随机到最顶层 L20层 。绝大多数元素都过不了几层，只有极少数元素可以深入到顶层。列表中的元素越多，能够深入的层次就越深，元素能进入到顶层的可能性就会越大。  </p><h4 id="小结zset命令"><a href="#小结zset命令" class="headerlink" title="小结zset命令"></a>小结zset命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ZADD</td><td>将一个或多个成添加到sorted set，或更新其分数（如果已存在时）</td></tr><tr><td>ZCARD</td><td>获取sorted set中的成员数</td></tr><tr><td>ZCOUNT</td><td>用给定值内的分数对sorted set中的成员进行计数</td></tr><tr><td>ZINCRBY</td><td>增加sorted set中成员的分数</td></tr><tr><td>ZINTERSTORE</td><td>相交多个sorted set并将结果排序后的集存储在新的key中（并集）</td></tr><tr><td>ZLEXCOUNT</td><td>计算给定范围之间的sorted set中的成员数</td></tr><tr><td>ZPOPMAX</td><td>删除并返回sorted set中得分最高的成员</td></tr><tr><td>ZPOPMIN</td><td>删除并返回sorted set中得分最低的成员</td></tr><tr><td>ZRANGE</td><td>按索引返回sorted set中的成员范围</td></tr><tr><td>ZRANGEBYLEX</td><td>返回按字典顺序排序的一组排序范围内的成员</td></tr><tr><td>ZRANGEBYSCORE</td><td>按分值返回sorted set中成员范围</td></tr><tr><td>ZRANK</td><td>确定sorted set中成员的索引</td></tr><tr><td>ZREM</td><td>从sorted set移除一个或多个程艳</td></tr><tr><td>ZREMRANGEBYLEX</td><td>删除给定词典范围之间的sorted set中的所有成员</td></tr><tr><td>ZREMRANGEBYSCORE</td><td>在给定的分数内删除sorted set中的所有成员</td></tr><tr><td>ZREMRANGEBYRANK</td><td>在给定的索引内删除sorted set中的所以成员</td></tr><tr><td>ZREVRANGE</td><td>按索引返回sorted set中一组成员，其得分从高到低排序（反向）</td></tr><tr><td>ZREVRANGEBYLEX</td><td>返回按字典顺序排序的一组排序范围内的成员范围，排序高到低（反向）</td></tr><tr><td>ZREVRANGEBYSCORE</td><td>按分数返回sorted set中一组成员，其得分从高到低排序（反向）</td></tr><tr><td>ZREVRANK</td><td>确定sorted set中成员的索引，其得分从高到低排序（反向）</td></tr><tr><td>ZSCAN</td><td>递增迭代sorted sets元素和关联分数</td></tr><tr><td>ZSCORE</td><td>获取sorted set中与给定成员关联的分数</td></tr><tr><td>ZUNIONSTORE</td><td>添加多个sorted set并将结果sorted set存储在新key中（合集）</td></tr><tr><td>BZPOPMAX</td><td>从一个或多个sorted sets中删除得分最高的成员，或者将其阻塞，直到有一个可用的为止</td></tr><tr><td>BZPOPMIN</td><td>从一个或多个sorted sets中删除得分最低的成员，或者将其阻塞，直到有一个可用的为止</td></tr></tbody></table><h2 id="HyperLogLog（计数）"><a href="#HyperLogLog（计数）" class="headerlink" title="HyperLogLog（计数）"></a>HyperLogLog（计数）</h2><p>HyperLogLog是Redis的高级数据结构，HyperLogLog用来解决一些统计的问题、它提供不精确的去重计数方案，虽然不精确，但也不是非常不准，标准误差是0.81%</p><p>这种精确度可以满足一些统计的需求了。比如统计UV，UV不像PV一样，PV只需要redis的计数器，在这个计数器的key后缀加上当天的时间，执行incrby指令一次就加1就可以了。</p><p>但UV需要的是去重，同一天之内的用户多次访问请求只能计数一次。这就要求每个一个网页都需要带上用户的ID，无论是登录用户还是未登录用户都需要一个ID来标识</p><p>你可以使用每个页面设置一个独立的set集合来存储所有当天访问过此页面的用户ID。但给一个请求过来时，使用sadd将用户ID丢进去。然后在通过scard可以去除这个集合的大小，这个数据就是这个页面的UV数据。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">sadd</span> 0101 <span class="selector-tag">abc</span> <span class="selector-tag">abd</span> <span class="selector-tag">add</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">sadd</span> 0101 <span class="selector-tag">ade</span> <span class="selector-tag">abb</span> <span class="selector-tag">aee</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">scard</span> 0101</span><br><span class="line">(<span class="selector-tag">integer</span>) 6</span><br></pre></td></tr></table></figure><p>但如果访问的页面需求量越来越大，比如一个热点页面可能有几千万个UV，你就需要使用很大的set集合来统计，非常浪费空间。热点的页面越多，那么你耗费的存储空间就越多。现在为了一个去重功能耗费多的存储空间是不值得的，所以redis提供的HyperLogLog数据结构就是用来解决这种统计问题的</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>HyperLogLog提供两个指令pfadd和pfcount，一个是增加计数，一个是获取计数，pfadd跟set集合中的sdd指令用法是一样的，来一个用户ID，就将用户ID丢进去，pfcount跟scard用法也是一样，直接获取数值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">pfadd</span> <span class="selector-tag">us</span> <span class="selector-tag">user1</span> <span class="selector-tag">user2</span> </span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">pfcount</span> <span class="selector-tag">us</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br><span class="line">&gt; <span class="selector-tag">pfadd</span> <span class="selector-tag">us</span> <span class="selector-tag">user3</span> <span class="selector-tag">user4</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">pfcount</span> <span class="selector-tag">us</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br></pre></td></tr></table></figure><p>HyperLogLog除了提供上面的pfadd和pfcount之外，还提供了第三个指令pfmerge，用于将多个pf计数值累加在一起形成一个新的pf值，如下述操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">pfadd</span> <span class="selector-tag">us</span> <span class="selector-tag">user1</span> <span class="selector-tag">user2</span> <span class="selector-tag">user3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">pfadd</span> <span class="selector-tag">ua</span> <span class="selector-tag">user1</span> <span class="selector-tag">user3</span> <span class="selector-tag">user4</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">pfmerge</span> <span class="selector-tag">dest</span> <span class="selector-tag">us</span> <span class="selector-tag">ua</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">pfcount</span> <span class="selector-tag">dest</span>     //合并</span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br></pre></td></tr></table></figure><h3 id="HyperLogLog其他事项"><a href="#HyperLogLog其他事项" class="headerlink" title="HyperLogLog其他事项"></a>HyperLogLog其他事项</h3><p>HyperLogLog数据结构的存储结构不是免费，不是要花钱，而是它需要占据12KB的大小存储空间。所以不适合单个用户相关的数据。如果用户是上亿个，那对比set存储方案，HyperLogLog所使用的的空间就不算什么了</p><p>对于HyperLogLog的存储，redis也进行了优化。在数值比较小的时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵占用空间渐渐超过了阈值时，才会一次性转变稠密矩阵，才会占用12KB的空间</p><h2 id="GeoHash（地理）"><a href="#GeoHash（地理）" class="headerlink" title="GeoHash（地理）"></a>GeoHash（地理）</h2><p>Redis在3.2版本后增加的地理位置Geo模块，它可以实现现类似于摩拜单车、美团、饿了么，寻找附近的单车或美食的功能</p><h3 id="GeoHash算法"><a href="#GeoHash算法" class="headerlink" title="GeoHash算法"></a>GeoHash算法</h3><p>GeoHash算法将二维的经纬度数据映射到一维的整数，使得所有的元素都将挂载到一条线上</p><blockquote><p>地图元素的位置数据使用二维的经纬度表示，经度[-180, 180]，纬度范围[-90, 90]，经度正负以本初子午线（英国格林尼治天文台）为界，东正西负；维度正负以赤道为界，北正南负。</p></blockquote><p>距离靠近的二维坐标映射到一维后的点之间距离就会拉近。当需要计算“附近的人”时，首先将目标位置映射到这条线上，然后在这个一维的线上获取附近的点就可以</p><p>GeoHash的映射算法，是将整个地球看成一个二维平面，接着划分了一系列正方形的方格，类似于围棋棋盘的格子。所有的地图元素坐标都将被放置到唯一的方格中，方格越小，就越精确。如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210421155745171.png"></p><p>然后对这些方格进行整数编码，越是靠近的方格编码越是接近。这些小正方形会平均分为四块，小正方形可以分别标记为00、01、03、04共四个二进制整数。然后对每一个小正方形继续使用二刀法切割。这时每个小小正方形就可以使用4bit的二进制整数表示。后续还会继续切，正方形会越来越小，二进制整数也会越来越长，精准度就会越来越高（在真实算法中，除了二刀法，还有其他刀法，最终编码出来的整数数字也都不一样）</p><p>编码后，每个地图元素的坐标都将变成一个整数，通过这个整数可以还原出元素的坐标。整数越长，还原出来的坐标值的损失程度越小。对于“附近的人”这种功能，一点损失是忽略不计的</p><p>GeoHash算法会继续对这个整数做一次base32编码（0 ~ 9，a ~ z，去掉a、i、l、o四个字母）变成一个字符串。在redis里面，经纬度使用52位的整数进行编码，放入zset里面，zset的value是元素的key，score是GeoHash的52位整数值，zset的score虽然是浮点数，但是对52位的整数值，它可以无损存储</p><p>在Redis进行Geo查询，可以想到它的内部结构实际上只是一个zset(skiplist)，通过zset的score排序就可以得到坐标附近的其他元素，通过将score还原成坐标值就可以得到元素的原始坐标</p><h3 id="Geo指令的基本用法"><a href="#Geo指令的基本用法" class="headerlink" title="Geo指令的基本用法"></a>Geo指令的基本用法</h3><p>Geo有6个指令，它只是一个普通的zset结构，我们设置一下掘进、京东、美团和小米地理位置看看，如下例子</p><p><strong>增加掘进、美团、小米的地理位置</strong></p><p>geoadd指令携带集合名称以及多个经纬度名称三元组，注意这里可以加入多个三元组</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">geoadd</span> <span class="selector-tag">company</span> 116.48105 39.996794 <span class="selector-tag">juejin</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">geoadd</span> <span class="selector-tag">company</span> 116.489033 40.007669 <span class="selector-tag">meituan</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">geoadd</span> <span class="selector-tag">company</span> 116.562108 39.787602 <span class="selector-tag">jd</span> 116.334255 40.027400 <span class="selector-tag">xiaomi</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p>Redis没有提供Geo元素删除指令，但Geo存储结构上使用的是zset，所以可以使用zset的相关指令来操作Geo数据，使用zrem指令就可以删除</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">zrem</span> <span class="selector-tag">company</span> <span class="selector-tag">jn</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">zrem</span> <span class="selector-tag">company</span> <span class="selector-tag">jy</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br></pre></td></tr></table></figure><p><strong>计算每个地理位置距离</strong></p><p>gepdist指令可以用来计算两个元素之间的距离，携带集合名称、两个名称和距离单位。距离单位可以是m、km、ml和ft，分别代表米、千米、英里和尺。<code>默认情况为米</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">geodist</span> <span class="selector-tag">company</span> <span class="selector-tag">jd</span> <span class="selector-tag">xiaomi</span></span><br><span class="line">&quot;33004.6915&quot;</span><br><span class="line">&gt; <span class="selector-tag">geodist</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span> <span class="selector-tag">meituan</span></span><br><span class="line">&quot;13365.8814&quot;</span><br><span class="line">&gt; <span class="selector-tag">geodist</span> <span class="selector-tag">company</span> <span class="selector-tag">meituan</span> <span class="selector-tag">juejin</span></span><br><span class="line">&quot;1387.8166&quot;</span><br></pre></td></tr></table></figure><p><strong>获取元素地理位置</strong></p><p>geopos指令可以获取集合中任意元素的经纬度坐标，可以一次获取多个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">geopos</span> <span class="selector-tag">company</span> <span class="selector-tag">jd</span></span><br><span class="line">1) 1) &quot;116.56210631132125854&quot;</span><br><span class="line">   2) &quot;39.78760295130235392&quot;</span><br><span class="line">&gt; <span class="selector-tag">geopos</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span> <span class="selector-tag">meituan</span> <span class="selector-tag">juejin</span></span><br><span class="line">1) 1) &quot;116.33425265550613403&quot;</span><br><span class="line">   2) &quot;40.02740024658161389&quot;</span><br><span class="line">2) 1) &quot;116.48903220891952515&quot;</span><br><span class="line">   2) &quot;40.00766997707732031&quot;</span><br><span class="line">3) 1) &quot;116.48104995489120483&quot;</span><br><span class="line">   2) &quot;39.99679348858259686&quot;</span><br></pre></td></tr></table></figure><p>可以看到，我们使用geoadd添加的坐标与geopos查看的坐标还是有一些误差的。原因是GeoHash对二维坐标进行的一维映射是有损的，通过映射还原回来的值会出现较小的差别，但对于使用”附近的人”这种功能还是可以接受的</p><p><strong>获取元素的hash值</strong></p><p>GeoHash获取元素的经纬度编码字符串，你可以使用这个编码值去：<a href="http://geohash.org/$%7Bhash%7D%E4%B8%8A%E8%BF%9B%E8%A1%8C%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%EF%BC%8C%E5%AE%83%E6%98%AF">http://geohash.org/${hash}上进行直接定位，它是</a> GeoHash的标准编码值 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">geohash</span> <span class="selector-tag">company</span> <span class="selector-tag">meituan</span></span><br><span class="line">1) &quot;<span class="selector-tag">wx4gdg0tx40</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">geohash</span> <span class="selector-tag">company</span> <span class="selector-tag">jd</span></span><br><span class="line">1) &quot;<span class="selector-tag">wx4fk7jgtf0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">geohash</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span></span><br><span class="line">1) &quot;<span class="selector-tag">wx4exqb0880</span>&quot;</span><br></pre></td></tr></table></figure><p> 通过上述网址查询看看，我们查看一下小米的地理位置，然后再右键选择新窗口打开<code>Google地图</code>来查看位置是否正确（多少会有些偏差）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210421175019693.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210421175141342.png"></p><p><strong>对比附近的公司</strong></p><p>georadiusbymember指令是最为关键的指令之一，它可以用来查询指定元素附近的其他元素，它的参数非常复杂</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//范围20公里以内最多3个元素按距离正派，它不会排除自身</span><br><span class="line">&gt; <span class="selector-tag">georadiusbymember</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span> 20 <span class="selector-tag">km</span> <span class="selector-tag">count</span> 3 <span class="selector-tag">asc</span></span><br><span class="line">1) &quot;<span class="selector-tag">xiaomi</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">juejin</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">meituan</span>&quot;   </span><br><span class="line"></span><br><span class="line">//范围20公里以内最多3个元素按距离倒序</span><br><span class="line">&gt; <span class="selector-tag">georadiusbymember</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span> 20 <span class="selector-tag">km</span> <span class="selector-tag">count</span> 3 <span class="selector-tag">desc</span></span><br><span class="line">1) &quot;<span class="selector-tag">meituan</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">juejin</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">xiaomi</span>&quot;</span><br><span class="line"></span><br><span class="line">//三个可选参数：<span class="selector-tag">withcoord</span>、<span class="selector-tag">withdist</span>、<span class="selector-tag">withhash</span> 用来携带附加参数，<span class="selector-tag">withdist</span>可以显示距离</span><br><span class="line">&gt; <span class="selector-tag">georadiusbymember</span> <span class="selector-tag">company</span> <span class="selector-tag">xiaomi</span> 20 <span class="selector-tag">km</span> <span class="selector-tag">withcoord</span> <span class="selector-tag">withdist</span> <span class="selector-tag">withhash</span> <span class="selector-tag">count</span> 3 <span class="selector-tag">asc</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">xiaomi</span>&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069880904286516</span><br><span class="line">   4) 1) &quot;116.33425265550613403&quot;</span><br><span class="line">      2) &quot;40.02740024658161389&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">juejin</span>&quot;</span><br><span class="line">   2) &quot;12.9606&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069887154388167</span><br><span class="line">   4) 1) &quot;116.48104995489120483&quot;</span><br><span class="line">      2) &quot;39.99679348858259686&quot;</span><br><span class="line">3) 1) &quot;<span class="selector-tag">meituan</span>&quot;</span><br><span class="line">   2) &quot;13.3659&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069887179083478</span><br><span class="line">   4) 1) &quot;116.48903220891952515&quot;</span><br><span class="line">      2) &quot;40.00766997707732031&quot;</span><br></pre></td></tr></table></figure><p>除了georadiusbymember指令根据元素查询附近的元素，Redis还提供了根据坐标值查询附近的元素指令georadius。它可以根据用户的定位来计算“附近的人”、“附近的车”等。它的参数和georadiusbymember基本一致，唯一的差别是将目标元素改成经纬度坐标值。比如：下述操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">georadius</span> <span class="selector-tag">company</span> 116.514202 39.905409  20 <span class="selector-tag">km</span> <span class="selector-tag">withcoord</span> <span class="selector-tag">withdist</span> <span class="selector-tag">withhash</span> <span class="selector-tag">count</span> 3 <span class="selector-tag">asc</span></span><br><span class="line">1) 1) &quot;<span class="selector-tag">juejin</span>&quot;</span><br><span class="line">   2) &quot;10.5501&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069887154388167</span><br><span class="line">   4) 1) &quot;116.48104995489120483&quot;</span><br><span class="line">      2) &quot;39.99679348858259686&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">meituan</span>&quot;</span><br><span class="line">   2) &quot;11.5748&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069887179083478</span><br><span class="line">   4) 1) &quot;116.48903220891952515&quot;</span><br><span class="line">      2) &quot;40.00766997707732031&quot;</span><br><span class="line">3) 1) &quot;<span class="selector-tag">jd</span>&quot;</span><br><span class="line">   2) &quot;13.7269&quot;</span><br><span class="line">   3) (<span class="selector-tag">integer</span>) 4069154033428715</span><br><span class="line">   4) 1) &quot;116.56210631132125854&quot;</span><br><span class="line">      2) &quot;39.78760295130235392&quot;</span><br></pre></td></tr></table></figure><h3 id="GeoHash其他事项"><a href="#GeoHash其他事项" class="headerlink" title="GeoHash其他事项"></a>GeoHash其他事项</h3><p>在一个地图应用中，车的数据、餐馆的数据、人的数据可能会有几百万甚至几千万条。如果使用Geo数据结构，它们将会全部放在一个zset集合中</p><p>在Redis的集群环境中，集合可能会从一个节点迁移到另一个节点，如果单个key的数据过大，会对集群的迁移工作造成较大的影响，在集群环境中单个key对应的数据量不宜超过1MB，否则会导致集群迁移出现卡顿状况，影响线上服务的正常运行</p><p>所以，建议Geo的数据使用单独的Redis实例部署，不使用集群环境，如果数据量过大，就需要对Geo数据进行拆分，按国家拆分、按省拆分、按市拆分，在人口特大城市甚至可以按区拆分。这样可以降低单个zset集合的大小</p><h2 id="Redis全局指令使用"><a href="#Redis全局指令使用" class="headerlink" title="Redis全局指令使用"></a>Redis全局指令使用</h2><p><strong>查看redis的全局所有配置命令</strong></p><p>通过help进行查看，下述的表格是挑选一些常用的指令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">help</span> <span class="keyword">@generic</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>简述</th></tr></thead><tbody><tr><td>KEYS pattern</td><td>查寻该库下的所有键（慎用，推荐使用SCAN，下述有说明）</td></tr><tr><td>TYPE key</td><td>确定该key的类型</td></tr><tr><td>TTL key</td><td>超时，可以对key设置一个超时时间，超时之后会过期，将不存在</td></tr><tr><td>EXISTS key [key …]</td><td>判断key是否存在</td></tr><tr><td>OBJECT subcommand [arguments [arguments …]]</td><td>检查Redis对象内部，如encoding查看使用的编码形式</td></tr><tr><td>DEL key</td><td>删除key值</td></tr><tr><td>EXPIRE</td><td>设置过期时间</td></tr><tr><td>PERSIST</td><td>去除过期时间</td></tr><tr><td>SCAN</td><td>用于迭代SET集合中的元素</td></tr></tbody></table><h3 id="type命令"><a href="#type命令" class="headerlink" title="type命令"></a>type命令</h3><ul><li>TYPE 查看key的类型</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">hello</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">hello</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">TYPE</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">string</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">sadd</span> <span class="selector-tag">k1</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span> <span class="selector-tag">c</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br><span class="line">&gt; <span class="selector-tag">type</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">set</span></span><br></pre></td></tr></table></figure><h3 id="EXPIRE命令"><a href="#EXPIRE命令" class="headerlink" title="EXPIRE命令"></a>EXPIRE命令</h3><ul><li>EXPIRE 设置过期时间。上述有说，setex等于set+expire，两种方法都可用</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">key1</span> <span class="selector-tag">v1</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">expire</span> <span class="selector-tag">key1</span> 5            //设置5秒后过期</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">&quot;<span class="selector-tag">v1</span>&quot;</span><br><span class="line">...........5秒后............</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="EXISTS命令"><a href="#EXISTS命令" class="headerlink" title="EXISTS命令"></a>EXISTS命令</h3><ul><li>判断值是否存在，exists命令返回1或者0标识给定key的值是否存在</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">key4</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="DEL"><a href="#DEL" class="headerlink" title="DEL"></a>DEL</h3><ul><li>删除key值，命令返回1或0标识是被删除（值存在）或者没被删除后（key对应的值不存在）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">key3</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">del</span> <span class="selector-tag">key2</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br></pre></td></tr></table></figure><h3 id="TTL命令"><a href="#TTL命令" class="headerlink" title="TTL命令"></a>TTL命令</h3><ul><li><p>超时，可以对key设置一个超时时间，当这个时间到达后被删除（就像优惠券一样）</p><p>integer是-1：永久不过期</p><p>integer是-2：没有该键值</p><p>integet是1：表示正常</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">TTL</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-1</span></span><br><span class="line">&gt; <span class="selector-tag">EXPIRE</span> <span class="selector-tag">key1</span> 10</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">TTL</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 6</span><br><span class="line">&gt; <span class="selector-tag">TTL</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 5</span><br><span class="line">.........一直到0.........</span><br><span class="line">&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">key4</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 0</span><br><span class="line">&gt; <span class="selector-tag">TTL</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-2</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="PERSIST命令"><a href="#PERSIST命令" class="headerlink" title="PERSIST命令"></a>PERSIST命令</h3><ul><li>去除过期时间</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">key1</span> <span class="selector-tag">v1</span></span><br><span class="line">&gt; <span class="selector-tag">expire</span> <span class="selector-tag">key1</span> 10</span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 8</span><br><span class="line">&gt; <span class="selector-tag">persist</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 1</span><br><span class="line">&gt; <span class="selector-tag">ttl</span> <span class="selector-tag">key1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) <span class="selector-tag">-1</span></span><br></pre></td></tr></table></figure><h3 id="SCAN命令"><a href="#SCAN命令" class="headerlink" title="SCAN命令"></a>SCAN命令</h3><p>在一些线上维护工作中，要从redis实例的成千上万个key中找出特定前缀的key列表来手动处理数据。可能修改它的值，也可能是删除key，但是如果从海量的key中找出满足特定前缀的key列表呢？</p><p>redis提供简单粗暴指令keys用来列出所有满足特定正则字符串规则的key</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">a</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line"> <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">b</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k3</span> <span class="selector-tag">c</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k4</span> <span class="selector-tag">d</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k5</span> <span class="selector-tag">e</span></span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">keys</span> *</span><br><span class="line">1) &quot;<span class="selector-tag">k3</span>&quot;</span><br><span class="line">2) &quot;<span class="selector-tag">k5</span>&quot;</span><br><span class="line">3) &quot;<span class="selector-tag">k1</span>&quot;</span><br><span class="line">4) &quot;<span class="selector-tag">k4</span>&quot;</span><br><span class="line">5) &quot;<span class="selector-tag">k2</span>&quot;</span><br></pre></td></tr></table></figure><p>keys指令使用非常简单，也只提供一个简单的正则字符串，但有两个弊端</p><ul><li>keys没有offset、limit参数，一次性显示所有满足的条件key，如果是实例中有几百万个key满足条件，就会看到满屏的字符串，看的不舒服</li><li>keys算法是遍历算法，复杂度是O(n)。如果实例中有几百万个key，就会影响redis的性能，照成服务的卡顿，而且所有读写redis的其他指令都会被延后甚至会超时报错。因为Redis是单进程结构，顺序执行所有命令，其他指令必须等keys*执行完后才能继续运行</li></ul><blockquote><p>PS：O(n)表示时间复杂度，是线性阶。随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p></blockquote><p>Redis为了解决这个问题，在2.8版本中加入了一个SCAN命令，它是一个基于游标的迭代器，用命令每次被调用都需要使用上一次这个调用返回的游标作为该调用的游标参数，当SCAN游标参数被设置为0时，服务器将开始一次新的迭代。它相比keys具备以下特点</p><ul><li>复杂度也是O(n)，但它是通过游标分布进行，不会阻塞线程</li><li>提供limit参数，可以控制每次返回结果的最大条数</li><li>同keys一样，也具备模式匹配功能</li><li>服务器不需要为游标保存状态，游标的唯一状态就是scan返回给客户端的游标整数</li><li>返回的结果可能会有重复，需要客户端去重（重要）</li><li>遍历的过程中如果有数据修改，改动后的数据能不能遍历到时不确定的</li><li>单次返回的结果是空的，并不意味着遍历结束，而是看返回的游标值是否为零</li></ul><h4 id="SCAN基本应用"><a href="#SCAN基本应用" class="headerlink" title="SCAN基本应用"></a>SCAN基本应用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//创建十几个<span class="selector-tag">key</span></span><br><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:2</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:7</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line">................</span><br><span class="line">&gt; <span class="selector-tag">hset</span> <span class="selector-tag">user</span><span class="selector-pseudo">:22</span> <span class="selector-tag">k1</span> <span class="selector-tag">v1</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">scan</span> 0</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2)  1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:21&quot;</span></span><br><span class="line">    2) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:22&quot;</span></span><br><span class="line">    3) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:1&quot;</span></span><br><span class="line">    4) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:4&quot;</span></span><br><span class="line">    5) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:6&quot;</span></span><br><span class="line">    6) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:8&quot;</span></span><br><span class="line">    7) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:5&quot;</span></span><br><span class="line">    8) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:7&quot;</span></span><br><span class="line">    9) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:28&quot;</span></span><br><span class="line">   10) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:17&quot;</span></span><br><span class="line">   11) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:10&quot;</span></span><br><span class="line">   12) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:2&quot;</span></span><br><span class="line">&gt; <span class="selector-tag">scan</span> 3</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:15&quot;</span></span><br><span class="line">   2) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:9&quot;</span></span><br><span class="line">   3) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:12&quot;</span></span><br><span class="line">   4) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:3&quot;</span></span><br></pre></td></tr></table></figure><p>第一个词迭代使用0作为游标，表示开始一次新的迭代，第二次迭代使用的是第一个迭代时返回的游标<code>3</code>，作为新的迭代参数</p><p>SCAN命令的返回值是一个包含两个元素的数据，第一个数组元素是用于进行下一次迭代的新游标，而第二个数组元素是一个数组，这个数组中包含了所有被迭代的元素</p><p>以0作为游标开始一次新的迭代，一直调用SCAN命令，直到命令返回游标0，我们成这个过程为一次完整遍历</p><p><strong>COUNT选项</strong></p><p>对于增量式迭代命令不保证每次迭代所返回的元素数据，可以使用COUNT选项，对命令的行为进行一定程度上的调整。COUNT选项的作用就是让用户告知迭代命令，在每次迭代中应该从数据集里返回多少元素</p><ul><li><p>COUNT参数的默认值为10</p></li><li><p>数据集比较大时，如果没有使用MATCH选项，那么命令返回的元素量通常和COUTN选项指定的一样，或者比COUTN选项指定的数量多</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">scan</span> 0 <span class="selector-tag">count</span> 5</span><br><span class="line">1) &quot;2&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:21&quot;</span></span><br><span class="line">   2) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:22&quot;</span></span><br><span class="line">   3) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:1&quot;</span></span><br><span class="line">   4) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:4&quot;</span></span><br><span class="line">   5) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:6&quot;</span></span><br><span class="line">   6) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:8&quot;</span></span><br><span class="line">&gt; <span class="selector-tag">scan</span> 2 <span class="selector-tag">count</span> 5</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:5&quot;</span></span><br><span class="line">   2) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:7&quot;</span></span><br><span class="line">   3) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:119&quot;</span></span><br><span class="line">   4) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:17&quot;</span></span><br><span class="line">   5) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:10&quot;</span></span><br><span class="line">   6) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:2&quot;</span></span><br></pre></td></tr></table></figure><p><strong>MATCH选项</strong></p><p>类似于KEYS命令，让命令只返回匹配的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">scan</span> 0 <span class="selector-tag">match</span> <span class="selector-tag">user</span><span class="selector-pseudo">:7</span></span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:7&quot;</span> </span><br><span class="line">&gt; <span class="selector-tag">scan</span> 3 <span class="selector-tag">match</span> <span class="selector-tag">user</span>:*     /<span class="comment">/*号贪婪匹配</span></span><br><span class="line"><span class="comment">1) &quot;0&quot;</span></span><br><span class="line"><span class="comment">2) 1) &quot;user:15&quot;</span></span><br><span class="line"><span class="comment">   2) &quot;user:9&quot;</span></span><br><span class="line"><span class="comment">   3) &quot;user:12&quot;</span></span><br><span class="line"><span class="comment">   4) &quot;user:3&quot;</span></span><br></pre></td></tr></table></figure><p>MATCH功能对元素的模式匹配工作，是命令从数据集中取出元素后和向客户端返回元素前的这段时间内进行的。所以如果被迭代的数据集中只有少量元素和模式相匹配，那么迭代命令或许会在多次执行中都不返回任何元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">scan</span> 0 <span class="selector-tag">match</span> *12* </span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) (<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br><span class="line">&gt; <span class="selector-tag">scan</span> 3 <span class="selector-tag">match</span> *12* </span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">user</span><span class="selector-pseudo">:12&quot;</span></span><br></pre></td></tr></table></figure><p>这样可能不太清除的知道，我们使用python往Redis里插入10000条数据来进行测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">redis</span></span><br><span class="line"></span><br><span class="line">client = redis.StrictRedis()</span><br><span class="line"><span class="selector-tag">for</span> <span class="selector-tag">i</span> <span class="selector-tag">in</span> <span class="selector-tag">range</span>(10000):</span><br><span class="line">    <span class="selector-tag">client</span><span class="selector-class">.set</span>(&quot;<span class="selector-tag">key</span>%<span class="selector-tag">d</span>&quot; % <span class="selector-tag">i</span>, <span class="selector-tag">i</span>)</span><br></pre></td></tr></table></figure><p>插入之后，Redis有了10000条数据，接下来我们找出以key99开头的key列表。通过match匹配<code>key99*</code>，count统计<code>1000</code>数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">scan</span> 0 <span class="selector-tag">match</span> <span class="selector-tag">key99</span>* <span class="selector-tag">count</span> 1000</span><br><span class="line">1) &quot;6808&quot;</span><br><span class="line">2)  1) &quot;<span class="selector-tag">key9901</span>&quot;</span><br><span class="line">    2) &quot;<span class="selector-tag">key9995</span>&quot;</span><br><span class="line">    3) &quot;<span class="selector-tag">key9930</span>&quot;</span><br><span class="line">    4) &quot;<span class="selector-tag">key9918</span>&quot;</span><br><span class="line">    5) &quot;<span class="selector-tag">key9923</span>&quot;</span><br><span class="line">    6) &quot;<span class="selector-tag">key9978</span>&quot;</span><br><span class="line">    7) &quot;<span class="selector-tag">key9987</span>&quot;</span><br><span class="line">    8) &quot;<span class="selector-tag">key9936</span>&quot;</span><br><span class="line">    9) &quot;<span class="selector-tag">key996</span>&quot;</span><br><span class="line">   10) &quot;<span class="selector-tag">key9956</span>&quot;</span><br><span class="line">   11) &quot;<span class="selector-tag">key9962</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">scan</span> 6808 <span class="selector-tag">match</span> <span class="selector-tag">key99</span>* <span class="selector-tag">count</span> 1000</span><br><span class="line">1) &quot;4940&quot;</span><br><span class="line">2)  1) &quot;<span class="selector-tag">key9980</span>&quot;</span><br><span class="line">    2) &quot;<span class="selector-tag">key9973</span>&quot;</span><br><span class="line">    3) &quot;<span class="selector-tag">key9950</span>&quot;</span><br><span class="line">    4) &quot;<span class="selector-tag">key9969</span>&quot;</span><br><span class="line">    5) &quot;<span class="selector-tag">key991</span>&quot;</span><br><span class="line">    6) &quot;<span class="selector-tag">key9934</span>&quot;</span><br><span class="line">    7) &quot;<span class="selector-tag">key9922</span>&quot;</span><br><span class="line">    8) &quot;<span class="selector-tag">key9951</span>&quot;</span><br><span class="line">    9) &quot;<span class="selector-tag">key9988</span>&quot;</span><br><span class="line">   10) &quot;<span class="selector-tag">key9924</span>&quot;</span><br><span class="line">   11) &quot;<span class="selector-tag">key9989</span>&quot;</span><br><span class="line">   12) &quot;<span class="selector-tag">key9982</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">scan</span> 4904 <span class="selector-tag">match</span> <span class="selector-tag">key99</span>* <span class="selector-tag">count</span> 1000</span><br><span class="line">1) &quot;14452&quot;</span><br><span class="line">2) 1) &quot;<span class="selector-tag">key9962</span>&quot;</span><br><span class="line">   2) &quot;<span class="selector-tag">key9980</span>&quot;</span><br><span class="line">   3) &quot;<span class="selector-tag">key9973</span>&quot;</span><br><span class="line">   4) &quot;<span class="selector-tag">key9950</span>&quot;</span><br><span class="line">   5) &quot;<span class="selector-tag">key9969</span>&quot;</span><br><span class="line">   6) &quot;<span class="selector-tag">key991</span>&quot;</span><br><span class="line">   7) &quot;<span class="selector-tag">key9934</span>&quot;</span><br><span class="line">   8) &quot;<span class="selector-tag">key9922</span>&quot;</span><br><span class="line">.....................</span><br></pre></td></tr></table></figure><p>SCAN提供了是哪个参数，第一个是cursor整数值（初始为0），第二个是key的正则模式（match），第三个是遍历的limit hint（count）。第一次遍历时，cursor值为0，然后将返回结果中第一个整数值作为下一次遍历的cursor，一直遍历到返回的cursor值为0时结束</p><p>上面的过程中可以看出，虽然提供的limit是1000，但是返回的结果却只有10个左右。因为这个limit不是限定返回结果的数量，而是限定服务器单词遍历的字典槽位数量（约等于）。如果将limit设置为10，你会发现返回的结果是空的，但是游标值不为0，意味着遍历还没有结束</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">scan</span> 0 <span class="selector-tag">match</span> <span class="selector-tag">key99</span>* <span class="selector-tag">count</span> 10</span><br><span class="line">1) &quot;8704&quot;</span><br><span class="line">2) (<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br><span class="line">&gt; <span class="selector-tag">scan</span> 8704 <span class="selector-tag">match</span> <span class="selector-tag">key99</span>* <span class="selector-tag">count</span> 10</span><br><span class="line">1) &quot;3584&quot;</span><br><span class="line">2) (<span class="selector-tag">empty</span> <span class="selector-tag">array</span>)</span><br></pre></td></tr></table></figure><h4 id="字典的结构"><a href="#字典的结构" class="headerlink" title="字典的结构"></a>字典的结构</h4><p>在Redis中所有的key都存储在一个很大的字典中。如下图所示，它是一维数组，是二维链表结构。第一维数组的大小总是2^n(n&gt;=0)。扩容一次数组，大小空间加倍，也就是2^n+1</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210430155001069.png"></p><p>scan指令返回的游标就是第一维数组的位置索引，我们将这个位置索引称为槽（slot）。如果不考虑字典的扩容缩容，直接按数组下标一个一个遍历。limit参数就表示需要遍历的槽位数，之所以返回的结果可能多可能少，是因为不是所有的槽位上都会挂接链表，有些槽位可能是空的，还有些槽位上挂接的链表上的元素可能会有多个。每一次遍历都会将limit数量的槽位上挂接的所有链表元素进行模式匹配过滤后，一次性返回给客户端</p><h4 id="SCAN遍历顺序"><a href="#SCAN遍历顺序" class="headerlink" title="SCAN遍历顺序"></a>SCAN遍历顺序</h4><p>scan的遍历顺序，它不是从第一维数组的第0位一直遍历到末尾，而是采用了高位进位加法来遍历。之所以使用这样特殊的方式进行遍历，是考虑到字典的扩容和缩容时避免槽位的遍历重复和遗漏</p><p>如下图，普通加法和高位进位加法的区别</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210430155928566.png"></p><p>从图中可以看出高位进位加法从左边加，进位往右边移动，同普通加法正好相反。但是最终它们都会遍历所有的槽位并且没有重复</p><h2 id="Redis编码模式"><a href="#Redis编码模式" class="headerlink" title="Redis编码模式"></a>Redis编码模式</h2><p>redis是二进制安全的，分两种流：字节流和字符流，redis从socket拿去的数据是字节流，不是字符流，在客户端选择不同的字符集，redis就会根据客户端的字符集进行应用。所以一定要在客户端沟通好使用的数据编码，这样数据才是稳定安全的</p><p>设置一个中文字符，get查看是16进制的，长度是3</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> 中</span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;\<span class="selector-tag">xe4</span>\<span class="selector-tag">xb8</span>\<span class="selector-tag">xad</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">STRLEN</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 3</span><br></pre></td></tr></table></figure><p>这是由我客户端xshell使用的编码模式为定的，为UTF-8</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315172828338.png"></p><p>换成GBK编码模式，测试看看</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210315172922135.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> 中</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">get</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;\<span class="selector-tag">xd6</span>\<span class="selector-tag">xd0</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">STRLEN</span> <span class="selector-tag">k1</span></span><br><span class="line">(<span class="selector-tag">integer</span>) 2</span><br></pre></td></tr></table></figure><p>很明显，编码模式改变之后，字符的数量也改变了，GBK一个中文等于两个字节，UTF8一个中文等于三个字节，redis使用的编码模式，取决于客户端的使用</p><h3 id="embstr-与-raw"><a href="#embstr-与-raw" class="headerlink" title="embstr 与 raw"></a>embstr 与 raw</h3><p>Redis的字符串有两种存储方式，在长度特别短时，使用embstr形式存储（embeded），而当长度超过44字节时，使用raw形式存储</p><p>这两种类型有什么区别呢？为什么分界线是44字节？我们先操作下述的例子看看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> <span class="selector-tag">abcdefghijklnmopqrstuvwxyz012345678901234567</span>     // 44字符串</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">debug</span> <span class="selector-tag">object</span> <span class="selector-tag">k1</span></span><br><span class="line"><span class="selector-tag">Value</span> <span class="selector-tag">at</span><span class="selector-pseudo">:0x7ff7b4545b40</span> <span class="selector-tag">refcount</span><span class="selector-pseudo">:1</span> <span class="selector-tag">encoding</span><span class="selector-pseudo">:embstr</span> <span class="selector-tag">serializedlength</span><span class="selector-pseudo">:45</span> <span class="selector-tag">lru</span><span class="selector-pseudo">:8990472</span> <span class="selector-tag">lru_seconds_idle</span><span class="selector-pseudo">:3</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k2</span> <span class="selector-tag">abcdefghijklnmopqrstuvwxyz0123456789012345678</span>   // 45字符串</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">debug</span> <span class="selector-tag">object</span> <span class="selector-tag">k2</span></span><br><span class="line"><span class="selector-tag">Value</span> <span class="selector-tag">at</span><span class="selector-pseudo">:0x7ff7b447fc20</span> <span class="selector-tag">refcount</span><span class="selector-pseudo">:1</span> <span class="selector-tag">encoding</span><span class="selector-pseudo">:raw</span> <span class="selector-tag">serializedlength</span><span class="selector-pseudo">:46</span> <span class="selector-tag">lru</span><span class="selector-pseudo">:8990505</span> <span class="selector-tag">lru_seconds_idle</span><span class="selector-pseudo">:2</span></span><br></pre></td></tr></table></figure><p>上面debug object输出encoding字段，由一个字符的差别，存储形式就发生了变化</p><p>先看下图，了解Redis对象头的结构，所有的Redis对象都有下面的这个头结构</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210430162905271.png"></p><p>不同的对象具有不同的类型type(4bit)。同一个类型的type会有不同的存储形式encoding（4bit）比如string还会有int存储形式。为了记录记录对象的LRU信息，使用24个bit来记录LRU信息。每个对象有个引用计数（refcount），当引用计数为零时，对象就会被摧毁，内存被收回。ptr指针将指向对象内容（body）的具体存储位置。这一个RedisOBJECT对象头结构需要占据16字节的存储空间</p><p>接着是SDS结构体的大小，在字符串比较小时，SDS对象头结构的大小是capacity+3，至少是3个字节。分配一个字符串的最小空间占用为19（即16+3）字节</p><blockquote><p>PS：SDS是Redis字符串，英文全写为：Simple Dynamic String。它的结构是一个带长度信息的字节数组</p></blockquote><p>embstr存储形式，是将RedisOBJECT对象头结构和SDS对象连续存在一起，使用malloc方法一次分配。而raw存储形式不一样，它需要使用两次malloc方法，两个对象头在内存地址上一般是不连续的。如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210430164547825.png"></p><p>而内存分配中其jemalloc、tcmalloc等分配内存大小的单位都是2/4/8/16/32/64字节等，为了能容纳一个完整的embstr对象，jemalloc最少会分配32字节的空间。如果字符串再稍微长一点，那就是64字节的空间。如果字符串总体超出了64字节，Redis认为它是一个大字符串，不再适合使用emdstr形式存储，而该使用raw形式</p><p>content的长度最多只有45（即64-19）字节。从上面结构图可以看出。而字符串有会以NULL结尾，减去结尾的字节，所以embstr形式最大能容纳的字符串长度就是44字节</p><p>redis的raw格式，当使用APPENG进行追加的使用也会转换成raw格式，这是redis的特性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">set</span> <span class="selector-tag">k1</span> 9</span><br><span class="line"><span class="selector-tag">OK</span></span><br><span class="line">&gt; <span class="selector-tag">OBJECT</span> <span class="selector-tag">encoding</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">int</span>&quot;</span><br><span class="line">&gt; <span class="selector-tag">APPEND</span> <span class="selector-tag">k1</span> 999</span><br><span class="line">(<span class="selector-tag">integer</span>) 4</span><br><span class="line">&gt; <span class="selector-tag">OBJECT</span> <span class="selector-tag">encoding</span> <span class="selector-tag">k1</span></span><br><span class="line">&quot;<span class="selector-tag">raw</span>&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis概述与安装部署-1</title>
      <link href="2021/05/08/Redis%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/"/>
      <url>2021/05/08/Redis%E6%A6%82%E8%BF%B0%E4%B8%8E%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis概述"><a href="#Redis概述" class="headerlink" title="Redis概述"></a>Redis概述</h2><p>Redis由意大利人Salvatore Sanfilippo（网名 Antirez）开发，Redis是互联网技术领域使用最为广泛的存储中间件，它是<code>Re</code>mote <code>Di</code>ctionary <code>S</code>ervice（远程字典服务）的首字母缩写。</p><p>Redis是一种基于键值对的NoSQL数据库，它可以用作数据库、缓存和消息中间件。并支持多种类型数据结构，如：string、hash、list、set和zset等多种数据结构和算法按组成</p><p>Redis会将所有的数据放入内存中，所以它的读写性能非常的快，可以达到秒级10万的请求，除了超高的性能，Redis还会降内存中的数据利用快照和日志的形式保存到磁盘上，保证数据的持久性</p><h3 id="Redis应用场景"><a href="#Redis应用场景" class="headerlink" title="Redis应用场景"></a>Redis应用场景</h3><p>Redis支持多种解决方案，如物联网、电子商务实时计量和社交应用程序等。如常见的用例有</p><ul><li>消息代理</li><li>队列管理</li><li>实时分析</li><li>缓存用户行为历史，过滤恶意行为</li><li>记录帖子各种用户信息（点赞数、评论数和点击数等…）</li><li>排行榜</li><li>…</li></ul><h2 id="Redis安装部署"><a href="#Redis安装部署" class="headerlink" title="Redis安装部署"></a>Redis安装部署</h2><ul><li>Docker安装</li><li>二进制安装</li></ul><h3 id="Docker方式安装"><a href="#Docker方式安装" class="headerlink" title="Docker方式安装"></a>Docker方式安装</h3><p><strong>拉去Redis镜像</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docket pull redis</span><br></pre></td></tr></table></figure><p><strong>运行Redis容器</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docket run --name myredis -d -p6379:6379 redis</span><br></pre></td></tr></table></figure><p><strong>执行容器中的 redis_cli，可以直接使用命令行操作</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it</span><br></pre></td></tr></table></figure><h3 id="二进制编译安装"><a href="#二进制编译安装" class="headerlink" title="二进制编译安装"></a>二进制编译安装</h3><p><strong>目录规划</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /server/soft                                           //各式软件存放的目录</span><br><span class="line">$ /opt/redis_cluster/redis_&#123;PORT&#125;/&#123;conf,logs,pid&#125;        //redis安装目录</span><br><span class="line">$ /data/redis_cluster/redis_&#123;PORT&#125;/redis_&#123;PORT&#125;.rdb      //redis数据目录</span><br></pre></td></tr></table></figure><p><strong>创建目录</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /server/soft</span><br><span class="line">$ mkdir -p /opt/redis_cluster/redis_6379/&#123;conf,logs,pid&#125;</span><br><span class="line">$ mkdir -p /data/redis_cluster/redis_6379</span><br></pre></td></tr></table></figure><p><strong>下载并解压redis包到路径</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /server/soft</span><br><span class="line">$ wget http://download.redis.io/releases/redis-6.0.7.tar.gz</span><br><span class="line">$ tar xf redis-6.0.6.tar.gz -C /opt/redis_cluster/</span><br></pre></td></tr></table></figure><p><strong>对解压的包做软连接（可选）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /opt/redis_cluster/redis-6.0.7/ /opt/redis_cluster/redis</span><br><span class="line">$ ll /opt/redis_cluster</span><br><span class="line"><span class="selector-tag">lrwxrwxrwx</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>   12 <span class="selector-tag">Oct</span>  3 16<span class="selector-pseudo">:40</span> <span class="selector-tag">redis</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">redis-6</span>.0.7/</span><br></pre></td></tr></table></figure><p><strong>安装编译需要的软件包，然后进行编译</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install –y gcc gcc-c++ make -y</span><br><span class="line">$ cd /opt/redis_cluster/redis</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><p>如果CentOS出现以下问题，请先检查gcc的版本是否低于5，如果是请先升级，可以使用以下命令（这种问题一般出现在Centos7，或是以上的版本）：</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210312114331583.png"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum install centos-release-scl</span><br><span class="line">$ yum install devtoolset-7-gcc*</span><br><span class="line">$ scl enable devtoolset-7 bash</span><br><span class="line">$ make distclean &amp;&amp; make             //distclean是清除上述make执行的缓存</span><br></pre></td></tr></table></figure><p><strong>make install安装</strong></p><p>默认使用make install，它自动安装到/usr/local/bin，安装之后，可以直接在任何位置上调用redis的命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make install</span><br><span class="line">$ which redis-cli</span><br><span class="line">/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">redis-cli</span></span><br></pre></td></tr></table></figure><p>也可以自定义二进制命令安装，但是需要自己配置环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ make install PREFIX=/opt/redis-6379/</span><br><span class="line">$ cd /opt/redis-6379/bin</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 4794752 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-benchmark</span></span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 9033544 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-check-aof</span></span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 9033544 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-check-rdb</span></span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 5044496 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-cli</span></span><br><span class="line"><span class="selector-tag">lrwxrwxrwx</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>      12 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-sentinel</span> <span class="selector-tag">-</span>&gt; <span class="selector-tag">redis-server</span></span><br><span class="line"><span class="selector-tag">-rwxr-xr-x</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 9033544 <span class="selector-tag">Mar</span> 12 11<span class="selector-pseudo">:50</span> <span class="selector-tag">redis-server</span></span><br><span class="line"></span><br><span class="line">$ vi /etc/profile</span><br><span class="line">export REDIS_HOME=/opt/redis-6/</span><br><span class="line">export PAHT=$PAHT:REDIS_HOME/bin</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><h3 id="通过redis自带的脚本安装生产环境"><a href="#通过redis自带的脚本安装生产环境" class="headerlink" title="通过redis自带的脚本安装生产环境"></a>通过redis自带的脚本安装生产环境</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/redis_cluster/redis/utils/</span><br><span class="line">$ ./install_server.sh </span><br><span class="line"><span class="selector-tag">Welcome</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">service</span> <span class="selector-tag">installer</span></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">script</span> <span class="selector-tag">will</span> <span class="selector-tag">help</span> <span class="selector-tag">you</span> <span class="selector-tag">easily</span> <span class="selector-tag">set</span> <span class="selector-tag">up</span> <span class="selector-tag">a</span> <span class="selector-tag">running</span> <span class="selector-tag">redis</span> <span class="selector-tag">server</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">systems</span> <span class="selector-tag">seems</span> <span class="selector-tag">to</span> <span class="selector-tag">use</span> <span class="selector-tag">systemd</span>.</span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">take</span> <span class="selector-tag">a</span> <span class="selector-tag">look</span> <span class="selector-tag">at</span> <span class="selector-tag">the</span> <span class="selector-tag">provided</span> <span class="selector-tag">example</span> <span class="selector-tag">service</span> <span class="selector-tag">unit</span> <span class="selector-tag">files</span> <span class="selector-tag">in</span> <span class="selector-tag">this</span> <span class="selector-tag">directory</span>, <span class="selector-tag">and</span> <span class="selector-tag">adapt</span> <span class="selector-tag">and</span> <span class="selector-tag">install</span> <span class="selector-tag">them</span>. <span class="selector-tag">Sorry</span>!</span><br></pre></td></tr></table></figure><p>执行脚本之后，会出现以上错误。我们需要修改脚本，注释一些代码。因为是使用centos7版本，启动是使用systemd，所以不能执行，只能将代码注释（如果是Centos6就没有这种问题）。操作如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim install_server.sh </span><br><span class="line"><span class="selector-id">#bail</span> <span class="selector-tag">if</span> <span class="selector-tag">this</span> <span class="selector-tag">system</span> <span class="selector-tag">is</span> <span class="selector-tag">managed</span> <span class="selector-tag">by</span> <span class="selector-tag">systemd</span></span><br><span class="line">#_pid_1_exe=&quot;$(readlink -f /proc/1/exe)&quot;</span><br><span class="line"><span class="selector-id">#if</span> <span class="selector-attr">[ <span class="string">&quot;$&#123;_pid_1_exe##*/&#125;&quot;</span> = systemd ]</span></span><br><span class="line"><span class="selector-id">#then</span></span><br><span class="line">#       <span class="selector-tag">echo</span> &quot;<span class="selector-tag">This</span> <span class="selector-tag">systems</span> <span class="selector-tag">seems</span> <span class="selector-tag">to</span> <span class="selector-tag">use</span> <span class="selector-tag">systemd</span>.&quot;</span><br><span class="line">#       <span class="selector-tag">echo</span> &quot;<span class="selector-tag">Please</span> <span class="selector-tag">take</span> <span class="selector-tag">a</span> <span class="selector-tag">look</span> <span class="selector-tag">at</span> <span class="selector-tag">the</span> <span class="selector-tag">provided</span> <span class="selector-tag">example</span> <span class="selector-tag">service</span> <span class="selector-tag">unit</span> <span class="selector-tag">files</span> <span class="selector-tag">in</span> <span class="selector-tag">this</span> <span class="selector-tag">directory</span>, <span class="selector-tag">and</span> <span class="selector-tag">adapt</span> <span class="selector-tag">and</span> <span class="selector-tag">install</span> <span class="selector-tag">them</span>. <span class="selector-tag">Sorry</span>!&quot;</span><br><span class="line">#       <span class="selector-tag">exit</span> 1</span><br><span class="line"><span class="selector-id">#fi</span></span><br><span class="line"><span class="selector-id">#unset</span> _<span class="selector-tag">pid_1_exe</span></span><br></pre></td></tr></table></figure><p>执行脚本，一个物理机可以有多个redis实例（进程），通过port区分，可以使用./install_server.sh脚本做出更多的redis节点。如6380,6381等等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ ./install_server.sh </span><br><span class="line"><span class="selector-tag">Welcome</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">service</span> <span class="selector-tag">installer</span></span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">script</span> <span class="selector-tag">will</span> <span class="selector-tag">help</span> <span class="selector-tag">you</span> <span class="selector-tag">easily</span> <span class="selector-tag">set</span> <span class="selector-tag">up</span> <span class="selector-tag">a</span> <span class="selector-tag">running</span> <span class="selector-tag">redis</span> <span class="selector-tag">server</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">select</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">port</span> <span class="selector-tag">for</span> <span class="selector-tag">this</span> <span class="selector-tag">instance</span>: <span class="selector-attr">[6379]</span> //选择的端口号</span><br><span class="line"><span class="selector-tag">Selecting</span> <span class="selector-tag">default</span>: 6379</span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">select</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">config</span> <span class="selector-tag">file</span> <span class="selector-tag">name</span> <span class="selector-attr">[/etc/redis/6379.conf]</span> /<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">conf</span>/<span class="selector-tag">redis</span>.6379<span class="selector-class">.conf</span></span><br><span class="line">//选择配置文件路径，可自行定制</span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">select</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">log</span> <span class="selector-tag">file</span> <span class="selector-tag">name</span> <span class="selector-attr">[/var/log/redis_6379.log]</span> /<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">log</span>/<span class="selector-tag">redis_6379</span><span class="selector-class">.log</span></span><br><span class="line">//<span class="selector-tag">redis</span>日志路径，可自行定制</span><br><span class="line"><span class="selector-tag">Selected</span> <span class="selector-tag">default</span> <span class="selector-tag">-</span> /<span class="selector-tag">var</span>/<span class="selector-tag">log</span>/<span class="selector-tag">redis_6379</span><span class="selector-class">.log</span></span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">select</span> <span class="selector-tag">the</span> <span class="selector-tag">data</span> <span class="selector-tag">directory</span> <span class="selector-tag">for</span> <span class="selector-tag">this</span> <span class="selector-tag">instance</span> <span class="selector-attr">[/var/lib/redis/6379]</span> /<span class="selector-tag">data</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis_6379</span></span><br><span class="line">//<span class="selector-tag">redis</span>数据路径（持久化作用）</span><br><span class="line"><span class="selector-tag">Please</span> <span class="selector-tag">select</span> <span class="selector-tag">the</span> <span class="selector-tag">redis</span> <span class="selector-tag">executable</span> <span class="selector-tag">path</span> <span class="selector-attr">[/usr/local/bin/redis-server]</span> </span><br><span class="line"><span class="selector-tag">Selected</span> <span class="selector-tag">config</span>:</span><br><span class="line"><span class="selector-tag">Port</span>           : 6379</span><br><span class="line"><span class="selector-tag">Config</span> <span class="selector-tag">file</span>    : /<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">conf</span>/<span class="selector-tag">redis</span>.6379<span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">Log</span> <span class="selector-tag">file</span>       : /<span class="selector-tag">opt</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis</span>/<span class="selector-tag">log</span>/<span class="selector-tag">redis_6379</span><span class="selector-class">.log</span></span><br><span class="line"><span class="selector-tag">Data</span> <span class="selector-tag">dir</span>       : /<span class="selector-tag">data</span>/<span class="selector-tag">redis_cluster</span>/<span class="selector-tag">redis_6379</span></span><br><span class="line"><span class="selector-tag">Executable</span>     : /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">redis-server</span></span><br><span class="line"><span class="selector-tag">Cli</span> <span class="selector-tag">Executable</span> : /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">redis-cli</span></span><br><span class="line"><span class="selector-tag">Is</span> <span class="selector-tag">this</span> <span class="selector-tag">ok</span>? <span class="selector-tag">Then</span> <span class="selector-tag">press</span> <span class="selector-tag">ENTER</span> <span class="selector-tag">to</span> <span class="selector-tag">go</span> <span class="selector-tag">on</span> <span class="selector-tag">or</span> <span class="selector-tag">Ctrl-C</span> <span class="selector-tag">to</span> <span class="selector-tag">abort</span>.</span><br><span class="line">Copied /tmp/6379.conf =&gt; /etc/init.d/redis_6379</span><br><span class="line"><span class="selector-tag">Installing</span> <span class="selector-tag">service</span>...</span><br><span class="line"><span class="selector-tag">Successfully</span> <span class="selector-tag">added</span> <span class="selector-tag">to</span> <span class="selector-tag">chkconfig</span>!</span><br><span class="line"><span class="selector-tag">Successfully</span> <span class="selector-tag">added</span> <span class="selector-tag">to</span> <span class="selector-tag">runlevels</span> 345!</span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">Redis</span> <span class="selector-tag">server</span>...</span><br><span class="line"><span class="selector-tag">Installation</span> <span class="selector-tag">successful</span>!</span><br></pre></td></tr></table></figure><p>执行完脚本之后，脚本会自行开启redis，可以使用此方法启动和关闭</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="selector-tag">etc</span>/<span class="selector-tag">init</span><span class="selector-class">.d</span>/<span class="selector-tag">redis_6379</span> <span class="selector-tag">start</span></span><br><span class="line">/<span class="selector-tag">etc</span>/<span class="selector-tag">init</span><span class="selector-class">.d</span>/<span class="selector-tag">redis_6379</span> <span class="selector-tag">stop</span></span><br></pre></td></tr></table></figure><p>测试登录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span><br><span class="line">$ redis-cli</span><br><span class="line">$ 127.0.0.1:6379&gt; </span><br><span class="line">$ 127.0.0.1:6379&gt; quit</span><br></pre></td></tr></table></figure><h3 id="启动与关闭服务"><a href="#启动与关闭服务" class="headerlink" title="启动与关闭服务"></a>启动与关闭服务</h3><p><strong>启动服务</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/redis start</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">$ redis-server /opt/redis_cluster/redis_6379/conf/redis_6379.conf</span><br></pre></td></tr></table></figure><p><strong>查看进程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep redis</span><br><span class="line"><span class="selector-tag">root</span>       2379      1  0 22<span class="selector-pseudo">:13</span> ?        00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span> <span class="selector-tag">redis-server</span> 10.0.0.55<span class="selector-pseudo">:6379</span></span><br></pre></td></tr></table></figure><p><strong>关闭redis</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/redis stop</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">$ redis-cli -h 10.0.0.40 shutdown</span><br></pre></td></tr></table></figure><p><strong>连接服务</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli -h 10.0.0.40</span><br><span class="line">10.0.0.40<span class="selector-pseudo">:6379</span>&gt; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-admin(web管理界面编辑器)</title>
      <link href="2021/04/29/hexo-admin-web%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%89/"/>
      <url>2021/04/29/hexo-admin-web%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo-admin"></a>hexo-admin</h1><h2 id="hexo-admin介绍"><a href="#hexo-admin介绍" class="headerlink" title="hexo-admin介绍"></a>hexo-admin介绍</h2><p>hexo-admin是博客引擎的管理界面，基于Ghost界面。通过它可以实时来编写文章，在关闭浏览器或是刷新等其他操作过程中，是不会丢失数据的。</p><p>有了管理界面，就不需要在使用VIM进行编辑。当然有些人可能是和之前一样是通过Typora或其他基于Markdown的软件进行编写，然后部署到GitHub中，这确实就不太需要web管理界面的功能。</p><p>前提你使用的系统是宿主机（即本机，如：windows或ubuntu），而不是使用虚拟机或是购买的服务器。由于我使用的是自己购买的服务器（基于Linux），所以在编写过程中是编写完，然后再通过本地上传到服务器，如果中途有文章有出错的地方，就需要vim修改或者是本地修改再上传到服务器。操作频繁话，花费的还是自己时间。所以为了节省繁琐的修改，我找寻通过hexo-admin来进行管理</p><h2 id="hexo-admin部署"><a href="#hexo-admin部署" class="headerlink" title="hexo-admin部署"></a>hexo-admin部署</h2><p>hexo-admin下载：[github][<a href="https://github.com/jaredly/hexo-admin]">https://github.com/jaredly/hexo-admin]</a></p><p><strong>快速安装</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog</span><br><span class="line">$ npm install --save hexo-admin</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p><strong>安装之后，通过<a href="http://localhost:4000/admin/%E8%AE%BF%E9%97%AE%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2">http://localhost:4000/admin/访问管理界面</a></strong></p><p><img src="/images/hexo-0.png"></p><h3 id="添加管理界面的登录用户和密码"><a href="#添加管理界面的登录用户和密码" class="headerlink" title="添加管理界面的登录用户和密码"></a>添加管理界面的登录用户和密码</h3><p><strong>添加账号和密码登录</strong></p><p><img src="/images/hexo-1.png"></p><p><img src="/images/hexo-2.png"></p><ul><li>用户账号：可以随意起名</li><li>用户密码：需要通过bcrypt hash（必须是这个加密方式）</li><li>cookie加密：保护本地存储安全</li></ul><blockquote><p>PS：用户密码：可以通过在线bcrypt生成：<a href="http://www.ab126.com/goju/10822.html%EF%BC%8C%E5%BD%93%E7%84%B6%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87python%E6%88%96%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8bcrypt%E6%A8%A1%E5%9D%97%EF%BC%8C%E7%94%9F%E6%88%90%E5%AF%86%E9%92%A5">http://www.ab126.com/goju/10822.html，当然你也可以通过python或其他语言调用bcrypt模块，生成密钥</a></p><p>PS：cookie加密：可以通过openssl rand -base64 30生成密钥</p></blockquote><p><strong>将账号密码添加到_config.yml配置文件</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">hexo-admin</span> <span class="selector-tag">authentification</span></span><br><span class="line"><span class="selector-tag">admin</span>:</span><br><span class="line">  <span class="selector-tag">username</span>: <span class="selector-tag">wu</span></span><br><span class="line">  password_hash: $2a$10$r4oeyDky6DjYXpGXodKyGe7UUV2Q/e.ci/m1TGdN.8dA2lJrkmNoC</span><br><span class="line">  <span class="selector-tag">secret</span>: <span class="selector-tag">qy1sdPwu6wsGSJGz8</span>+123<span class="selector-tag">EY5JonoVZz8Pm</span></span><br></pre></td></tr></table></figure><p><strong>添加完整之后进行认证</strong></p><p><img src="/images/hexo-3.png"></p><h3 id="添加管理页面自动deploy部署"><a href="#添加管理页面自动deploy部署" class="headerlink" title="添加管理页面自动deploy部署"></a>添加管理页面自动deploy部署</h3><p>hexo-admin有Deploy部署的页面，可以通过自己设置的脚本，在编写完之后通过点击”Deploy”完成自动部署</p><p>参考来源：<a href="https://github.com/jaredly/hexo-admin/issues/70">https://github.com/jaredly/hexo-admin/issues/70</a></p><p><img src="/images/hexo-5.png"></p><p><strong>创建脚本，添加指令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ touch hexo-deploy.sh; chmod u+x hexo-deploy.sh</span><br><span class="line">$ vim deploy.sh</span><br><span class="line">#!/<span class="selector-tag">usr</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">env</span> <span class="selector-tag">sh</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hexo</span> <span class="selector-tag">g</span> <span class="selector-tag">-d</span></span><br></pre></td></tr></table></figure><p><strong>在_config.yml添加配置脚本的位置（脚本路径要写对，否则部署不能成功）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">hexo-admin</span> <span class="selector-tag">authentification</span></span><br><span class="line"><span class="selector-tag">admin</span>:</span><br><span class="line">  deployCommand: &#x27;/blog/hexo-deploy.sh&#x27;</span><br></pre></td></tr></table></figure><p><strong>点击”Deploy”，查看结果</strong></p><p><img src="/images/hexo-7.png"></p><h3 id="hexo-admin其他功能"><a href="#hexo-admin其他功能" class="headerlink" title="hexo-admin其他功能"></a>hexo-admin其他功能</h3><p>hexo-admin有图片保存的位置，根据自己写的路径，它会在source进行创建。如：图片存储的路径/images，那么它的位置就在source/images</p><blockquote><p>PS: 如果不想将图片保存在本地，想上传在七牛云，可参考另外一个管理界面：<a href="https://github.com/xbotao/hexo-admin-qiniu">https://github.com/xbotao/hexo-admin-qiniu</a></p></blockquote><p><img src="/images/hexo-6.png"></p><p>hexo-admin还有自定义发布元数据，使用前在_config.yml添加参数，如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">metadata</span>:</span><br><span class="line">  <span class="selector-tag">author_id</span>: <span class="selector-tag">defaultAuthorId</span></span><br><span class="line">  <span class="selector-tag">language</span>:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎-5</title>
      <link href="2021/03/02/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-5/"/>
      <url>2021/03/02/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-5/</url>
      
        <content type="html"><![CDATA[<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><h2 id="存储引擎介绍"><a href="#存储引擎介绍" class="headerlink" title="存储引擎介绍"></a>存储引擎介绍</h2><p>存储引擎相当于Linux文件系统，只不过比文件系统强大，存储引擎是MySQL核心组件之一，在MySQL中是以插件的形式来提供的，InnoDB是MySQL最流行的存储引擎，XtraDB是Percona分支的默认存储引擎，可以理解是InnoDB的定制透明版本，TokuDB适合密集型写入的存储引擎，压缩比较高。我们可以在不同的业务场景下选择合适的存储引擎</p><p><strong>查看MySQL支持的存储引擎</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">engines</span>;</span><br><span class="line">+<span class="selector-tag">--------------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |</span><br><span class="line">| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |</span><br><span class="line">| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |</span><br><span class="line">| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |</span><br><span class="line">| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |</span><br><span class="line">| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |</span><br><span class="line">| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |</span><br><span class="line">| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |</span><br><span class="line">| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+<span class="selector-tag">--------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------------</span>+</span><br></pre></td></tr></table></figure><p><strong>查看MySQL默认使用的存储引擎</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@default_storage_engine</span>;</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| @@default_storage_engine |</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| InnoDB                   |</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br></pre></td></tr></table></figure><p><strong>查看world库中所有表使用的存储引擎</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT table_schema,table_name,ENGINE FROM information_schema.tables WHERE table_schema IN (&#x27;world&#x27;);</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">--------</span>+</span><br><span class="line">| table_schema | table_name      | ENGINE |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">--------</span>+</span><br><span class="line">| world        | city            | InnoDB |</span><br><span class="line">| world        | country         | InnoDB |</span><br><span class="line">| world        | countrylanguage | InnoDB |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">--------</span>+</span><br></pre></td></tr></table></figure><p><strong>配置MySQL使用的存储引擎</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">default_storage_engine=InnoDB</span><br></pre></td></tr></table></figure><h2 id="InnoDB体系结构"><a href="#InnoDB体系结构" class="headerlink" title="InnoDB体系结构"></a>InnoDB体系结构</h2><p>下图分三个部分，上面的是缓存层，中间是线程层，下面是系统文件层。在每个层里面又会不断地细分，在MySQL里面存储的单位是页，大小是16K，缓存层包含buffer和cache，其中buffer对应缓存修改的数据（比如insert buffer）。cache对应缓存读取的舒适（比如page cache），通过缓存可以提高MySQL读写数据的效率</p><p>系统文件层是相应的<strong>数据字典、数据文件和日志文件</strong>，其中binlog是MySQL Server层</p><p>多线程设计是InnoDB的一大亮点，通过多线程的方式可以把缓存层与系统文件层的操作高效组织起来，使得Innodb可以提供完整的数据服务</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210301113303766.png"></p><h2 id="查看InnoDB状态的技巧"><a href="#查看InnoDB状态的技巧" class="headerlink" title="查看InnoDB状态的技巧"></a>查看InnoDB状态的技巧</h2><p>MySQL中如果要查看InnoDB的状态，推荐的方式是使用命令<code>show engine innodb status</code>.</p><p>头部内容信息显示当前的日期和时间，以及自上次输出依赖经过的时长，从时间和描述可看到这个命令的输出不是实时的结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">engine</span> <span class="selector-tag">innodb</span> <span class="selector-tag">status</span>\<span class="selector-tag">G</span>:</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">  <span class="selector-tag">Type</span>: <span class="selector-tag">InnoDB</span></span><br><span class="line">  <span class="selector-tag">Name</span>: </span><br><span class="line"><span class="selector-tag">Status</span>: </span><br><span class="line">=====================================</span><br><span class="line">2021<span class="selector-tag">-02-18</span> 22<span class="selector-pseudo">:30</span><span class="selector-pseudo">:51</span> 0<span class="selector-tag">x7fe3880f4700</span> <span class="selector-tag">INNODB</span> <span class="selector-tag">MONITOR</span> <span class="selector-tag">OUTPUT</span></span><br><span class="line">=====================================</span><br><span class="line"><span class="selector-tag">Per</span> <span class="selector-tag">second</span> <span class="selector-tag">averages</span> <span class="selector-tag">calculated</span> <span class="selector-tag">from</span> <span class="selector-tag">the</span> <span class="selector-tag">last</span> 5 <span class="selector-tag">seconds</span></span><br></pre></td></tr></table></figure><h3 id="如何查看show-engine-innodb-status保留下的内容"><a href="#如何查看show-engine-innodb-status保留下的内容" class="headerlink" title="如何查看show engine innodb status保留下的内容"></a>如何查看show engine innodb status保留下的内容</h3><p><strong>1. 首先查看mysqld的进程号</strong></p><p>可以看到要找的进程号是：9315</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ps -ef|grep mysqld|grep -v grep</span><br><span class="line">mysql      2846      1  0 Feb16 ?        00:03:04 /application/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span><br><span class="line">mysql      2880      1  0 Feb16 ?        00:03:14 /application/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span><br><span class="line">mysql      2914      1  0 Feb16 ?        00:03:12 /application/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span><br><span class="line">root       9138      1  0 01:46 ?        00:00:00 /bin/sh /application/mysql/bin/mysqld_safe --datadir=/data/mysql/data --pid-file=/data/mysql/data/mysql.pid</span><br><span class="line">mysql      9315   9138  0 01:46 ?        00:02:00 /application/mysql/bin/mysqld --basedir=/application/mysql --datadir=/data/mysql/data --plugin-dir=/application/mysql/lib/plugin --user=mysql --log-error=mysql.err --pid-file=/data/mysql/data/mysql.pid --socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure><p><strong>2. 在操作系统层面查看上述MySQL的句柄，显示如下</strong></p><p>但是这么多文件，无法判定那个文件是要我们找的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$  ll /proc/9315/fd|grep deleted</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 12 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibC9Z4PI</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 27 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">test</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 28 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">test1</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 29 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">binlog</span>/<span class="selector-tag">t1</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 5 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibRoyuZC</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 6 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibdDJsjf</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 7 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibkyUxDR</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 8 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibIk2Dm6</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 90 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">pp</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">lrwx------</span>. 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 64 <span class="selector-tag">Feb</span> 18 22<span class="selector-pseudo">:25</span> 91 <span class="selector-tag">-</span>&gt; /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">t100</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br></pre></td></tr></table></figure><p><strong>3. 可以根据lsof命令来输出句柄信息，显示如下</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -c mysqld|grep deleted</span><br><span class="line"><span class="selector-tag">mysqld</span>    2914 <span class="selector-tag">mysql</span>   12<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0         0 17215061 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibYlTgqJ</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld_sa</span> 9138  <span class="selector-tag">root</span>    2<span class="selector-tag">u</span>   <span class="selector-tag">CHR</span>              136,3       0<span class="selector-tag">t0</span>        6 /<span class="selector-tag">dev</span>/<span class="selector-tag">pts</span>/3 (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>    5<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0      4363 16777294 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibRoyuZC</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>    6<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0        97 16778321 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibdDJsjf</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>    7<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0         0 16785261 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibkyUxDR</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>    8<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0         0 17458882 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibIk2Dm6</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   12<span class="selector-tag">u</span>   <span class="selector-tag">REG</span>              253,0         0 17458885 /<span class="selector-tag">tmp</span>/<span class="selector-tag">ibC9Z4PI</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   27<span class="selector-tag">uW</span>  <span class="selector-tag">REG</span>               8,16     98304  8416762 /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">test</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   28<span class="selector-tag">uW</span>  <span class="selector-tag">REG</span>               8,16     98304  8416764 /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">test1</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   29<span class="selector-tag">uW</span>  <span class="selector-tag">REG</span>               8,16     98304  8416768 /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">binlog</span>/<span class="selector-tag">t1</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   90<span class="selector-tag">uW</span>  <span class="selector-tag">REG</span>               8,16     98304  8416760 /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">pp</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br><span class="line"><span class="selector-tag">mysqld</span>    9315 <span class="selector-tag">mysql</span>   91<span class="selector-tag">uW</span>  <span class="selector-tag">REG</span>               8,16  79691776  8416757 /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">world</span>/<span class="selector-tag">t100</span><span class="selector-class">.ibd</span> (<span class="selector-tag">deleted</span>)</span><br></pre></td></tr></table></figure><blockquote><p>PS：如果没有该命令，则使用该命令下载：yum install -y lsof</p></blockquote><p>需要注意第7列，可以看到只有两个是有数据的，分别查看一下就得到show engine innodb status的输出结果，即文件/tmp/ibRoyuZC，而映射的是5号文件</p><p><strong>4. 查看5号文件，得到信息</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">proc</span>/9315/<span class="selector-tag">fd</span></span><br><span class="line">$ cat 5</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line">2021<span class="selector-tag">-02-18</span> 22<span class="selector-pseudo">:30</span><span class="selector-pseudo">:51</span> 0<span class="selector-tag">x7fe3880f4700</span> <span class="selector-tag">INNODB</span> <span class="selector-tag">MONITOR</span> <span class="selector-tag">OUTPUT</span></span><br><span class="line">=====================================</span><br><span class="line"><span class="selector-tag">Per</span> <span class="selector-tag">second</span> <span class="selector-tag">averages</span> <span class="selector-tag">calculated</span> <span class="selector-tag">from</span> <span class="selector-tag">the</span> <span class="selector-tag">last</span> 5 <span class="selector-tag">seconds</span></span><br></pre></td></tr></table></figure><h2 id="InnoDB的多线程技术"><a href="#InnoDB的多线程技术" class="headerlink" title="InnoDB的多线程技术"></a>InnoDB的多线程技术</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210301123223470.png" alt="."></p><p>InnoDB的线程主要分为4类：Master Thread、IO Thread、Purge Thread和Page Cleaner Thread</p><p>Master Thread是InnoDB的核心线程，早期的很多事情都是由它来做，算是一个全栈线程。自MySQL 5.5版开始引入了purge thread，将purge任务从master中独立出来，到MySQL 5.6.2版开始引入了Page cleaner thread</p><table><thead><tr><th>线程</th><th>功能描述</th><th>相关数据库参数</th></tr></thead><tbody><tr><td>Master Thread</td><td>是核心的后台线程，主要负责异步刷新和数据一致性处理</td><td></td></tr><tr><td>IO Thread</td><td>使用了异步IO模型，负责处理不同类型的IO请求回调</td><td>innodb_read_io_threads、innodb_write_io_threads</td></tr><tr><td>Purge Thread</td><td>事务提交后回收已经使用并分配的undo页，线程数从1提高到4，加快标记为废弃undo页的回收速度</td><td>innodb_purge_threads</td></tr><tr><td>Page Cleaner Thread</td><td>执行buffer pool里面脏页刷新操作，可以进行调整，默认为1，最大为64</td><td>innodb_page_cleaners</td></tr></tbody></table><p>其中Master Thread在输出如下：测试环境下，没有什么负载，其中srv_master_thread loops是Master线程的循环次数，每次循环时会选择一种状态（atcive、shutdown、idle）执行，其中Active数量增加与数据变化有关，与查询无关，可以通过srv_active和srv_idle的差异看出</p><p>通过对比active和idle的值，来获取系统整体负载情况，如果Active的值越大，证明服务越繁忙。这里是测试环境，所以idle多余active</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">BACKGROUND</span> <span class="selector-tag">THREAD</span></span><br><span class="line"><span class="selector-tag">-----------------</span></span><br><span class="line"><span class="selector-tag">srv_master_thread</span> <span class="selector-tag">loops</span>: 70 <span class="selector-tag">srv_active</span>, 0 <span class="selector-tag">srv_shutdown</span>, 75924 <span class="selector-tag">srv_idle</span></span><br><span class="line"><span class="selector-tag">srv_master_thread</span> <span class="selector-tag">log</span> <span class="selector-tag">flush</span> <span class="selector-tag">and</span> <span class="selector-tag">writes</span>: 75994</span><br></pre></td></tr></table></figure><p>IO thread都是异步请求，其中read thread默认为4个，write thread默认为4个，log thread和insert buffer thread各1个，read和write都可以通过上述表格参数调整</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">--------</span></span><br><span class="line"><span class="selector-tag">FILE</span> <span class="selector-tag">I</span>/<span class="selector-tag">O</span></span><br><span class="line"><span class="selector-tag">--------</span></span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 0 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">insert</span> <span class="selector-tag">buffer</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 1 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">log</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 2 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">read</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 3 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">read</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 4 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">read</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 5 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">read</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 6 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">write</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 7 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">write</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 8 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">write</span> <span class="selector-tag">thread</span>)</span><br><span class="line"><span class="selector-tag">I</span>/<span class="selector-tag">O</span> <span class="selector-tag">thread</span> 9 <span class="selector-tag">state</span>: <span class="selector-tag">waiting</span> <span class="selector-tag">for</span> <span class="selector-tag">completed</span> <span class="selector-tag">aio</span> <span class="selector-tag">requests</span> (<span class="selector-tag">write</span> <span class="selector-tag">thread</span>)</span><br></pre></td></tr></table></figure><p>Purge thread默认会开启4个线程，提高回收效率，但是也会带来一些副作用，MySQL如果执行了truncate和drop操作，因为开启了多个purge thread去回收空间，随着时间的推移会使得数据恢复难打加大</p><p>Page Cleaner thread默认值为1，如果在MySQL日志中看到如下的信息，说明我们需要调整一下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2019 <span class="selector-tag">-</span> 02 <span class="selector-tag">-</span> 14<span class="selector-tag">T23</span> : 50 : 00 . 501209<span class="selector-tag">Z</span> 0 <span class="selector-attr">[Note]</span> <span class="selector-tag">InnoDB</span>: <span class="selector-tag">page_cleaner</span> : 1<span class="selector-tag">OOOms</span> <span class="selector-tag">intended</span></span><br><span class="line">loop took 28469710ms . The settings m工ght not be optimal . (flushed=O and</span><br><span class="line">evicted=O , during the time.)</span><br></pre></td></tr></table></figure><h2 id="InnoDB的缓存池管理技术"><a href="#InnoDB的缓存池管理技术" class="headerlink" title="InnoDB的缓存池管理技术"></a>InnoDB的缓存池管理技术</h2><p>Buffer的本意是缓冲，cache是缓存，计算机术语里面有buffer cache和page cache，与数据库的含义是相似的</p><p>计算机领域汇总处理磁盘IO读写时候，基于CPU、Memory和Disk，如图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210301133510778.png"></p><p>page cache是文件系统层面的缓存，数据库层面最直观就是首次查询数据的时候会慢一些，之后就会使用缓存会快速很多，整个过程是把磁盘里的数据里的一部分数据加载到缓存中</p><p>buffer cache，是在写入磁盘时给与的缓冲，加快写入，是一个异步过程，而且为了防止断电丢失数据库，会按照一定的策略把数据刷新到磁盘</p><p>理解MySQL里面的缓存池管理，使用show engine innodb status看一下缓冲池和内存输出内容，通过关键字“BUFFER POOL AND MEMORY”找到该位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">----------------------</span></span><br><span class="line"><span class="selector-tag">BUFFER</span> <span class="selector-tag">POOL</span> <span class="selector-tag">AND</span> <span class="selector-tag">MEMORY</span></span><br><span class="line"><span class="selector-tag">----------------------</span></span><br><span class="line"><span class="selector-tag">Total</span> <span class="selector-tag">large</span> <span class="selector-tag">memory</span> <span class="selector-tag">allocated</span> 137428992              //由<span class="selector-tag">innodb</span>分配的总内存为12<span class="selector-tag">G</span></span><br><span class="line"><span class="selector-tag">Dictionary</span> <span class="selector-tag">memory</span> <span class="selector-tag">allocated</span> 221523                  //由<span class="selector-tag">innodb</span>分配的字典内容</span><br><span class="line"><span class="selector-tag">Buffer</span> <span class="selector-tag">pool</span> <span class="selector-tag">size</span>   8191                             //缓冲池分配的页数</span><br><span class="line"><span class="selector-tag">Free</span> <span class="selector-tag">buffers</span>       1455                             //缓冲空闲页数</span><br><span class="line"><span class="selector-tag">Database</span> <span class="selector-tag">pages</span>     6736                             //<span class="selector-tag">LRU</span>列表中分配的数据页数，包含<span class="selector-tag">young</span> <span class="selector-tag">sublist</span>和<span class="selector-tag">old</span> <span class="selector-tag">sublist</span></span><br><span class="line"><span class="selector-tag">Old</span> <span class="selector-tag">database</span> <span class="selector-tag">pages</span> 2500                             //<span class="selector-tag">LRU</span>中的<span class="selector-tag">old</span> <span class="selector-tag">sublist</span>部分页的数量</span><br><span class="line"><span class="selector-tag">Modified</span> <span class="selector-tag">db</span> <span class="selector-tag">pages</span>  0                                //脏页的数量</span><br><span class="line"><span class="selector-tag">Pending</span> <span class="selector-tag">reads</span>      0                                //挂起读的数量</span><br><span class="line"><span class="selector-tag">Pending</span> <span class="selector-tag">writes</span>: <span class="selector-tag">LRU</span> 0, <span class="selector-tag">flush</span> <span class="selector-tag">list</span> 0, <span class="selector-tag">single</span> <span class="selector-tag">page</span> 0  //挂起写的数量</span><br><span class="line"><span class="selector-tag">Pages</span> <span class="selector-tag">made</span> <span class="selector-tag">young</span> 0, <span class="selector-tag">not</span> <span class="selector-tag">young</span> 0                     //<span class="selector-tag">LRU</span>列表，页移动到<span class="selector-tag">LRU</span>首部的次数，因为该服务器运行阶段没有达到<span class="selector-tag">innodb</span> <span class="selector-tag">old</span> <span class="selector-tag">blocks</span> <span class="selector-tag">time</span>阈值的值，因此<span class="selector-tag">not</span> <span class="selector-tag">young</span>为0</span><br><span class="line">0.00 <span class="selector-tag">youngs</span>/<span class="selector-tag">s</span>, 0.00 <span class="selector-tag">non-youngs</span>/<span class="selector-tag">s</span>                    //表示每秒<span class="selector-tag">young</span>和<span class="selector-tag">non-young</span>操作次数</span><br><span class="line"><span class="selector-tag">Pages</span> <span class="selector-tag">read</span> 6676, <span class="selector-tag">created</span> 60, <span class="selector-tag">written</span> 328            //读取、创建、写入的页</span><br><span class="line">0.00 <span class="selector-tag">reads</span>/<span class="selector-tag">s</span>, 0.00 <span class="selector-tag">creates</span>/<span class="selector-tag">s</span>, 0.00 <span class="selector-tag">writes</span>/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">No</span> <span class="selector-tag">buffer</span> <span class="selector-tag">pool</span> <span class="selector-tag">page</span> <span class="selector-tag">gets</span> <span class="selector-tag">since</span> <span class="selector-tag">the</span> <span class="selector-tag">last</span> <span class="selector-tag">printout</span></span><br><span class="line"><span class="selector-tag">Pages</span> <span class="selector-tag">read</span> <span class="selector-tag">ahead</span> 0.00/<span class="selector-tag">s</span>, <span class="selector-tag">evicted</span> <span class="selector-tag">without</span> <span class="selector-tag">access</span> 0.00/<span class="selector-tag">s</span>, <span class="selector-tag">Random</span> <span class="selector-tag">read</span> <span class="selector-tag">ahead</span> 0.00/<span class="selector-tag">s</span></span><br><span class="line"><span class="selector-tag">LRU</span> <span class="selector-tag">len</span>: 6736, <span class="selector-tag">unzip_LRU</span> <span class="selector-tag">len</span>: 0</span><br></pre></td></tr></table></figure><p>LRU本质是尽可能让数据页在缓存中长时间保留，提高访问效率，但是缓存是有限的，如何减少重复的页加载频率。</p><p>InnoDB的LRU是一种定制化的算法，首先它会有一个列表，我们叫 LRU LIST，上面存放了一些数据页，这里就是 Database pages 6736，除此之外可用的页为 ： Free buffers 1455，演示的是测试环境，所以对于生产环境会有所不同（如果你比较细心比较，会发现 Free buffers +Database pages 的值和 Buffer pool size 的大小是不相等的 ， 其实还有一些其他缓冲池的页被分配利用，比如自适应哈希索引、 Lock信息等，它们的管理不是基于LRU 的） </p><p>回到 LRU 算法， InnoDB 在 LRU 列表中加入了参考点，也叫midpoint。 传统的 LRU 算法中 ，当访问到的<strong>页不在缓冲区</strong>会直接将<strong>磁盘页数据</strong>调到<strong>缓冲区队列</strong>；而 InnoDB 并不是直接插入到缓冲区队列的队头，而是插入 LRU 列表的<strong>midpoint位置</strong>。 这个算法称之为 midpoint insertion stategy（中点插入策略）。默认配置插入到列表长度的 5/8 处 ，和数学中的黄金分割（ 0.618 ）很接近，midpoint 由参数 innodb_old_blocks_pct 控制，简单验算验证一下 ，可以看到是很接近的值   </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> 5/8 , 1<span class="selector-tag">-</span> 120340/326446 , 100 <span class="selector-tag">-</span> @<span class="keyword">@innodb_old_blocks_pct</span>;</span><br><span class="line">+<span class="selector-tag">--------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------------------</span>+</span><br><span class="line">| 5/8    | 1- 120340/326446 | 100 - @@innodb_old_blocks_pct |</span><br><span class="line">+<span class="selector-tag">--------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------------------</span>+</span><br><span class="line">| 0.6250 |           0.6314 |                            63 |</span><br><span class="line">+<span class="selector-tag">--------</span>+<span class="selector-tag">------------------</span>+<span class="selector-tag">-------------------------------</span>+</span><br></pre></td></tr></table></figure><p>midpoint 之前的列表称之为Sublist of new列表， 也叫young sublist 或者 sublist of new block 区域 ，里面的数据可以理解为热数据，之后的列表称之为Sublist of old 列表 ，也叫old sublist 或者 sublist of old block 区域</p><p><strong>关系图如下</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210515220434520.png"></p><p>一些全表扫描的表如果进入 sublist of new block 区域 ，整个 LRU 就会是性能瓶颈了，而且 midpoint 位置的页也不是永久的，这种情况也叫缓存污染。为了解决这个问题 ，InnoDB 存储引擎引入了 innodb_old_blocks_time 来表示页读取到 mid 位置之后需要等待多久才会被加入到 LRU 列表的热端。可以通过设置该参数来保证热点数据不轻易被刷出,这个参数值默认为 1000 （毫秒）。</p><p>如果出现了多个BUFFER POOL的输出，BUFFER POOL会从0开始；通过该参数进行调整：innodb_buffer_pool_instances开启多个缓存池，把需要的数据页可以通过hash算法指向不同的缓存池里面，可以并行的内存读写，在高IO负载的情况下性能提升明显</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@innodb_buffer_pool_instances</span>;</span><br><span class="line">+<span class="selector-tag">--------------------------------</span>+</span><br><span class="line">| @@innodb_buffer_pool_instances |</span><br><span class="line">+<span class="selector-tag">--------------------------------</span>+</span><br><span class="line">|                              1 |</span><br><span class="line">+<span class="selector-tag">--------------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="InnoDB中的脏页管理"><a href="#InnoDB中的脏页管理" class="headerlink" title="InnoDB中的脏页管理"></a>InnoDB中的脏页管理</h2><p>上述说明了InnoDB对于LRU的管理方式，还有FLUSH LIST和FREE LIST，它们和LUR LIST有什么关系呢？</p><p><strong>在InnoDB status里面输出的内容,这个free buffers是由FREE LIST来维护的</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Free</span> <span class="selector-tag">buffers</span>       1455</span><br></pre></td></tr></table></figure><p>对于脏页的管理，InnoDB有一个专门的列表FLUSH LIST，它的大小不是无限大或者动态的，在MySQL5.6版本中引入了新参数innodb_lru_scan_depth来控制LRU列表中可用页数量，默认值为1024，即16M，它会影响现成Page Cleaner 刷新脏页的数量，从使用率和性能来说，不是越大越好</p><p>为什么FLUSH LIST来维护脏页的和数量，主要目的是让InnoDB尽可能保持一个较新的状态，在系统崩溃之后能够快速地恢复，这个在数据状态的记录汇总是通过Checkpoint LSN来维护的、</p><p>而对于脏页的刷新比例，是由参数 innodb_max_dirty_pages_pct 来控制的（默认是75 ，而根据谷歌压测推荐是80 ）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@innodb_max_dirty_pages_pct</span>;</span><br><span class="line">+<span class="selector-tag">------------------------------</span>+</span><br><span class="line">| @@innodb_max_dirty_pages_pct |</span><br><span class="line">+<span class="selector-tag">------------------------------</span>+</span><br><span class="line">|                    75.000000 |</span><br><span class="line">+<span class="selector-tag">------------------------------</span>+</span><br></pre></td></tr></table></figure><p><strong>LIST之间的关系图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210219161723158.png"></p><p><strong>其中buffer pool中的最小单位是页，分为三种类型</strong></p><ul><li><p>free page：此page未被使用，此种类型page位于FREE LIST中</p></li><li><p>clean page：此page被使用，对应数据文件中的一个页面，但是页面没有被修改，此种类型page位于LRU LIST中</p></li><li><p>dirty page：此page被使用，对应数据文件中的一个页面，但是页面被修改过，此种类型page位于LRU LIST和FLUSH LIST中</p></li></ul><p><strong>可以通过下述方法查看page的状态数据</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; show global status like &#x27;%buffer_pool_pages%&#x27;;</span><br><span class="line">+<span class="selector-tag">----------------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Variable_name                    | Value |</span><br><span class="line">+<span class="selector-tag">----------------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Innodb_buffer_pool_pages_data    | 6736  |</span><br><span class="line">| Innodb_buffer_pool_pages_dirty   | 0     |</span><br><span class="line">| Innodb_buffer_pool_pages_flushed | 328   |</span><br><span class="line">| Innodb_buffer_pool_pages_free    | 1455  |</span><br><span class="line">| Innodb_buffer_pool_pages_misc    | 0     |</span><br><span class="line">| Innodb_buffer_pool_pages_total   | 8191  |</span><br><span class="line">+<span class="selector-tag">----------------------------------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p><strong>其中，脏页的比率计算可以参考如下：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(100*<span class="selector-tag">Innodb_buffer_pool_pages_dirty</span>)/(1+<span class="selector-tag">Innodb_buffer_pool_pages_data</span>+<span class="selector-tag">Innodb_buffer_pool_pages_free</span>)</span><br></pre></td></tr></table></figure><p>缓存池中的页就是在这种状态中变换和调整：总体来说，FLUSH LIST是一种定量的管理方式，追求多块好省，而FREE LIST和LRU LIST是一种动态平衡的状态，大小要远远高于FLUSH LIST</p><h2 id="InnoDB的日志管理"><a href="#InnoDB的日志管理" class="headerlink" title="InnoDB的日志管理"></a>InnoDB的日志管理</h2><p>InnoDB里面的数据变化都会有相应的页来存储，通过FLUSH LIST来刷新脏页以完成数据落盘，这个过程还需要注意，为了提高吞吐量和性能，刷新脏页的过程是异步的，而一旦数据库崩溃，如何保证数据的完整性，首选得有记录数据变化过程的日志</p><ul><li>REDO日志：Innodb的事务日志，保存在日志文件ib_logfile</li><li>UNDO lOG日志：存放在共享表空间里面（ibdata*文件）</li></ul><p>假设我们有如下一条SQL语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update test set id=100;</span><br></pre></td></tr></table></figure><p>在InnoDB处理的时候，会把相应的页加载到Buffer Pool里面，数据的变化会写入redo log buffer，而事务提交的时候会通过Redo Log Buffer把数据变化写入Redo Log里面</p><p><strong>为什么Binlog和Redo会并存</strong></p><ul><li>Redo是Innodb引擎的范畴，记录物理页的修改，做崩溃恢复时所用</li><li>Binlog是MySQL Server范畴，记录的是数据的变更操作，支持多种存储引擎，也就是无论是MyISAM和Innodb等存储引擎，Binlog都会记录，所以数据恢复和搭建Slave经常会用来</li></ul><p><strong>一次数据变更，产生了Binlog和Redo，它们是否需要同步</strong></p><p>需要两个重量级参数<code>innodb_flush_log_at_trx_commit和sync_binlog</code>，其中<code>innodb_flush_log_at_trx_commit</code>是将事务日志从innodb log buffer写入到redo log中，sync_binlog是将二进制日志文件刷新到磁盘上，它们就是行业里著名的双<code>“1”</code>参数，其中以innodb_flush_log_at_trx_commit更为出名</p><p><strong>下表是innodb_flush_log_at_trx_commit=x的参数</strong></p><table><thead><tr><th>参数选项</th><th>日志写入模式</th><th>刷盘模式</th><th>小结</th><th>特点</th></tr></thead><tbody><tr><td>0</td><td>延时写日志</td><td></td><td>log buffer每个1秒写日志，数据刷盘</td><td>最快，存在数据丢失风险</td></tr><tr><td>1</td><td>实时写日志</td><td>实时刷盘</td><td>log buffer实时写日志，数据刷盘</td><td>最大安全性</td></tr><tr><td>2</td><td>实时写日志</td><td>延迟刷盘</td><td>log buffer实时写日志，每隔1秒刷盘</td><td>较快，存在数据丢失风险</td></tr></tbody></table><blockquote><p>PS：在数据导入中，为了提高性能，可以考虑临时调整参数值innodb_flush_log_at_trx_commit为0，数据导入后，恢复为1</p></blockquote><p>下图可以对双 1 参数做一各更为细致地解读，可以看到一各较为完整的生命周期</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210301163433167.png"></p><p>undo记录了数据修改的前镜像。存放在ibdata中，它就好比是一个摄像机，记录了过去的美好时光</p><h2 id="InnoDB中的检查机制"><a href="#InnoDB中的检查机制" class="headerlink" title="InnoDB中的检查机制"></a>InnoDB中的检查机制</h2><p>如果数据库宕机，可以借助redo来完成崩溃恢复，如何使用恢复的过程高效可行，就需要考虑检查点机制（checkpoint)，检查点机制就跟我们使用word编辑文件一样&gt;建议大家使用过程中边编辑边保存，否则电脑突然断电，可能照成数据丢失</p><p>对于InnoDB存储引擎而言，是通过LSN（Log Sequence Number）来标记版本的。LSN是8字节的数字，每个页有LSN，重做日志中也有LSN，Checkpoint也有LSN。可以看下InnoDB status的输出内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">LOG</span></span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">Log</span> <span class="selector-tag">sequence</span> <span class="selector-tag">number</span> 167362280                 //<span class="selector-tag">LSN1</span>，当前系统<span class="selector-tag">LSN</span>最大值，新的事务日志，<span class="selector-tag">LSN</span>将在此基础上生成（<span class="selector-tag">LSN1</span>+新日志的大小）</span><br><span class="line"><span class="selector-tag">Log</span> <span class="selector-tag">flushed</span> <span class="selector-tag">up</span> <span class="selector-tag">to</span>   167362280                 //<span class="selector-tag">LSN2</span>，当前已经写入日志文件的<span class="selector-tag">LSN</span></span><br><span class="line"><span class="selector-tag">Pages</span> <span class="selector-tag">flushed</span> <span class="selector-tag">up</span> <span class="selector-tag">to</span> 167362280                 //<span class="selector-tag">LSN3</span>，当前最旧的脏页数据对应的<span class="selector-tag">LSN</span>，写<span class="selector-tag">Checkpoint</span>的时候直接将此<span class="selector-tag">LSN</span>写入到日志文件</span><br><span class="line"><span class="selector-tag">Last</span> <span class="selector-tag">checkpoint</span> <span class="selector-tag">at</span>  167362271                 //<span class="selector-tag">LSN4</span>，当前已经写入<span class="selector-tag">Checkpoint</span>的<span class="selector-tag">LSN</span></span><br><span class="line">0 <span class="selector-tag">pending</span> <span class="selector-tag">log</span> <span class="selector-tag">flushes</span>, 0 <span class="selector-tag">pending</span> <span class="selector-tag">chkp</span> <span class="selector-tag">writes</span></span><br><span class="line">53 log i/o&#x27;s done, 0.00 log i/o&#x27;s/second</span><br></pre></td></tr></table></figure><blockquote><p>PS：以上4个LSN是递减的，即：LSN1&gt;=LSN2&gt;=LSN3&gt;=LSN4</p></blockquote><p>InnoDB的checkpoint（检查点）技术很丰富，主要分为Sharp Checkpoint和Fuzzy Checkpoint两类。</p><ul><li>Sharp Checkpoint是全量检查点，在数据库关闭时将所有的脏页都刷新回磁盘，可以通过参数innodb_fast_shutdown=1来设置。</li><li>Fuzzy Checkpoint是模糊检查点，总体来说是部分页刷新，刷新的场景会有一些复杂，包含如下4类Checkpoint策略：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Master Thread Checkpoint</span><br><span class="line">FLUSH_LRU_LIST Checkpoint</span><br><span class="line">Async/Sync Flush Checkpoint</span><br><span class="line">Dirty Page too much Checkpoint</span><br></pre></td></tr></table></figure><table><thead><tr><th>Fuzzy Checkpoint策略</th><th>触发条件</th><th>描述</th><th>相关参数</th></tr></thead><tbody><tr><td>Master Thread Checkpoint</td><td>主动周期性触发</td><td>每秒或每10秒的速度从缓冲池的脏页列表刷新一定比例的页回磁盘</td><td>innodb_io_capacity</td></tr><tr><td>FLUSH_LRU_LIST Checkpoint</td><td>LRU空闲也不足</td><td>Page Cleaner线程中进行，用户可以通过参数innod_lru_scan_depth控制LRU列表中可用页的数量</td><td>innod_lru_scan_depth</td></tr><tr><td>Async/Sync Flush Checkpoint</td><td>重做日志不可用</td><td>重做日志文件不可用的情况，这时需要强制将一些页刷新回磁盘，而此时脏页是从FLUSH LIST中选取的</td><td></td></tr><tr><td>Dirty Page too much</td><td>脏页数量太多</td><td>脏页的数量太多，导致InnoDB存储引擎强制进行Checkpoint，其目的总的来说还是为了保证缓冲池中有足够可用的页</td><td>innodb_max_dirty_pages_pct</td></tr></tbody></table><p>其中Async/Sync Flush Checkpoint会略微复杂一些，“sync”的位置大于是redo日志的7/8，“async”位置大约是redo日志的3/4，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210219171658427.png"></p><h2 id="InnoDB存储引擎核心特性说明"><a href="#InnoDB存储引擎核心特性说明" class="headerlink" title="InnoDB存储引擎核心特性说明"></a>InnoDB存储引擎核心特性说明</h2><p>打上*的是InnoDB重要的特性</p><table><thead><tr><th>功能</th><th>支持</th><th>功能</th><th>支持</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>索引高速缓存</td><td>是</td></tr><tr><td>MVCC (Multi Version Concurrency Control)多版本并发控制*</td><td>是</td><td>数据高速缓存</td><td>是</td></tr><tr><td>B 树索引</td><td>是</td><td>自适应数列索引</td><td>是</td></tr><tr><td>群集索引</td><td>是</td><td>复制 (多线程，GTID，MTS）*</td><td>是</td></tr><tr><td>压缩数据</td><td>是</td><td>更新数据字典</td><td>是</td></tr><tr><td>加密数据</td><td>是</td><td>地理空间数据类型</td><td>是</td></tr><tr><td>事务*</td><td>是</td><td>查询高速缓存</td><td>是</td></tr><tr><td>行锁*</td><td>是</td><td>群集数据库</td><td>否</td></tr><tr><td>外键*</td><td>是</td><td>地理空间索引</td><td>否</td></tr><tr><td>备份与恢复*</td><td>是</td><td>快速索引创建</td><td>是</td></tr><tr><td>文件格式管理</td><td>是</td><td>PEFRORMANCE_SCHEMA</td><td>是</td></tr><tr><td>更改缓冲</td><td>是</td><td>自动故障恢复（ACSR）*</td><td>是</td></tr><tr><td>全文搜索扫描</td><td>是</td><td>多个缓冲池</td><td></td></tr></tbody></table><h2 id="InnoDB存储引擎的修改"><a href="#InnoDB存储引擎的修改" class="headerlink" title="InnoDB存储引擎的修改"></a>InnoDB存储引擎的修改</h2><p><strong>1. 修改存储引擎</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; alter table city engine=innodb;</span><br></pre></td></tr></table></figure><p><strong>2. 整理碎片</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; alter table city engine=innodb;</span><br></pre></td></tr></table></figure><p>这条命令可以当做整理碎片，每次使用delect删除行，都会产生碎片，从而增加数据，可以使用这条命令来解决一些碎片，当然也可以选择导出，然后删除不要的数据，在导入进MySQL，但是风险比较高</p><h3 id="批量替换多张innoDB为tokudb"><a href="#批量替换多张innoDB为tokudb" class="headerlink" title="批量替换多张innoDB为tokudb"></a>批量替换多张innoDB为tokudb</h3><p>单个替换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; alter table zabbix.a engine=tokudb;</span><br></pre></td></tr></table></figure><p>批量替换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; select concat(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; &quot;,&quot;engine=toukudb&quot;) from informatiion_schema.tables where table_schema=&#x27;world&#x27;;</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------------------------</span>+</span><br><span class="line">| concat(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; &quot;,&quot;engine=toukudb&quot;) |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------------------------</span>+</span><br><span class="line">| alter table world.city engine=toukudb                                   |</span><br><span class="line">| alter table world.country engine=toukudb                                |</span><br><span class="line">| alter table world.countrylanguage engine=toukudb                        |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="InnoDB存储引擎物理存储结构（表空间）"><a href="#InnoDB存储引擎物理存储结构（表空间）" class="headerlink" title="InnoDB存储引擎物理存储结构（表空间）"></a>InnoDB存储引擎物理存储结构（表空间）</h2><h3 id="最直观的存储方式（-data-mysql-data"><a href="#最直观的存储方式（-data-mysql-data" class="headerlink" title="最直观的存储方式（/data/mysql/data)"></a>最直观的存储方式（/data/mysql/data)</h3><ul><li>ibdata1：系统数据字典信息（统计信息），UNDO表空间等数据</li><li>ib_logfile0~ib_logfile1：REDO日志文件，事务日志文件</li><li>ibtmp1：临时表空间磁盘位置，存储临时表</li><li>frm：存储表的列信息</li><li>ibd：表的数据行和索引</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ll  | grep &quot;^-&quot;</span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>      620 <span class="selector-tag">Aug</span> 30 17<span class="selector-pseudo">:28</span> <span class="selector-tag">ib_buffer_pool</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 12582912 <span class="selector-tag">Sep</span>  3 00<span class="selector-pseudo">:34</span> <span class="selector-tag">ibdata1</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 50331648 <span class="selector-tag">Sep</span>  3 00<span class="selector-pseudo">:34</span> <span class="selector-tag">ib_logfile0</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 50331648 <span class="selector-tag">Sep</span>  3 00<span class="selector-pseudo">:34</span> <span class="selector-tag">ib_logfile1</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 12582912 <span class="selector-tag">Sep</span>  2 23<span class="selector-pseudo">:27</span> <span class="selector-tag">ibtmp1</span></span><br><span class="line"></span><br><span class="line">$ cd world/  </span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>     8710 <span class="selector-tag">Sep</span>  1 15<span class="selector-pseudo">:04</span> <span class="selector-tag">city</span><span class="selector-class">.frm</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>   933888 <span class="selector-tag">Sep</span>  1 15<span class="selector-pseudo">:04</span> <span class="selector-tag">city</span><span class="selector-class">.ibd</span></span><br></pre></td></tr></table></figure><h3 id="共享表空间"><a href="#共享表空间" class="headerlink" title="共享表空间"></a>共享表空间</h3><ul><li>5.5版本的默认模式，5.6中转换为了独立表空间（共享表空间，是将所有数据存储到同一个表空间(ibdata1)中，管理比较混乱）</li><li>5.6版本以后，共享表空间保留，只用来存储：数据字典信息(idbdata1)，undo，临时表</li><li>5.7版本，临时表被独立出去了</li><li>8.0版本，undo也被独立出去了</li></ul><p>具体变化参考官方文档:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html</span><br><span class="line">https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</span><br><span class="line">https://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208232415216.png"></p><h3 id="共享表空间设置"><a href="#共享表空间设置" class="headerlink" title="共享表空间设置"></a>共享表空间设置</h3><p>查看共享表空间的参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@innodb_data_file_path</span>;</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| @@innodb_data_file_path |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| ibdata1:12M:autoextend  |  //共享表空间的ibdata1</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &#x27;%autoextend%&#x27;;</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| Variable_name               | Value |</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| innodb_autoextend_increment | 64    |</span><br><span class="line">+<span class="selector-tag">-----------------------------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p>初始化的时候添加这两条命令，可以扩展共享表空间的两个参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path=ibdata1:512M:ibdata2:512M:autoextend</span><br><span class="line">innodb_autoextend_increment=64</span><br></pre></td></tr></table></figure><p>例如以下例子</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld --initialize-insecure --user=mysql --basedir=xxxxxx...... innodb_data_file_path=ibdata1:512M:ibdata2:512M:autoextend</span><br></pre></td></tr></table></figure><h3 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h3><ul><li><p>从5.6起默认表空间不再使用共享表空间，替换为独立表空间</p></li><li><p>存储特点为：一个表一个ibd文件，存储数据行和索引信息，frm存储表的列信息</p></li></ul><p><strong>5.7的独立表空间结构</strong></p><ul><li><p>一张InnoDB表 = frm+idb+ibdata1</p></li><li><p>MySQL的存储引擎日志：</p><p>Redo log：ib_logfile0 ib_logfile1，重做日志</p><p>Undo log: ibdata1 ibdata2（存储在共享表空间中），回滚日志</p></li><li><p>临时表：ibtmp1，在做join union操作产生临时数据，用完就自动清理</p></li></ul><h3 id="独立表空间设置"><a href="#独立表空间设置" class="headerlink" title="独立表空间设置"></a>独立表空间设置</h3><p>如果是1等于开启了独立表空间，如果是0表示没有开启</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@innodb_file_per_table</span>;</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| @@innodb_file_per_table |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">|                       1 |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br></pre></td></tr></table></figure><p>可以修改成共享表空间</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; set global innodb_file_per_table=0;</span><br></pre></td></tr></table></figure><h3 id="独立表空间迁移"><a href="#独立表空间迁移" class="headerlink" title="独立表空间迁移"></a>独立表空间迁移</h3><p><strong>1. 创建和原表结构一致的空表</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; create database test charset=utf8mb4;   </span><br><span class="line"><span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">t100</span> (                           </span><br><span class="line"><span class="selector-tag">id</span> <span class="selector-tag">int</span>(11) <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line"><span class="selector-tag">num</span> <span class="selector-tag">int</span>(11) <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line"><span class="selector-tag">k1</span> <span class="selector-tag">char</span>(2) <span class="selector-tag">COLLATE</span> <span class="selector-tag">utf8mb4_bin</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line"><span class="selector-tag">k2</span> <span class="selector-tag">char</span>(4) <span class="selector-tag">COLLATE</span> <span class="selector-tag">utf8mb4_bin</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line"><span class="selector-tag">dt</span> <span class="selector-tag">timestamp</span> <span class="selector-tag">NOT</span> <span class="selector-tag">NULL</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="selector-tag">KEY</span> <span class="selector-tag">id_k</span> (<span class="selector-tag">k2</span>)</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;</span><br></pre></td></tr></table></figure><p><strong>2. 将空表的ibd文件移动</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">t100</span> <span class="selector-tag">discard</span> <span class="selector-tag">tablespace</span>;</span><br></pre></td></tr></table></figure><p><strong>3. 将原表的idb拷贝过来</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -a test/t100w.ibd world/t100.ibd</span><br></pre></td></tr></table></figure><p><strong>4. 将原表ibd进行导入</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">t100</span> <span class="selector-tag">import</span> <span class="selector-tag">tablespace</span>;</span><br></pre></td></tr></table></figure><p><strong>5. 总结：核心命令</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">t100</span> <span class="selector-tag">discard</span> <span class="selector-tag">tablespace</span>;  //将创建表的空<span class="selector-tag">idb</span>丢弃</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">t100</span> <span class="selector-tag">import</span> <span class="selector-tag">tablespace</span>;   //将原表的<span class="selector-tag">idb</span>文件导入</span><br></pre></td></tr></table></figure><h2 id="InnoDB核心特性"><a href="#InnoDB核心特性" class="headerlink" title="InnoDB核心特性"></a>InnoDB核心特性</h2><h3 id="为什么需要事务"><a href="#为什么需要事务" class="headerlink" title="为什么需要事务"></a>为什么需要事务</h3><p>事务处理机制，要保证用户的数据操作是对数据“安全”的，比如我们的银行卡余额，是要绝对的安全</p><p><strong>事务的ACID特性</strong></p><ul><li><p>Atomit（原子性）：所有语句作为一个单元全部成功执行或全部权限，不能出现中间状态</p></li><li><p>Consistent（一致性）：如果数库在事务开启时处于一致状态，则在执行该事务期间将保留一致状态</p></li><li><p>Isolated（隔离性）：事务之间不互相影响</p></li><li><p>Durable（持久性）：事务成功完成后，所做的所有更改都会准确地记录在数据库中，所做的更改不会丢失    </p></li></ul><h3 id="标准的事务语句"><a href="#标准的事务语句" class="headerlink" title="标准的事务语句"></a>标准的事务语句</h3><p>DML（操作语句）：insert、update、delect</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; update city set countrycode=&#x27;CHN&#x27; where id=&#x27;1&#x27;;</span><br><span class="line">&gt; update city set countrycode=&#x27;CHN&#x27; where id=&#x27;2&#x27;;</span><br><span class="line">&gt; update city set countrycode=&#x27;CHN&#x27; where id=&#x27;3&#x27;;</span><br></pre></td></tr></table></figure><p>事务的结束</p><ul><li>提交：commit</li></ul><ul><li>回滚：rollback</li></ul><p>自动提交机制（autocommit）：默认开启</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> @<span class="keyword">@autocommit</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br><span class="line">|            1 |</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br></pre></td></tr></table></figure><h3 id="在线修改自动提交机制参数"><a href="#在线修改自动提交机制参数" class="headerlink" title="在线修改自动提交机制参数"></a>在线修改自动提交机制参数</h3><p><strong>1. 会话级别：及时生效，只影响当前登录会话</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; set autocommit=0</span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@autocommit</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br><span class="line">|            0 |</span><br><span class="line">+<span class="selector-tag">--------------</span>+</span><br></pre></td></tr></table></figure><p><strong>2. 全局级别：断开窗口重连后生效，影响到所有新开的会话</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; set global autocommit=0</span><br></pre></td></tr></table></figure><p><strong>3. 永久修改（重启服务生效或者重启）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf </span><br><span class="line">autocommit=0</span><br></pre></td></tr></table></figure><h3 id="隐式提交的情况（重要）"><a href="#隐式提交的情况（重要）" class="headerlink" title="隐式提交的情况（重要）"></a>隐式提交的情况（重要）</h3><p><strong>触发隐式提交的语句</strong></p><ul><li>事务默认开启（begin），不能同时打开多个窗口，否则，在打开一个窗口的时候，会自动提交（commit)</li><li>在一个窗口执行完，再打开新的窗口</li></ul><p><strong>导致提交的非事务语句：</strong></p><ul><li>DDL语句：（ALTER，CREATE和DROP）</li><li>DCL语句：（GRANT，REVOKE和SET PASSWORD）</li><li>锁定语句：（LOCK TABLES和UNLOCK TABLES）</li></ul><p><strong>导致隐式提交的语句示例：</strong></p><ul><li>TRUNCATE TABLE</li><li>LOAD DATA IN FILE</li><li>SELECT FOR UPDATE</li></ul><h3 id="事务的ACID如何保证"><a href="#事务的ACID如何保证" class="headerlink" title="事务的ACID如何保证"></a>事务的ACID如何保证</h3><table><thead><tr><th>保证功能</th><th>描述</th></tr></thead><tbody><tr><td>redo log</td><td>重做日志</td></tr><tr><td>ib_logfile0-1</td><td>默认50M，轮询使用</td></tr><tr><td>redo log buffer</td><td>redo内存缓冲区域</td></tr><tr><td>data buufer pool</td><td>缓冲区池，数据和索引的缓冲</td></tr><tr><td>LSN（日志序列号）</td><td>MySQL每次数据库启动，都会比较磁盘数据页和redolog的LSN，必须要求LSN一致数据库才能正常启动</td></tr><tr><td>write adhead log</td><td>日志优先的方式实现持久化</td></tr><tr><td>脏页</td><td>内存脏页，内存中发生了修改，没写入到磁盘之前，内存页称之为脏页</td></tr><tr><td>CKPT（Checkpoint）</td><td>检查点，就是将脏页刷鞋到磁盘的动作</td></tr><tr><td>TXID（事务号）</td><td>InnoDB会为每一个事务生成一个事务号，伴随着整个事务</td></tr></tbody></table><h3 id="事务日志–redo-重做日志"><a href="#事务日志–redo-重做日志" class="headerlink" title="事务日志–redo(重做日志)"></a>事务日志–redo(重做日志)</h3><p><strong>作用：主要保证事务A(原子性)、C(一致性)、D(持久性)</strong></p><ul><li>记录了内存数据页的变化</li><li>提供快速的持久化功能（WAL）</li><li>ACSR过程中实现前滚的操作（磁盘数据页和redo日志LSN一致）</li></ul><p><strong>redo buffer：</strong></p><p>redo的buffer：数据页的变化信息+数据页当时的LSN号</p><p><strong>redo的刷写策略</strong></p><ul><li>commit;</li><li>刷新当前事务的redo buffer到磁盘</li><li>还会顺便将一部分redo buffer中没有提交的事务日志也刷新到磁盘</li><li>MySQL：在启动时，必须保证redo日志文件和数据文件LSN必须一致，如果不一致就会触发ACSR(自动故障恢复)，最终保证一致    </li></ul><p><strong>事务开始到事务提交，以断电后磁盘和内存是如何恢复的</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210302101841199.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210302101857768.png"></p><p><strong>语言描述情况：我们做一个事务，begin;update;commit</strong></p><ul><li><p>begin，立即分配一个TXID=tx_01</p></li><li><p>update时，会将需要修改的数据也（dp_01,LSN=101),加载到data buffer中</p></li><li><p>DBWR线程，会进行dp_01数据也修改更新，并更新LSN=102</p></li><li><p>LOGBWR日志写线程，会将dp_01数据页的变化+LSN+TXID存储到redo buffer</p></li><li><p>执行commit时，LGWR日志写线程会将redobuffer信息写入redolog日志文件，基于WAL原则,</p><p>在日志完全写入磁盘后，commit命令才执行成功,（会将此日志打上commit标记）</p></li><li><p>加入此时宕机，内存脏页没有来得及写入磁盘，内存数据全部丢失</p></li><li><p>MySQL再次重启时，必须要redolog和磁盘数据页的LSN是一致的。但是此时磁盘是LSN=101，dp_01，TXID=tx_01，redolog中LSN=102，MySQL无法正常启动，就会触发CSR（自动故障恢复），在内存追平LSN号。接着触发ckpt，将内存数据页更新到磁盘，从而保证磁盘数据页和redolog LSN一致，MySQL才能正常启动</p></li></ul><blockquote><p>PS：以上的工作过程，我们把它称之为基于REDO的“前滚操作”</p></blockquote><h3 id="事务日志–undo（回滚日志）"><a href="#事务日志–undo（回滚日志）" class="headerlink" title="事务日志–undo（回滚日志）"></a>事务日志–undo（回滚日志）</h3><p><strong>作用：在ACID特性中，主要保证A的特性，同时对CI也有一定功效</strong></p><ul><li>记录了数据修改之前的状态</li><li>rollback将内存的数据修改恢复到修改之前</li><li>在CSR中实现未提交数据的回滚操作</li><li>实现一致性快照，配置隔离级别保证MVCC（多版本并发控制），读和写的操作不会互相伤害</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210302101959088.png"></p><h2 id="锁和MVCC"><a href="#锁和MVCC" class="headerlink" title="锁和MVCC"></a>锁和MVCC</h2><p>“锁”顾名思义就是锁定的意思，而锁机制（Locking）通过锁机制保证数据一致性</p><p><strong>锁的作用是什么</strong>：在事务ACID过程中，“锁”和“隔离级别”一起来实现“I”隔离性和”C” 一致性 </p><p><strong>多版本并发控制（MVCC）</strong>：MVCC（Multiversion Concurrency Control）是侧重于读写并发的改善机制，它可以避免写操作堵塞读操作的并发问题，通过使用数据的多个版本保证并发读写不冲突。它是一种标准，并不是规定了明细的实现细节，所以在数据库方向上大体会有一些MVCC的不同实现</p><p>如写-写的场景，为了保证在同一时间完成数据的一致性操作，需要通过锁的方式来控制，这里引出一个概念，就是2PL（Two-Phase Locking，二阶段锁），相当于加锁阶段只加锁，解锁阶段只解锁。</p><ul><li>操作数据前，加锁，互相排斥，不允许其他并发任务操作</li><li>操作数据后，解锁，其他任务可以继续执行</li></ul><p>读-读场景，通过行锁，可以对于读-读并发的场景有了较好的支撑。但是写入的过程中，读任务还是会被阻塞，对于读写的操作还是存在瓶颈，所以在这个层面上引入了MVCC</p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获取相同数据集的排它锁</li></ul><p>简单的理解为：共享锁（S）之间不互斥，读读操作可以并行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test</span> <span class="selector-tag">where</span> ..<span class="selector-class">.lock</span> <span class="selector-tag">in</span> <span class="selector-tag">share</span> <span class="selector-tag">mode</span></span><br></pre></td></tr></table></figure><ul><li>排它锁（X）：允许获得排它锁的事务更新数据，但是阻止其他事务获得相同数据集的共享锁和排它锁</li></ul><p>简单的理解为：排它锁（X）是互斥关系，读写，写写操作不可以并行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test</span> <span class="selector-tag">where</span> ..<span class="selector-class">.for</span> <span class="selector-tag">update</span></span><br></pre></td></tr></table></figure><p>读-写场景，引出了两类读操作，快照读（Snapshot Read）和当前读（Current Read）。其中快照读-读取的是数据的可见版本，是数据历史镜像，这个过程不加锁的，而当前读-读取的是最新的版本，会加上锁，保证其他事务不会再修改这条记录</p><p>比如触发一条select操作：select * from test where id=10;，id为主键，这条语句对应的操作就是快照读，而上述的共享锁和排它锁的SQL，还有常见的DML都属于当前读，操作过程中会读取当前最新的版本，保证其他事务不能修改当前记录</p><p>比如下述例子，在窗口1没有提交之前，其他的更新会被行级锁住</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210209210439849.png"></p><h3 id="MySQL中的MVCC"><a href="#MySQL中的MVCC" class="headerlink" title="MySQL中的MVCC"></a>MySQL中的MVCC</h3><p>我们通过下述的图示进行说明，比如T1，T2，T3是哪个顺序时间里发生了三次请求。分别是一次写请求和两次读请求，那么在MySQL中会先在T1时间生成一个快照，比如数据标识是90，然后在这个基础上进行数据修改，数据标识为100，但事务未提交</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210511164636410.png"></p><p>在T1写数据事务内，T2时间的读请求会读取T1时间生成的快照数据，读取的数据标识依然是90，T3时间的读请求也是类似</p><p><strong>小结</strong></p><ul><li>表设计中数据生命周期的管理是一种体系化的管理方式，原理和思路是通用的</li><li>数据生命周期管理有两个重要得多标识，一个是标识数据变化的，一个是标识数据可用状态的</li></ul><p>假设在每行记录后面存在两个隐藏的列，这两个列分别保存了这个行的创建时间，另一个保存的是行的删除时间。这里存储的是系统版本号，会自动递增，按照DML的几个维度进行讲解</p><ul><li>Insert操作，事务id假设是1</li></ul><table><thead><tr><th>id</th><th>name</th><th>create version</th><th>delete version</th></tr></thead><tbody><tr><td>1</td><td>test</td><td>1</td><td></td></tr></tbody></table><ul><li>Update操作，会先把当前记录标识为已删除，然后新增一列数据，写入相应的版本号，在这里就是2，和上一条的delete_version是一致的。比如把字段name修改为new_test</li></ul><table><thead><tr><th>id</th><th>name</th><th>create version</th><th>delete version</th></tr></thead><tbody><tr><td>1</td><td>test</td><td>1</td><td>2</td></tr><tr><td>1</td><td>new_test</td><td>2</td><td></td></tr></tbody></table><ul><li>delete操作，就是把当前记录标识为已删除</li></ul><table><thead><tr><th>id</th><th>name</th><th>create version</th><th>delete version</th></tr></thead><tbody><tr><td>1</td><td>new_value</td><td>2</td><td>3</td></tr></tbody></table><p>上述的实现方式中，一旦出现了事务回滚，会把已有的数据状态通过逆向应用保证事务的ACID特性</p><p>在InnoDB设计中，实际上所有行数据会增加以下三个内部属性列</p><ul><li>DB_TRX_ID：6字节，记录每一行最近一次修改的事务ID</li><li>DB_ROLL_PTP：7字节，记录指向回滚段undo日志的指针</li><li>DB_ROW_ID：当写入数据时，自动维护的自增列</li></ul><p>把三个列组合起来，就可以标记数据的周期性，并定位到相应的事务，在需要的时候进行回滚。比如一张test（id primary key, name）</p><ul><li>insert的数据在redo中顺序记录insert操作，同时生成undo记录，为逆操作delete</li><li>delete的数据在redo中顺序记录delete操作，同时生成undo记录，为逆操作insert</li><li>update的数据在redo中顺序记录update操作，同时生成undo记录，为逆操作update</li></ul><p>如原来id=1变成id=3，则逆操作为id=3，变成id=1</p><p>对于InnoDB存储引擎来说，无论是更新或是删除，都只是设置行记录上的delete BIT标记位，而不是真正的删除记录，后续这些记录的清理，是通过Purge后台进程实现的清除的</p><p>此外，需要使用MVCC，只有在隔离级别<code>Read-Committed(RC)和Repeatable-Read(RR)</code>才能使用，<code>Read-Uncommited(RU)</code>由于是读到为提交的，所以不存在版本的问题；而<code>Serializable</code>则会对所有读取的行加锁</p><h3 id="事务隔离级别（transaction-isolation）"><a href="#事务隔离级别（transaction-isolation）" class="headerlink" title="事务隔离级别（transaction_isolation）"></a>事务隔离级别（transaction_isolation）</h3><p>事务隔离级别，是为解决事务出现：脏读、不可重复读和幻读，隔离级别定义了事务之间按照什么规则进行隔离，将事务隔离到什么程序</p><p>脏读、不可重复读和幻读都是在读-写操作中出现的概念，可以由几下基点概括</p><ul><li>写在前，读在后：脏读</li><li>读在前，写在后：不可重复读</li><li>读在前，写在后，然后又读：幻读</li></ul><p>MySQL的四种隔离级别，默认隔离级别是Repeatable-Read（RR）</p><ul><li><p>RU（Read-Uncommitted）：读未提交，可脏读，一般不易出现</p></li><li><p>RC（Read-Committed）：读已提交，可能出现幻读，可以防止脏读</p></li><li><p>RR（Repeatable-Read）：不可重复读，功能是防止“幻读”现象，利用的是undo的快照技术+GAP（间隙锁）+ NextLock（下键锁）</p></li><li><p>SR（Serializable）：可串行化，可以防止死锁，但是并发事务性能较差（串行化隔离级别能解决上面的所有数据问题）</p></li></ul><blockquote><p>补充：在RC级别下，可以减轻GAP+NextLock锁的问题，但是会出现幻读，一般在为了读一致性会正常select后添加for update语句。但是请记住执行完一定要commit否则容易出现锁等待比较严重</p></blockquote><p><strong>查看系统使用默认隔离有以下四种</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@tx_isolation</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@session</span>.tx_isolation;</span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@global</span>.tx_isolation;</span><br><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@transaction_isolation</span>;</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+ </span><br></pre></td></tr></table></figure><h3 id="MySQL中的隔离级别RU、RR和RC"><a href="#MySQL中的隔离级别RU、RR和RC" class="headerlink" title="MySQL中的隔离级别RU、RR和RC"></a>MySQL中的隔离级别RU、RR和RC</h3><p>在MySQL中有三种不同的隔离级别，我们通过下述的例子来去正确理解</p><h4 id="RU-脏读"><a href="#RU-脏读" class="headerlink" title="RU-脏读"></a>RU-脏读</h4><p><strong>transaction_isolation = read-uncommitted：读未提交，可脏读，一般不易出现</strong></p><p>设置隔离级别</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/my.cnf</span> </span><br><span class="line">transaction_isolation=read-uncommitted</span><br><span class="line"><span class="meta">#</span><span class="bash">transaction_isolation=read-committed</span></span><br><span class="line"><span class="meta">#</span><span class="bash">transaction_isolation=REPEATABLE-READ</span></span><br></pre></td></tr></table></figure><p>操作之前，需要查看自己是否开启自动提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select @@autocommit;</span></span><br><span class="line">+--------------+</span><br><span class="line">| @@autocommit |</span><br><span class="line">+--------------+</span><br><span class="line">|            0 |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure><p>如果是自动提交，则修改为不自动提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> autocommit=0</span></span><br></pre></td></tr></table></figure><p>测试，写入一条更新语句，另一个窗口读取数据（这里是基于word库的city表）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210209211215566.png"></p><h4 id="RC-幻读"><a href="#RC-幻读" class="headerlink" title="RC-幻读"></a>RC-幻读</h4><p><strong>transaction_isolation = read-committed：读已提交，可能出现幻读，防止脏读</strong></p><p>创建表的时候建一个主键，主键会创建GAP+NextLock锁，阻止幻读</p><p>窗口1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table pp(id int primary key not null,name varchar(10));</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp values(1,<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp value(2,<span class="string">&#x27;b&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp value(5,<span class="string">&#x27;e&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> begin;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from pp;</span></span><br></pre></td></tr></table></figure><p>窗口2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> begin;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> update pp <span class="built_in">set</span> name=<span class="string">&#x27;x&#x27;</span> <span class="built_in">where</span> id&gt;2;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> commit;</span></span><br></pre></td></tr></table></figure><p>窗口1中的数据，就会发现原来窗口的数据发生了变化，id=2的数据列name变成了“c”。这是不可重复读的一个典型例子，会出现幻读，但是可以防止脏读。如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210511222703013.png"></p><h4 id="RR-不可重复读"><a href="#RR-不可重复读" class="headerlink" title="RR-不可重复读"></a>RR-不可重复读</h4><p><strong>transaction_isolation=REPEATABLE-READ：不可重复读，功能是防止“幻读”现象，利用的是undo的快照技术+GAP（间隙锁）+ NextLock（下键锁）</strong></p><p>窗口1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table pp(id int primary key not null,name varchar(10));</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp values(1,<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp value(2,<span class="string">&#x27;b&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into pp value(5,<span class="string">&#x27;e&#x27;</span>);</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> begin;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from pp;</span></span><br></pre></td></tr></table></figure><p>窗口2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> begin;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> update pp <span class="built_in">set</span> name=<span class="string">&#x27;a&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> commit;</span></span><br></pre></td></tr></table></figure><p>在回到窗口1：虽然事务2已经提交，但是窗口1中的事务因为还没有提交，所以看到的还是原来的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from pp;</span></span><br></pre></td></tr></table></figure><p>提交事务，在查看数据变化，实际上窗口1中没有任何的DML操作，但是数据却已经改变了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> commit;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from pp;</span></span><br></pre></td></tr></table></figure><p>窗口1在没有提交前，数据还是以前的，但是使用指令commit提交后，查询的值就变成了a。虽然解决了幻读，但是会出现不可重复读</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210511223333392.png"></p><h2 id="MySQL锁机制"><a href="#MySQL锁机制" class="headerlink" title="MySQL锁机制"></a>MySQL锁机制</h2><h3 id="MySQL锁的类型"><a href="#MySQL锁的类型" class="headerlink" title="MySQL锁的类型"></a>MySQL锁的类型</h3><p><strong>表级意向锁</strong></p><p>上述有讲过InnoDB的锁，实现了两种类型的<code>行锁</code></p><ul><li>共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁</li><li>排他锁（X）：允许获得排他锁的事务更新数据，但是阻止其他事务获得相同数据集的共享锁和排他锁</li></ul><p>比喻一个场景：</p><p>有两个事务A和B，事务A锁住了表中的一样，加上了<code>行锁（S）</code>。即这一行<code>只能读不能写</code>、事务B申请<code>整个表的写锁</code>（在MySQL Server层可使用lock table xxxx write的方式锁表），理论上<code>B申请后就能修改表中的任意一行</code>，包括<code>S锁定的那一行</code></p><p>这种情况下会和<code>事务A持有的S锁冲突</code>，此时就需要一种机制来判断，从而避免这个冲突。比如需要<code>先判断是否被其他事务用表锁锁定</code>，然后<code>判断表中的每一行是否被行锁锁住</code>，当然这种方法要遍历整个表，在数据量一直增加的情况，显然这种方案不可接受的。</p><p>而MySQL在这种情况下，引出了意向锁来做这个冲突协调者。所以正常的流程就会为：</p><ul><li>事务A必须申请表的<code>意向共享锁（IS）</code>，成功后申请一行的<code>行锁</code></li><li>事务B申请<code>排他锁（X）</code>，发现表上已经有<code>意向共享锁（IS）</code>，说明表中的某些行已经被共享锁锁定了，事务<code>B申请写锁就会被阻塞</code>。</li></ul><p>而这也是为什么需要表级意向锁的主要原因，整个表意向锁的加锁过程都是自动完成，InnoDb有两个表级意向锁：</p><ul><li>意向共享锁（IS）：表示事务准备给数据行加入共享锁，加入共享锁之前必须先得到IS锁</li><li>意向排他锁（IX）：表示事务准备给数据行加入排他锁，事务在一个数据行加排他锁前必须先取得该表的IX锁</li></ul><p><strong>行锁</strong></p><p>InnoDB行锁是通过给<code>索引项加锁实现的</code>，如果<code>没有索引</code>，InnoDb会通过<code>隐式的聚集索引</code>来对记录加锁。如果不通过<code>索引条件检索数据</code>，那InnoDB将对<code>表中所有数据加锁</code>，实际效果跟表锁一行的</p><p>InnoDB支持如下三种行锁方式：</p><ul><li>行锁（Record Lock）：对索引项加锁，即锁定一条记录</li><li>间隙锁（Gap Lock）：对索引项之间的间隙，对<code>第一条记录前或最后一条记录后的间隙加锁</code>，锁定一个范围的记录，不包含记录本身</li><li>下键锁（Next-key Lock）：锁定一个范围的记录并包含记录本身</li></ul><p>Next-key Lock是行锁与间隙锁的组合，当InnoDB扫描索引记录的时候，会首先对选中的索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap Lock）。如果一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的</p><p>需要知道的是：意向锁之间是互相兼容的，而不是意向锁带着S锁和X锁的组合都是互相排斥的，S锁之间是互相兼容的。如下图展示的内容</p><table><thead><tr><th></th><th>S（共享锁）</th><th>X（排他锁）</th><th>IS（意向共享锁）</th><th>IX（意向排他锁）</th></tr></thead><tbody><tr><td>S</td><td>兼容</td><td>冲突</td><td>兼容</td><td>冲突</td></tr><tr><td>X</td><td>冲突</td><td>冲突</td><td>冲突</td><td>冲突</td></tr><tr><td>IX</td><td>冲突</td><td>冲突</td><td>兼容</td><td>兼容</td></tr><tr><td>IS</td><td>兼容</td><td>冲突</td><td>兼容</td><td>兼容</td></tr></tbody></table><p><strong>死锁</strong></p><p>如果锁在不兼容的情况下，通常就会产生阻塞。下述是模拟死锁的步骤：首先创建一张表test1，语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table test1 (id int unique);</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>时间</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>select * from test1 lock in share mode;</td><td></td></tr><tr><td>T2</td><td></td><td>being;<br>select * from test1 lock in share mode;</td></tr><tr><td>T3</td><td>insert into test1 values(1);——插入后会阻塞</td><td></td></tr><tr><td>T4</td><td></td><td>insert into test1 values(2);——产生死锁</td></tr></tbody></table><p>share mode的方式很少使用，但很多时候会由其他的场景触发。比如对于duplicate数据的检查会开启S锁（这是比较特别的一点，需要注意）。至于死锁也会有锁的超时时间</p><h3 id="索引加锁的过程的差异"><a href="#索引加锁的过程的差异" class="headerlink" title="索引加锁的过程的差异"></a>索引加锁的过程的差异</h3><p>对于唯一性索引和主键，在加锁过程中存在些不同的差异。在不同的隔离级别下锁也会有相应的变化</p><p>创建一个表，分别创建唯一性索引和主键来演示下，表结构信息为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table <span class="built_in">test</span> (id int unique key, name varchar(20) primary key);</span></span><br></pre></td></tr></table></figure><p>插入测试数据并查看数据情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into <span class="built_in">test</span> values(1,<span class="string">&#x27;aa&#x27;</span>),(2,<span class="string">&#x27;bb&#x27;</span>),(3,<span class="string">&#x27;cc&#x27;</span>),(4,<span class="string">&#x27;dd&#x27;</span>),(5,<span class="string">&#x27;ee&#x27;</span>),(6,<span class="string">&#x27;ff&#x27;</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from <span class="built_in">test</span>;</span></span><br><span class="line">+------+------+</span><br><span class="line">| id   | name |</span><br><span class="line">+------+------+</span><br><span class="line">|    1 | aa   |</span><br><span class="line">|    2 | bb   |</span><br><span class="line">|    3 | cc   |</span><br><span class="line">|    4 | dd   |</span><br><span class="line">|    5 | ee   |</span><br><span class="line">|    6 | ff   |</span><br><span class="line">+------+------+</span><br></pre></td></tr></table></figure><p>现在已RC隔离级别为例，触发一条SQL（select * from test where id=5 for update);加锁的情况如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210512123109585.png"></p><p>在这种情况下，select语句会根据where条件将唯一索引id=5记录加上X锁，同时得到name列，在主键聚集索引中将name=’ee’加上X锁</p><p>id=5和name=’ee’是指向同样的记录，为设么分这么清楚，其实可以设想这样一个场景</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210512124359795.png"></p><p>如果两个并发线程，线程1通过唯一性索引锁定，线程2通过主键索引来更新。如果线程1没有将主键索引上的记录加锁，那么并发线程2的update语句就会感知不到线程1的存在，会造成更新的冲突，如下图</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210512124335526.png"></p><p>对于唯一索引来说，加锁会有2个X锁，一个位于唯一性索引的键值记录，另外一个对应聚集索引的键值。按照这个思路，对于非唯一性索引，也会关联锁定相应的主键聚集索引项</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210512125454109.png"></p><p>这种场景略微复杂的一些的是基于RR隔离级别，并且是在非唯一性索引的情况下</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210512125523265.png"></p><p>在RR隔离级别下，产生的锁的复杂度要比RC的高，会增加间隙锁。从执行的代价来看，强烈建议不要太随意的设计索引</p><h3 id="死锁案列"><a href="#死锁案列" class="headerlink" title="死锁案列"></a>死锁案列</h3><h4 id="insert语句导致的死锁"><a href="#insert语句导致的死锁" class="headerlink" title="insert语句导致的死锁"></a>insert语句导致的死锁</h4><p>通过三条insert导致死锁问题，我们来模拟一下这个场景</p><p>首先要开启参数innodb_print_all_deadlocks，将死锁日志志错误日志中，而另一个参数是5.7版本之后增加的innodb_deadlock_detect，是默认打开的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show variables like <span class="string">&#x27;%dead%&#x27;</span>;</span></span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| Variable_name              | Value |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line">| innodb_deadlock_detect     | ON    |</span><br><span class="line">| innodb_print_all_deadlocks | ON    |</span><br><span class="line">+----------------------------+-------+</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> global innodb_print_all_deadlocks=on</span></span><br></pre></td></tr></table></figure><p>在此之前，还需要关闭事务自动提交的功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> global autocommit = 0;</span></span><br></pre></td></tr></table></figure><p>创建一张tese表，建表语句如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> create table <span class="built_in">test</span> (id int primary key not null, name int unique key);</span></span><br></pre></td></tr></table></figure><p>模拟的步骤如下表所示：</p><table><thead><tr><th>发起时间</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>insert into test values(2021,888);</td><td></td></tr><tr><td>T2</td><td></td><td>begin<br>insert into test values(2022,888) –阻塞</td></tr><tr><td>T3</td><td>insert into test values(2023,887) –循环照成死锁</td><td></td></tr></tbody></table><p>如下是死锁的日志，可通过<code>show engine innodb status\G;</code>查看。通常来说，MySQL死锁的日志比较简略：它分为了两个事务，Transaction 1和Transaction2；日志记录的是发生死锁的临界状态的事务信息，而完整的过程是无法通过日志体现出来的。发生死锁的时候是有两个事务互相阻塞，循环造成死锁，所以要分析死锁日志，其实得到的是不够完整的信息，需要不断推导和梳理</p><p><code>Transaction1</code>的日志记录，事务1如果仔细查看日志会发现日志是不够完整，只打印了等待的锁，而没有持有的锁</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-05-13 21:28:21 0x7f9784305700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 阻塞了22秒钟，涉及的表1个（table <span class="keyword">in</span> use 1）</span></span><br><span class="line">TRANSACTION 1829, ACTIVE 22 sec inserting    </span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 有两个锁（一个表级意向锁，一个行锁），语句为insert into <span class="built_in">test</span> values(2022,888)</span></span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 1    </span><br><span class="line">MySQL thread id 6, OS thread handle 140288734820096, query id 408 localhost root update</span><br><span class="line">insert into test values(2022,888)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 唯一的行锁处于等待状态，相关的锁等待为（lock_mode S waiting），insert通常会申请X锁（排他锁），但是这里字段对应的是一个唯一性索引，再做insert前需要做一个duplicate检查，需要申请S锁放置其他事务修改）</span></span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:    </span><br><span class="line">RECORD LOCKS space id 25 page no 4 n bits 72 index name of table `test`.`test` trx id 1829 lock mode S waiting </span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0 </span><br><span class="line"> 0: len 4; hex 80000378; asc    x;;</span><br><span class="line"> 1: len 4; hex 800007e5; asc     ;;</span><br></pre></td></tr></table></figure><p>Transaction2的日志记录，内容会多些</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 1828, ACTIVE 36 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">3 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 2</span><br><span class="line">MySQL thread id 3, OS thread handle 140288734549760, query id 409 localhost root update</span><br><span class="line">insert into test values(2023,887)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到分为两个部分内容，一部分是持有的锁（HOLDS THE LOCK），锁默认为（lock_mode X locks rec but not gap，no gap lock）</span></span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 25 page no 4 n bits 72 index name of table `test`.`test` trx id 1828 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0 （事务2持有字段对应索引的x锁，至于具体的信息，这里看不到</span><br><span class="line">。从该语句可以得知是insert(2021,888)持有x锁）</span><br><span class="line"> 0: len 4; hex 80000378; asc    x;;</span><br><span class="line"> 1: len 4; hex 800007e5; asc     ;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 另一部分是等待的锁，锁模式为（lock_mode X waiting）。这里的S锁升级为X锁，类型是insert intention，而事务2已经申请了一个X锁，于是X锁进入队列等待，产生循环</span></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 25 page no 4 n bits 72 index name of table `test`.`test` trx id 1828 lock_mode X locks gap before rec insert intention waiting </span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 80000378; asc    x;;</span><br><span class="line"> 1: len 4; hex 800007e5; asc     ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure><p>将整个过程和死锁日志结合起来，如下表</p><table><thead><tr><th>发起时间</th><th>会话2</th><th>会话1</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>insert into test values(2021,888);<br>持有X锁，record_lock</td><td></td></tr><tr><td>T2</td><td></td><td>begin;<br>insert into test values(2022,888); <br>写入做duplicate冲突检测，持有S锁，等待会话1释放相关锁</td></tr><tr><td>T3</td><td>insert into test values(2023,887); <br>申请X锁，类型是insert intention，本身已有X锁，所以进入队列等待</td><td></td></tr><tr><td>T4</td><td>两方都在互相等待，陷入僵持</td><td>产生死锁</td></tr></tbody></table><p>现在我们是模拟死锁的场景，所以我们对死锁有着更全面的信息。而在真实的环境中，我们通过死锁日志得到的结果可能是，如下表</p><table><thead><tr><th>发起时间</th><th>会话2</th><th>会话1</th></tr></thead><tbody><tr><td>T2</td><td></td><td>begin;<br/>insert into test values(2022,888); –持有S锁</td></tr><tr><td>T3</td><td>begin;<br>insert into test values(2023,887); –申请X锁，类型是insert intention</td><td></td></tr><tr><td>T4</td><td></td><td>产生死锁</td></tr></tbody></table><p>在这种情况，就需要看日志联系上下文来还原整个死锁的场景，难度比模拟场景要复杂，当然也可以多操作例子，通过举一反三来对锁机制的加深</p><h4 id="事务提交导致的死锁"><a href="#事务提交导致的死锁" class="headerlink" title="事务提交导致的死锁"></a>事务提交导致的死锁</h4><p>上述例子的准备操作都一样，这里不再操作。构建表信息，这里需要使用三个会话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dd` (</span><br><span class="line">  `id` int(10) NOT NULL DEFAULT &#x27;0&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4</span><br></pre></td></tr></table></figure><p>插入一条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into d values(1);</span></span><br></pre></td></tr></table></figure><p>模拟的整个过程如下表</p><table><thead><tr><th>发起时间</th><th>会话1</th><th>会话2</th><th>会话3</th></tr></thead><tbody><tr><td>T1</td><td>beign;<br>delete from dd where id=1;</td><td></td><td></td></tr><tr><td>T2</td><td></td><td>beign;<br>insert into dd select 1;</td><td></td></tr><tr><td>T3</td><td></td><td></td><td>begin;<br>insert into dd select 1;</td></tr><tr><td>T4</td><td>commit;</td><td></td><td>照成死锁</td></tr></tbody></table><p>查看死锁日志如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-05-14 09:39:00 0x7f97841fd700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 1844, ACTIVE 38 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 3 lock struct(s), heap size 1136, 2 row lock(s)</span><br><span class="line">MySQL thread id 8, OS thread handle 140288733738752, query id 448 localhost root executing</span><br><span class="line">insert into dd select 1</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 26 page no 3 n bits 72 index PRIMARY of table `test`.`dd` trx id 1844 lock_mode X locks rec but not gap waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 80000001; asc     ;;</span><br><span class="line"> 1: len 6; hex 00000000072f; asc      /;;</span><br><span class="line"> 2: len 7; hex 23000001460110; asc #   F  ;;</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 1845, ACTIVE 3 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">3 lock struct(s), heap size 1136, 2 row lock(s)</span><br><span class="line">MySQL thread id 9, OS thread handle 140288733468416, query id 458 localhost root executing</span><br><span class="line">insert into dd select 1</span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 26 page no 3 n bits 72 index PRIMARY of table `test`.`dd` trx id 1845 lock mode S locks rec but not gap</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 80000001; asc     ;;</span><br><span class="line"> 1: len 6; hex 00000000072f; asc      /;;</span><br><span class="line"> 2: len 7; hex 23000001460110; asc #   F  ;;</span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 26 page no 3 n bits 72 index PRIMARY of table `test`.`dd` trx id 1845 lock_mode X locks rec but not gap waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 80000001; asc     ;;</span><br><span class="line"> 1: len 6; hex 00000000072f; asc      /;;</span><br><span class="line"> 2: len 7; hex 23000001460110; asc #   F  ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure><p>将死锁日志和加锁过程结合，如下表</p><table><thead><tr><th>发起时间</th><th>会话3</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>delete from dd where id=1;<br>持有X锁，record lock</td><td></td><td></td></tr><tr><td></td><td></td><td>begin;<br>insert into dd select 1;<br>申请S锁，等待中</td><td></td></tr><tr><td>T3</td><td></td><td></td><td>begin;<br>insert into dd select 1;<br>申请S锁，等待中</td></tr><tr><td>T4</td><td>commit;</td><td></td><td></td></tr><tr><td>T5</td><td></td><td>成功获得S锁，请求X锁，record lock，等待会话2释放锁</td><td>成功获得S锁，请求X锁，record lock，等待会话1释放锁</td></tr><tr><td>T6</td><td></td><td></td><td>产生死锁，回滚</td></tr></tbody></table><p>过程都是在多会话并发中发生的，因为事务状态的变化导致产生了连锁反应</p><h4 id="事务回滚导致的死锁"><a href="#事务回滚导致的死锁" class="headerlink" title="事务回滚导致的死锁"></a>事务回滚导致的死锁</h4><p>模拟这个死锁过程，也需要开启三个会话，建表语句如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `test2` (</span><br><span class="line">  `a` int(10) NOT NULL DEFAULT &#x27;0&#x27;,</span><br><span class="line">  `b` int(10) DEFAULT NULL,</span><br><span class="line">  `c` int(10) DEFAULT NULL,</span><br><span class="line">  `d` int(10) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`a`),</span><br><span class="line">  UNIQUE KEY `uq_bc` (`b`,`c`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=latin1</span><br><span class="line"></span><br><span class="line">//建立uq_bc的索引指令</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> alter table test2 add unique key uq_bc(b,c);</span></span><br></pre></td></tr></table></figure><p>插入一些数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into test2 values(10000,222,222,223),(10001,224,224,324),(10002,11,11,21);</span></span><br></pre></td></tr></table></figure><p>模拟整个死锁的过程，如下表</p><table><thead><tr><th>发起时间</th><th>会话1</th><th>会话2</th><th>会话3</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>insert into test2 values(10003,215,215,312);</td><td></td><td></td></tr><tr><td>T2</td><td></td><td>insert into test2 values(10004,215,215,312);</td><td></td></tr><tr><td>T3</td><td></td><td></td><td>insert into test2 values(10005,215,215,312);</td></tr><tr><td>T4</td><td>rollback;</td><td></td><td>产生死锁</td></tr></tbody></table><p>查看死锁相关的日志，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-05-14 12:17:28 0x7f978423f700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 1932, ACTIVE 20 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 4 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 1</span><br><span class="line">MySQL thread id 13, OS thread handle 140288734549760, query id 878 localhost root update</span><br><span class="line">insert into test.test2 values(10004,215,215,315)</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 29 page no 4 n bits 72 index uq_bc of table `test`.`test2` trx id 1932 lock_mode X locks gap before rec insert intention waiting # S锁升级为X锁，类型insert intention</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 1: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 2: len 4; hex 80002710; asc   &#x27; ;;</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 1933, ACTIVE 11 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">4 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 1</span><br><span class="line">MySQL thread id 14, OS thread handle 140288733738752, query id 884 localhost root update</span><br><span class="line">insert into test.test2 values(10005,215,215,315)</span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 29 page no 4 n bits 72 index uq_bc of table `test`.`test2` trx id 1933 lock mode S locks gap before rec # 做duplicate减产，持有S锁</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 1: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 2: len 4; hex 80002710; asc   &#x27; ;;</span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 29 page no 4 n bits 72 index uq_bc of table `test`.`test2` trx id 1933 lock_mode X locks gap before rec insert intention waiting  # 锁升级由S锁升级为X锁，类型为insert intention</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 3; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 1: len 4; hex 800000de; asc     ;;</span><br><span class="line"> 2: len 4; hex 80002710; asc   &#x27; ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (2)</span><br></pre></td></tr></table></figure><p>将死锁日志和加锁过程结合，如下表</p><table><thead><tr><th>发起时间</th><th>会话3</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>insert into test2 values(10003,215,215,312);<br>持有X锁，record_lock</td><td></td><td></td></tr><tr><td>T2</td><td>insert into test2 values(10004,215,215,312);申请获得S锁，duplicate检查</td><td></td><td></td></tr><tr><td>T3</td><td></td><td></td><td>insert into test2 values(10005,215,215,312);<br>申请获得S锁，duplicate检查</td></tr><tr><td>T4</td><td>rollback;</td><td></td><td></td></tr><tr><td>T5</td><td></td><td>获得S锁，申请X锁，类型是insert intention，等待会话2</td><td>获得S锁，等待X锁，类型为insert intention，等待会话1</td></tr><tr><td>T6</td><td></td><td></td><td>回滚之后产生死锁</td></tr></tbody></table><p>回滚的操作与上述提交差不多，一个提交，一个回滚，都是事务状态的变化导致产生了连锁反应</p><h4 id="自增列导致的死锁"><a href="#自增列导致的死锁" class="headerlink" title="自增列导致的死锁"></a>自增列导致的死锁</h4><p>创建一个t2表，开启两个会话，下述是创建表的表结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t2` (</span><br><span class="line">  `a1` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `a2` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`a1`),</span><br><span class="line">  UNIQUE KEY `a2` (`a2`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p>模拟整个死锁的过程，如下表</p><table><thead><tr><th>发起时间</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>beign:<br>insert into t2 values(null,10);</td><td></td></tr><tr><td>T2</td><td></td><td>insert into t2 values(null,10);</td></tr><tr><td>T3</td><td>insert into t2 values(null,9); <br>在插入比自己大的序列不会产生死锁</td><td></td></tr><tr><td>T4</td><td></td><td>产生死锁</td></tr></tbody></table><p>查看死锁相关的日志，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-05-14 12:44:03 0x7f9784281700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 1969, ACTIVE 9 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 1</span><br><span class="line">MySQL thread id 16, OS thread handle 140288734279424, query id 1023 localhost root update</span><br><span class="line">insert into test.t2 values(null,10)</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 31 page no 4 n bits 72 index a2 of table `test`.`t2` trx id 1969 lock mode S waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 8000000a; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000004; asc     ;;</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 1968, ACTIVE 14 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">3 lock struct(s), heap size 1136, 2 row lock(s), undo log entries 3</span><br><span class="line">MySQL thread id 7, OS thread handle 140288734009088, query id 1025 localhost root update</span><br><span class="line">insert into t2 values(null,9)</span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 31 page no 4 n bits 72 index a2 of table `test`.`t2` trx id 1968 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 8000000a; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000004; asc     ;;</span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 31 page no 4 n bits 72 index a2 of table `test`.`t2` trx id 1968 lock_mode X locks gap before rec insert intention waiting</span><br><span class="line">Record lock, heap no 2 PHYSICAL RECORD: n_fields 2; compact format; info bits 0</span><br><span class="line"> 0: len 4; hex 8000000a; asc     ;;</span><br><span class="line"> 1: len 4; hex 80000004; asc     ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure><p>将死锁日志和加锁过程结合，如下表</p><table><thead><tr><th>发起时间</th><th>会话2</th><th>会话1</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>insert into t2 values(null,10);<br>持有X锁，record lock</td><td></td></tr><tr><td>T2</td><td></td><td>insert into t2 values(null,10);<br>申请S锁</td></tr><tr><td>T3</td><td>insert into t2 values(null,9);<br>申请等待插入意向锁（insert intention），进行冲突检测，等待会话1释放锁</td><td></td></tr><tr><td>T4</td><td></td><td>等待会话2释放列a2上的锁</td></tr><tr><td>T5</td><td></td><td>死锁</td></tr></tbody></table><h4 id="delete-和-insert混合的死锁"><a href="#delete-和-insert混合的死锁" class="headerlink" title="delete 和 insert混合的死锁"></a>delete 和 insert混合的死锁</h4><p>构建表的结构信息，使用两个会话</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t1` (</span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `a` int(10) unsigned DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `a` (`a`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><p>插入3条数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> insert into t1 values(1,10),(2,20),(3,30);</span></span><br></pre></td></tr></table></figure><p>模拟整个死锁的过程，如下表</p><table><thead><tr><th>发起时间</th><th>会话1</th><th>会话2</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br>delete from t1 where a = 20;</td><td></td></tr><tr><td>T2</td><td></td><td>beign;<br>delete from t1 where a =20;</td></tr><tr><td>T3</td><td>insert into t1 values(10,20);</td><td></td></tr><tr><td>T4</td><td></td><td>产生死锁</td></tr></tbody></table><p>查看死锁相关的日志，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">------------------------</span><br><span class="line">LATEST DETECTED DEADLOCK</span><br><span class="line">------------------------</span><br><span class="line">2021-05-14 16:46:35 0x7f9784347700</span><br><span class="line">*** (1) TRANSACTION:</span><br><span class="line">TRANSACTION 1990, ACTIVE 36 sec starting index read</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s)</span><br><span class="line">MySQL thread id 18, OS thread handle 140288734549760, query id 1052 localhost root updating</span><br><span class="line">delete from test.t1 where a=20</span><br><span class="line">*** (1) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 32 page no 4 n bits 72 index a of table `test`.`t1` trx id 1990 lock_mode X waiting</span><br><span class="line">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 00000014; asc     ;;</span><br><span class="line"> 1: len 4; hex 00000002; asc     ;;</span><br><span class="line"></span><br><span class="line">*** (2) TRANSACTION:</span><br><span class="line">TRANSACTION 1989, ACTIVE 66 sec inserting</span><br><span class="line">mysql tables in use 1, locked 1</span><br><span class="line">4 lock struct(s), heap size 1136, 3 row lock(s), undo log entries 2</span><br><span class="line">MySQL thread id 17, OS thread handle 140288734820096, query id 1053 localhost root update</span><br><span class="line">insert into t1 values(10,20)</span><br><span class="line">*** (2) HOLDS THE LOCK(S):</span><br><span class="line">RECORD LOCKS space id 32 page no 4 n bits 72 index a of table `test`.`t1` trx id 1989 lock_mode X locks rec but not gap</span><br><span class="line">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 00000014; asc     ;;</span><br><span class="line"> 1: len 4; hex 00000002; asc     ;;</span><br><span class="line"></span><br><span class="line">*** (2) WAITING FOR THIS LOCK TO BE GRANTED:</span><br><span class="line">RECORD LOCKS space id 32 page no 4 n bits 72 index a of table `test`.`t1` trx id 1989 lock mode S waiting</span><br><span class="line">Record lock, heap no 3 PHYSICAL RECORD: n_fields 2; compact format; info bits 32</span><br><span class="line"> 0: len 4; hex 00000014; asc     ;;</span><br><span class="line"> 1: len 4; hex 00000002; asc     ;;</span><br><span class="line"></span><br><span class="line">*** WE ROLL BACK TRANSACTION (1)</span><br></pre></td></tr></table></figure><p>将死锁日志和加锁过程结合，如下表</p><table><thead><tr><th>发起时间</th><th>会话2</th><th>会话1</th></tr></thead><tbody><tr><td>T1</td><td>begin;<br/>delete from t1 where a = 20;<br>X 锁，record lock</td><td></td></tr><tr><td>T3</td><td></td><td>begin;<br/>delete from t1 where a = 20;<br>等待X锁，record lock</td></tr><tr><td>T3</td><td>insert into t1 values(10,20);<br>申请S锁，进入等待队列</td><td></td></tr><tr><td>T4</td><td></td><td>产生死锁，回滚</td></tr></tbody></table><p>在这个场景中，其实是DML之间的相互影响，上述都是单一的单向insert和单向delete</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引与执行计划-4</title>
      <link href="2021/03/02/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92-4/"/>
      <url>2021/03/02/MySQL%E7%B4%A2%E5%BC%95%E4%B8%8E%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92-4/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-索引及执行计划"><a href="#MySQL-索引及执行计划" class="headerlink" title="MySQL-索引及执行计划"></a>MySQL-索引及执行计划</h1><h2 id="MySQL索引介绍"><a href="#MySQL索引介绍" class="headerlink" title="MySQL索引介绍"></a>MySQL索引介绍</h2><p>类似于一本书的许多目录，起到优化查询的作用，可以快速的找到想要的值，如果没有索引，就将会全局扫描，导致的查询的速度会慢几十倍，所以一张合格表都会建立索引</p><h3 id="索引的分类（算法）"><a href="#索引的分类（算法）" class="headerlink" title="索引的分类（算法）"></a>索引的分类（算法）</h3><ul><li>B树（tree）# 默认使用的所以类型</li><li>R树</li><li>Hash</li><li>FullText</li><li>GIS 索引</li></ul><h3 id="Btree-B树-索引算法演变"><a href="#Btree-B树-索引算法演变" class="headerlink" title="Btree(B树)索引算法演变"></a>Btree(B树)索引算法演变</h3><p>Btree索引类型演变过程为：<code>B-、B+、B*</code></p><p><code>B-</code>是叶子节点存储着一部分数值，枝节点取出每列最小的数值，根节点取出每个枝节点的最小值的数值，当查询数据时，比如数值是30，那么30会先到根节点28-65之间，进行中间的枝节点，然后通过指针指向节点找到30这个数值，不管是按什么数值找，都是以三步走，<strong>根节点–&gt;枝节点–&gt;叶节点</strong></p><p><code>B+</code>是添加了一个范围，比如比&gt;33值，然后可以从叶节点跳到另一个叶节点，这样不需要再重根节点遍历</p><p><code>B*</code>可以从枝节点调用另一个枝节点，这样不需要再重根节点遍历</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208163247103.png"></p><h3 id="Btree索引功能上的分类"><a href="#Btree索引功能上的分类" class="headerlink" title="Btree索引功能上的分类"></a>Btree索引功能上的分类</h3><p><strong>辅助索引</strong></p><ul><li>MySQL会自动将此列的值取出，将此列进行自动排行</li><li>将排序好的值，均匀的存放在叶子节点，进一步生成枝节点和根节点</li><li>在叶子节点中的值，都会对应存储主键ID</li></ul><p><strong>聚集索引</strong></p><ul><li><p>MySQL会自动选择主键作为聚集索引列，没有主键会选择唯一键，如果都没有，则会生成隐藏的主键（5.5以后的版本才有）</p></li><li><p>MySQL进行存储数据时，会按照聚集索引列值排序，有序存储数据行</p></li><li><p>聚集索引直接将原表数据页作为叶子节点，然后提取聚集索引向上成枝节点和根节点</p></li></ul><p><strong>聚集索引和辅助索引的区别</strong></p><ul><li>表中任何一个列都可以创建辅助索引，在你有需要的时候，只要名字不同即可</li><li>在一张表中，聚集索引只能有一个，一般是主键</li><li>辅助索引，叶子节点只存储索引列的有序值+聚集索引列值</li><li>聚集索引，叶子节点存储的是有序的整行数据</li><li>MySQL的表数据存储是聚集索引的组织表</li></ul><p>下图是聚集索引与辅助索引在B树上的过程</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208165149401.png"></p><h3 id="辅助索引细分"><a href="#辅助索引细分" class="headerlink" title="辅助索引细分"></a>辅助索引细分</h3><ul><li>单列辅助索引</li><li>联合索引（覆盖索引）</li><li>唯一索引</li></ul><h3 id="增删改索引"><a href="#增删改索引" class="headerlink" title="增删改索引"></a>增删改索引</h3><p><strong>以world的city表做示例，查看索引</strong></p><ul><li>PRI：主键索引</li><li>MUL：辅助索引</li><li>UNI：唯一索引</li></ul><p>可以看到，city有两个索引，一个主索引和一个辅助索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">world</span>;</span><br><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">city</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br></pre></td></tr></table></figure><p>查询city索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">index</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span>\<span class="selector-tag">G</span></span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">        <span class="selector-tag">Table</span>: <span class="selector-tag">city</span></span><br><span class="line">   <span class="selector-tag">Non_unique</span>: 0</span><br><span class="line">     <span class="selector-tag">Key_name</span>: <span class="selector-tag">PRIMARY</span></span><br><span class="line"> <span class="selector-tag">Seq_in_index</span>: 1</span><br><span class="line">  <span class="selector-tag">Column_name</span>: <span class="selector-tag">ID</span></span><br><span class="line">    <span class="selector-tag">Collation</span>: <span class="selector-tag">A</span></span><br><span class="line">  <span class="selector-tag">Cardinality</span>: 4046</span><br><span class="line">     <span class="selector-tag">Sub_part</span>: <span class="selector-tag">NULL</span></span><br><span class="line">       <span class="selector-tag">Packed</span>: <span class="selector-tag">NULL</span></span><br><span class="line">         <span class="selector-tag">Null</span>: </span><br><span class="line">   <span class="selector-tag">Index_type</span>: <span class="selector-tag">BTREE</span></span><br><span class="line">      <span class="selector-tag">Comment</span>: </span><br><span class="line"><span class="selector-tag">Index_comment</span>: </span><br><span class="line">*************************** 2. <span class="selector-tag">row</span> ***************************</span><br><span class="line">        <span class="selector-tag">Table</span>: <span class="selector-tag">city</span></span><br><span class="line">   <span class="selector-tag">Non_unique</span>: 1</span><br><span class="line">     <span class="selector-tag">Key_name</span>: <span class="selector-tag">CountryCode</span></span><br><span class="line"> <span class="selector-tag">Seq_in_index</span>: 1</span><br><span class="line">  <span class="selector-tag">Column_name</span>: <span class="selector-tag">CountryCode</span></span><br><span class="line">    <span class="selector-tag">Collation</span>: <span class="selector-tag">A</span></span><br><span class="line">  <span class="selector-tag">Cardinality</span>: 232</span><br><span class="line">     <span class="selector-tag">Sub_part</span>: <span class="selector-tag">NULL</span></span><br><span class="line">       <span class="selector-tag">Packed</span>: <span class="selector-tag">NULL</span></span><br><span class="line">         <span class="selector-tag">Null</span>: </span><br><span class="line">   <span class="selector-tag">Index_type</span>: <span class="selector-tag">BTREE</span></span><br><span class="line">      <span class="selector-tag">Comment</span>: </span><br><span class="line"><span class="selector-tag">Index_comment</span>: </span><br></pre></td></tr></table></figure><p>创建辅助索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_name</span>(<span class="selector-tag">name</span>);</span><br><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">city</span>    //查看索引<span class="selector-tag">name</span>的<span class="selector-tag">key</span>值变成了<span class="selector-tag">MUl</span></span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   | MUL |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br></pre></td></tr></table></figure><p>创建多列的联合索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_c_p</span>(<span class="selector-tag">countrycode</span>,<span class="selector-tag">population</span>);</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">index</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span>\<span class="selector-tag">G</span>    //使用这种方法查看索引，才能看到</span><br></pre></td></tr></table></figure><p>创建唯一索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">add</span> <span class="selector-tag">unique</span> <span class="selector-tag">key</span>(<span class="selector-tag">district</span>);</span><br></pre></td></tr></table></figure><p>创建前缀索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_dis</span>(<span class="selector-tag">district</span>(5));</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">index</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span>\<span class="selector-tag">G</span>;</span><br><span class="line">        <span class="selector-tag">Table</span>: <span class="selector-tag">city</span></span><br><span class="line">   <span class="selector-tag">Non_unique</span>: 1</span><br><span class="line">     <span class="selector-tag">Key_name</span>: <span class="selector-tag">idx_dis</span></span><br><span class="line"> <span class="selector-tag">Seq_in_index</span>: 1</span><br><span class="line">  <span class="selector-tag">Column_name</span>: <span class="selector-tag">District</span></span><br><span class="line">    <span class="selector-tag">Collation</span>: <span class="selector-tag">A</span></span><br><span class="line">  <span class="selector-tag">Cardinality</span>: 1225</span><br><span class="line">     <span class="selector-tag">Sub_part</span>: 5</span><br><span class="line">       <span class="selector-tag">Packed</span>: <span class="selector-tag">NULL</span></span><br><span class="line">         <span class="selector-tag">Null</span>: </span><br><span class="line">   <span class="selector-tag">Index_type</span>: <span class="selector-tag">BTREE</span></span><br><span class="line">      <span class="selector-tag">Comment</span>: </span><br><span class="line"><span class="selector-tag">Index_comment</span>: </span><br></pre></td></tr></table></figure><p>删除索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">drop</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_name</span>;</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">drop</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_c_p</span>;</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">city</span> <span class="selector-tag">drop</span> <span class="selector-tag">index</span> <span class="selector-tag">idx_dis</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL索引导致的问题"><a href="#MySQL索引导致的问题" class="headerlink" title="MySQL索引导致的问题"></a>MySQL索引导致的问题</h2><h3 id="MySQL主键隐患问题"><a href="#MySQL主键隐患问题" class="headerlink" title="MySQL主键隐患问题"></a>MySQL主键隐患问题</h3><p>对于主键，建表规范中强调一个要点：每张表都建议有主键</p><p>除了规范，从存储InooDB引擎中，表都是按照主键的顺序进行存放的，聚集索引或者索引组织表（IOT），表中主键参考如下</p><ul><li>显示的创建主键primary key</li><li>判断表中是否有非空唯一索引，如果有，则为主键</li><li>如果都不符合上述条件，则会生成一个隐藏主键UUID（6字节大小）</li></ul><p>MySQL对于主键有一套维护机制，而一些常见的索引也会产生相应的影响，比如唯一性索引、非唯一性索引、联合索引等都是辅助索引（secondary index，也叫二级索引），从存储角度来说，二级索引中默认包含主键列，如果主键太长，也会使得二级索引很占空间</p><h3 id="唯一性索引产生的冗余数据"><a href="#唯一性索引产生的冗余数据" class="headerlink" title="唯一性索引产生的冗余数据"></a>唯一性索引产生的冗余数据</h3><p>很多人认为建立唯一性索引和主键没有什么差别，除了知道的一些概念之外，包括我自己，而通过这个理示例可以让你更了解主键与唯一键区别，让其不会掉入陷阱</p><p>创建一个简单的表，建立唯一索引，插入一行数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">unique_test</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>,<span class="selector-tag">name</span> <span class="selector-tag">varchar</span>(20));</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">unique_test</span> <span class="selector-tag">add</span> <span class="selector-tag">unique</span> <span class="selector-tag">key</span>(<span class="selector-tag">id</span>);</span><br><span class="line">&gt; insert into unique_test values(1,&#x27;aa&#x27;);</span><br></pre></td></tr></table></figure><p>再插入一行相同的数据，会报以下错误，唯一的作用凸显出来了</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; insert into unique_test values(1,&#x27;aa&#x27;);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;id&#x27;</span><br></pre></td></tr></table></figure><p>删除原来的索引，创建一个新的唯一索引，基于列的（id, name)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">unique_test</span> <span class="selector-tag">drop</span> <span class="selector-tag">index</span> <span class="selector-tag">id</span>;</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">unique_test</span> <span class="selector-tag">add</span> <span class="selector-tag">unique</span> <span class="selector-tag">key</span>(<span class="selector-tag">id</span>,<span class="selector-tag">name</span>);</span><br></pre></td></tr></table></figure><p>插入一行新的数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; insert into unique_test values(1,&#x27;aa&#x27;);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#x27;1-aa&#x27; for key &#x27;id&#x27;</span><br></pre></td></tr></table></figure><p>显然还是不行，报错了，唯一约束生效了，不能插入，我们在插入这么一行数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">unique_test</span> <span class="selector-tag">values</span>(1,<span class="selector-tag">null</span>);</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">unique_test</span>;</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|    1 | NULL |</span><br><span class="line">|    1 | aa   |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><p>可以插入NULL值，这是什么原因？其实就是出现在null上，可以说这是问题的根源，是唯一性索引和主键的差别，就是<code>主键约束相较于唯一性约束</code>来说，主键还有一个默认的属性，那就是<code>not null</code></p><p>继续插入上述相同的数据看看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">unique_test</span> <span class="selector-tag">values</span>(1,<span class="selector-tag">null</span>);</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">unique_test</span>;</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">| id   | name |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br><span class="line">|    1 | NULL |</span><br><span class="line">|    1 | NULL |</span><br><span class="line">|    1 | aa   |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+</span><br></pre></td></tr></table></figure><blockquote><p>PS：在MySQL数据中如果产生冗余，有可能就是唯一键导致的</p></blockquote><h3 id="null的问题"><a href="#null的问题" class="headerlink" title="null的问题"></a>null的问题</h3><p><strong>null和空串的处理方式差异</strong>：不同数据库中对于null和空串的处理方式有所不同，在MySQL中null和空串是两个完全对立的对象，尽管看上去都是相似，都没有数据</p><p><strong>count处理的差异，下面两条的两条SQL的数据会截然不同</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; select count(*) from unique_test where id=1;</span><br><span class="line">+<span class="selector-tag">----------</span>+</span><br><span class="line">| count(*) |</span><br><span class="line">+<span class="selector-tag">----------</span>+</span><br><span class="line">|        3 |</span><br><span class="line">+<span class="selector-tag">----------</span>+</span><br></pre></td></tr></table></figure><p>如果根据name列来进行条数统计，会发现count不会统计null行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; select count(name) from unique_test where id=1;</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">| count(name) |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br><span class="line">|           1 |</span><br><span class="line">+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p><strong>含有null值的组合索引</strong></p><p>对于上述问题解决方法是比避免使用null约束，能创建主键就不要使用唯一键约束，能设置属性为not null就不要设置成null，不知道填什么可以填0</p><h2 id="MySQL的mysqlslap压力测试"><a href="#MySQL的mysqlslap压力测试" class="headerlink" title="MySQL的mysqlslap压力测试"></a>MySQL的mysqlslap压力测试</h2><h3 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h3><blockquote><p>链接：<a href="https://pan.baidu.com/s/1goHUQhlRZpw3wo64rilTGg">https://pan.baidu.com/s/1goHUQhlRZpw3wo64rilTGg</a><br>提取码：7h2b </p></blockquote><p>导入数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; create database test charset=utf8</span><br><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">test</span></span><br><span class="line">&gt; <span class="selector-tag">source</span> /<span class="selector-tag">tmp</span>/<span class="selector-tag">tw100</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p>未优化的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">t100w</span>;</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------------------------</span>+</span><br><span class="line">| Field | Type      | Null | Key | Default           | Extra                       |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------------------------</span>+</span><br><span class="line">| id    | int(11)   | YES  |     | NULL              |                             |</span><br><span class="line">| num   | int(11)   | YES  |     | NULL              |                             |</span><br><span class="line">| k1    | char(2)   | YES  |     | NULL              |                             |</span><br><span class="line">| k2    | char(4)   | YES  |     | NULL              |                             |</span><br><span class="line">| dt    | timestamp | NO   |     | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------------------------</span>+</span><br></pre></td></tr></table></figure><h3 id="未做优化之前的测试结果"><a href="#未做优化之前的测试结果" class="headerlink" title="未做优化之前的测试结果"></a>未做优化之前的测试结果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlslap --defaults-file=/etc/my.cnf \</span><br><span class="line">&gt; --concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; \</span><br><span class="line">&gt; --query=&quot;select * from test.t100w where k2=&#x27;MN89&#x27;&quot; engine=innodb \</span><br><span class="line">&gt; --number-of-queries=2000 -uroot -p123456 -verbose</span><br><span class="line"><span class="selector-tag">mysqlslap</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line"><span class="selector-tag">Benchmark</span></span><br><span class="line"><span class="selector-tag">Running</span> <span class="selector-tag">for</span> <span class="selector-tag">engine</span> <span class="selector-tag">rbose</span></span><br><span class="line"><span class="selector-tag">Average</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 1096.414 <span class="selector-tag">seconds</span>    //需要1000多秒</span><br><span class="line"><span class="selector-tag">Minimum</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 1096.414 <span class="selector-tag">seconds</span></span><br><span class="line"><span class="selector-tag">Maximum</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 1096.414 <span class="selector-tag">seconds</span></span><br><span class="line"><span class="selector-tag">Number</span> <span class="selector-tag">of</span> <span class="selector-tag">clients</span> <span class="selector-tag">running</span> <span class="selector-tag">queries</span>: 100</span><br><span class="line"><span class="selector-tag">Average</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">queries</span> <span class="selector-tag">per</span> <span class="selector-tag">client</span>: 20</span><br></pre></td></tr></table></figure><h3 id="添加索引的测试结果"><a href="#添加索引的测试结果" class="headerlink" title="添加索引的测试结果"></a>添加索引的测试结果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">t100w</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_x</span>(<span class="selector-tag">k2</span>);     //添加索引</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mysqlslap --defaults-file=/etc/my.cnf --concurrency=100 --iterations=1 --create-schema=&#x27;test&#x27; --query=&quot;select * from test.t100w where k2=&#x27;MN89&#x27;&quot; engine=innodb --number-of-queries=2000 -uroot -p123456 -verbose</span><br><span class="line"><span class="selector-tag">mysqlslap</span>: <span class="selector-attr">[Warning]</span> <span class="selector-tag">Using</span> <span class="selector-tag">a</span> <span class="selector-tag">password</span> <span class="selector-tag">on</span> <span class="selector-tag">the</span> <span class="selector-tag">command</span> <span class="selector-tag">line</span> <span class="selector-tag">interface</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">insecure</span>.</span><br><span class="line"><span class="selector-tag">Benchmark</span></span><br><span class="line"><span class="selector-tag">Running</span> <span class="selector-tag">for</span> <span class="selector-tag">engine</span> <span class="selector-tag">rbose</span></span><br><span class="line"><span class="selector-tag">Average</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 2.546 <span class="selector-tag">seconds</span>      //只需要2秒</span><br><span class="line"><span class="selector-tag">Minimum</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 2.546 <span class="selector-tag">seconds</span></span><br><span class="line"><span class="selector-tag">Maximum</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">seconds</span> <span class="selector-tag">to</span> <span class="selector-tag">run</span> <span class="selector-tag">all</span> <span class="selector-tag">queries</span>: 2.546 <span class="selector-tag">seconds</span></span><br><span class="line"><span class="selector-tag">Number</span> <span class="selector-tag">of</span> <span class="selector-tag">clients</span> <span class="selector-tag">running</span> <span class="selector-tag">queries</span>: 100</span><br><span class="line"><span class="selector-tag">Average</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">queries</span> <span class="selector-tag">per</span> <span class="selector-tag">client</span>: 20</span><br></pre></td></tr></table></figure><h2 id="MySQL执行计划分析"><a href="#MySQL执行计划分析" class="headerlink" title="MySQL执行计划分析"></a>MySQL执行计划分析</h2><p>MySQL里有两种分析执行计划的参数，desc与explain分析，我们通过下面这条语句得到的执行计划进行每列的字段说明</p><p>将优化器选择后的执行计划截取出来，便于管理判断语句得执行效率</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">city</span>;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 4046 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p>下表记录执行计划的每个字段描述</p><table><thead><tr><th>执行计划列</th><th>列值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>1</td><td>Mysql选定的执行计划中查询的序列号</td></tr><tr><td>select_type</td><td>SIMPLE</td><td>语句所使用的查询类型，SIMPLE表示除子查询或UNION之外的查询</td></tr><tr><td>table</td><td>test</td><td>数据库中的表和表名</td></tr><tr><td>partitions</td><td>NULL</td><td>查询将访问的分区（如果查询是基于分区表）</td></tr><tr><td>type</td><td>ALL</td><td>表的访问方式，ALL表示全索引扫描，如果出现index也是全索引扫描，不过只扫描索引树，比ALL块一些</td></tr><tr><td>possible_keys</td><td>NULL</td><td>在搜索表记录时可能使用哪个索引，此处表示没有任何索引可使用</td></tr><tr><td>key</td><td>NULL</td><td>查询优化器从possible_keys中锁选择使用的索引</td></tr><tr><td>key_len</td><td>12</td><td>被选中索引的索引键长度，MySQL使用索引的长度</td></tr><tr><td>ref</td><td>NULL</td><td>通过变量还是通过某个表的字段过滤的</td></tr><tr><td>rows</td><td>4046</td><td>查询优化器通过系统手机的统计信息估算出的结果集记录条数</td></tr><tr><td>filtered</td><td>100</td><td>针对表里符合某个条件（where或者连接）的记录数的百分比做的悲观估算</td></tr><tr><td>Extra</td><td>Using index</td><td>查询中MySQL的附加信息</td></tr></tbody></table><h3 id="分析执行计划（Type列）"><a href="#分析执行计划（Type列）" class="headerlink" title="分析执行计划（Type列）"></a>分析执行计划（Type列）</h3><ul><li>全表扫描：ALL </li></ul><ul><li>索引扫描：index、range、ref、eq_ref、conse(system)、Null</li></ul><h4 id="索引扫描-index"><a href="#索引扫描-index" class="headerlink" title="索引扫描 index"></a>索引扫描 index</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">select</span> <span class="selector-tag">countrycode</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span>;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----</span></span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key         | key_len | ref  | rows | filtered | </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----</span></span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | index | NULL          | CountryCode | 12      | NULL | 4046 |   100.00 | </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----</span></span><br></pre></td></tr></table></figure><h4 id="索引范围扫描-range"><a href="#索引范围扫描-range" class="headerlink" title="索引范围扫描 range"></a>索引范围扫描 range</h4><ul><li>范围扫描包括<code>&gt;，&lt;，&gt;=，&lt;=，between and，or，in，like</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">city</span> <span class="selector-tag">where</span> <span class="selector-tag">id</span>&gt;2000;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">---------</span></span><br><span class="line">| id | select_type | table | partitions | #type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra   </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">---------</span></span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | #range | PRIMARY       | PRIMARY | 4       | NULL | 2023 |   100.00 | Using </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">---------</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode like &#x27;CH%&#x27;;</span><br><span class="line">&gt; desc select * from city where countrycode=&#x27;CHN&#x27; or  countrycode=&#x27;USA&#x27;;</span><br><span class="line">&gt; desc select * from city where countrycode in (&#x27;CHN&#x27;,&#x27;USR&#x27;);</span><br><span class="line">&gt; desc select * from city where id != 10</span><br></pre></td></tr></table></figure><blockquote><p>注意：对于主键索引列来说，!=和not in等语句是走range的；对于辅助索引来说，!=和not in等语句是不走索引的</p></blockquote><p><strong>走索引情况</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode=&#x27;CHN&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ref  | CountryCode   | CountryCode | 12      | const |  363 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p><strong>不走索引的情况</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode != &#x27;CHN&#x27;;                  </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ALL  | CountryCode   | NULL | NULL    | NULL | 4046 |    91.84 | Using where |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><h4 id="辅助索引等值查询-ref"><a href="#辅助索引等值查询-ref" class="headerlink" title="辅助索引等值查询 ref"></a>辅助索引等值查询 ref</h4><p>ref一般使用为union all</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode=&#x27;CHN&#x27; union all select * from city where countrycode=&#x27;Ude=&#x27;USA&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | PRIMARY     | city  | NULL       | ref  | CountryCode   | CountryCode | 12      | const |  363 |   100.00 | NULL  |</span><br><span class="line">|  2 | UNION       | city  | NULL       | ref  | CountryCode   | CountryCode | 12      | const |  274 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><h4 id="多表连接时-eq-ref"><a href="#多表连接时-eq-ref" class="headerlink" title="多表连接时 eq_ref"></a>多表连接时 eq_ref</h4><p>子表使用主键列或唯一列作为连接条件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select b.name,a.name,a.population from city as a join country as b on a.countrycode=b.code where a.population&lt;100;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------</span></span><br><span class="line">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref                 | rows | filtered | Extra     </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------</span></span><br><span class="line">|  1 | SIMPLE      | a     | NULL       | ALL    | CountryCode   | NULL    | NULL    | NULL                | 4046 |    33.33 | Using where |</span><br><span class="line">|  1 | SIMPLE      | b     | NULL       | eq_ref | PRIMARY       | PRIMARY | 12      | world.a.CountryCode |    1 |   100.00 | NULL       </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------</span></span><br></pre></td></tr></table></figure><h4 id="主键或唯一键的等值查询-const-system"><a href="#主键或唯一键的等值查询-const-system" class="headerlink" title="主键或唯一键的等值查询 const(system)"></a>主键或唯一键的等值查询 const(system)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where id=100;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | #type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | #const | PRIMARY       | PRIMARY | 4       | const |    1 |   100.00 | NULL </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><h4 id="没有查询结果-NULL"><a href="#没有查询结果-NULL" class="headerlink" title="没有查询结果 NULL"></a>没有查询结果 NULL</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where id=0000;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span></span><br><span class="line">| id | select_type | table | partitions | #type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                          |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span></span><br><span class="line">|  1 | SIMPLE      | NULL  | NULL       | #NULL | NULL          | NULL | NULL    | NULL | NULL |     NULL | no matching </span><br></pre></td></tr></table></figure><h3 id="分析执行计划（possible-key列）"><a href="#分析执行计划（possible-key列）" class="headerlink" title="分析执行计划（possible_key列）"></a>分析执行计划（possible_key列）</h3><p> countrycode是辅助索引，所以会在possible_key出现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode = &#x27;CHN&#x27;; </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ref  | CountryCode   | CountryCode | 12      | const |  363 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p>同样是使用where，但是没有走索引，因为真正key没有值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode != &#x27;CHN&#x27;; </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span></span><br><span class="line">| id | select_type | table | partitions | type | #possible_keys | #key  | key_len </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span></span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ALL  | #CountryCode   | #NULL | NULL    </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span></span><br></pre></td></tr></table></figure><h3 id="分析执行计划（key列）"><a href="#分析执行计划（key列）" class="headerlink" title="分析执行计划（key列）"></a>分析执行计划（key列）</h3><p>只有key有值，才算走了索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from city where countrycode = &#x27;CHN&#x27;; </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | #key         | key_len |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ref  | CountryCode   | #CountryCode | 12      |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+</span><br></pre></td></tr></table></figure><h3 id="分析执行计划（key-len列）"><a href="#分析执行计划（key-len列）" class="headerlink" title="分析执行计划（key_len列）"></a>分析执行计划（key_len列）</h3><p>key_len大小的计算规则如下：</p><ul><li>一般地，key_len等于索引列类型字节长度，例如int类型4-bytes，bigint为8-bytes</li><li>如果字符串类型，需要考虑字符集因素，如char(30)，utf8的key_len则是90-bytes</li><li>若该列类型定义时允许NULL，其key_len还需要再加1bytes</li><li>若该列类型变长类型，如varchar（text/blob不允许整列创建索引，如果创建部分索引，也被视为动态列类型），其key_len还需要再加2-bytes</li></ul><p>字符集的换算</p><ul><li><p>utf8mb4 == 每个字符，中文字符 == 4个字节，英文或者是数字每个字符 == 1个字节</p></li><li><p>utf8 == 每个字符，中文字符 == 3个字节，英文或者是数字每个字符 == 1个字节</p></li></ul><p>单独创建一个表，并设置为utf8mb4字符集</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span>(<span class="selector-tag">id</span> <span class="selector-tag">int</span>,<span class="selector-tag">k1</span> <span class="selector-tag">char</span>(2),<span class="selector-tag">k2</span> <span class="selector-tag">varchar</span>(2),<span class="selector-tag">k3</span> <span class="selector-tag">char</span>(4),<span class="selector-tag">k4</span> <span class="selector-tag">varchar</span>(4)) <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span>;</span><br><span class="line">...........省略...............</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 </span><br></pre></td></tr></table></figure><p>对表插入数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; insert into test values(1,&#x27;aa&#x27;,&#x27;中国&#x27;,&#x27;bbbb&#x27;,&#x27;欢迎来到&#x27;);</span><br><span class="line">&gt; insert into test values(2,&#x27;xx&#x27;,&#x27;中国&#x27;,&#x27;yyyy&#x27;,&#x27;欢迎来到&#x27;);</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test</span>;</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------------</span>+</span><br><span class="line">| id   | k1   | k2     | k3   | k4           |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------------</span>+</span><br><span class="line">|    1 | aa   | 中国   | bbbb | 欢迎来到     |</span><br><span class="line">|    2 | xx   | 中国   | yyyy | 欢迎来到     |</span><br><span class="line">+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">--------------</span>+</span><br></pre></td></tr></table></figure><p>创建索引和辅助索引</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_x</span>(<span class="selector-tag">id</span>);</span><br><span class="line"><span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">k1</span>(<span class="selector-tag">k1</span>);</span><br><span class="line"><span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">k2</span>(<span class="selector-tag">k2</span>);</span><br><span class="line"><span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">k3</span>(<span class="selector-tag">k3</span>);</span><br><span class="line"><span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">k4</span>(<span class="selector-tag">k4</span>);</span><br></pre></td></tr></table></figure><h4 id="查看key-len长度"><a href="#查看key-len长度" class="headerlink" title="查看key_len长度"></a>查看key_len长度</h4><p>查看k1设置的是char(2)，但是key_len长度是9，因为utf8mb4字符集会预留最大的字节，也就是中文的字节，1个中文 == 1个字符 == 4个字节，所以char(2) == 8个字节，再加上mysql对key值保留一个非空字节长度，所以8+1=9,key_len长度等于9</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from  test where k1=&#x27;aa&#x27;;  </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | k1            | k1   | 9       | const |    1 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p>k2的类型是varchar(2)，8+1=9个字节，但是varcher类型还对头和尾加上一个字节，所以9+2=11个字节</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from  test where k2=&#x27;中国&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | k2            | k2   | 11      | const |    2 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p>以此类推，char(4)=17个字节，varchar(4)=19个字节</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from  test where k3=&#x27;bbbb&#x27;;</span><br><span class="line">&gt; desc select * from  test where k4=&#x27;欢迎来到&#x27;;</span><br></pre></td></tr></table></figure><h4 id="数据（date）类型的差别"><a href="#数据（date）类型的差别" class="headerlink" title="数据（date）类型的差别"></a>数据（date）类型的差别</h4><p>对于date类型的处理，有一个很细小的差别，date不同的类型有不同的长度，我们看看这张表结构</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| t100w | CREATE TABLE `t100w` (</span><br><span class="line">  `<span class="selector-tag">id</span>` <span class="selector-tag">int</span>(11) <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line">  `<span class="selector-tag">num</span>` <span class="selector-tag">int</span>(11) <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line">  `<span class="selector-tag">k1</span>` <span class="selector-tag">char</span>(2) <span class="selector-tag">COLLATE</span> <span class="selector-tag">utf8mb4_bin</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line">  `<span class="selector-tag">k2</span>` <span class="selector-tag">char</span>(4) <span class="selector-tag">COLLATE</span> <span class="selector-tag">utf8mb4_bin</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">NULL</span>,</span><br><span class="line">  `<span class="selector-tag">dt</span>` <span class="selector-tag">timestamp</span> <span class="selector-tag">NOT</span> <span class="selector-tag">NULL</span> <span class="selector-tag">DEFAULT</span> <span class="selector-tag">CURRENT_TIMESTAMP</span> <span class="selector-tag">ON</span> <span class="selector-tag">UPDATE</span> <span class="selector-tag">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `dd` datetime DEFAULT NULL COMMENT &#x27;时间&#x27;,</span><br><span class="line">  <span class="selector-tag">KEY</span> `<span class="selector-tag">idx</span>` (`<span class="selector-tag">id</span>`,`<span class="selector-tag">dt</span>`,`<span class="selector-tag">dd</span>`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin   |</span><br></pre></td></tr></table></figure><p>插入一行数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; insert into t100w values(1,5555,&#x27;aa&#x27;,&#x27;bbbb&#x27;,&#x27;2019-07-09 16:01:40&#x27;,&#x27;2020-07-09 16:01:42&#x27;);</span><br></pre></td></tr></table></figure><p>执行下面的语句中得到的key_len</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; explain select dt,dd from t100w where dt = &#x27;2019-07-09 16:01:40&#x27; and dd = &#x27;2020-07-09 16:01:42&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref         | rows | filtered | Extra       |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">|  1 | SIMPLE      | t100w | NULL       | ref  | idx           | idx  | 10      | const,const |    1 |   100.00 | Using index |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p>可以看出key_len长度是10字节，是怎么计算出来的呢，这里就要看MySQL 5.6版本中的存储差别</p><table><thead><tr><th>数据类型</th><th>MySQL5.6.4以前的存储需求</th><th>子MySQL5.6.4起的存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>1byte</td><td>1byte</td></tr><tr><td>DATE</td><td>3bytes</td><td>3bytes</td></tr><tr><td>TIME</td><td>3bytes</td><td>3bytes + fractional seconds storage</td></tr><tr><td>DATETIME</td><td>8bytes</td><td>5bytes + fractional seconds storage</td></tr><tr><td>TIMESTAMP</td><td>4bytes</td><td>4bytes + fractional seconds storage</td></tr></tbody></table><p>所以按照上面计算，这条SQL语句中的key_len值在5.7版本是4(datetime)+5(timestamp)=9，在加上MySQL保留一个非空值，所以加起来等于10(len)</p><h3 id="得到执行计划详细信息的两种方法"><a href="#得到执行计划详细信息的两种方法" class="headerlink" title="得到执行计划详细信息的两种方法"></a>得到执行计划详细信息的两种方法</h3><p>简单的SQL语句，看起来简单，但执行计划却相对复杂，如何定位查询优化器在这个过程的处理，可以通过两种技巧，一种是explain extended的方式，一种是使用优化器trace的方式</p><h4 id="explain-extended的方式"><a href="#explain-extended的方式" class="headerlink" title="explain extended的方式"></a>explain extended的方式</h4><p>在执行SQL语句前加上explain extended，使用show warning即可得到执行计划的明细信息，如下面的SQL语句</p><p>先得到执行计划</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; explain extended select countrycode,count(population) from city where countrycode=&#x27;CHN&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key         | key_len | ref   | rows | filtered | Extra |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">|  1 | SIMPLE      | city  | NULL       | ref  | CountryCode   | CountryCode | 12      | const |  363 |   100.00 | NULL  |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><p>通过show warings看详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show warnings\G;</span></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Level: Warning</span><br><span class="line">   Code: 1681</span><br><span class="line">Message: &#x27;EXTENDED&#x27; is deprecated and will be removed in a future release.</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">  Level: Note</span><br><span class="line">   Code: 1003</span><br><span class="line">Message: /* select#1 */ select `world`.`city`.`CountryCode` AS `countrycode`,count(`world`.`city`.`Population`) AS `count(population)` from `world`.`city` where (`world`.`city`.`CountryCode` = &#x27;CHN&#x27;)</span><br></pre></td></tr></table></figure><h4 id="使用optimize-trace"><a href="#使用optimize-trace" class="headerlink" title="使用optimize_trace"></a>使用optimize_trace</h4><p>开启trace，默认是关闭的（在MySQL 5.6以上版本中可用）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@optimizer_trace</span>;</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| @@optimizer_trace        |</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| enabled=off,one_line=off |</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line"></span><br><span class="line">&gt; set optimizer_trace=&quot;enabled=on&quot;;</span><br></pre></td></tr></table></figure><p>然后运行语句，通过下面的查询得到trace信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; explain extended select countrycode,count(population) from city where countrycode=&#x27;CHN&#x27;;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">information_schema</span><span class="selector-class">.optimizer_trace</span>\<span class="selector-tag">G</span>;</span><br><span class="line">1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">                            QUERY: explain extended select countrycode,count(population) from city where countrycode=&#x27;CHN&#x27;</span><br><span class="line">                            <span class="selector-tag">TRACE</span>: &#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_preparation&quot;: &#123;</span><br><span class="line">        &quot;<span class="selector-tag">select</span>#&quot;: 1,</span><br><span class="line">        &quot;steps&quot;: [</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;expanded_query&quot;: &quot;/* select#1 */ select `city`.`CountryCode` AS `countrycode`,count(`city`.`Population`) AS `count(population)` from `city` where (`city`.`CountryCode` = &#x27;CHN&#x27;)&quot;</span><br><span class="line">.......................................省略.............................................</span><br></pre></td></tr></table></figure><h2 id="联合索引应用"><a href="#联合索引应用" class="headerlink" title="联合索引应用"></a>联合索引应用</h2><h3 id="联合索引等值查询"><a href="#联合索引等值查询" class="headerlink" title="联合索引等值查询"></a>联合索引等值查询</h3><ul><li>所有索引列都是&lt;等值&gt;查询条件下，无关排序顺序，唯一值多的列放在最左侧，从范围的大到范围小，效率会更高。比如其他：abcd、acdb、adbc等等，这样优化器会自动左查询条件的排列（会自动排序）</li></ul><p>创建索引，k1,k2,k3,k4顺序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_x</span>(<span class="selector-tag">k1</span>,<span class="selector-tag">k2</span>,<span class="selector-tag">k3</span>,<span class="selector-tag">k4</span>);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from test where k1=&#x27;aa&#x27; and k2=&#x27;中国&#x27; and k3=&#x27;aaaa&#x27; and k4=&#x27;欢迎来到&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | #key_len | ref                     |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | id_x          | id_x | #56      | const,const,const,const |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br></pre></td></tr></table></figure><p>k1,k2,k4,k3顺序，也会走联合索引，因为会自动排序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from test where k1=&#x27;aa&#x27; and k2=&#x27;中国&#x27;  and k4=&#x27;欢迎来到&#x27; and k3=&#x27;aaaa&#x27;; </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | #key_len | ref                     |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | id_x          | id_x | #56      | const,const,const,const |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------------------</span>+</span><br></pre></td></tr></table></figure><h3 id="不连续部分查询"><a href="#不连续部分查询" class="headerlink" title="不连续部分查询"></a>不连续部分查询</h3><p>如果按k1,k2,k4顺序，那么走完k1,k2后面的就不会走索引了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from test where k1=&#x27;aa&#x27; and k2=&#x27;中国&#x27; and k4=&#x27;欢迎来到&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref         | rows | filtered | Extra                 |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | id_x          | id_x | 20      | const,const |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br></pre></td></tr></table></figure><p>按k4,k3,k1排序之后，走k1，后面的就不走索引了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from test where  k4=&#x27;欢迎来到&#x27; and k3=&#x27;aaa&#x27; and k1=&#x27;aa&#x27;;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref   | rows | filtered | Extra                 |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ref  | id_x          | id_x | 9       | const |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br></pre></td></tr></table></figure><p><strong>如何优化联合索引</strong>：创建索引只要是三个就行，比如说(k4,k2,k1),(k2,k4,k1)没有问题，因为会优化器会自动帮你排列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_a</span>(<span class="selector-tag">k1</span>,<span class="selector-tag">k2</span>,<span class="selector-tag">k4</span>);</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_a</span>(<span class="selector-tag">k1</span>,<span class="selector-tag">k3</span>,<span class="selector-tag">k4</span>);</span><br></pre></td></tr></table></figure><h3 id="where查询不走索引情况"><a href="#where查询不走索引情况" class="headerlink" title="where查询不走索引情况"></a>where查询不走索引情况</h3><ul><li>在where查询中如果出现&lt; &gt; &gt;= &lt;= like，需要将查询的索引排序创建，否者不会走索引</li></ul><p>将k1放到最后只有了k1索引，其他的都没有走</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from test where  k2=&#x27;中国&#x27; and k3=&#x27;aaaa&#x27; and k4=&#x27;欢迎来到&#x27; and k1&gt;&#x27;aa&#x27;; </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                 |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | range | id_x          | id_x | 9       | NULL |    1 |    50.00 | Using index condition |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------</span>+</span><br></pre></td></tr></table></figure><p><strong>如何优化联合索引</strong>：创建索引的时候将k1放入后面即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">idx1</span>(<span class="selector-tag">k2</span>,<span class="selector-tag">k3</span>,<span class="selector-tag">k4</span>,<span class="selector-tag">k1</span>);</span><br></pre></td></tr></table></figure><h3 id="多子句查询应用联合索引"><a href="#多子句查询应用联合索引" class="headerlink" title="多子句查询应用联合索引"></a>多子句查询应用联合索引</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc select * from  test where k2=&#x27;中国&#x27; group by k4;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-</span></span><br><span class="line">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-</span></span><br><span class="line">|  1 | SIMPLE      | test  | NULL       | ALL  | id_a          | NULL | NULL    | NULL |    2 |    50.00 | </span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">-</span></span><br></pre></td></tr></table></figure><p><strong>如何优化联合索引</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">idx3</span>(<span class="selector-tag">k1</span>,<span class="selector-tag">k2</span>);</span><br></pre></td></tr></table></figure><h3 id="出现的错误-Extar-using-filesort"><a href="#出现的错误-Extar-using-filesort" class="headerlink" title="出现的错误 Extar: using filesort"></a>出现的错误 Extar: using filesort</h3><blockquote><p>PS：如果出现Using filesort，说明在查询中有关排序的条件列没有合理的应用索引</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">drop</span> <span class="selector-tag">index</span> <span class="selector-tag">xx</span>;                 //将之前创建的索引删除掉  </span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> <span class="selector-tag">add</span> <span class="selector-tag">index</span> <span class="selector-tag">id_x</span>(<span class="selector-tag">k1</span>,<span class="selector-tag">k2</span>,<span class="selector-tag">k3</span>,<span class="selector-tag">k4</span>);   //重新创建索引</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208201925562.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的SQL基础应用-3</title>
      <link href="2021/03/02/MySQL%E7%9A%84SQL%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8-3/"/>
      <url>2021/03/02/MySQL%E7%9A%84SQL%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8-3/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-SQL基础应用"><a href="#MySQL-SQL基础应用" class="headerlink" title="MySQL-SQL基础应用"></a>MySQL-SQL基础应用</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>SQL（结构化的查询语句），是关系型数据通用的命令，遵循SQL92标准的（SQL_MODE）。SQL常用种类有</p><ul><li>DDL：数据定义语句</li><li>DCL：数据控制语句</li><li>DML：数据操作语句</li><li>DQL：数据查询语句</li></ul><h2 id="MySQL数据类型介绍"><a href="#MySQL数据类型介绍" class="headerlink" title="MySQL数据类型介绍"></a>MySQL数据类型介绍</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>对于整数类型数据，是通过区分有符号和无符号的</p><table><thead><tr><th>类名称</th><th>有符号（signed)</th><th>无符号数（Unsigned）</th><th>存储空间</th><th>说明</th></tr></thead><tbody><tr><td>TINYINT</td><td>-129~127</td><td>0-255</td><td>1字节</td><td>极小整数数据类型</td></tr><tr><td>SMALLINT</td><td>-32768~32767</td><td>0-65535</td><td>2字节</td><td>较小整数数据类型</td></tr><tr><td>MEDIUMINT</td><td>-8388608~8388607</td><td>0-16777215</td><td>3字节</td><td>中型整数数据类型</td></tr><tr><td>INT</td><td>-2147483648~2147483647</td><td>0-4294967295</td><td>4字节</td><td>常规数据整数类型</td></tr><tr><td>bigint</td><td>-9223372036854775808~9223372036854775807</td><td>0-18446744073709551615</td><td>8字节</td><td>超大数据整数类型</td></tr></tbody></table><h3 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h3><p><strong>使用浮点数的几个建议</strong></p><ul><li>浮点数存在数据误差</li><li>对货币等对精度敏感的数据，应该用定点数表示或存储，推荐是decimal</li></ul><table><thead><tr><th align="left">类</th><th>类名称</th><th>说明</th></tr></thead><tbody><tr><td align="left">浮点数</td><td>FLOAT</td><td>小型单精度（4个字节）浮点数</td></tr><tr><td align="left">浮点数</td><td>DOUBLE</td><td>常规双精度（8个字节）浮点数</td></tr><tr><td align="left">定点数</td><td>DECIMAL</td><td>包含整数部分、小数部分或同事包括二者的精确值数值</td></tr></tbody></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串类型是比较通用的数据类型，对于字符串类型不要过多的使用这些文本，因为它们本不属于关系型数据，是关系型数据库（包括MySQL）不擅长的</p><table><thead><tr><th>类型名称</th><th>大小</th><th>说明</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255字节</td><td>定长字符串类型，不管字符串长度多长，都立即分配字符长度的存储空间，未占满的空间使用“空格”填充</td></tr><tr><td>VARCHAR</td><td>0-255字节</td><td>变长字符串类型，每次存储数据之前，都要判断长度，按需分配字符空间，会单独申请一个字符长度的空间存储字符长度（少于255，如果超过255以上，会占用两个存储空间）</td></tr><tr><td>TINYBLOB</td><td>0-255字节</td><td>不超过255个字符的二进制字符串</td></tr><tr><td>TINYTEXT</td><td>0-255字节</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535字节</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535字节</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16777215字节</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-16777215字节</td><td>中等长度文本数据</td></tr><tr><td>LOGNGBLOB</td><td>0-4294976295字节</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4294976295字节</td><td>极大文本数据</td></tr></tbody></table><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><table><thead><tr><th>类型名称</th><th>大小</th><th>范围</th><th>说明</th></tr></thead><tbody><tr><td>DATATIME</td><td>8字节</td><td>1000-01-01 00:00:00.000000 至 9999-12-31 23:59:59.999999</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4字节</td><td>1970-01-01 00:00:00.000000 至 2038-01-19 11:14:07.999999</td><td>混合日期和时间值，时间戳</td></tr><tr><td>DATA</td><td>3字节</td><td>1000-01-01/9999-12-31</td><td>日期值</td></tr></tbody></table><p>对于日期类型，最常用的三个类型：data、datatime和timestamp。我们创建一张表来模拟一下，并插入一行数据来区分每种不同的日志类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">time1</span>(<span class="selector-tag">data1</span> <span class="selector-tag">datetime</span>,<span class="selector-tag">data2</span> <span class="selector-tag">timestamp</span>,<span class="selector-tag">date3</span> <span class="selector-tag">date</span>);</span><br><span class="line">&gt; <span class="selector-tag">insert</span> <span class="selector-tag">into</span> <span class="selector-tag">time1</span> <span class="selector-tag">values</span>(<span class="selector-tag">current_date</span>,<span class="selector-tag">current_timestamp</span>,<span class="selector-tag">current_date</span>);</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">time1</span>;</span><br><span class="line">+<span class="selector-tag">---------------------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| data1               | data2               | date3      |</span><br><span class="line">+<span class="selector-tag">---------------------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| 2021-02-20 00:00:00 | 2021-02-20 20:35:13 | 2021-02-20 |</span><br><span class="line">+<span class="selector-tag">---------------------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">------------</span>+</span><br></pre></td></tr></table></figure><p>datetime和timestamp精确到秒，date是精确到日，datetime占用8个字节，timestamp占用了4个字节，所以timestamp时间范围要短一些</p><h3 id="JSON类型"><a href="#JSON类型" class="headerlink" title="JSON类型"></a>JSON类型</h3><p>JSON类型是5.7版本中推出的，创建一张json_ta表，然后插入两行记录看看</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">json_ta</span> (<span class="selector-tag">uid</span> <span class="selector-tag">int</span> <span class="selector-tag">auto_increment</span>,<span class="selector-tag">data</span> <span class="selector-tag">json</span>,<span class="selector-tag">primary</span> <span class="selector-tag">key</span>(<span class="selector-tag">uid</span>));</span><br><span class="line">&gt; insert into json_ta values(NULL,&#x27;&#123;&quot;name&quot;:&quot;old&quot;,&quot;age&quot;:20&#125;&#x27;);</span><br><span class="line">&gt; insert into json_ta values(NULL,&#x27;&#123;&quot;name&quot;:&quot;old&quot;,&quot;age&quot;:20&#125;&#x27;);</span><br></pre></td></tr></table></figure><p>如果要查询数据，可以使用类似引用的语法“-&gt;”即可</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; select data-&gt;&quot;$.name&quot; as name,(data-&gt;&quot;$.age&quot;) from json_ta group by name;</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------------</span>+</span><br><span class="line">| name  | (data-&gt;&quot;$.age&quot;) |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------------</span>+</span><br><span class="line">| &quot;old&quot; | 20              |</span><br><span class="line">| &quot;wu&quot;  | 18              |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">-----------------</span>+</span><br></pre></td></tr></table></figure><h2 id="MySQL建表定义规范"><a href="#MySQL建表定义规范" class="headerlink" title="MySQL建表定义规范"></a>MySQL建表定义规范</h2><h3 id="建表（这里使用SQLyog建立）"><a href="#建表（这里使用SQLyog建立）" class="headerlink" title="建表（这里使用SQLyog建立）"></a>建表（这里使用SQLyog建立）</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207141849767.png"></p><h3 id="列属性说明"><a href="#列属性说明" class="headerlink" title="列属性说明"></a>列属性说明</h3><blockquote><p>PS：最好列值不为空（NOT NULL），如果不知道填什么，则可以填0</p></blockquote><table><thead><tr><th>列名</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY（主键）</td><td>主键约束，表中只能由一个，非空且唯一，一般用于数字</td></tr><tr><td>UNIQUE KEY（唯一键约束）</td><td>不允许重复值</td></tr><tr><td>NOT NULL（非空）</td><td>非空约束，不允许空值</td></tr><tr><td>DEFAULT（默认）</td><td>一般配置NOT NULL使用</td></tr><tr><td>UNSIGNED（无符号）</td><td>一般是配置数字列，非负数</td></tr><tr><td>AUTO_INCREMENT（自增长）</td><td>自增长的列</td></tr><tr><td>COMMENT（注释）</td><td>注释</td></tr></tbody></table><h3 id="语句创建"><a href="#语句创建" class="headerlink" title="语句创建"></a>语句创建</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">stu</span>(</span><br><span class="line">id INT PRIMARY KEY NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line">sname VARCHAR(255) NOT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line">age TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#x27;年龄&#x27;,</span><br><span class="line">gender ENUM(&#x27;m&#x27;,&#x27;f&#x27;,&#x27;n&#x27;) NOT NULL DEFAULT &#x27;n&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">intime DATETIME NOT NULL DEFAULT NOW() COMMENT &#x27;入学时间&#x27;</span><br><span class="line">)<span class="selector-tag">ENGINE</span> <span class="selector-tag">INNODB</span> <span class="selector-tag">CHARSET</span> <span class="selector-tag">utf8mb4</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207143749041.png"></p><h3 id="建表的规范"><a href="#建表的规范" class="headerlink" title="建表的规范"></a>建表的规范</h3><ul><li>表名小写字符，不能数字开头</li><li>创建表，使用和业务有关的表名</li><li>选择合适的数据类型及长度</li><li>每个列设置not null + default，不知道填什么，则使用0填充，对于字符串有效字符串填充</li><li>每个列设置注释</li><li>表必须设置存储引擎和字符集</li><li>主键列尽量使无关列数字列，最好是自增长</li><li>enum类型不要保存数字，使用字符串，当然也不建议使用，可使用TINYINT来代替</li><li>存储精确浮点数必须使用 DECIMAL 替代 FLOAT 和 DOUBLE</li><li>存储年时使用YEAR(4)，不使用YEAR(2)</li></ul><h3 id="查询、删除、建表信息"><a href="#查询、删除、建表信息" class="headerlink" title="查询、删除、建表信息"></a>查询、删除、建表信息</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">tables</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">stu</span>;</span><br><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">stu</span>;                         //查看表格</span><br><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">tese</span> <span class="selector-tag">like</span> <span class="selector-tag">stu</span>;       //创建一个表结构一样的表</span><br><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span>;</span><br></pre></td></tr></table></figure><h3 id="修改表的信息"><a href="#修改表的信息" class="headerlink" title="修改表的信息"></a>修改表的信息</h3><p>上述创建的stu表中添加qq列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD qq VARCHAR(20) NOT NULL COMMENT &#x27;qq信息&#x27;</span><br><span class="line"><span class="selector-tag">DESC</span> <span class="selector-tag">stu</span></span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207144106227.png"></p><p>在sname后添加链接列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD wechat VARCHAR(64) NOT NULL UNIQUE COMMENT &#x27;微信&#x27; AFTER sname</span><br><span class="line"><span class="selector-tag">DESC</span> <span class="selector-tag">stu</span></span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207144823970.png"></p><p>删除刚才添加的表（测试使用，不建议工作使用）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ALTER</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">stu</span> <span class="selector-tag">DROP</span> <span class="selector-tag">qq</span>;</span><br><span class="line"><span class="selector-tag">ALTER</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">stu</span> <span class="selector-tag">DROP</span> <span class="selector-tag">link</span>;</span><br><span class="line"><span class="selector-tag">desc</span> <span class="selector-tag">stu</span>;</span><br></pre></td></tr></table></figure><p>修改sname数据类型的属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY sname VARCHAR(64) NOT NULL COMMENT &#x27;性别&#x27;;</span><br><span class="line"><span class="selector-tag">DESC</span> <span class="selector-tag">stu</span>;</span><br></pre></td></tr></table></figure><p>修改gender改为sex数据类型改为char类型</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY gender CHAR(10) NOT NULL COMMENT &#x27;性别&#x27;;</span><br><span class="line"><span class="selector-tag">DESC</span> <span class="selector-tag">stu</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207145525183.png"></p><h2 id="DDL（数据的定义语句）"><a href="#DDL（数据的定义语句）" class="headerlink" title="DDL（数据的定义语句）"></a>DDL（数据的定义语句）</h2><h3 id="库的定义"><a href="#库的定义" class="headerlink" title="库的定义"></a>库的定义</h3><p>创建数据库，并设置字符集</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">word</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span> <span class="selector-tag">collate</span> <span class="selector-tag">utf8mb4_bin</span>;</span><br></pre></td></tr></table></figure><p>查询库的数据信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">databases</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">word</span>;</span><br></pre></td></tr></table></figure><p>删除数据库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">database</span> <span class="selector-tag">word</span>;</span><br></pre></td></tr></table></figure><p>修改数据库字符集</p><blockquote><p>注意：修改字符集，一定要从小往大修改，比如utf-8 –&gt; utfmb4，否则无法设置</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">boy</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">boy</span>;</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+</span><br><span class="line">| Database | Create Database                                                |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+</span><br><span class="line">| boy      | CREATE DATABASE `boy` /*!40100 DEFAULT CHARACTER SET latin1 */ |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">----------------------------------------------------------------</span>+</span><br><span class="line"></span><br><span class="line">//修改</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">database</span> <span class="selector-tag">boy</span> <span class="selector-tag">charset</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">create</span> <span class="selector-tag">database</span> <span class="selector-tag">boy</span>; </span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------------------------------------------------</span>+</span><br><span class="line">| Database | Create Database                                                 |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------------------------------------------------</span>+</span><br><span class="line">| boy      | CREATE DATABASE `boy` /*!40100 DEFAULT CHARACTER SET utf8mb4 */ |</span><br><span class="line">+<span class="selector-tag">----------</span>+<span class="selector-tag">-----------------------------------------------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="DCL（数据控制语句）"><a href="#DCL（数据控制语句）" class="headerlink" title="DCL（数据控制语句）"></a>DCL（数据控制语句）</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p><strong>登录MySQL和管理MySQL</strong></p><ul><li>用户定义白名单：用户名@‘白名单(网段)’</li></ul> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">word</span>@’%’             //允许全部用户</span><br><span class="line">word@’localhost’            //只允许本地用户</span><br><span class="line">word@’<span class="number">10.0</span>.<span class="number">0</span>.%’            //只允许<span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span>的网段</span><br><span class="line">word@’<span class="number">10.0</span>.<span class="number">0.5%</span>’            //只允许<span class="number">10.0</span>.<span class="number">0.50</span>-<span class="number">59</span>的网段</span><br><span class="line">word@’<span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">255.255</span>.<span class="number">254.0%</span>’ //只允许<span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">23</span>的网段</span><br><span class="line">word@’<span class="number">10.0</span>.%’    //只允许<span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">16</span>的网段</span><br></pre></td></tr></table></figure><ul><li>创建用户，并添加密码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">user</span> <span class="selector-tag">word</span>@&#x27;localhost&#x27; identified by <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>查询用户</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>; </span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| user          | host      |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| workd        | localhost |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br></pre></td></tr></table></figure><ul><li>修改密码</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">user</span> <span class="selector-tag">word</span>@&#x27;localhost&#x27; identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>删除用户</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">drop</span> <span class="selector-tag">user</span> <span class="selector-tag">word</span>@&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li>ALL（all代表有下面所有的权限）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SELECT</span>,<span class="selector-tag">INSERT</span>, <span class="selector-tag">UPDATE</span>, <span class="selector-tag">DELETE</span>, <span class="selector-tag">CREATE</span>, <span class="selector-tag">DROP</span>, <span class="selector-tag">RELOAD</span>, <span class="selector-tag">SHUTDOWN</span>, <span class="selector-tag">PROCESS</span>, <span class="selector-tag">FILE</span>, <span class="selector-tag">REFERENCES</span>, <span class="selector-tag">INDEX</span>, <span class="selector-tag">ALTER</span>, <span class="selector-tag">SHOW</span> <span class="selector-tag">DATABASES</span>, <span class="selector-tag">SUPER</span>, <span class="selector-tag">CREATE</span> <span class="selector-tag">TEMPORARY</span> <span class="selector-tag">TABLES</span>, <span class="selector-tag">LOCK</span> <span class="selector-tag">TABLES</span>, <span class="selector-tag">EXECUTE</span>, <span class="selector-tag">REPLICATION</span> <span class="selector-tag">SLAVE</span>, <span class="selector-tag">REPLICATION</span> <span class="selector-tag">CLIENT</span>, <span class="selector-tag">CREATE</span> <span class="selector-tag">VIEW</span>, <span class="selector-tag">SHOW</span> <span class="selector-tag">VIEW</span>, <span class="selector-tag">CREATE</span> <span class="selector-tag">ROUTINE</span>, <span class="selector-tag">ALTER</span> <span class="selector-tag">ROUTINE</span>, <span class="selector-tag">CREATE</span> <span class="selector-tag">USER</span>, <span class="selector-tag">EVENT</span>, <span class="selector-tag">TRIGGER</span>, <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLESPACE</span></span><br></pre></td></tr></table></figure><ul><li>with grant option（授权可以管理其他用户）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//<span class="selector-tag">grant</span> 权限  <span class="selector-tag">on</span> 作用目标 <span class="selector-tag">to</span> 用户 <span class="selector-tag">identified</span> <span class="selector-tag">by</span> 密码 <span class="selector-tag">with</span> <span class="selector-tag">grant</span> <span class="selector-tag">option</span>;</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">grant</span> <span class="selector-tag">all</span> <span class="selector-tag">on</span> *.* <span class="selector-tag">to</span> <span class="selector-tag">word</span>@&#x27;localhost&#x27; identified by <span class="string">&#x27;123&#x27;</span> with grant option;</span><br><span class="line"></span><br><span class="line">//设置<span class="selector-tag">word</span>用户可以使用<span class="selector-tag">mysql</span>库中的所有表，可以操作的选项有<span class="selector-tag">select</span>,<span class="selector-tag">insert</span>,<span class="selector-tag">delete</span>,<span class="selector-tag">create</span></span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">grant</span> <span class="selector-tag">select</span>,<span class="selector-tag">insert</span>,<span class="selector-tag">delete</span>,<span class="selector-tag">create</span> <span class="selector-tag">on</span> <span class="selector-tag">word</span>.* <span class="selector-tag">to</span> <span class="selector-tag">word</span>@&#x27;10.0.0.%&#x27; identified by <span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>上述作用目标</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.*            //表示所有目录文件(即所有的库)</span><br><span class="line"><span class="selector-tag">word</span>.*         //<span class="selector-tag">word</span>目录下的全部文件</span><br><span class="line"><span class="selector-tag">word</span>.*<span class="selector-tag">t1</span>       //<span class="selector-tag">word</span>目录的<span class="selector-tag">t1</span>表</span><br></pre></td></tr></table></figure><ul><li>查看权限</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">grants</span> <span class="selector-tag">for</span> <span class="selector-tag">word</span>@&#x27;10.0.0.%&#x27;;</span><br><span class="line">+<span class="selector-tag">-----------------------------------------------------------------------</span>+</span><br><span class="line">| Grants for word@10.0.0.%                                              |</span><br><span class="line">+<span class="selector-tag">-----------------------------------------------------------------------</span>+</span><br><span class="line">| GRANT USAGE ON *.* TO &#x27;word&#x27;@&#x27;10.0.0.%&#x27;                               |</span><br><span class="line">| GRANT SELECT, INSERT, DELETE, CREATE ON `word`.* TO &#x27;word&#x27;@&#x27;10.0.0.%&#x27; |</span><br></pre></td></tr></table></figure><ul><li>回收权限</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">revoke</span> <span class="selector-tag">select</span>,<span class="selector-tag">delete</span> <span class="selector-tag">on</span> <span class="selector-tag">word</span>.* <span class="selector-tag">from</span> <span class="selector-tag">word</span>@&#x27;10.0.0.%&#x27;;</span><br><span class="line">      </span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">grants</span> <span class="selector-tag">for</span> <span class="selector-tag">word</span>@&#x27;10.0.0.%&#x27;;</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------</span>+</span><br><span class="line">| Grants for word@10.0.0.%                              |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------</span>+</span><br><span class="line">| GRANT USAGE ON *.* TO &#x27;word&#x27;@&#x27;10.0.0.%&#x27;               |</span><br><span class="line">| GRANT INSERT, CREATE ON `word`.* TO &#x27;word&#x27;@&#x27;10.0.0.%&#x27; |</span><br><span class="line">+<span class="selector-tag">-------------------------------------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="DML（数据操作语句）"><a href="#DML（数据操作语句）" class="headerlink" title="DML（数据操作语句）"></a>DML（数据操作语句）</h2><h3 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h3><p>insert语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">INSERT</span> <span class="selector-attr">[LOW_PRIORITY | DELAYED | HIGH_PRIORITY]</span> <span class="selector-attr">[IGNORE]</span></span><br><span class="line">    <span class="selector-attr">[INTO]</span> <span class="selector-tag">tbl_name</span></span><br><span class="line">    <span class="selector-attr">[PARTITION (partition_name [, partition_name]</span> ...)]</span><br><span class="line">    <span class="selector-attr">[(col_name [, col_name]</span> ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line">    <span class="selector-attr">[ON DUPLICATE KEY UPDATE assignment_list]</span></span><br></pre></td></tr></table></figure><p>偷懒插入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT stu VALUES(1,&#x27;zs&#x27;,&#x27;18&#x27;,&#x27;m&#x27;,NOW()) </span><br><span class="line">&gt; <span class="selector-tag">SELECT</span> * <span class="selector-tag">FROM</span> <span class="selector-tag">stu</span>; </span><br></pre></td></tr></table></figure><p>标准插入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT INTO stu(id,sname,age,sex,intime) VALUES(2,&#x27;ls&#x27;,&#x27;19&#x27;,&#x27;m&#x27;,NOW()); </span><br></pre></td></tr></table></figure><p>针对性的录入数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT INTO stu(sname,age,sex) VALUES(&#x27;li&#x27;,&#x27;20&#x27;,&#x27;n&#x27;); </span><br></pre></td></tr></table></figure><p>一次性录入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; INSERT INTO stu(sname,age,sex)  VALUES(&#x27;aa&#x27;,11,&#x27;n&#x27;),(&#x27;bb&#x27;,12,&#x27;m&#x27;),(&#x27;cc&#x27;,13,&#x27;f&#x27;)</span><br></pre></td></tr></table></figure><h3 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h3><p>update语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">UPDATE</span> <span class="selector-attr">[LOW_PRIORITY]</span> <span class="selector-attr">[IGNORE]</span> <span class="selector-tag">table_reference</span></span><br><span class="line">    <span class="selector-tag">SET</span> <span class="selector-tag">assignment_list</span></span><br><span class="line">    <span class="selector-attr">[WHERE where_condition]</span></span><br><span class="line">    <span class="selector-attr">[ORDER BY ...]</span></span><br><span class="line">    <span class="selector-attr">[LIMIT row_count]</span></span><br></pre></td></tr></table></figure><p>指定序列更新</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; update test set k1=&#x27;bb&#x27; where id=3;</span><br></pre></td></tr></table></figure><p>更新多个字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; update test set k1=&#x27;cc&#x27;,k2=&#x27;中国&#x27; </span><br></pre></td></tr></table></figure><h3 id="replace语句"><a href="#replace语句" class="headerlink" title="replace语句"></a>replace语句</h3><p>MySQL的replace语句主要的作用是动态逻辑，即如果匹配到数据则执行变更。如果没有则进行插入，它支持数量值和子查询两种方式</p><p>replace语法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">REPLACE</span> <span class="selector-attr">[LOW_PRIORITY | DELAYED]</span></span><br><span class="line">    <span class="selector-attr">[INTO]</span> <span class="selector-tag">tbl_name</span></span><br><span class="line">    <span class="selector-attr">[PARTITION (partition_name [, partition_name]</span> ...)]</span><br><span class="line">    <span class="selector-attr">[(col_name [, col_name]</span> ...)]</span><br><span class="line">    &#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br></pre></td></tr></table></figure><p>写入语句</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; replace into test values(1,&#x27;cc&#x27;,&#x27;中国&#x27;,&#x27;cccc&#x27;,&#x27;欢迎来到&#x27;);</span><br></pre></td></tr></table></figure><p>写入其他表的语句</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test1</span> <span class="selector-tag">like</span> <span class="selector-tag">test</span></span><br><span class="line">&gt; replace into test1 values(4,&#x27;ee&#x27;,&#x27;泰国&#x27;,&#x27;eeee&#x27;,&#x27;哈哈哈哈&#x27;);</span><br><span class="line"></span><br><span class="line">&gt; <span class="selector-tag">replace</span> <span class="selector-tag">into</span> <span class="selector-tag">test</span> <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">test1</span>;</span><br></pre></td></tr></table></figure><h3 id="rename语句"><a href="#rename语句" class="headerlink" title="rename语句"></a>rename语句</h3><p>如果你需要将表归档到一个历史数据库中而暂时不处理数据，可以使用rename方式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">rename</span> <span class="selector-tag">table</span> <span class="selector-tag">test_fund_info</span> <span class="selector-tag">to</span> <span class="selector-tag">test</span><span class="selector-class">.user_record</span>;</span><br></pre></td></tr></table></figure><h2 id="DQL（数据查询语句）"><a href="#DQL（数据查询语句）" class="headerlink" title="DQL（数据查询语句）"></a>DQL（数据查询语句）</h2><h3 id="查询语言有两种"><a href="#查询语言有两种" class="headerlink" title="查询语言有两种"></a>查询语言有两种</h3><ul><li>show</li><li>select</li></ul><h3 id="show常用语句总结"><a href="#show常用语句总结" class="headerlink" title="show常用语句总结"></a>show常用语句总结</h3><table><thead><tr><th>语句</th><th>说明</th></tr></thead><tbody><tr><td>show databases;</td><td>查看数据库名</td></tr><tr><td>show tables;</td><td>查看表名</td></tr><tr><td>show create database xx;</td><td>查看建库语句</td></tr><tr><td>show create table xx;</td><td>查看建表语句</td></tr><tr><td>show processlist;</td><td>查看所有用户连接情况</td></tr><tr><td>show charset;</td><td>查看字符集</td></tr><tr><td>show collation;</td><td>查看所有支持的校队规则</td></tr><tr><td>show grants for xx;</td><td>查看用户的权限信息</td></tr><tr><td>show variables like ‘%xx%’</td><td>模糊匹配查看参数</td></tr><tr><td>show engines;</td><td>查看所有支持的存储引擎</td></tr><tr><td>show index from xxx;</td><td>查看表的索引信息</td></tr><tr><td>show engine innodb status\G</td><td>查看innoDB引擎详细状态信息</td></tr><tr><td>show binary logs;</td><td>查看二进制日志的列表信息</td></tr><tr><td>show binary events in;</td><td>查看二进制日志的事件信息</td></tr><tr><td>show master status;</td><td>查看mysql主库的状态</td></tr><tr><td>show slave status\G</td><td>查看从库状态信息</td></tr><tr><td>show relaylog events in；</td><td>查看数据库整体状态</td></tr></tbody></table><h3 id="select单独使用情况"><a href="#select单独使用情况" class="headerlink" title="select单独使用情况"></a>select单独使用情况</h3><table><thead><tr><th>语句</th><th>说明</th></tr></thead><tbody><tr><td>select @@basedir;</td><td>查询软件路径</td></tr><tr><td>select @@port;</td><td>查询端口</td></tr><tr><td>select @@server_id;</td><td>查询服务id</td></tr><tr><td>select @@innodb_flush_log_at_trx_commit;</td><td>查询是否将事务日志从innodb log buffer写入到redo log中</td></tr><tr><td>select @@sync_binlog;</td><td>查询是否将二进制日志刷新到磁盘上，0不刷新，1刷新</td></tr><tr><td>select database();</td><td>查看当前库</td></tr><tr><td>select now();</td><td>查询时间</td></tr></tbody></table><h2 id="DQL-world表练习"><a href="#DQL-world表练习" class="headerlink" title="DQL-world表练习"></a>DQL-world表练习</h2><blockquote><p>world表练习的链接：<a href="https://pan.baidu.com/s/1PTTUhh1MjYz_hpiQeYr8MA">https://pan.baidu.com/s/1PTTUhh1MjYz_hpiQeYr8MA</a><br>提取码：9f5v </p></blockquote><p>查看world数据库中的表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">world</span>         //使用该数据库</span><br><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">tabales</span>;     //查看该数据库的表</span><br><span class="line">+<span class="selector-tag">-----------------</span>+</span><br><span class="line">| Tables_in_world |</span><br><span class="line">+<span class="selector-tag">-----------------</span>+</span><br><span class="line">| city            |      //城市表</span><br><span class="line">| country         |      //国家表</span><br><span class="line">| countrylanguage |      //国家的语言</span><br><span class="line">+<span class="selector-tag">-----------------</span>+</span><br></pre></td></tr></table></figure><p>查看city表的结构</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">city</span>；    </span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| Field       | Type     | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br><span class="line">| ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population  | int(11)  | NO   |     | 0       |                |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">----------------</span>+</span><br></pre></td></tr></table></figure><p>查看city的前五的内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">city</span> <span class="selector-tag">limit</span> 5;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">| ID | Name           | CountryCode | District      | Population |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------------</span>+</span><br><span class="line">|  1 | Kabul          | AFG         | Kabol         |    1780000 |</span><br><span class="line">|  2 | Qandahar       | AFG         | Qandahar      |     237500 |</span><br><span class="line">|  3 | Herat          | AFG         | Herat         |     186800 |</span><br><span class="line">|  4 | Mazar-e-Sharif | AFG         | Balkh         |     127800 |</span><br><span class="line">|  5 | Amsterdam      | NLD         | Noord-Holland |     731200 |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">------------</span>+</span><br></pre></td></tr></table></figure><h3 id="select配置from子句使用"><a href="#select配置from子句使用" class="headerlink" title="select配置from子句使用"></a>select配置from子句使用</h3><p>select 列，列，列 from 表</p><ul><li>查询表中所有的内容</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">world</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">id</span>,<span class="selector-tag">name</span>,<span class="selector-tag">countrycode</span>,<span class="selector-tag">district</span>,<span class="selector-tag">population</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span>;</span><br><span class="line"> </span><br><span class="line">//或</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">city</span>;</span><br></pre></td></tr></table></figure><ul><li>查询表中name和population的值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,population from city;</span><br></pre></td></tr></table></figure><h3 id="select-配置-where子句使用"><a href="#select-配置-where子句使用" class="headerlink" title="select 配置 where子句使用"></a>select 配置 where子句使用</h3><p><strong>select 列，列，列 from 表 where 过滤条件（where相当于一个Linux中的grep,就是进行过滤的）</strong></p><ul><li>where等值条件查询：查询中国所有的城市名和人口数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; select name,population from  city where countrycode=&#x27;CHN&#x27;;</span><br></pre></td></tr></table></figure><ul><li>where配合比较判断查询（&lt; &gt; &gt;= &lt;=)：世界上小于100人的城市名和人口数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span>  <span class="selector-tag">name</span>,<span class="selector-tag">population</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span> <span class="selector-tag">where</span> <span class="selector-tag">populaction</span>&lt;100;</span><br></pre></td></tr></table></figure><ul><li>where配合逻辑连接符（and  or）：查询中国人口数量大于1000w的城市名和人口</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; select name,population from city where countrycode=&#x27;CHN&#x27; and population&gt;10000000;</span><br></pre></td></tr></table></figure><ul><li>查询中国或美国的城市名和人口数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select name,population from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> or countrycode=<span class="string">&#x27;USA&#x27;</span>;</span></span><br></pre></td></tr></table></figure><ul><li>查询人口数量在500w到600w之间的城市名和人口数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select name,population from city <span class="built_in">where</span> population&gt;5000000 and population&lt;6000000;</span></span><br><span class="line">      </span><br><span class="line">//或者</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select name,population from city <span class="built_in">where</span> population between 5000000 and 6000000;</span></span><br></pre></td></tr></table></figure><ul><li>where配合like子句模糊查询：查询一下countrycode中带有CH开头城市信息</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from city where countrycode like &#x27;CH%&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p> 注意：不要出现类似于%CH%前后都有百分号的语句，因为不走索引，性能极差</p></blockquote><ul><li>where配合in语句：查询中国或美国的城市名和人口信息</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; select name,population from city where countrycode=&#x27;CHN&#x27; and countrycode=&#x27;USA&#x27;</span><br><span class="line">         </span><br><span class="line">//或者</span><br><span class="line">&gt; select name,population from city where countrycode in (&#x27;CHN&#x27;,&#x27;USA&#x27;);</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><p>下述的个别语句需要关闭SQL_MODE规范的一个模式（ONLY_FULL_GROUP_BY）。在5.7版本之后功能依赖检测功能（5.6版本没有此功能），所以启动这个模式MySQL将拒绝选择列表，解决办法是去掉这个模式</p><p>在配置下添加该配置，然后重启mysql</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><p><strong>groub by 将某列中有共同条件的数据行，分成一组，然后在进行聚合函数操作</strong></p><ul><li>统计每个国家，城市的个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select countrycode,count(id) from city group by countrycode;</span></span><br></pre></td></tr></table></figure><ul><li>统计每个国家的总人口数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select countrycode,sum(population)  from city group by population;</span></span><br></pre></td></tr></table></figure><ul><li>统计每个国家省的个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT countrycode,COUNT(DISTINCT district)FROM city GROUP BY countrycode;</span></span><br></pre></td></tr></table></figure><ul><li>统计中国每个省的总人口数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select district,sum(population) from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> group by district;</span></span><br></pre></td></tr></table></figure><ul><li>统计中国每个省城市的个数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select  district,count(name) from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> group by district;</span></span><br></pre></td></tr></table></figure><ul><li>统计中国每个省城市的名字列表（group_concat())</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select  district,group_concat(name) from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> group by district;</span></span><br></pre></td></tr></table></figure><ul><li>小扩展=显示的结果为guangdong：shenzheng,guangzhou,qingyuan……</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT CONCAT(district,<span class="string">&quot;：&quot;</span>, GROUP_CONCAT(NAME)) FROM city WHERE countrycode=<span class="string">&#x27;CHN&#x27;</span> GROUP BY district;</span></span><br></pre></td></tr></table></figure><h3 id="select-配置-having子句"><a href="#select-配置-having子句" class="headerlink" title="select 配置 having子句"></a>select 配置 having子句</h3><ul><li>统计所有国家的总人口数量，将总人口大于1亿的过滤出来</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select countrycode,sum(population) from city group by countrycode having sum(population)&gt;100000000;</span> </span><br></pre></td></tr></table></figure><blockquote><p>注意：如果group by子句，后面要接having，因为要遵循DQL语句的顺序</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">form</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">where</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">having</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">order</span> <span class="selector-tag">--</span>&gt; <span class="selector-tag">limit</span></span><br></pre></td></tr></table></figure><p>如果使用where子句就会报错，因为where子句要使用在group by子句的前面，逻辑不能打乱，所以只能使用having进行过滤</p><h3 id="select-配合-order-by子句"><a href="#select-配合-order-by子句" class="headerlink" title="select 配合 order by子句"></a>select 配合 order by子句</h3><ul><li>统计所有国家的总人口数量，将总人口数大于5000w的过滤出来，并且按照从大到小顺序排列</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT countrycode,SUM(population) FROM city GROUP BY countrycode HAVING SUM(population)&gt;50000000 ORDER BY SUM(population) DESC;</span></span><br></pre></td></tr></table></figure><h3 id="select-配置-limit子句"><a href="#select-配置-limit子句" class="headerlink" title="select 配置 limit子句"></a>select 配置 limit子句</h3><ul><li>统计所有国家的总人口数量,将总人口数大于5000w的过滤出来,并且按照从大到小顺序排列,只显示前三名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT countrycode,SUM(population) FROM city GROUP BY countrycode HAVING SUM(population)&gt;50000000 ORDER BY SUM(population) DESC <span class="built_in">limit</span> 3; //offset 0 跳过0行，显示3行</span></span><br></pre></td></tr></table></figure><ul><li>统计所有国家的总人口数量,将总人口数大于5000w的过滤出来,并且按照从大到小顺序排列,只显示后三名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT countrycode,SUM(population) FROM city GROUP BY countrycode HAVING SUM(population)&gt;50000000 ORDER BY SUM(population) DESC <span class="built_in">limit</span> 3 offset 3; //offset 3 跳过三行，显示3行</span></span><br></pre></td></tr></table></figure><blockquote><p>limit m,n：跳过m行，显示一共n行<br>limit y offset x：跳过x行，显示一共y行</p></blockquote><h3 id="select-练习题"><a href="#select-练习题" class="headerlink" title="select 练习题"></a>select 练习题</h3><ul><li>统计中国每个省的总人口数量，只打印总人口数小于100</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select district,sum(population) from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> group by district having sum(population)&lt;1000000;</span></span><br></pre></td></tr></table></figure><ul><li>查看中国所有的城市，并按人口数进行排行（从大到小）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select name,population from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> order by population desc;</span></span><br></pre></td></tr></table></figure><ul><li>统计中国各个省的总人口数量，按照总人口从大到小排序</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT district,SUM(population) FROM city WHERE countrycode=<span class="string">&#x27;CHN&#x27;</span> GROUP BY district order by sum(population) DESC;</span></span><br></pre></td></tr></table></figure><ul><li>统计中国，每个省的总人口，找出总人口大于500W的，并按总人口从大到小排序，只显示前三名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select district,sum(population) from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> group by district having sum(population)&gt;5000000 order by sum(population) desc <span class="built_in">limit</span> 3;</span></span><br></pre></td></tr></table></figure><h3 id="select小结"><a href="#select小结" class="headerlink" title="select小结"></a>select小结</h3><p>select是查看表中的那个列，select等所有子句执行完成之后，才会执行显示，from实现查询那张表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> <span class="selector-tag">district</span>,<span class="selector-tag">count</span>(<span class="selector-tag">name</span>) <span class="selector-tag">from</span> <span class="selector-tag">city</span>;</span><br></pre></td></tr></table></figure><p>where == 过滤器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where countrycode=&#x27;CHN&#x27;</span><br></pre></td></tr></table></figure><p>将某列中有共同条件的数据行，分成一组，然后在进行聚合函数操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">district</span> </span><br></pre></td></tr></table></figure><p>过滤</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">having</span> <span class="selector-tag">count</span>(<span class="selector-tag">name</span>) &gt;10</span><br></pre></td></tr></table></figure><p>排序，不加desc等于从小到达</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">order</span> <span class="selector-tag">by</span>  <span class="selector-tag">count</span>(<span class="selector-tag">name</span>) <span class="selector-tag">desc</span> </span><br></pre></td></tr></table></figure><p>限制查看的行数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">limit</span> 3;</span><br></pre></td></tr></table></figure><h3 id="union和union-all"><a href="#union和union-all" class="headerlink" title="union和union all"></a>union和union all</h3><p><strong>作用：多个结果集合并查询的功能</strong></p><ul><li>查询中国或者美国的城市信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from city <span class="built_in">where</span> countrycode=<span class="string">&#x27;CHN&#x27;</span> and countrycode=<span class="string">&#x27;USA&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line">//或使用这种方法</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from city <span class="built_in">where</span> countrycode <span class="keyword">in</span> (<span class="string">&#x27;CHN&#x27;</span>,<span class="string">&#x27;USA&#x27;</span>);</span></span><br></pre></td></tr></table></figure><ul><li>改写为</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select * from city <span class="built_in">where</span> countrycode = <span class="string">&#x27;CHN&#x27;</span></span></span><br><span class="line">union all</span><br><span class="line">select * from city where countrycode=&#x27;USA&#x27;;</span><br></pre></td></tr></table></figure><blockquote><p>PS：union all查询优于上述第一种查询，只是会比上述第一种有更多的字符</p></blockquote><ul><li>union和union all的区别   </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">union：    //会去重复操作</span><br><span class="line">union all：//不会去重复</span><br></pre></td></tr></table></figure><h3 id="多表连接查询-内连接"><a href="#多表连接查询-内连接" class="headerlink" title="多表连接查询(内连接)"></a>多表连接查询(内连接)</h3><p><strong>作用：单表数据不能满足查询需求时</strong></p><ul><li>查询世界上小于100人的城市，所在的国家名，国土面积，城市名，人口数</li></ul><p>最核心的是，找到多张表之前的关联条件列，列数显示，必须是：表名.列，所有涉及到的查询列，都放在select后，将所有的过滤、分组、排序等条件按顺序写在on的后面</p><blockquote><p>注意：对多表连接汇总，驱动表选择数据行少的表，后续所有表的关联列尽量是主键或唯一键</p></blockquote><ul><li>查询，驱动表就是from后面的第一张表</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">countrycode</span>,<span class="selector-tag">district</span>,<span class="selector-tag">population</span> <span class="selector-tag">from</span> <span class="selector-tag">city</span> <span class="selector-tag">where</span> <span class="selector-tag">population</span>&gt;100; //<span class="selector-tag">city</span>表能够查询的</span><br><span class="line"><span class="selector-tag">select</span> <span class="selector-tag">name</span>,<span class="selector-tag">SurfaceArea</span> <span class="selector-tag">from</span> <span class="selector-tag">country</span>                                     //<span class="selector-tag">country</span>表能够查询的</span><br><span class="line">city.countrycode = country.code         //城市表中的countrycode参数和国家表中的code是一个样的，所有可以关联在一起</span><br></pre></td></tr></table></figure><ul><li>使用关联</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> select country.name,country.SurfaceArea,city.name,city.population from city join country on city.countrycode=country.code <span class="built_in">where</span> city.population&lt;1000000;</span></span><br></pre></td></tr></table></figure><ul><li>关联，去重国家名称以及国土面积，将城市和人口连接为一列</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> SELECT country.name,country.SurfaceArea,</span></span><br><span class="line">CONCAT(city.district,&quot;：&quot;,city.population)</span><br><span class="line">FROM country </span><br><span class="line">JOIN city ON country.code=city.countrycode </span><br><span class="line">WHERE city.population&lt;1000000</span><br><span class="line">GROUP BY country.name,country.SurfaceArea;</span><br></pre></td></tr></table></figure><h2 id="DQL-多表连接练习"><a href="#DQL-多表连接练习" class="headerlink" title="DQL-多表连接练习"></a>DQL-多表连接练习</h2><h3 id="创建表和表的关联的-sql"><a href="#创建表和表的关联的-sql" class="headerlink" title="创建表和表的关联的.sql"></a>创建表和表的关联的.sql</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CREATE</span> <span class="selector-tag">DATABASE</span> <span class="selector-tag">school</span> <span class="selector-tag">CHARSET</span> <span class="selector-tag">utf8mb4</span>;</span><br><span class="line"><span class="selector-tag">USE</span> <span class="selector-tag">school</span>;</span><br><span class="line"></span><br><span class="line"># 创建学生表</span><br><span class="line"> <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">student</span>(</span><br><span class="line"> snum INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#x27;学号&#x27;,</span><br><span class="line"> sname VARCHAR(20) NOT NULL COMMENT &#x27;姓名&#x27;,</span><br><span class="line"> sage TINYINT UNSIGNED  NOT NULL COMMENT &#x27;年龄&#x27;,</span><br><span class="line"> ssex  ENUM(&#x27;f&#x27;,&#x27;m&#x27;) NOT NULL DEFAULT &#x27;m&#x27; COMMENT &#x27;性别&#x27;</span><br><span class="line"> )ENGINE=INNODB CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"># 创建课程表</span><br><span class="line"> <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">course</span>(</span><br><span class="line"> cnum INT NOT NULL PRIMARY KEY COMMENT &#x27;课程编号&#x27;,</span><br><span class="line"> cname VARCHAR(20) NOT NULL COMMENT &#x27;课程名字&#x27;,</span><br><span class="line"> tnum INT NOT NULL COMMENT &#x27;教师编号&#x27;</span><br><span class="line"> )ENGINE=INNODB CHARSET=utf8;</span><br><span class="line"></span><br><span class="line"># 创建成绩表</span><br><span class="line"> <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">sc</span>(</span><br><span class="line"> snum INT NOT NULL COMMENT &#x27;学号&#x27;,</span><br><span class="line"> cnum INT NOT NULL COMMENT &#x27;课程编号&#x27;,</span><br><span class="line"> score TINYINT UNSIGNED  NOT NULL COMMENT &#x27;成绩&#x27;</span><br><span class="line"> )ENGINE=INNODB CHARSET=utf8;</span><br><span class="line"> </span><br><span class="line"># 创建教师表</span><br><span class="line"> <span class="selector-tag">CREATE</span> <span class="selector-tag">TABLE</span> <span class="selector-tag">teacher</span>(</span><br><span class="line"> tnum INT NOT NULL PRIMARY KEY COMMENT &#x27;教师编号&#x27;,</span><br><span class="line"> tname VARCHAR(20) NOT NULL COMMENT &#x27;教师名字&#x27;</span><br><span class="line"> )ENGINE=INNODB CHARSET=utf8;</span><br><span class="line"> </span><br><span class="line"># 插入数据到<span class="selector-tag">student</span></span><br><span class="line">INSERT INTO student(snum,sname,sage,ssex) VALUES(1,&#x27;wuwei&#x27;,18,&#x27;m&#x27;);</span><br><span class="line">INSERT INTO student(snum,sname,sage,ssex) VALUES(2,&#x27;liu&#x27;,18,&#x27;m&#x27;),(3,&#x27;fu&#x27;,18,&#x27;m&#x27;),(4,&#x27;jie&#x27;,18,&#x27;m&#x27;);</span><br><span class="line">INSERT INTO student(sname,sage,ssex) VALUES(&#x27;jia&#x27;,18,&#x27;m&#x27;),(&#x27;hong&#x27;,18,&#x27;m&#x27;),(&#x27;zeng&#x27;,18,&#x27;m&#x27;);</span><br><span class="line"></span><br><span class="line"># 插入数据到<span class="selector-tag">teacher</span> </span><br><span class="line">INSERT INTO teacher(tnum,tname) VALUES(101,&#x27;bin&#x27;),(102,&#x27;hesw&#x27;),(103,&#x27;ren&#x27;),(104,&#x27;gou&#x27;);</span><br><span class="line"></span><br><span class="line"># 插入数据到<span class="selector-tag">course</span></span><br><span class="line">INSERT INTO course(cnum,cname,tnum) VALUES(11,&#x27;linux&#x27;,101),(12,&#x27;python&#x27;,102),(13,&#x27;mysql&#x27;,103),(14,&#x27;php&#x27;,104),(15,&#x27;go&#x27;,105);</span><br><span class="line"> </span><br><span class="line"># 插入数据到<span class="selector-tag">sc</span></span><br><span class="line"><span class="selector-tag">INSERT</span> <span class="selector-tag">INTO</span> <span class="selector-tag">sc</span>(<span class="selector-tag">snum</span>,<span class="selector-tag">cnum</span>,<span class="selector-tag">score</span>) <span class="selector-tag">VALUES</span></span><br><span class="line">(1,11,80),</span><br><span class="line">(1,12,59),</span><br><span class="line">(2,12,90),</span><br><span class="line">(2,13,100),</span><br><span class="line">(3,11,99),</span><br><span class="line">(3,13,40),</span><br><span class="line">(4,11,79),</span><br><span class="line">(4,12,61),</span><br><span class="line">(4,15,99),</span><br><span class="line">(5,13,40),</span><br><span class="line">(6,15,89),</span><br><span class="line">(6,13,77),</span><br><span class="line">(7,14,67),</span><br><span class="line">(7,13,82),</span><br><span class="line">(8,11,70),</span><br><span class="line">(9,14,80),</span><br><span class="line">(10,13,96);</span><br></pre></td></tr></table></figure><p>查看创建的表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> * <span class="selector-tag">FROM</span> <span class="selector-tag">student</span>;</span><br><span class="line">&gt; <span class="selector-tag">SELECT</span> * <span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span>;</span><br><span class="line">&gt; <span class="selector-tag">SELECT</span> * <span class="selector-tag">FROM</span> <span class="selector-tag">course</span>;</span><br><span class="line">&gt; <span class="selector-tag">SELECT</span> * <span class="selector-tag">FROM</span> <span class="selector-tag">sc</span>;</span><br></pre></td></tr></table></figure><h3 id="表的关系"><a href="#表的关系" class="headerlink" title="表的关系"></a>表的关系</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207193144349.png"></p><h3 id="多表连接示例"><a href="#多表连接示例" class="headerlink" title="多表连接示例"></a>多表连接示例</h3><ul><li>统计wuwei，学习了几门课</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">student</span><span class="selector-class">.sname</span>,<span class="selector-tag">COUNT</span>(<span class="selector-tag">sc</span><span class="selector-class">.cnum</span>) <span class="selector-tag">FROM</span> <span class="selector-tag">student</span></span><br><span class="line"><span class="selector-tag">JOIN</span></span><br><span class="line">sc ON student.snum=sc.snum</span><br><span class="line">WHERE student.sname=&#x27;wuwei&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207194225120.png"></p><ul><li>查询wuwei，学习的课程名称有哪些?</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">student</span><span class="selector-class">.sname</span>,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">course</span><span class="selector-class">.cname</span>) </span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">student</span></span><br><span class="line">JOIN sc ON student.snum=sc.snum </span><br><span class="line">JOIN course ON sc.cnum=course.cnum</span><br><span class="line">WHERE student.sname=&#x27;wuwei&#x27;</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">student</span><span class="selector-class">.sname</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207194200567.png"></p><ul><li>查询bin老师教的学生名和个数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">student</span><span class="selector-class">.sname</span>),<span class="selector-tag">COUNT</span>(<span class="selector-tag">student</span><span class="selector-class">.sname</span>)</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span></span><br><span class="line">JOIN course ON teacher.tnum=course.tnum </span><br><span class="line">JOIN sc ON course.cnum=sc.cnum</span><br><span class="line">JOIN student ON student.snum=sc.snum</span><br><span class="line">WHERE student.sname=&#x27;bin&#x27;</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/redis-pages/image-20210511113204747.png"></p><ul><li>查询bin所教课程的平均分数</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span>,<span class="selector-tag">AVG</span>(<span class="selector-tag">sc</span><span class="selector-class">.score</span>)</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span> </span><br><span class="line">JOIN course ON teacher.tnum=course.tnum</span><br><span class="line">JOIN sc ON course.cnum=sc.cnum</span><br><span class="line">WHERE teacher.tname=&#x27;bin&#x27;</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207195547750.png"></p><ul><li>每位老师所教课程的平均分，并按平均分排序</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span>,<span class="selector-tag">AVG</span>(<span class="selector-tag">sc</span><span class="selector-class">.score</span>)</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span> </span><br><span class="line">JOIN course ON teacher.tnum=course.tnum</span><br><span class="line">JOIN sc ON course.cnum=sc.cnum</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span></span><br><span class="line"><span class="selector-tag">ORDER</span> <span class="selector-tag">BY</span> <span class="selector-tag">AVG</span>(<span class="selector-tag">sc</span><span class="selector-class">.score</span>)</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210207195755445.png"></p><ul><li>查看ren所教的不及格的学生姓名</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">student</span><span class="selector-class">.sname</span>,<span class="selector-tag">sc</span><span class="selector-class">.score</span></span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span></span><br><span class="line">JOIN course ON course.tnum=teacher.tnum</span><br><span class="line">JOIN sc ON sc.cnum=course.cnum</span><br><span class="line">JOIN student ON student.snum=sc.snum</span><br><span class="line">WHERE teacher.tname=&#x27;ren&#x27; AND sc.score&lt;60;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208142518208.png"></p><ul><li>查询所有老师教学生不及格的信息</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">CONCAT</span>(<span class="selector-tag">student</span><span class="selector-class">.sname</span>,&quot;：&quot;,<span class="selector-tag">sc</span><span class="selector-class">.score</span>))</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span></span><br><span class="line">JOIN course ON course.tnum=teacher.tnum</span><br><span class="line">JOIN sc ON sc.cnum=course.cnum</span><br><span class="line">JOIN student ON student.snum=sc.snum</span><br><span class="line"><span class="selector-tag">WHERE</span> <span class="selector-tag">sc</span><span class="selector-class">.score</span>&lt;60</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tnum</span>;</span><br></pre></td></tr></table></figure><h3 id="别名应用"><a href="#别名应用" class="headerlink" title="别名应用"></a>别名应用</h3><p>建立表别名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">t</span><span class="selector-class">.tname</span>,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">CONCAT</span>(<span class="selector-tag">st</span><span class="selector-class">.sname</span>,&quot;：&quot;,<span class="selector-tag">sc</span><span class="selector-class">.score</span>))</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span> <span class="selector-tag">as</span> <span class="selector-tag">t</span></span><br><span class="line">JOIN course as c ON t.tnum=c.tnum</span><br><span class="line">JOIN sc ON c.cnum=sc.cnum</span><br><span class="line">JOIN student as st ON sc.snum=st.snum</span><br><span class="line"><span class="selector-tag">WHERE</span> <span class="selector-tag">sc</span><span class="selector-class">.score</span>&lt;60</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">t</span><span class="selector-class">.tnum</span>;</span><br></pre></td></tr></table></figure><p>建立列表名</p><blockquote><p>PS：列别名可以被用在having和order by调用</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span> <span class="selector-tag">AS</span> 老师名 ,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">CONCAT</span>(<span class="selector-tag">student</span><span class="selector-class">.sname</span>,&quot;：&quot;,<span class="selector-tag">sc</span><span class="selector-class">.score</span>)) <span class="selector-tag">AS</span> 不及格学生成绩</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span> </span><br><span class="line">JOIN course ON teacher.tnum=course.tnum</span><br><span class="line">JOIN sc ON course.cnum=sc.cnum</span><br><span class="line">JOIN student ON sc.snum=student.snum</span><br><span class="line"><span class="selector-tag">WHERE</span> <span class="selector-tag">sc</span><span class="selector-class">.score</span>&lt;60</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tnum</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL关于5-7版本的group-by中的sql-mode使用"><a href="#MySQL关于5-7版本的group-by中的sql-mode使用" class="headerlink" title="MySQL关于5.7版本的group by中的sql_mode使用 "></a>MySQL关于5.7版本的group by中的sql_mode使用 </h2><p>上述在group by章节有说，这里再做补充示例</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>查询不加group by的正常用户表</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| user          | host      |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| root          | 10.0.0.%  |</span><br><span class="line">| word          | 10.0.0.%  |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">| word          | localhost |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br></pre></td></tr></table></figure><p>使用group by的错误查询</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span> <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">user</span>; </span><br><span class="line">//ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;mysql.user.Host&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><p>在带有group by子句的select中，select后的条件列（非主键列），要么是group by后的列，要么需要在函数中包裹</p><p>如下这条件语句：select后面user在后面使用group by，而host使用了函数包裹（group_concat)，这样才可以正确使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">group_concat</span>(<span class="selector-tag">host</span>) <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span> <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">user</span>;</span><br></pre></td></tr></table></figure><h3 id="关闭sql-mode使用"><a href="#关闭sql-mode使用" class="headerlink" title="关闭sql_mode使用"></a>关闭sql_mode使用</h3><p>查询出sql_mode使用的参数，去掉前面的ONLY_FULL_GROUP_BY</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> @<span class="keyword">@sql_mode</span>;</span><br><span class="line"><span class="selector-tag">ONLY_FULL_GROUP_BY</span>,<span class="selector-tag">STRICT_TRANS_TABLES</span>,<span class="selector-tag">NO_ZERO_IN_DATE</span>,<span class="selector-tag">NO_ZERO_DATE</span>,<span class="selector-tag">ERROR_FOR_DIVISION_BY_ZERO</span>,<span class="selector-tag">NO_AUTO_CREATE_USER</span>,<span class="selector-tag">NO_ENGINE_SUBSTITUTION</span></span><br></pre></td></tr></table></figure><p>编辑配置my.cnf文件，然后重启</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><p>在重新查询测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span> <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| user          | host      |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | 10.0.0.%  |</span><br><span class="line">| word          | 10.0.0.%  |</span><br></pre></td></tr></table></figure><h2 id="group-concat-使用"><a href="#group-concat-使用" class="headerlink" title="group_concat()使用"></a>group_concat()使用</h2><p><strong>列转行聚合函数</strong></p><p>使用该子句，可以对比上述的没有使用了group by和没有使用group by的比较。很明显，没有加group_concat参数会少了localhost地址，只有10.0.0.%范围的地址</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">group_concat</span>(<span class="selector-tag">host</span>) <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span> <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| user          | group_concat(host) |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| mysql.session | localhost          |</span><br><span class="line">| mysql.sys     | localhost          |</span><br><span class="line">| root          | localhost,10.0.0.% |</span><br><span class="line">| word          | localhost,10.0.0.% |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="concat-使用"><a href="#concat-使用" class="headerlink" title="concat()使用"></a>concat()使用</h2><p><strong>对列值进行拼接</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">concat</span>(<span class="selector-tag">user</span>,&quot;<span class="selector-pseudo">::&quot;</span>,<span class="selector-tag">host</span>) <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span> <span class="selector-tag">group</span> <span class="selector-tag">by</span> <span class="selector-tag">user</span>;</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| concat(user,&quot;::&quot;,host)   |</span><br><span class="line">+<span class="selector-tag">--------------------------</span>+</span><br><span class="line">| mysql.session::localhost |</span><br><span class="line">| mysql.sys::localhost     |</span><br><span class="line">| root::10.0.0.%           |</span><br><span class="line">| word::10.0.0.%           |</span><br><span class="line">+<span class="selector-tag">-------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="distinst-使用"><a href="#distinst-使用" class="headerlink" title="distinst()使用"></a>distinst()使用</h2><p><strong>单独去重复</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">distinct</span>(<span class="selector-tag">user</span>)<span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+</span><br><span class="line">| user          |</span><br><span class="line">+<span class="selector-tag">---------------</span>+</span><br><span class="line">| root          |</span><br><span class="line">| word          |</span><br><span class="line">| mysql.session |</span><br><span class="line">| mysql.sys     |</span><br><span class="line">+<span class="selector-tag">---------------</span>+</span><br></pre></td></tr></table></figure><h2 id="MySQL视图的使用"><a href="#MySQL视图的使用" class="headerlink" title="MySQL视图的使用"></a>MySQL视图的使用</h2><p>创建一个视图，并设置视图别名</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">CREATE</span> <span class="selector-tag">VIEW</span> <span class="selector-tag">vv</span> <span class="selector-tag">AS</span></span><br><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span>,<span class="selector-tag">AVG</span>(<span class="selector-tag">sc</span><span class="selector-class">.score</span>)</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">teacher</span> </span><br><span class="line">JOIN course ON teacher.tnum=course.tnum</span><br><span class="line">JOIN sc ON course.cnum=sc.cnum</span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">teacher</span><span class="selector-class">.tname</span>,<span class="selector-tag">course</span><span class="selector-class">.cname</span></span><br><span class="line"><span class="selector-tag">ORDER</span> <span class="selector-tag">BY</span> <span class="selector-tag">AVG</span>(<span class="selector-tag">sc</span><span class="selector-class">.score</span>)</span><br></pre></td></tr></table></figure><p>查询vv视图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">vv</span>;</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+</span><br><span class="line">| tname | cname  | AVG(sc.score) |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+</span><br><span class="line">| hesw  | python |       70.0000 |</span><br><span class="line">| ren   | mysql  |       72.5000 |</span><br><span class="line">| gou   | php    |       73.5000 |</span><br><span class="line">| bin   | linux  |       82.0000 |</span><br><span class="line">+<span class="selector-tag">-------</span>+<span class="selector-tag">--------</span>+<span class="selector-tag">---------------</span>+</span><br></pre></td></tr></table></figure><h2 id="MySQL-information-schema元数据使用"><a href="#MySQL-information-schema元数据使用" class="headerlink" title="MySQL-information_schema元数据使用"></a>MySQL-information_schema元数据使用</h2><p>元数据是存储在“基表”中，通过专用的DDL语句，DCL语句进行修改，information_schema中保存了大量元数据查询的视图，而show命令是封装好的功能，提供元数据查询基础功能</p><h3 id="information-schema的基础应用"><a href="#information-schema的基础应用" class="headerlink" title="information_schema的基础应用"></a>information_schema的基础应用</h3><p>tables视图的引用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">information_schema</span>;</span><br><span class="line">&gt; <span class="selector-tag">desc</span> <span class="selector-tag">tables</span>;</span><br></pre></td></tr></table></figure><p>查看重要的参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TABLE_SCHEMA</span>    //表所载的库名</span><br><span class="line"><span class="selector-tag">TABLE_NAME</span>      //表名</span><br><span class="line"><span class="selector-tag">ENGINE</span>        //存储引擎</span><br><span class="line"><span class="selector-tag">TABLE_ROWS</span>      //数据行</span><br><span class="line"><span class="selector-tag">AVG_ROW_LENGTH</span>//平均行长度</span><br><span class="line"><span class="selector-tag">INDEX_LENGTH</span>    //索引长度</span><br></pre></td></tr></table></figure><h3 id="information-schema应用示例"><a href="#information-schema应用示例" class="headerlink" title="information_schema应用示例"></a>information_schema应用示例</h3><p>显示所有的库和表的信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">table_name</span> <span class="selector-tag">from</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span>;</span><br></pre></td></tr></table></figure><p>以以下模式 显示所有的库和表的信息</p><ul><li>库：world 表：countrylanguage,country,city</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">GROUP_CONCAT</span>(<span class="selector-tag">table_name</span>) <span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span></span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">table_schema</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208153948255.png"></p><p>查询所有innodb引擎的表</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">table_name</span>,<span class="selector-tag">ENGINE</span> <span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span></span><br><span class="line">WHERE ENGINE=&#x27;innodb&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208154120059.png"></p><p>统计world下的city表占用空间大小</p><ul><li>表的数据量=平均行长度 * 行数 + 索引长度 AVG_ROW_LENGTH * TABLE_ROWS + INDEX_LENGTH</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">table_name</span>,(<span class="selector-tag">AVG_ROW_LENGTH</span>*<span class="selector-tag">TABLE_ROWS</span>+<span class="selector-tag">INDEX_LENGTH</span>)/1024  //除以1024代表是<span class="selector-tag">kb</span>单位，否则以字节为单位</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span> </span><br><span class="line">WHERE table_schema=&#x27;world&#x27; AND table_name=&#x27;city&#x27;;</span><br></pre></td></tr></table></figure><p>统计world库数据量总大小</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">SUM</span>(<span class="selector-tag">AVG_ROW_LENGTH</span>*<span class="selector-tag">TABLE_ROWS</span>+<span class="selector-tag">INDEX_LENGTH</span>)</span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span></span><br><span class="line">WHERE table_schema=&#x27;world&#x27;;</span><br></pre></td></tr></table></figure><p>统计所有库的总大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">SUM</span>(<span class="selector-tag">AVG_ROW_LENGTH</span>*<span class="selector-tag">TABLE_ROWS</span>+<span class="selector-tag">INDEX_LENGTH</span>) <span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span></span><br></pre></td></tr></table></figure><p>统计每个库的数据量大小，并按数据量从大到小排序</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">table_schema</span>,<span class="selector-tag">SUM</span>(<span class="selector-tag">AVG_ROW_LENGTH</span>*<span class="selector-tag">TABLE_ROWS</span>+<span class="selector-tag">INDEX_LENGTH</span>) <span class="selector-tag">AS</span> <span class="selector-tag">total</span></span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span></span><br><span class="line"><span class="selector-tag">GROUP</span> <span class="selector-tag">BY</span> <span class="selector-tag">table_schema</span></span><br><span class="line"><span class="selector-tag">ORDER</span> <span class="selector-tag">BY</span> <span class="selector-tag">total</span> <span class="selector-tag">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208154816961.png"></p><h3 id="information-schema配置concat-函数拼接语句或命令"><a href="#information-schema配置concat-函数拼接语句或命令" class="headerlink" title="information_schema配置concat()函数拼接语句或命令"></a>information_schema配置concat()函数拼接语句或命令</h3><p>模仿以下语句,进行数据库的分库分表备份</p><ul><li>mysqldump -uroot -p123 world city &gt;/bak/world_city.sql</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">CONCAT</span>(&quot;<span class="selector-tag">mysqldump</span> <span class="selector-tag">-uroot</span> <span class="selector-tag">-p123</span> &quot;,<span class="selector-tag">table_schema</span>,&quot; &quot;,<span class="selector-tag">table_name</span>,&quot; &gt;/<span class="selector-tag">bak</span>/&quot;,<span class="selector-tag">table_schema</span>,&quot;_&quot;,<span class="selector-tag">table_name</span>,&quot;<span class="selector-class">.sql</span>&quot;) </span><br><span class="line"><span class="selector-tag">FROM</span> <span class="selector-tag">information_schema</span><span class="selector-class">.tables</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208155249328.png"></p><p>模仿以下语句，进行批量生成对world库下所有表进行操作</p><ul><li>ALTER TABLE world.city DISCARD TABLESPACE;</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SELECT</span> <span class="selector-tag">CONCAT</span>(&quot;<span class="selector-tag">ALTER</span> <span class="selector-tag">TABLE</span> &quot;,<span class="selector-tag">table_schema</span>,&quot;.&quot;,<span class="selector-tag">table_name</span>,&quot; <span class="selector-tag">DISCARD</span> <span class="selector-tag">TABLESPACE</span>;&quot;)</span><br><span class="line">FROM information_schema.tables WHERE table_schema=&#x27;world&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210208155613881.png"></p><h2 id="MySQL-sys-Schema元数据使用"><a href="#MySQL-sys-Schema元数据使用" class="headerlink" title="MySQL-sys Schema元数据使用"></a>MySQL-sys Schema元数据使用</h2><p>MySQL4.1版本提供了information_schema数据字典，一些基础元数据可以通过SQL查询得到</p><p>MySQL5.5版本提供了performance_schema性能引擎，可以通过参数performance_schema来开启/关闭</p><p>MySQL5.7版本提供了sys Schema，这个新特性包含了一系列的存储过程、自定义函数以及视图来帮助我们快速地了解系统的元数据信息</p><h3 id="sys-Schema的意义"><a href="#sys-Schema的意义" class="headerlink" title="sys Schema的意义"></a>sys Schema的意义</h3><p>原本需要结合information_schema，performance_schema查询的方式。现在有了sys的视图方式，把一些优化和诊断信息通过视图的方式汇总起来，更加直观。如果能好好掌握这些视图的内涵，可以随时查看表的关联关系，对于理解MySQL的运行原理和问题的分析会有很大的帮助</p><h3 id="sys下的对象分布情况"><a href="#sys下的对象分布情况" class="headerlink" title="sys下的对象分布情况"></a>sys下的对象分布情况</h3><p>sys的对象分布信息很大，除了视图和表以外，还有函数、存储过程和触发器，这些信息可以通过sys下的视图schema_object_overview来查看。可以看到sys下的表只有一个，视图有100个</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">use</span> <span class="selector-tag">sys</span></span><br><span class="line">&gt; select * from schema_object_overview where db=&#x27;sys&#x27;;</span><br><span class="line">+<span class="selector-tag">-----</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| db  | object_type   | count |</span><br><span class="line">+<span class="selector-tag">-----</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------</span>+</span><br><span class="line">| sys | BASE TABLE    |     1 |</span><br><span class="line">| sys | INDEX (BTREE) |     1 |</span><br><span class="line">| sys | TRIGGER       |     2 |</span><br><span class="line">| sys | FUNCTION      |    22 |</span><br><span class="line">| sys | PROCEDURE     |    26 |</span><br><span class="line">| sys | VIEW          |   100 |</span><br><span class="line">+<span class="selector-tag">-----</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------</span>+</span><br></pre></td></tr></table></figure><h3 id="sys下唯一表"><a href="#sys下唯一表" class="headerlink" title="sys下唯一表"></a>sys下唯一表</h3><p>sys_config是sys的唯一表，使用命令show tables显示出来这个表，其他的都是视图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">sys_config</span>;</span><br><span class="line">+<span class="selector-tag">--------------------------------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">--------</span>+</span><br><span class="line">| variable                             | value | set_time            | set_by |</span><br><span class="line">+<span class="selector-tag">--------------------------------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">--------</span>+</span><br><span class="line">| diagnostics.allow_i_s_tables         | OFF   | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">| diagnostics.include_raw              | OFF   | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">| ps_thread_trx_info.max_length        | 65535 | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">| statement_performance_analyzer.limit | 100   | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">| statement_performance_analyzer.view  | NULL  | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">| statement_truncate_len               | 64    | 2021-02-06 03:56:55 | NULL   |</span><br><span class="line">+<span class="selector-tag">--------------------------------------</span>+<span class="selector-tag">-------</span>+<span class="selector-tag">---------------------</span>+<span class="selector-tag">--------</span>+</span><br></pre></td></tr></table></figure><p>可以看到里面是一个基础参数的设置 ，比如一些范围、基数的设置。而且值得一提的是这个表里设置了几个触发器，对这个表的 DML 操作都会触发里面的数据级联变化，使用 show tables 来看，会看到整个sys下的表和视图有101个，其中 x$开头的对象有48个（x$的可以理解信息是没有经过格式化的），其中里面的表和视图有53个，加起来一共101个</p><h3 id="sys下的session视图"><a href="#sys下的session视图" class="headerlink" title="sys下的session视图"></a>sys下的session视图</h3><p>抽取一个视图来看，输出和show processlist命令如出一辙  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">session</span>\<span class="selector-tag">G</span>;</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">                <span class="selector-tag">thd_id</span>: 44</span><br><span class="line">               <span class="selector-tag">conn_id</span>: 19</span><br><span class="line">                  <span class="selector-tag">user</span>: <span class="selector-tag">root</span><span class="keyword">@localhost</span></span><br><span class="line">                    <span class="attribute">db:</span> sys</span><br><span class="line">               <span class="attribute">command:</span> Query</span><br><span class="line">                 <span class="attribute">state:</span> Sending data</span><br><span class="line">                  <span class="attribute">time:</span> <span class="number">0</span></span><br><span class="line">。。。。。。。。。。。。。。。略。。。。。。。。。。。。。。。</span><br></pre></td></tr></table></figure><p>对比一下show processlist;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">show</span> <span class="selector-tag">processlist</span>;</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------------------</span>+</span><br><span class="line">| Id | User | Host      | db   | Command | Time | State    | Info             |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------------------</span>+</span><br><span class="line">| 19 | root | localhost | sys  | Query   |    0 | starting | show processlist |</span><br><span class="line">+<span class="selector-tag">----</span>+<span class="selector-tag">------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">------</span>+<span class="selector-tag">----------</span>+<span class="selector-tag">------------------</span>+</span><br></pre></td></tr></table></figure><p>在MySQL中使用的是单进程多线程，所以会有独立的$session和$processlist两个视图，两者通过内存地址的方式映射，所有在专用服务器模式下，就可以通过进程找到会话，或者通过会话找到进程，对于排查性能问题大有裨益</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210220212626134.png"></p><h3 id="sys下的数据字典分类"><a href="#sys下的数据字典分类" class="headerlink" title="sys下的数据字典分类"></a>sys下的数据字典分类</h3><p>host_summary ： 这个是服务器层面的，比如里面的视图 host_summary_by_file io;</p><p>user summary ： 这个是用户层级的，比如里面的视图 user_summary_by_fi le一io;</p><p>InnoDB ：这个是 InnoDB 层面的，比如 innodb_buffer_stats_by_schema;</p><p>memoy：关于内存的使用情况，比如视图 memory_by_host_by_current_bytes;</p><p>schema：关于 schema 级别的统计信息，比如 schema_table_lock_waits;</p><p>session ： 关于会话级别的，这个视图少一些，只有 session 和 session_ssl_status 两个；</p><p>statement ： 关于语句级别的，比如 statements_with_errors_or_warnings;</p><p>wait：关于等待的，这个还是处于起步阶段，等待模型有待完善 ，目前只有基于io/file, lock/table 和 io/table 这三个方面</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> &gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">wait_classes_global_by_avg_latency</span>\<span class="selector-tag">g</span>;</span><br><span class="line"> +<span class="selector-tag">-----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line"> | event_class     | total   | total_latency | min_latency | avg_latency | max_latency |</span><br><span class="line"> +<span class="selector-tag">-----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line"> | wait/io/file    |   10385 | 12.88 s       | 0 ps        | 1.24 ms     | 398.63 ms   |</span><br><span class="line"> | wait/io/table   | 8284387 | 30.45 s       | 11.46 us    | 3.68 us     | 10.91 s     |</span><br><span class="line"> | wait/lock/table |      86 | 115.48 us     | 62.56 ns    | 1.34 us     | 74.79 us    |</span><br><span class="line">+<span class="selector-tag">-----------------</span>+<span class="selector-tag">---------</span>+<span class="selector-tag">---------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><h3 id="sys下的InnoDB视图"><a href="#sys下的InnoDB视图" class="headerlink" title="sys下的InnoDB视图"></a>sys下的InnoDB视图</h3><p>InnoDB部分关于锁的视图innodb_lock_waits视图；</p><p><strong>通过下述命令照成锁机制</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//第一个会话</span><br><span class="line">&gt; <span class="selector-tag">start</span> <span class="selector-tag">transaction</span>;</span><br><span class="line">&gt; update test set id=100;</span><br><span class="line"></span><br><span class="line">//第二个会话</span><br><span class="line">&gt; update test set id=102;</span><br></pre></td></tr></table></figure><p>如果没有sys，只能通过这两条信息查询，当然也可以使用show engine innodb status来得到一些信息。但是上述情况查询到了却不知怎么处理，是否要杀掉，很难决策</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">information_schema</span><span class="selector-class">.innodb_locks</span>\<span class="selector-tag">G</span>;</span><br><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">information_schema</span><span class="selector-class">.innodb_trx</span>\<span class="selector-tag">G</span>;</span><br></pre></td></tr></table></figure><p>这时可以看看sys的innodb_lock_waits的结果，这里的过程语句都给准备好，有三行信息阻塞，可以使用kill的方式终止会话，kill语句都准备好了，显示如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">sys</span><span class="selector-class">.innodb_lock_waits</span>\<span class="selector-tag">G</span>;</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">                <span class="selector-tag">wait_started</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:36</span><span class="selector-pseudo">:21</span></span><br><span class="line">                    <span class="selector-tag">wait_age</span>: 00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:07</span></span><br><span class="line">               <span class="selector-tag">wait_age_secs</span>: 7</span><br><span class="line">                <span class="selector-tag">locked_table</span>: `<span class="selector-tag">test</span>`.`<span class="selector-tag">test</span>`</span><br><span class="line">                <span class="selector-tag">locked_index</span>: <span class="selector-tag">GEN_CLUST_INDEX</span></span><br><span class="line">                 <span class="selector-tag">locked_type</span>: <span class="selector-tag">RECORD</span></span><br><span class="line">              <span class="selector-tag">waiting_trx_id</span>: 4896</span><br><span class="line">         <span class="selector-tag">waiting_trx_started</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:28</span><span class="selector-pseudo">:46</span></span><br><span class="line">             <span class="selector-tag">waiting_trx_age</span>: 00<span class="selector-pseudo">:07</span><span class="selector-pseudo">:42</span></span><br><span class="line">     <span class="selector-tag">waiting_trx_rows_locked</span>: 2</span><br><span class="line">   <span class="selector-tag">waiting_trx_rows_modified</span>: 0</span><br><span class="line">                 <span class="selector-tag">waiting_pid</span>: 19</span><br><span class="line">               waiting_query: update test set id=100</span><br><span class="line">             <span class="selector-tag">waiting_lock_id</span>: 4896<span class="selector-pseudo">:53</span><span class="selector-pseudo">:3</span><span class="selector-pseudo">:2</span></span><br><span class="line">           <span class="selector-tag">waiting_lock_mode</span>: <span class="selector-tag">X</span></span><br><span class="line">             <span class="selector-tag">blocking_trx_id</span>: 4895</span><br><span class="line">                <span class="selector-tag">blocking_pid</span>: 20</span><br><span class="line">              <span class="selector-tag">blocking_query</span>: <span class="selector-tag">NULL</span></span><br><span class="line">            <span class="selector-tag">blocking_lock_id</span>: 4895<span class="selector-pseudo">:53</span><span class="selector-pseudo">:3</span><span class="selector-pseudo">:2</span></span><br><span class="line">          <span class="selector-tag">blocking_lock_mode</span>: <span class="selector-tag">X</span></span><br><span class="line">        <span class="selector-tag">blocking_trx_started</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:24</span><span class="selector-pseudo">:41</span></span><br><span class="line">            <span class="selector-tag">blocking_trx_age</span>: 00<span class="selector-pseudo">:11</span><span class="selector-pseudo">:47</span></span><br><span class="line">    <span class="selector-tag">blocking_trx_rows_locked</span>: 3</span><br><span class="line">  <span class="selector-tag">blocking_trx_rows_modified</span>: 4</span><br><span class="line">     <span class="selector-tag">sql_kill_blocking_query</span>: <span class="selector-tag">KILL</span> <span class="selector-tag">QUERY</span> 20</span><br><span class="line"><span class="selector-tag">sql_kill_blocking_connection</span>: <span class="selector-tag">KILL</span> 20</span><br><span class="line">1 <span class="selector-tag">row</span> <span class="selector-tag">in</span> <span class="selector-tag">set</span>, 3 <span class="selector-tag">warnings</span> (0.00 <span class="selector-tag">sec</span>)</span><br></pre></td></tr></table></figure><p>当然默认事务还有超时时间设置，可以看到确实阻塞了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; update test set id=100;</span><br><span class="line"><span class="selector-tag">ERROR</span> 1205 (<span class="selector-tag">HY000</span>): <span class="selector-tag">Lock</span> <span class="selector-tag">wait</span> <span class="selector-tag">timeout</span> <span class="selector-tag">exceeded</span>; <span class="selector-tag">try</span> <span class="selector-tag">restarting</span> <span class="selector-tag">transaction</span></span><br></pre></td></tr></table></figure><h3 id="sys下的schema视图"><a href="#sys下的schema视图" class="headerlink" title="sys下的schema视图"></a>sys下的schema视图</h3><p><strong>schema的所有视图</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">schema_auto_increment_columns</span>      </span><br><span class="line"><span class="selector-tag">schema_index_statistics</span>            </span><br><span class="line"><span class="selector-tag">schema_object_overview</span>             </span><br><span class="line"><span class="selector-tag">schema_redundant_indexes</span>           </span><br><span class="line"><span class="selector-tag">schema_table_lock_waits</span>            </span><br><span class="line"><span class="selector-tag">schema_table_statistics</span>            </span><br><span class="line"><span class="selector-tag">schema_table_statistics_with_buffer</span></span><br><span class="line"><span class="selector-tag">schema_tables_with_full_table_scans</span></span><br><span class="line"><span class="selector-tag">schema_unused_indexes</span>              </span><br></pre></td></tr></table></figure><p>如何查看一个列值溢出的情况，比如列的自增长是否会超出数据类型的限制，使用视图schema_auto_increment_columns</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">schema_auto_increment_columns</span>;</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">----------------------</span>+</span><br><span class="line">| table_schema | table_name | column_name | data_type | column_type | is_signed | is_unsigned | max_value  | auto_increment | auto_increment_ratio |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">----------------------</span>+</span><br><span class="line">| school       | student    | snum        | int       | int(11)     |         1 |           0 | 2147483647 |              8 |               0.0000 |</span><br><span class="line">| world        | city       | ID          | int       | int(11)     |         1 |           0 | 2147483647 |           4080 |               0.0000 |</span><br><span class="line">+<span class="selector-tag">--------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------</span>+<span class="selector-tag">------------</span>+<span class="selector-tag">----------------</span>+<span class="selector-tag">----------------------</span>+</span><br></pre></td></tr></table></figure><p>如果一个表的索引没有使用到，以前用PT工具也可以做分析，现在查个视图就可以搞定了，当然索引的部分，和采样率也有关系，不是一个绝对的结果，视图schema_unused_indexes可查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">schema_unused_indexes</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">| object_schema | object_name     | index_name  |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------</span>+</span><br><span class="line">| test          | t100w           | id_x        |</span><br><span class="line">| test          | test            | id_x        |</span><br><span class="line">| world         | city            | CountryCode |</span><br><span class="line">| world         | city            | idx_dis     |</span><br><span class="line">| world         | countrylanguage | CountryCode |</span><br><span class="line">| world         | t100            | id_k        |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------</span>+</span><br></pre></td></tr></table></figure><p>如果要查看哪些表走了全表扫描以及性能情况，可以使用schema_tables_with_full_table_scans视图，如果数据量本身量很大，这个结果就会被放大</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">schema_tables_with_full_table_scans</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| object_schema | object_name     | rows_full_scanned | latency   |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| world         | t100            |           7212415 | 22.12 s   |</span><br><span class="line">| test          | t100w           |           1030345 | 7.95 s    |</span><br><span class="line">| world         | city            |             32632 | 110.45 ms |</span><br><span class="line">| world         | countrylanguage |              6888 | 19.15 ms  |</span><br><span class="line">| world         | country         |              1912 | 81.39 ms  |</span><br><span class="line">| world         | test1           |                56 | 600.68 us |</span><br><span class="line">| world         | pp              |                42 | 9.80 ms   |</span><br><span class="line">| world         | test            |                42 | 528.82 us |</span><br><span class="line">| test          | test            |                28 | 2.56 m    |</span><br><span class="line">| school        | sc              |                17 | 35.13 ms  |</span><br><span class="line">| sys           | sys_config      |                12 | 102.70 ms |</span><br><span class="line">| school        | teacher         |                 8 | 2.48 ms   |</span><br><span class="line">| school        | student         |                 7 | 18.36 us  |</span><br><span class="line">| school        | course          |                 5 | 11.64 ms  |</span><br><span class="line">| binlog        | t1              |                 2 | 786.14 us |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------------</span>+<span class="selector-tag">-------------------</span>+<span class="selector-tag">-----------</span>+</span><br></pre></td></tr></table></figure><p>如果查看一些冗余的索引，可以使用视图schema_redundant_indexes;，删除的SQL语句会提供好给你</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">schema_redundant_indexes</span>\<span class="selector-tag">G</span>;</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">              <span class="selector-tag">table_schema</span>: <span class="selector-tag">world</span></span><br><span class="line">                <span class="selector-tag">table_name</span>: <span class="selector-tag">countrylanguage</span></span><br><span class="line">      <span class="selector-tag">redundant_index_name</span>: <span class="selector-tag">CountryCode</span></span><br><span class="line">   <span class="selector-tag">redundant_index_columns</span>: <span class="selector-tag">CountryCode</span></span><br><span class="line"><span class="selector-tag">redundant_index_non_unique</span>: 1</span><br><span class="line">       <span class="selector-tag">dominant_index_name</span>: <span class="selector-tag">PRIMARY</span></span><br><span class="line">    <span class="selector-tag">dominant_index_columns</span>: <span class="selector-tag">CountryCode</span>,<span class="selector-tag">Language</span></span><br><span class="line"> <span class="selector-tag">dominant_index_non_unique</span>: 0</span><br><span class="line">            <span class="selector-tag">subpart_exists</span>: 0</span><br><span class="line">            <span class="selector-tag">sql_drop_index</span>: <span class="selector-tag">ALTER</span> <span class="selector-tag">TABLE</span> `<span class="selector-tag">world</span>`.`<span class="selector-tag">countrylanguage</span>` <span class="selector-tag">DROP</span> <span class="selector-tag">INDEX</span> `<span class="selector-tag">CountryCode</span>`</span><br></pre></td></tr></table></figure><h3 id="sys下的statement视图"><a href="#sys下的statement视图" class="headerlink" title="sys下的statement视图"></a>sys下的statement视图</h3><p><strong>statement的所有视图</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">statement_analysis</span>                         </span><br><span class="line"><span class="selector-tag">statements_with_errors_or_warnings</span>         </span><br><span class="line"><span class="selector-tag">statements_with_full_table_scans</span>           </span><br><span class="line"><span class="selector-tag">statements_with_runtimes_in_95th_percentile</span></span><br><span class="line"><span class="selector-tag">statements_with_sorting</span>                    </span><br><span class="line"><span class="selector-tag">statements_with_temp_tables</span>                </span><br></pre></td></tr></table></figure><p>这部分内容对于分析语句的性能还是很有用的，比如查看语句的排序情况，资源使用情况和延时等都会提供出来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">statements_with_sorting</span>\<span class="selector-tag">G</span>;</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">            <span class="selector-tag">query</span>: <span class="selector-tag">SELECT</span> `<span class="selector-tag">substring_index</span>` ( `<span class="selector-tag">pe</span> ... ` <span class="selector-tag">FROM</span> `<span class="selector-tag">performance_schema</span>` . </span><br><span class="line">               <span class="selector-tag">db</span>: <span class="selector-tag">sys</span></span><br><span class="line">       <span class="selector-tag">exec_count</span>: 1</span><br><span class="line">    <span class="selector-tag">total_latency</span>: 664.65 <span class="selector-tag">ms</span></span><br><span class="line"><span class="selector-tag">sort_merge_passes</span>: 0</span><br><span class="line">  <span class="selector-tag">avg_sort_merges</span>: 0</span><br><span class="line"><span class="selector-tag">sorts_using_scans</span>: 1</span><br><span class="line"> <span class="selector-tag">sort_using_range</span>: 0</span><br><span class="line">      <span class="selector-tag">rows_sorted</span>: 3</span><br><span class="line">  <span class="selector-tag">avg_rows_sorted</span>: 3</span><br><span class="line">       <span class="selector-tag">first_seen</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:04</span><span class="selector-pseudo">:07</span></span><br><span class="line">        <span class="selector-tag">last_seen</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:04</span><span class="selector-pseudo">:07</span></span><br><span class="line">           <span class="selector-tag">digest</span>: <span class="selector-tag">bd301608bc81fec1eaab29b42f839b8b</span></span><br><span class="line">*************************** 2. <span class="selector-tag">row</span> ***************************</span><br><span class="line">            <span class="selector-tag">query</span>: <span class="selector-tag">SELECT</span> `<span class="selector-tag">t</span>` . `<span class="selector-tag">THREAD_ID</span>` <span class="selector-tag">AS</span> `<span class="selector-tag">t</span> ... _<span class="selector-tag">NUMBER_OF_BYTES_USED</span>` ) <span class="selector-tag">DESC</span> </span><br><span class="line">               <span class="selector-tag">db</span>: <span class="selector-tag">sys</span></span><br><span class="line">       <span class="selector-tag">exec_count</span>: 5</span><br><span class="line">    <span class="selector-tag">total_latency</span>: 573.00 <span class="selector-tag">ms</span></span><br><span class="line"><span class="selector-tag">sort_merge_passes</span>: 0</span><br><span class="line">  <span class="selector-tag">avg_sort_merges</span>: 0</span><br><span class="line"><span class="selector-tag">sorts_using_scans</span>: 10</span><br><span class="line"> <span class="selector-tag">sort_using_range</span>: 0</span><br><span class="line">      <span class="selector-tag">rows_sorted</span>: 260</span><br><span class="line">  <span class="selector-tag">avg_rows_sorted</span>: 52</span><br><span class="line">       <span class="selector-tag">first_seen</span>: 2021<span class="selector-tag">-02-18</span> 20<span class="selector-pseudo">:55</span><span class="selector-pseudo">:55</span></span><br><span class="line">        <span class="selector-tag">last_seen</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:00</span><span class="selector-pseudo">:18</span></span><br><span class="line">           <span class="selector-tag">digest</span>: <span class="selector-tag">b3ea91361b876a2dba55fdce3df2ee23</span></span><br></pre></td></tr></table></figure><p>在这里SQL语句做了删减，不过语句的信息、执行次数和延时都可以看到</p><p>对于SQL语句中生成的临时表，可以通过视图statement_with_temp_tables，比如某一个语句生成的临时表情况，都做了统计</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">statements_with_temp_tables</span>\<span class="selector-tag">G</span>;</span><br><span class="line">*************************** 1. <span class="selector-tag">row</span> ***************************</span><br><span class="line">                   <span class="selector-tag">query</span>: <span class="selector-tag">SELECT</span> `<span class="selector-tag">performance_schema</span>` .  ... <span class="selector-tag">name</span>` . `<span class="selector-tag">SUM_TIMER_WAIT</span>` <span class="selector-tag">DESC</span> </span><br><span class="line">                      <span class="selector-tag">db</span>: <span class="selector-tag">sys</span></span><br><span class="line">              <span class="selector-tag">exec_count</span>: 6</span><br><span class="line">           <span class="selector-tag">total_latency</span>: 231.41 <span class="selector-tag">ms</span></span><br><span class="line">       <span class="selector-tag">memory_tmp_tables</span>: 1157</span><br><span class="line">         <span class="selector-tag">disk_tmp_tables</span>: 96</span><br><span class="line"><span class="selector-tag">avg_tmp_tables_per_query</span>: 193</span><br><span class="line">  <span class="selector-tag">tmp_tables_to_disk_pct</span>: 8</span><br><span class="line">              <span class="selector-tag">first_seen</span>: 2021<span class="selector-tag">-02-18</span> 20<span class="selector-pseudo">:54</span><span class="selector-pseudo">:17</span></span><br><span class="line">               <span class="selector-tag">last_seen</span>: 2021<span class="selector-tag">-02-18</span> 21<span class="selector-pseudo">:45</span><span class="selector-pseudo">:47</span></span><br><span class="line">                  <span class="selector-tag">digest</span>: 0777<span class="selector-tag">f5fb19c1c948f63a61c7df1778a2</span></span><br><span class="line">*************************** 2. <span class="selector-tag">row</span> ***************************</span><br><span class="line">                   <span class="selector-tag">query</span>: <span class="selector-tag">SELECT</span> `<span class="selector-tag">information_schema</span>` .  ... <span class="selector-tag">SELECT</span> `<span class="selector-tag">information_schema</span>` . </span><br><span class="line">                      <span class="selector-tag">db</span>: <span class="selector-tag">sys</span></span><br><span class="line">              <span class="selector-tag">exec_count</span>: 2</span><br><span class="line">           <span class="selector-tag">total_latency</span>: 287.82 <span class="selector-tag">ms</span></span><br><span class="line">       <span class="selector-tag">memory_tmp_tables</span>: 390</span><br><span class="line">         <span class="selector-tag">disk_tmp_tables</span>: 66</span><br><span class="line"><span class="selector-tag">avg_tmp_tables_per_query</span>: 195</span><br><span class="line">  <span class="selector-tag">tmp_tables_to_disk_pct</span>: 17</span><br><span class="line">              <span class="selector-tag">first_seen</span>: 2021<span class="selector-tag">-02-18</span> 20<span class="selector-pseudo">:42</span><span class="selector-pseudo">:48</span></span><br><span class="line">               <span class="selector-tag">last_seen</span>: 2021<span class="selector-tag">-02-18</span> 20<span class="selector-pseudo">:42</span><span class="selector-pseudo">:50</span></span><br><span class="line">                  <span class="selector-tag">digest</span>: 86784014<span class="selector-tag">e7e812cb054332f64e8e75a0</span></span><br></pre></td></tr></table></figure><h3 id="sys的备份和重建"><a href="#sys的备份和重建" class="headerlink" title="sys的备份和重建"></a>sys的备份和重建</h3><p>如果查看sys的版本，可以使用视图version来得到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> * <span class="selector-tag">from</span> <span class="selector-tag">version</span>;</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+</span><br><span class="line">| sys_version | mysql_version |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+</span><br><span class="line">| 1.5.1       | 5.7.26-log    |</span><br><span class="line">+<span class="selector-tag">-------------</span>+<span class="selector-tag">---------------</span>+</span><br></pre></td></tr></table></figure><p>如果要导出，可以使用 <code>mysqlpump sys &gt; sys_dump.sql</code> 或者 <code>mysqldump --databases --routines sys &gt; sys_dump.sql</code> 来得到 sys 的创建语旬.如果需要重建则更简单，使用 <code>mysql&lt; sys_dump .sql</code>即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL体系结构与管理-2</title>
      <link href="2021/02/20/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%A1%E7%90%86-2/"/>
      <url>2021/02/20/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%A1%E7%90%86-2/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据结构与管理"><a href="#MySQL数据结构与管理" class="headerlink" title="MySQL数据结构与管理"></a>MySQL数据结构与管理</h1><h2 id="MySQL文件体系结构"><a href="#MySQL文件体系结构" class="headerlink" title="MySQL文件体系结构"></a>MySQL文件体系结构</h2><p>直观的看待一个服务（内存结构）和一些物理文件可以更清晰的理解，内存结构看不到，但是能够看到这些物理文件，所以可以先从文件简单解读一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cd /application/mysql/</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>       56 <span class="selector-tag">Feb</span>  6 03<span class="selector-pseudo">:56</span> <span class="selector-tag">auto</span><span class="selector-class">.cnf</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>      876 <span class="selector-tag">Feb</span>  9 22<span class="selector-pseudo">:41</span> <span class="selector-tag">ib_buffer_pool</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 12582912 <span class="selector-tag">Feb</span> 10 21<span class="selector-pseudo">:27</span> <span class="selector-tag">ibdata1</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 50331648 <span class="selector-tag">Feb</span> 10 21<span class="selector-pseudo">:27</span> <span class="selector-tag">ib_logfile0</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 50331648 <span class="selector-tag">Feb</span> 10 21<span class="selector-pseudo">:27</span> <span class="selector-tag">ib_logfile1</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 12582912 <span class="selector-tag">Feb</span> 16 20<span class="selector-pseudo">:57</span> <span class="selector-tag">ibtmp1</span></span><br><span class="line"><span class="selector-tag">drwxr-x---</span>. 2 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>     4096 <span class="selector-tag">Feb</span>  6 03<span class="selector-pseudo">:56</span> <span class="selector-tag">mysql</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>   104116 <span class="selector-tag">Feb</span> 17 15<span class="selector-pseudo">:13</span> <span class="selector-tag">mysql</span><span class="selector-class">.err</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>        5 <span class="selector-tag">Feb</span>  9 22<span class="selector-pseudo">:42</span> <span class="selector-tag">mysql</span><span class="selector-class">.pid</span></span><br><span class="line"><span class="selector-tag">drwxr-x---</span>. 2 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>     8192 <span class="selector-tag">Feb</span>  6 03<span class="selector-pseudo">:56</span> <span class="selector-tag">performance_schema</span></span><br><span class="line"><span class="selector-tag">drwxr-x---</span>. 2 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>     8192 <span class="selector-tag">Feb</span>  6 03<span class="selector-pseudo">:56</span> <span class="selector-tag">sys</span></span><br><span class="line"><span class="selector-tag">drwxr-x---</span>. 2 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>      270 <span class="selector-tag">Feb</span>  9 21<span class="selector-pseudo">:52</span> <span class="selector-tag">world</span></span><br></pre></td></tr></table></figure><p>下述表格列出每个目录和文件的描述</p><table><thead><tr><th>文件名</th><th>文件类型</th><th>描述</th></tr></thead><tbody><tr><td>performance_schema</td><td>目录</td><td>数据库，MySQL的数据字典</td></tr><tr><td>mysql</td><td>目录</td><td>数据库，MySQL的数据字典</td></tr><tr><td>sys</td><td>目录</td><td>数据库，MySQL的数据字典</td></tr><tr><td>world</td><td>目录</td><td>数据库，存储应用数据（这是导入的数据库）</td></tr><tr><td>auto.cnf</td><td>文件</td><td>MySQL启动时如果没有UUID，就会生成这个文件</td></tr><tr><td>ibdata1</td><td>文件</td><td>系统数据字典信息（统计信息）UNDO表空间等数据</td></tr><tr><td>ibtmp1</td><td>文件</td><td>临时表空间位置，存储临时表</td></tr><tr><td>ib_logfile0-1</td><td>文件</td><td>REDO日志文件，事务日志文件</td></tr><tr><td>ib_buffer_pool</td><td>文件</td><td>5.7版本新特性，关闭MySQL时，会把内存中的热数据保存在这个文件中，提高使用率和性能</td></tr><tr><td>mysql.pid</td><td>文件</td><td>MySQL的服务进程号</td></tr><tr><td>mysql.err</td><td>文件</td><td>MySQL错误日志，记录数据启动的日志</td></tr></tbody></table><p>查看world目录（数据库）下的文件，就会对MySQL数据存储有了一个直观的认识，显示如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd world</span><br><span class="line">$ ll</span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>   8710 <span class="selector-tag">Feb</span>  8 23<span class="selector-pseudo">:04</span> <span class="selector-tag">city</span><span class="selector-class">.frm</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 655360 <span class="selector-tag">Feb</span>  8 23<span class="selector-pseudo">:04</span> <span class="selector-tag">city</span><span class="selector-class">.ibd</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>   9172 <span class="selector-tag">Feb</span>  7 15<span class="selector-pseudo">:18</span> <span class="selector-tag">country</span><span class="selector-class">.frm</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 180224 <span class="selector-tag">Feb</span>  7 15<span class="selector-pseudo">:18</span> <span class="selector-tag">country</span><span class="selector-class">.ibd</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>   8702 <span class="selector-tag">Feb</span>  7 15<span class="selector-pseudo">:18</span> <span class="selector-tag">countrylanguage</span><span class="selector-class">.frm</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 229376 <span class="selector-tag">Feb</span>  7 15<span class="selector-pseudo">:18</span> <span class="selector-tag">countrylanguage</span><span class="selector-class">.ibd</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span>. 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span>     67 <span class="selector-tag">Feb</span>  7 15<span class="selector-pseudo">:18</span> <span class="selector-tag">db</span><span class="selector-class">.opt</span></span><br></pre></td></tr></table></figure><ul><li><p>InnoDB存储引擎，每个表都有两类文件：.frm和.idb</p><p>frm：存储表的列信息</p><p>ibd：存储表的数据行和索引</p></li><li><p>MySQL大体有两个参数来做基本的空间：</p><p>1）一个是innodb_data_file_path，就是共享表空间，数据都往一个文件里放（ibdata1），同时也存储undo和数据字典信息</p><p>2）另一个是innodb_file_per_table，为独立的表空间，每一个表都有独立的文件.frm和.ibd</p></li><li><p>5.5版本的默认模式是共享表空间，也就是所有数据都往一个文件放（ibdata1），管理比较混乱</p></li><li><p>5.6版本以后，共享表空间保留，只用来存储：数据字典信息(idbdata1),undo，临时表</p></li><li><p>5.7版本，ibdata1将临时表独立，也就是我们上述说明的文件ibtmp1</p></li><li><p>8.0版本，ibdate1将undo也独立了</p></li></ul><h3 id="简单总结MySQL文件结构"><a href="#简单总结MySQL文件结构" class="headerlink" title="简单总结MySQL文件结构"></a>简单总结MySQL文件结构</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210217171057288.png"></p><h2 id="MySQL存储结构"><a href="#MySQL存储结构" class="headerlink" title="MySQL存储结构"></a>MySQL存储结构</h2><p>其实一个表中的数据不会像文本那样存储，表里的数据是以行位单位存储，每一行会分为多个更细粒度的单元（比如字段），存储最小单元是页，即16K（也可以根据参数innodb_page_size调整为4k、8k、32k等），然后自成一套体系</p><p><strong>段、区、页（只针对数据行）：</strong></p><ul><li><p>数据行存储，每次默认64个连续的page(16K)，加起来就是1M区，64 * 16 = 1024KB</p></li><li><p>如果按32K分块，那么每次就会有32个连续的page，也还是1M，不管分多少K为一块，都是1M的区</p></li></ul><ul><li>一般情况下（非分区表），一张表就是一个段，一个段由多个区构成，每一个区1M，由64个连续（16k）页组成</li></ul><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210217171639294.png"></p><h2 id="MySQL服务管理"><a href="#MySQL服务管理" class="headerlink" title="MySQL服务管理"></a>MySQL服务管理</h2><p>MySQL提供的网络访问模式，主要有socket和TCP/IP两类，并且对于每个实例，只能对应一个端口</p><h3 id="Socket连接"><a href="#Socket连接" class="headerlink" title="Socket连接"></a>Socket连接</h3><p>socket是一种特殊的文件，也叫做套接字，是应用层与TCP/IP协议栈通信的中间软件抽象层</p><p>socket连接可以理解是本地连接，MySQL默认使用socket方式连接。如果在服务端使用mysql命令即可连接到数据库的原因，mysql会启动时会寻找my.cnf配置文件中的socket文件路径，即使socket文件的生成目录在[mysqld]上指定。如果没有默认是/tmp/mysql.sock，默认使用的端口是3306</p><p><strong>命令如下</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -Uroot -p123456 -S /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line">//或在<span class="selector-tag">mysql</span>命令中执行<span class="selector-tag">socket</span>路径</span><br><span class="line">$ mysql --socket=/data/mysql/data/tmp/mysqld.sock -uroot -p123456 -P3306 </span><br></pre></td></tr></table></figure><h3 id="TCP-IP连接"><a href="#TCP-IP连接" class="headerlink" title="TCP/IP连接"></a>TCP/IP连接</h3><p>TCP/IP连接可以理解为远程方式连接，它是建立一个基于网络的连接请求</p><p><strong>命令如下</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456 -h 10.0.0.51 -P3306</span><br></pre></td></tr></table></figure><h2 id="MySQL执行的层次结构"><a href="#MySQL执行的层次结构" class="headerlink" title="MySQL执行的层次结构"></a>MySQL执行的层次结构</h2><p>执行一条命令的过程，mysql一共分为三个层次结构进行执行，如下图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210205205855800.png"></p><p>sql_mode：是一组mysql支持的基本语法及校验规则。所有的关系型数据库管理数据的时候使用SQL语句，都是通用使用SQL语句。从mysql5.7才真正的使用了国际标准，SQL（5.6）之前的版本都是不严谨，之前的版本都会有存入错误</p><h3 id="解析器简单测试"><a href="#解析器简单测试" class="headerlink" title="解析器简单测试"></a>解析器简单测试</h3><p>我们创建一个测试表进行测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-tag">test</span> (<span class="selector-tag">id</span> <span class="selector-tag">int</span>,<span class="selector-tag">name</span> <span class="selector-tag">varchar</span>(30));</span><br></pre></td></tr></table></figure><p>如果我们要提交一个语法错误的SQL，在解析方面MySQL提供的信息会非常有限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; selectl id3 from2 test1 where3 id2=&#x27;a&#x27; group by4 id2 order by1 id0;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;selectl id3 from2 test1 where3 id2=&#x27;a&#x27; group by4 id2 order by1 id0&#x27; at line 1</span><br></pre></td></tr></table></figure><p>这些错误没有下标，也没有明确的提示，无法理解愈发解析的过程，在对象和权限的解析方面，MySQL的解析方式也很单一，即从左到右。如下面的语句：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; select id1 from test where id=100 group by id2 order by id3;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#x27;id1&#x27; in &#x27;field list&#x27;</span><br></pre></td></tr></table></figure><p>错误在select子句，修改子句，继续测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; select id from test where id=100 group by id2 order by id3;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#x27;id2&#x27; in &#x27;group statement&#x27;</span><br></pre></td></tr></table></figure><p>错误group by 子句，修改子句，继续测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; select id from test where id=100 group by id order by id3;</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#x27;id3&#x27; in &#x27;order clause&#x27;</span><br></pre></td></tr></table></figure><p>错误在order by 子句，后面还可以有limit子句，整个SQL执行顺序就是这样执行</p><ul><li>FROM 子句</li><li>where 子句</li><li>GROUP BY 子句</li><li>HAVING 子句</li><li>ORDER BY 子句</li><li>SELECT 子句</li><li>LIMIT 子句</li><li>最终呈现结果</li></ul><p>为什么解析顺序和执行顺序差别很大呢，归根结底，就两种方式的差异总结来说。解析是在SQL文件的解析，而执行则是在解析的基础上做数据的提取</p><h2 id="MySQL的逻辑存储结构"><a href="#MySQL的逻辑存储结构" class="headerlink" title="MySQL的逻辑存储结构"></a>MySQL的逻辑存储结构</h2><p>MySQL库表与Linux的对应关系</p><table><thead><tr><th>MySQL</th><th>Linux</th></tr></thead><tbody><tr><td>MySQL库</td><td>Linux目录</td></tr><tr><td>show databases</td><td>Linux中的ls</td></tr><tr><td>create database word</td><td>Linux中mkdir</td></tr><tr><td>Excel表</td><td>Linux的文件</td></tr><tr><td>列（字段）</td><td>无</td></tr><tr><td>列属性</td><td>无</td></tr><tr><td>数据行（记录）</td><td>Linux的数据行</td></tr><tr><td>表属性（元数据）</td><td>Linux的文件数据</td></tr></tbody></table><h2 id="MySQL的物理存储结构"><a href="#MySQL的物理存储结构" class="headerlink" title="MySQL的物理存储结构"></a>MySQL的物理存储结构</h2><h3 id="物理创建库"><a href="#物理创建库" class="headerlink" title="物理创建库"></a>物理创建库</h3><p>创建一个目录等同于数据库创建一个库</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data/mysql/data</span><br><span class="line">$ mkdir word                   </span><br><span class="line"></span><br><span class="line">$ mysql</span><br><span class="line"><span class="selector-tag">mysql</span>&gt; <span class="selector-tag">show</span> <span class="selector-tag">databases</span>;</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| Database           |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| information_schema |</span><br><span class="line">......................</span><br><span class="line">| word               |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><h3 id="表（存储引擎对比）"><a href="#表（存储引擎对比）" class="headerlink" title="表（存储引擎对比）"></a>表（存储引擎对比）</h3><table><thead><tr><th>存储引擎</th><th>InnoDB</th><th>MyISAM</th></tr></thead><tbody><tr><td>读性能</td><td>快</td><td>快</td></tr><tr><td>写性能</td><td>相对较慢</td><td>相对较慢</td></tr><tr><td>事务支持</td><td>支持</td><td>不支持</td></tr><tr><td>事务隔离级别</td><td>4</td><td>N/A</td></tr><tr><td>外键</td><td>支持</td><td>不支持</td></tr><tr><td>数据存储</td><td>大</td><td>大</td></tr><tr><td>压缩</td><td>支持</td><td>支持</td></tr><tr><td>故障自动回复</td><td>支持</td><td>不支持</td></tr></tbody></table><p><strong>MyISAM</strong></p><p>MySQL早期的默认存储引擎，不支持事务，已经废弃了，所以不用怎么了解</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="selector-tag">user</span><span class="selector-class">.frm</span>： //存储的表结构（列，列属性）</span><br><span class="line">2. <span class="selector-tag">user</span><span class="selector-class">.MYD</span>： //存储的数据记录</span><br><span class="line">3. <span class="selector-tag">user</span><span class="selector-class">.MYI</span>： //存错索引</span><br></pre></td></tr></table></figure><p><strong>InnoDB</strong></p><p>InnoDB自MySQL 5.5.5版本开始就是作为默认的存储引擎，5.5.5以前使用的是MyISAM</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="selector-tag">time_zone</span><span class="selector-class">.frm</span>：  //存储的表结构（列，列属性）</span><br><span class="line">2. <span class="selector-tag">time_zone</span><span class="selector-class">.ibd</span>：  //存储的数据记录和索引（相当于一块磁盘）</span><br><span class="line">3. <span class="selector-tag">ibdate1</span>：        //数据字典信息</span><br></pre></td></tr></table></figure><h2 id="MySQL连接与内置功能命令"><a href="#MySQL连接与内置功能命令" class="headerlink" title="MySQL连接与内置功能命令"></a>MySQL连接与内置功能命令</h2><h3 id="连接命令"><a href="#连接命令" class="headerlink" title="连接命令"></a>连接命令</h3><p>连接数据库的参数</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-u</td><td>指定用户</td></tr><tr><td>-p</td><td>指定密码</td></tr><tr><td>-h</td><td>指定远程地址</td></tr><tr><td>-S</td><td>指定本地登录</td></tr><tr><td>-P</td><td>指定端口号</td></tr><tr><td>-e</td><td>免交互式</td></tr><tr><td>&lt;</td><td>恢复数据</td></tr></tbody></table><p>本地和远程登录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p -S /tmp/mysql.sock</span><br><span class="line">$ mysql -uroot -p -h10.0.0.51 -P3306</span><br></pre></td></tr></table></figure><p>免交互式-e参数：通过linux命令行调取mysql应用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p -e &quot;show databases;&quot;</span><br><span class="line"><span class="selector-tag">Enter</span> <span class="selector-tag">password</span>: </span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| Database           |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">+<span class="selector-tag">--------------------</span>+</span><br></pre></td></tr></table></figure><p>&lt;恢复数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123 &lt;/root/world.sql</span><br></pre></td></tr></table></figure><h3 id="内置命令"><a href="#内置命令" class="headerlink" title="内置命令"></a>内置命令</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>\c、ctrl+c</td><td>结束上个命令运行</td></tr><tr><td>\q、quit；exit、ctrl+d</td><td>退出mysql</td></tr><tr><td>\G</td><td>将数据竖起来显示：select * from mysql.user\G;</td></tr><tr><td>source</td><td>恢复备份文件：source /root/world.sql</td></tr></tbody></table><h2 id="MySQL的日常启动和关闭"><a href="#MySQL的日常启动和关闭" class="headerlink" title="MySQL的日常启动和关闭"></a>MySQL的日常启动和关闭</h2><h3 id="日常启停"><a href="#日常启停" class="headerlink" title="日常启停"></a>日常启停</h3><ul><li>第一种</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /application/mysql/support-files/mysql.server start </span><br></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /application/mysql/bin/mysqld_safe &amp;</span><br></pre></td></tr></table></figure><ul><li>第三种</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start </span><br></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld </span><br></pre></td></tr></table></figure><h3 id="启动方式优先"><a href="#启动方式优先" class="headerlink" title="启动方式优先"></a>启动方式优先</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210205222253436.png"></p><ul><li><p>启动方式1：/etc/init.mysqld（推荐）</p><p>调用的是/application/mysql/support-files/mysql.server</p></li><li><p>启动方式2：systemctl start mysqld</p><p>是直接找mysqld启动文件按，需要依赖于my.cnf文件</p></li><li><p>启动方法3：维护性的任务</p></li></ul><p>一般会将我们需要的参数临时加到命令行，也会读取/etc/my.cnf的内容，但是如果冲突，命令行优先最高</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe --skip-grant-table --skip-networking &amp;</span><br></pre></td></tr></table></figure><ul><li>启动方法4：mysqld_safe</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe &amp; </span><br><span class="line">$ mysqladmin -uroot -proot shutdown  //关闭方法</span><br></pre></td></tr></table></figure><h2 id="MySQL初始化配置文件"><a href="#MySQL初始化配置文件" class="headerlink" title="MySQL初始化配置文件"></a>MySQL初始化配置文件</h2><h3 id="文件内容配置模式"><a href="#文件内容配置模式" class="headerlink" title="文件内容配置模式"></a>文件内容配置模式</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[标签]</span></span><br><span class="line"></span><br><span class="line">xxx=xxx</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[标签]</span></span><br><span class="line"></span><br><span class="line">xxx=xxx</span><br></pre></td></tr></table></figure><h3 id="配置文件标签的归类"><a href="#配置文件标签的归类" class="headerlink" title="配置文件标签的归类"></a>配置文件标签的归类</h3><ul><li>服务端</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line"><span class="selector-attr">[mysqld_safe]</span></span><br><span class="line"><span class="selector-attr">[server]</span></span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line"><span class="selector-attr">[mysqladmin]</span></span><br><span class="line"><span class="selector-attr">[mysqldump]</span></span><br><span class="line"><span class="selector-attr">[client]</span></span><br></pre></td></tr></table></figure><h3 id="配置文件设置样板（5-7版本）"><a href="#配置文件设置样板（5-7版本）" class="headerlink" title="配置文件设置样板（5.7版本）"></a>配置文件设置样板（5.7版本）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/my.cnf </span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">user=mysql</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">server_id=6</span><br><span class="line">socket=/tmp/mysql.soke</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line">socket=/tmp/mysql.soke</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>[mysqld]</td><td>服务端配置</td></tr><tr><td>user=mysql</td><td>设置用户</td></tr><tr><td>basedir=/application/mysql</td><td>软件部分路径</td></tr><tr><td>datadir=/data/mysql/data</td><td>数据部分路径</td></tr><tr><td>server_id=6</td><td>服务器id，这个做主从用的</td></tr><tr><td>socket=/tmp/mysql.soke</td><td>服务器放置socket文件位置</td></tr><tr><td>[mysql]</td><td>客户端配置</td></tr><tr><td>socket=/tmp/mysql.soke</td><td>客户端放置socket的文件路径要跟服务器一致</td></tr></tbody></table><h3 id="配置文件读取顺序"><a href="#配置文件读取顺序" class="headerlink" title="配置文件读取顺序"></a>配置文件读取顺序</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ msyqld --verbose --help|grep my.cnf</span><br><span class="line">/<span class="selector-tag">etc</span>/<span class="selector-tag">my</span><span class="selector-class">.cnf</span> /<span class="selector-tag">etc</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">my</span><span class="selector-class">.cnf</span> /<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">etc</span>/<span class="selector-tag">my</span><span class="selector-class">.cnf</span> ~/<span class="selector-class">.my</span><span class="selector-class">.cnf</span> </span><br><span class="line">                      my.cnf, $MYSQL_TCP_PORT, /etc/services, built-in default</span><br></pre></td></tr></table></figure><h3 id="强制自定义配置文件顺序"><a href="#强制自定义配置文件顺序" class="headerlink" title="强制自定义配置文件顺序"></a>强制自定义配置文件顺序</h3><ul><li>加上–defautls-file参数 </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe --defaults-file=/tmp/aa.txt &amp;</span><br></pre></td></tr></table></figure><h2 id="MySQL的连接管理"><a href="#MySQL的连接管理" class="headerlink" title="MySQL的连接管理"></a>MySQL的连接管理</h2><h3 id="使用SQLyog软件"><a href="#使用SQLyog软件" class="headerlink" title="使用SQLyog软件"></a>使用SQLyog软件</h3><blockquote><p>官网下载地址：<a href="https://sqlyog.en.softonic.com/download">https://sqlyog.en.softonic.com/download</a></p></blockquote><p><strong>1. mysql TCP/IP登录命令(远程)</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">grant</span> <span class="selector-tag">all</span> <span class="selector-tag">on</span> *.* <span class="selector-tag">to</span> <span class="selector-tag">root</span>@’10.0.0.%’ identified by ‘<span class="number">123</span>’;</span><br><span class="line">$ mysql –uroot –p123 –h10.0.0.51 –P3306</span><br></pre></td></tr></table></figure><p><strong>2. 用sqlyog软件登录，如图：输入主机地址，用户名和密码既可以登录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210205224613469.png"></p><p><strong>3. select user,local from mysql.user查看，按右键执行，或者按F9执行</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210205224658078.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL概述与部署安装-1</title>
      <link href="2021/02/20/MySQL%E6%A6%82%E8%BF%B0%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85-1/"/>
      <url>2021/02/20/MySQL%E6%A6%82%E8%BF%B0%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85-1/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL概述与部署安装"><a href="#MySQL概述与部署安装" class="headerlink" title="MySQL概述与部署安装"></a>MySQL概述与部署安装</h1><h2 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h2><h3 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h3><p>MySQL是开源、多线程的关系型数据库，关系型数据库的特点是将数据保存在不同的表中，再将这些表放入不同的数据库，而不是将所有数据统一放在一个大仓库。这样的设计增加了MySQL的读取速度，而且灵活性与可管理性也有大大的提高，访问及管理MySQL数据库的最常用标准化语言为SQL结构化查询语言</p><h3 id="MySQL主要分支"><a href="#MySQL主要分支" class="headerlink" title="MySQL主要分支"></a>MySQL主要分支</h3><p>MySQL官方版并一定适合所有的业务场景，于是产生了一些分支，如：Percona、MariaDB和Drizzle等</p><ul><li>Percona分支：是由MySQL咨询公司Percona发布，Percona Server是一款独立的数据库产品，可以与MySQL完全兼容，默认使用的引擎是XtraDB</li><li>MariaDB分支：名称来自Michael（Monty）Wideius的女儿Maria名字，MariaDB的目的是完全兼容MySQL，包括API和命令行，使之轻松称为MySQL的代替品。在10.0.9版本起使用XtraDB（名称代号为Aria）来替代MySQL的InnoDB存储引擎</li><li>Drizzle分支：是对MySQL引擎的重大修改版本，做了很多定制和改动，将很多代码重写，并进行了优化，甚至将编程语言从C换成了C++。但使用场景，与MySQL不兼容</li></ul><h3 id="MySQL的两个部分"><a href="#MySQL的两个部分" class="headerlink" title="MySQL的两个部分"></a>MySQL的两个部分</h3><p>MySQL本身没有明确的安装规范，但在工作可能会遇到各种奇怪的问题，为了能够统一环境的配置，方面定位和管理MySQL。可以将MySQL分为软件安装目录和数据目录，让软件和数据分离</p><p><strong>对于软件目录和数据目录可以根据公司的规划制定目录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210204213725601.png"></p><p><strong>当然还可以将数据目录可以划分更详细，比如将数据目录、日志目录、临时目录分不同分区存放，以提高性能</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210204214323833.png"></p><h2 id="MySQL部署安装"><a href="#MySQL部署安装" class="headerlink" title="MySQL部署安装"></a>MySQL部署安装</h2><h3 id="MySQL-5-7-26（二进制版本安装）"><a href="#MySQL-5-7-26（二进制版本安装）" class="headerlink" title="MySQL-5.7.26（二进制版本安装）"></a>MySQL-5.7.26（二进制版本安装）</h3><p>[官网下载][<a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz]">https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz]</a></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20210204220438246.png"></p><h3 id="创建相应目录且下载软件包"><a href="#创建相应目录且下载软件包" class="headerlink" title="创建相应目录且下载软件包"></a>创建相应目录且下载软件包</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /server/tools        //存放的mysql压缩包目录</span><br><span class="line">$ mkdir /application            //存放mysql软件部分的目录</span><br><span class="line">$ mkdir -p /data/mysql/data     //存放的mysql数据部分的目录</span><br><span class="line"></span><br><span class="line">$ cd /server/tools/     </span><br><span class="line">$ rz -E</span><br><span class="line">$ ls                  </span><br><span class="line"><span class="selector-tag">mysql-5</span>.7.26<span class="selector-tag">-linux-glibc2</span>.12<span class="selector-tag">-x86_64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">$ tar xf mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz </span><br><span class="line">$ mv mysql-5.7.26-linux-glibc2.12-x86_64 /application/mysql</span><br><span class="line"></span><br><span class="line">$ cd /application/mysql/</span><br><span class="line">$ ls</span><br><span class="line"><span class="selector-tag">bin</span>  <span class="selector-tag">COPYING</span>  <span class="selector-tag">docs</span>  <span class="selector-tag">include</span>  <span class="selector-tag">lib</span>  <span class="selector-tag">man</span>  <span class="selector-tag">README</span>  <span class="selector-tag">share</span>  <span class="selector-tag">support-fil</span> </span><br></pre></td></tr></table></figure><p>也可以直接下载二进制安装包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y wget</span><br><span class="line">$ wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.26-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>如果之前安装了MariaDB数据库的，需要进行移除</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep mariadb </span><br><span class="line">$ yum remove mariadb-libs.x86_64 -y</span><br></pre></td></tr></table></figure><h3 id="创建MySQL用户并设置环境变量"><a href="#创建MySQL用户并设置环境变量" class="headerlink" title="创建MySQL用户并设置环境变量"></a>创建MySQL用户并设置环境变量</h3><p>创建用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ useradd -s /sbin/nologin mysql</span><br><span class="line">$ tail -1 /etc/passwd</span><br><span class="line"><span class="selector-tag">mysql</span><span class="selector-pseudo">:x</span><span class="selector-pseudo">:1002</span><span class="selector-pseudo">:1002</span>::/<span class="selector-tag">home</span>/<span class="selector-tag">mysql</span>:/<span class="selector-tag">sbin</span>/<span class="selector-tag">nologin</span></span><br></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export PATH=$PATH:/application/mysql/bin&quot; &gt;&gt;/etc/profile</span><br><span class="line">$ tail -1 /etc/profile</span><br><span class="line">export PATH=$PATH:/application/mysql/bin</span><br><span class="line"></span><br><span class="line">$ source /etc/profile</span><br><span class="line">$ echo $PATH  </span><br><span class="line">/<span class="selector-tag">application</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">bin</span>:/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">sbin</span>:/<span class="selector-tag">usr</span>/<span class="selector-tag">local</span>/<span class="selector-tag">bin</span>:/<span class="selector-tag">usr</span>/<span class="selector-tag">sbin</span>:/<span class="selector-tag">usr</span>/<span class="selector-tag">bin</span>:/<span class="selector-tag">root</span>/<span class="selector-tag">bin</span></span><br></pre></td></tr></table></figure><p>检查版本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -V</span><br><span class="line"><span class="selector-tag">mysql</span> <span class="selector-tag">Ver</span> 14.14 <span class="selector-tag">Distrib</span> 5.7.26, <span class="selector-tag">for</span> <span class="selector-tag">linux-glibc2</span>.12 (<span class="selector-tag">x86_64</span>) <span class="selector-tag">using</span>  <span class="selector-tag">EditLine</span> <span class="selector-tag">wrapper</span></span><br></pre></td></tr></table></figure><h3 id="创建MySQL的数据盘（可省略）"><a href="#创建MySQL的数据盘（可省略）" class="headerlink" title="创建MySQL的数据盘（可省略）"></a>创建MySQL的数据盘（可省略）</h3><p>查看没有挂载的磁盘</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ fdisk -l</span><br><span class="line"><span class="selector-tag">Disk</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">sda</span>: 10.7 <span class="selector-tag">GB</span>, 10737418240 <span class="selector-tag">bytes</span>, 20971520 <span class="selector-tag">sectors</span>      //挂载了磁盘</span><br><span class="line"><span class="selector-tag">Device</span> <span class="selector-tag">Boot</span>      <span class="selector-tag">Start</span>         <span class="selector-tag">End</span>      <span class="selector-tag">Blocks</span>   <span class="selector-tag">Id</span>  <span class="selector-tag">System</span></span><br><span class="line">/<span class="selector-tag">dev</span>/<span class="selector-tag">sda1</span>   *        2048      411647      204800   83  <span class="selector-tag">Linux</span></span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">Disk</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">sdb</span>: 21.5 <span class="selector-tag">GB</span>, 21474836480 <span class="selector-tag">bytes</span>, 41943040 <span class="selector-tag">sectors</span>      //没有挂载的磁盘</span><br></pre></td></tr></table></figure><p>格式化磁盘，文件系统为xfs</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkfs.xfs /dev/sdb      </span><br></pre></td></tr></table></figure><p>查看/dev/sdb的UUID</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ blkid   </span><br><span class="line">/dev/sdb: UUID=&quot;5f948a8b-8512-4c60-b1c5-99e5bc96f3e1&quot; TYPE=&quot;xfs&quot; </span><br></pre></td></tr></table></figure><p>将UUID作为挂载内容，挂载到/data目录中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tail -1 /etc/fstab</span><br><span class="line">UUID=5f948a8b-8512-4c60-b1c5-99e5bc96f3e1 /data   xfs  default 0 0 </span><br></pre></td></tr></table></figure><p>编写完之后，使用mount自行挂载，并查看是否挂载成功</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mount -a   </span><br><span class="line">$ df   </span><br><span class="line"><span class="selector-tag">Filesystem</span>     1<span class="selector-tag">K-blocks</span>    <span class="selector-tag">Used</span> <span class="selector-tag">Available</span> <span class="selector-tag">Use</span>% <span class="selector-tag">Mounted</span> <span class="selector-tag">on</span></span><br><span class="line">/<span class="selector-tag">dev</span>/<span class="selector-tag">sdb</span>        20961280   32944  20928336   1% /<span class="selector-tag">data</span> </span><br></pre></td></tr></table></figure><h3 id="初始化命令与对目录授权"><a href="#初始化命令与对目录授权" class="headerlink" title="初始化命令与对目录授权"></a>初始化命令与对目录授权</h3><ul><li><p>5.6版本的初始化命令：/application/mysql/scritps/mysql_install_db</p></li><li><p>5.7版本的初始化命令：mysqld –initialize –user=mysql –basedir=/application/mysql –datadir=/data/mysql/data</p></li><li><p>5.7的新特性：–initialize参数</p><p>1）对于密码复杂度进行定制：12位，4种（数字、大写字符、小写字母、符号）</p><p>2）密码过期时间：180</p><p>3）给root@localhost用户设置临时密码</p></li></ul><p>初始化，设置指定用户，以及软件目录和数据目录</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld --initialize --user=mysql --basedir=/application/mysql --datadir=/data/mysql/data     </span><br><span class="line"></span><br><span class="line">............................省略......................................</span><br><span class="line"></span><br><span class="line">2020-08-29T08:09:54.587202Z 1 [Note] A temporary password is generated for root@localhost: rl)HpxuHi0su  </span><br><span class="line">//初始化的最后一条信息，5.7版本将会帮你创建一个临时密码(<span class="selector-tag">rl</span>)<span class="selector-tag">HpxuHi0su</span>）</span><br></pre></td></tr></table></figure><p>如果不希望设置密码则–initialize参数加上-insecure参数</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /data/mysql/data/              //要将之前的数据删除</span><br><span class="line">$ mysqld --initialize-insecure --user=mysql --basedir=/application/mysql --datadir=/data/mysql/data</span><br></pre></td></tr></table></figure><p>对目录给与授权</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R mysql.mysql /application/</span><br><span class="line">$ chown -R mysql.mysql /data/</span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>默认配置在/etc/my.cnf，服务使用[mysqld]标识，而客户端由[mysql]标识</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">user=mysql</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">server_id=6</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[mysql]</span></span><br><span class="line">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure><h3 id="用-etc-init-d启动和关闭数据库"><a href="#用-etc-init-d启动和关闭数据库" class="headerlink" title="用/etc/init.d启动和关闭数据库"></a>用/etc/init.d启动和关闭数据库</h3><p>复制路径到/etc/init.d/mysqld</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp -rf /application/mysql/support-files/mysql.server  /etc/init.d/mysqld </span><br><span class="line">$ /etc/init.d/mysqld start </span><br></pre></td></tr></table></figure><h3 id="用systemctl方式启动和关闭数据库"><a href="#用systemctl方式启动和关闭数据库" class="headerlink" title="用systemctl方式启动和关闭数据库"></a>用systemctl方式启动和关闭数据库</h3><p>编写配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt;/etc/systemd/system/mysqld.service &lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[Unit]</span></span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"><span class="selector-attr">[Install]</span></span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="selector-attr">[Service]</span></span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br><span class="line"><span class="selector-tag">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop mysqld  &amp;&amp; systemctl start mysqld </span><br><span class="line">$ ss -lntup|grep 3306  </span><br><span class="line">tcp    LISTEN     0      80       :::3306                 :::*                   users:((&quot;mysqld&quot;,pid=3737,fd=20))</span><br></pre></td></tr></table></figure><h3 id="登录查看用户及密码"><a href="#登录查看用户及密码" class="headerlink" title="登录查看用户及密码"></a>登录查看用户及密码</h3><p>查看用户表信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mysql</span><br><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| user          | host      |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys     | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+</span><br></pre></td></tr></table></figure><p>查看密码信息，加上authentication_string参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">select</span> <span class="selector-tag">user</span>,<span class="selector-tag">host</span>,<span class="selector-tag">authentication_string</span> <span class="selector-tag">from</span> <span class="selector-tag">mysql</span><span class="selector-class">.user</span>;</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------------------------------------</span>+</span><br><span class="line">| user          | host      | authentication_string                     |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------------------------------------</span>+</span><br><span class="line">| root          | localhost | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| mysql.session | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">| mysql.sys     | localhost | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE |</span><br><span class="line">+<span class="selector-tag">---------------</span>+<span class="selector-tag">-----------</span>+<span class="selector-tag">-------------------------------------------</span>+</span><br></pre></td></tr></table></figure><h2 id="MySQL设置管理员密码"><a href="#MySQL设置管理员密码" class="headerlink" title="MySQL设置管理员密码"></a>MySQL设置管理员密码</h2><h3 id="交换式与免交互式添加密码"><a href="#交换式与免交互式添加密码" class="headerlink" title="交换式与免交互式添加密码"></a>交换式与免交互式添加密码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mysqladmin -uroot password          //交互式</span><br><span class="line"><span class="selector-tag">New</span> <span class="selector-tag">password</span>: 密码</span><br><span class="line"><span class="selector-tag">Confirm</span> <span class="selector-tag">new</span> <span class="selector-tag">password</span>: 再次输入密码</span><br><span class="line"></span><br><span class="line">$ mysqladmin -uroot password 123456   //免交互式</span><br></pre></td></tr></table></figure><h3 id="密码忘记的解决方法"><a href="#密码忘记的解决方法" class="headerlink" title="密码忘记的解决方法"></a>密码忘记的解决方法</h3><ul><li>–skip-grant-tables：跳过授权表</li><li>–skip-networking：跳过远程登录，如果不跳过远程登录，那么每个人都可以登录进来</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld stop</span><br><span class="line">$ mysql --skip-grant-tables --skip-networking &amp;</span><br><span class="line"><span class="selector-attr">[1]</span> 10227</span><br><span class="line">[root@db01 ~]# 2020-06-29T10:39:48.780708Z mysqld_safe Logging to &#x27;/data/mysql/data/db01.err&#x27;.</span><br><span class="line">2020<span class="selector-tag">-06-29T10</span><span class="selector-pseudo">:39</span><span class="selector-pseudo">:48.816038Z</span> <span class="selector-tag">mysqld_safe</span> <span class="selector-tag">Starting</span> <span class="selector-tag">mysqld</span> <span class="selector-tag">daemon</span> <span class="selector-tag">with</span> <span class="selector-tag">databases</span> <span class="selector-tag">from</span> /<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>       //回车</span><br></pre></td></tr></table></figure><p>此时不需要密码即可进入mysql数据库，进入之后重新修改密码</p><blockquote><p>注意：需要先使用flush privileges;命令刷新上述的操作，重新加载表，否则会出现以下错误</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ERROR</span> 1290 (<span class="selector-tag">HY000</span>): <span class="selector-tag">The</span> <span class="selector-tag">MySQL</span> <span class="selector-tag">server</span> <span class="selector-tag">is</span> <span class="selector-tag">running</span> <span class="selector-tag">with</span> <span class="selector-tag">the</span> <span class="selector-tag">--skip-grant-tables</span> <span class="selector-tag">option</span> <span class="selector-tag">so</span> <span class="selector-tag">it</span> <span class="selector-tag">cannot</span> <span class="selector-tag">execute</span> <span class="selector-tag">this</span> <span class="selector-tag">statement</span></span><br><span class="line">//意思是服务正在运行跳过<span class="selector-tag">grant</span>的参数，所以不能执行该命令</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">flush</span> <span class="selector-tag">privileges</span>;</span><br><span class="line">&gt; <span class="selector-tag">alter</span> <span class="selector-tag">user</span> <span class="selector-tag">root</span>@&#x27;localhost&#x27; identified by <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL数据库无法启动与重启的问题"><a href="#MySQL数据库无法启动与重启的问题" class="headerlink" title="MySQL数据库无法启动与重启的问题"></a>MySQL数据库无法启动与重启的问题</h2><h3 id="修改-data-mysql-data的一个文件属性"><a href="#修改-data-mysql-data的一个文件属性" class="headerlink" title="修改/data/mysql/data的一个文件属性"></a>修改/data/mysql/data的一个文件属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span></span><br><span class="line">$ chown root.root ibdata1</span><br><span class="line"></span><br><span class="line">$ ll  </span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">root</span>  <span class="selector-tag">root</span>  12582912 <span class="selector-tag">Jun</span> 29 17<span class="selector-pseudo">:58</span> <span class="selector-tag">ibdata1</span></span><br><span class="line"><span class="selector-tag">-rw-r-----</span> 1 <span class="selector-tag">mysql</span> <span class="selector-tag">mysql</span> 50331648 <span class="selector-tag">Jun</span> 29 17<span class="selector-pseudo">:58</span> <span class="selector-tag">ib_logfile0</span></span><br></pre></td></tr></table></figure><p>systemctl重启，登录mysql才会出现以下错误</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop mysqld  &amp;&amp; systemctl start mysqld </span><br><span class="line">$ mysql                 </span><br><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/tmp/mysql.sock&#x27; (2)</span><br></pre></td></tr></table></figure><p>/etc/init/mysqld方式开启就会直接出现报错</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/mysqld start </span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">MySQL</span>.. <span class="selector-tag">ERROR</span>! <span class="selector-tag">The</span> <span class="selector-tag">server</span> <span class="selector-tag">quit</span> <span class="selector-tag">without</span> <span class="selector-tag">updating</span> <span class="selector-tag">PID</span> <span class="selector-tag">file</span> (/<span class="selector-tag">data</span>/<span class="selector-tag">mysql</span>/<span class="selector-tag">data</span>/<span class="selector-tag">db01</span><span class="selector-class">.pid</span>).</span><br></pre></td></tr></table></figure><p>上述的两种启动方法</p><ul><li>systemctl可以重启，但是没有指明保存的信息</li></ul><ul><li>使用/etc/init.mysqld开启，就会出现报错信息，所以对于启动可以使用推荐这种方法</li></ul><p>查看错误日志，看更多报错内容信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat db01.err   </span><br><span class="line"><span class="selector-tag">ad</span> <span class="selector-tag">priority</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">changed</span>. <span class="selector-tag">See</span> <span class="selector-tag">the</span> <span class="selector-tag">man</span> <span class="selector-tag">page</span> <span class="selector-tag">of</span> <span class="selector-tag">setpriority</span>().</span><br><span class="line">2020-06-29T10:11:40.095458Z 0 [ERROR] InnoDB: The innodb_system data file &#x27;ibdata1&#x27; must be writable    //文件必须可写，这就可以看出权限不对劲</span><br><span class="line">2020-06-29T10:11:40.095482Z 0 [ERROR] InnoDB: The innodb_system data file &#x27;ibdata1&#x27; must be writable</span><br><span class="line">2020<span class="selector-tag">-06-29T10</span><span class="selector-pseudo">:11</span><span class="selector-pseudo">:40.095490Z</span> 0 <span class="selector-attr">[ERROR]</span> <span class="selector-tag">InnoDB</span>: <span class="selector-tag">Plugin</span> <span class="selector-tag">initialization</span> <span class="selector-tag">aborted</span> <span class="selector-tag">with</span> <span class="selector-tag">error</span> <span class="selector-tag">Generic</span> <span class="selector-tag">error</span></span><br><span class="line">2020-06-29T10:11:40.700063Z 0 [ERROR] Plugin &#x27;InnoDB&#x27; init function returned error.</span><br><span class="line">2020-06-29T10:11:40.700130Z 0 [ERROR] Plugin &#x27;InnoDB&#x27; registration as a STORAGE ENGINE failed.</span><br><span class="line">2020<span class="selector-tag">-06-29T10</span><span class="selector-pseudo">:11</span><span class="selector-pseudo">:40.700147Z</span> 0 <span class="selector-attr">[ERROR]</span> <span class="selector-tag">Failed</span> <span class="selector-tag">to</span> <span class="selector-tag">initialize</span> <span class="selector-tag">builtin</span> <span class="selector-tag">plugins</span>.</span><br><span class="line">2020<span class="selector-tag">-06-29T10</span><span class="selector-pseudo">:11</span><span class="selector-pseudo">:40.700172Z</span> 0 <span class="selector-attr">[ERROR]</span> <span class="selector-tag">Aborting</span></span><br></pre></td></tr></table></figure><h3 id="修改了-data-mysql-data数据下的全部文件"><a href="#修改了-data-mysql-data数据下的全部文件" class="headerlink" title="修改了/data/mysql/data数据下的全部文件"></a>修改了/data/mysql/data数据下的全部文件</h3><p>这种情况会连日志文件都查看不了，无法判断错误。使用以下方法：将错误日志输出到屏幕上，就可以查看错误的日志原因</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line"><span class="selector-tag">ead</span> <span class="selector-tag">priority</span> <span class="selector-tag">can</span> <span class="selector-tag">be</span> <span class="selector-tag">changed</span>. <span class="selector-tag">See</span> <span class="selector-tag">the</span> <span class="selector-tag">man</span> <span class="selector-tag">page</span> <span class="selector-tag">of</span> <span class="selector-tag">setpriority</span>().</span><br><span class="line">2020-06-29T10:20:30.233058Z 0 [ERROR] InnoDB: The innodb_system data file &#x27;ibdata1&#x27; must be writable</span><br></pre></td></tr></table></figure><h3 id="重启无法获取PID文件"><a href="#重启无法获取PID文件" class="headerlink" title="重启无法获取PID文件"></a>重启无法获取PID文件</h3><p>当我们在已经初始化完后，启动了MySQL使用，在操作MySQL过程中碰到了解决不了的问题或搭建出现了问题，以及想直接初始化搭建时，最快的方法是通过删除之前的数据内容，然后通过指令进行初始化，MySQL就能重新恢复原始的内容。</p><p>当启动MySQL时发现只有error日志，而没有PID文件时。那么再启动和重启MySQL时就会发现报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /etc/init.d/mysqld start</span></span><br><span class="line">Starting MySQL.Logging to &#x27;/data/mysql/data/mgr-1.err&#x27;.</span><br><span class="line">.. ERROR! The server quit without updating PID file (/data/mysql/data/mgr-1.pid).</span><br></pre></td></tr></table></figure><p>查看错误日志信息，日志提示了已经有进程正在使用，所以不能启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2021-06-11T14:00:23.829958Z 0 [ERROR] Can&#x27;t start server: Bind on TCP/IP port: Address already in use</span><br><span class="line">2021-06-11T14:00:23.829962Z 0 [ERROR] Do you already have another mysqld server running on port: 3306 ?</span><br><span class="line">2021-06-11T14:00:23.829972Z 0 [ERROR] Aborting</span><br></pre></td></tr></table></figure><p>通过ps指令查看mysql进程会发现多出几个进程，原因可能是之前启动的MySQL进程没有被停止或kill掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef|grep mysql</span></span><br><span class="line">root       2994      1  0 18:54 ?        00:00:00 /bin/sh /application/mysql/bin/mysqld_safe --datadir=/data/mysql/data --pid-file=/data/mysql/data/redis-1.pid</span><br><span class="line">mysql      3324   2994  0 18:54 ?        00:00:46 /application/mysql/bin/mysqld --basedir=/application/mysql --datadir=/data/mysql/data --plugin-dir=/application/mysql/lib/plugin --user=mysql --log-error=redis-1.err --pid-file=/data/mysql/data/redis-1.pid</span><br></pre></td></tr></table></figure><p>解决办法通过指令kill将其杀除，然后重新启动MySQL就解决问题了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 2994</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 3324</span></span><br><span class="line">/etc/init.d/mysqld restart</span><br><span class="line">Shutting down MySQL.. SUCCESS! </span><br><span class="line">Starting MySQL.. SUCCESS! </span><br></pre></td></tr></table></figure><h2 id="MySQL多实例管理"><a href="#MySQL多实例管理" class="headerlink" title="MySQL多实例管理"></a>MySQL多实例管理</h2><h3 id="创建多实例目录"><a href="#创建多实例目录" class="headerlink" title="创建多实例目录"></a>创建多实例目录</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /data/330&#123;7..9&#125;/data</span><br><span class="line">$ tree -L 1 /data/</span><br><span class="line">/<span class="selector-tag">data</span>/</span><br><span class="line">├── 3307</span><br><span class="line">├── 3308</span><br><span class="line">├── 3309</span><br><span class="line">└── <span class="selector-tag">mysql</span></span><br></pre></td></tr></table></figure><h3 id="配置多实例"><a href="#配置多实例" class="headerlink" title="配置多实例"></a>配置多实例</h3><p>创建（3307、3308、3309）的配置文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /data/3307/my.cnf &lt;&lt;EOF</span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">log_error=/data/3307/mysql.log</span><br><span class="line">port=3307</span><br><span class="line">server_id=7</span><br><span class="line">log_bin=/data/3307/mysql-bin</span><br><span class="line"><span class="selector-tag">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cp /data/3307/my.cnf /data/3308/my.cnf  </span><br><span class="line">$ sed -i &#x27;s#7#8#g&#x27; /data/3308/my.cnf </span><br><span class="line"></span><br><span class="line">$ cp /data/3307/my.cnf /data/3309/my.cnf </span><br><span class="line">$ sed -i &#x27;s#7#9#g&#x27; /data/3309/my.cnf</span><br></pre></td></tr></table></figure><h3 id="初始化三套数据"><a href="#初始化三套数据" class="headerlink" title="初始化三套数据"></a>初始化三套数据</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/my.cnf /etc/my.cnf.bak    //备份一下</span><br><span class="line"></span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/application/mysql</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/application/mysql</span><br><span class="line">$ mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure><h3 id="复制systemctl管理多实例"><a href="#复制systemctl管理多实例" class="headerlink" title="复制systemctl管理多实例"></a>复制systemctl管理多实例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/systemd/system/</span><br><span class="line">$ cp mysqld.service mysqld3307.service </span><br><span class="line">$ cp mysqld.service mysqld3308.service </span><br><span class="line">$ cp mysqld.service mysqld3309.service </span><br></pre></td></tr></table></figure><p>修改启动路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sed  -i &#x27;s#/etc/my.cnf#/data/3307/my.cnf#g&#x27; mysqld3307.service </span><br><span class="line">$ sed  -i &#x27;s#/etc/my.cnf#/data/3308/my.cnf#g&#x27; mysqld3308.service </span><br><span class="line">$ sed  -i &#x27;s#/etc/my.cnf#/data/3309/my.cnf#g&#x27; mysqld3309.service </span><br></pre></td></tr></table></figure><h3 id="授权并启动服务"><a href="#授权并启动服务" class="headerlink" title="授权并启动服务"></a>授权并启动服务</h3><p>对目录授权</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R mysql.mysql /data/</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start mysqld3307.service </span><br><span class="line">$ systemctl start mysqld3308.service </span><br><span class="line">$ systemctl start mysqld3309.service </span><br></pre></td></tr></table></figure><p>查看启动的服务</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ss -lnt|grep 330</span><br><span class="line"><span class="selector-tag">LISTEN</span>     0      80        <span class="selector-attr">[::]</span><span class="selector-pseudo">:3306</span>                  <span class="selector-attr">[::]</span>:*                  </span><br><span class="line"><span class="selector-tag">LISTEN</span>     0      80        <span class="selector-attr">[::]</span><span class="selector-pseudo">:3307</span>                  <span class="selector-attr">[::]</span>:*                  </span><br><span class="line"><span class="selector-tag">LISTEN</span>     0      80        <span class="selector-attr">[::]</span><span class="selector-pseudo">:3308</span>                  <span class="selector-attr">[::]</span>:*                  </span><br><span class="line"><span class="selector-tag">LISTEN</span>     0      80        <span class="selector-attr">[::]</span><span class="selector-pseudo">:3309</span>                  <span class="selector-attr">[::]</span>:*  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible-roles(角色)</title>
      <link href="2021/02/03/ansible-roles/"/>
      <url>2021/02/03/ansible-roles/</url>
      
        <content type="html"><![CDATA[<h1 id="ansible-roles"><a href="#ansible-roles" class="headerlink" title="ansible-roles"></a>ansible-roles</h1><h2 id="ansible程序roles–规范"><a href="#ansible程序roles–规范" class="headerlink" title="ansible程序roles–规范"></a>ansible程序roles–规范</h2><p><strong>playbook(剧本)编写完的一些问题</strong></p><blockquote><ol><li>目录结构不够规范</li><li>编写好的任务如何重复调用</li><li>服务端配置文件改动，客户端参数信息也自动变化（客户端，服务器都一个文件写）</li><li>汇总剧本中没有显示主机角色信息</li><li>一个剧本内容信息过多，不容易进行阅读</li></ol></blockquote><h3 id="创建roles规范目录结构"><a href="#创建roles规范目录结构" class="headerlink" title="创建roles规范目录结构"></a>创建roles规范目录结构</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/etc/ansible/roles</span><br><span class="line">$ mkdir &#123;rsync,nfs&#125;</span><br><span class="line">$ mkdir &#123;rsync,nfs&#125;/&#123;vars,tasks,templates,handlers,files&#125;</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── nfs</span><br><span class="line">│   ├── files          <span class="comment">//保存需要分发文件目录</span></span><br><span class="line">│   ├── handlers       <span class="comment">//保存触发器配置文件信息</span></span><br><span class="line">│   ├── tasks          <span class="comment">//保存要执行的动作信息文件</span></span><br><span class="line">│   ├── templates      <span class="comment">//保存需要分发模板文件，模板文件中可以设置变量信息</span></span><br><span class="line">│   └── vars           <span class="comment">//要保存的变量信息文件</span></span><br><span class="line">└── rsync</span><br><span class="line">    ├── files</span><br><span class="line">    ├── handlers</span><br><span class="line">    ├── tasks</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br></pre></td></tr></table></figure><h2 id="roles目录中创建相关文件-部署NFS"><a href="#roles目录中创建相关文件-部署NFS" class="headerlink" title="roles目录中创建相关文件(部署NFS)"></a>roles目录中创建相关文件(部署NFS)</h2><p><strong>编写文件流程图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201207124352333.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ touch nfs/files/exports</span><br><span class="line">$ touch nfs/&#123;handlers,tasks,vars&#125;/main.yml</span><br><span class="line">$ tree nfs</span><br><span class="line">nfs</span><br><span class="line">├── files</span><br><span class="line">│   └── exports</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main<span class="selector-class">.yml</span></span><br><span class="line">├── tasks</span><br><span class="line">│   └── main<span class="selector-class">.yml</span></span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line">    └── main<span class="selector-class">.yml</span></span><br></pre></td></tr></table></figure><h3 id="编写roles，实现自动化部署NFS"><a href="#编写roles，实现自动化部署NFS" class="headerlink" title="编写roles，实现自动化部署NFS"></a>编写roles，实现自动化部署NFS</h3><h4 id="nfs-server"><a href="#nfs-server" class="headerlink" title="nfs_server"></a>nfs_server</h4><p><strong>1. 编写tasks目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ansible/roles/nfs/tasks/main.yml </span><br><span class="line">- name: <span class="number">01</span>-push file to nfs server</span><br><span class="line">  copy: src=/etc/ansible/nfs_dir/nfs_server/exports dest=/etc/</span><br><span class="line">  notify: restart nfs service</span><br><span class="line">- name: <span class="number">02</span>-create nfs server username</span><br><span class="line">  user: name=nfsnobody create_home=no shell=/sbin/nologin</span><br><span class="line">- name: <span class="number">03</span>-create data directory</span><br><span class="line">  file: path=&#123;&#123; Data_dir &#125;&#125; state=directory owner=nfsnobody group=nfsnobody</span><br><span class="line">- name: <span class="number">04</span>-boot server</span><br><span class="line">  service: name=&#123;&#123; item &#125;&#125; state=started enabled=yes</span><br><span class="line">  with_items:</span><br><span class="line">    - rpcbind</span><br><span class="line">    - nfs</span><br></pre></td></tr></table></figure><p><strong>2. 编写vars目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ansible/roles/nfs/vars/main.yml </span><br><span class="line">Data_dir: /data</span><br></pre></td></tr></table></figure><p><strong>3. 编写files目录中的文件,将配置文件移动到files目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/ansible/nfs_dir/nfs_server/exports /etc/ansible/roles/nfs/files/</span><br><span class="line">cp: overwrite ‘nfs/files/exports’? y</span><br><span class="line"></span><br><span class="line">$ ll /etc/ansible/roles/nfs/files/</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">28</span> Dec  <span class="number">7</span> <span class="number">11</span>:<span class="number">22</span> exports</span><br></pre></td></tr></table></figure><p><strong>4. 编写handlers目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/ansible/roles/nfs/handlers/main.yml </span><br><span class="line">- name: <span class="number">06</span>-trigger restart nfs service</span><br><span class="line">  service: name=nfs state=restarted</span><br></pre></td></tr></table></figure><h4 id="nfs-client"><a href="#nfs-client" class="headerlink" title="nfs_client"></a>nfs_client</h4><p><strong>1. 编写tasks目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$  cat nfs_client/tasks/main.yml </span><br><span class="line">- name: <span class="number">01</span>-create mount directory</span><br><span class="line">  file: name=/www state=directory </span><br><span class="line">- name: <span class="number">02</span>-mount nfs file system</span><br><span class="line">  mount: src=<span class="number">10.0</span>.<span class="number">0.211</span>:&#123;&#123; Data_dir &#125;&#125; path=/www fstype=nfs state=mounted</span><br><span class="line">- name: <span class="number">03</span>-check mount info</span><br><span class="line">  shell: df -h |grep /data</span><br><span class="line">  register: result </span><br><span class="line">- name: <span class="number">04</span>-display mount info</span><br><span class="line">  debug: var=result.stdout verbosity=<span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>2. 编写vars目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat nfs_client/vars/main.yml </span><br><span class="line">Data_dir: /data</span><br></pre></td></tr></table></figure><h3 id="编写一个主剧本文件"><a href="#编写一个主剧本文件" class="headerlink" title="编写一个主剧本文件"></a><strong>编写一个主剧本文件</strong></h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ pwd </span><br><span class="line">/etc/ansible/roles</span><br><span class="line">$ vim site<span class="selector-class">.yml</span> </span><br><span class="line">---</span><br><span class="line">- hosts: nfs_server      </span><br><span class="line">  roles: </span><br><span class="line">    - nfs_server      //服务器目录</span><br><span class="line"></span><br><span class="line">- hosts: nfs_client    </span><br><span class="line">  roles:</span><br><span class="line">    - nfs_client      //客户端目录</span><br></pre></td></tr></table></figure><p><strong>执行该剧本</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook --syntax-check site.yml       //检查语法</span><br><span class="line">$ ansible-playbook -C site.yml                   //模拟执行</span><br><span class="line">$ ansible-playbook site.yml                      //执行</span><br></pre></td></tr></table></figure><p><strong>还可以分的更细，可以每个不同操作创建一个yml文件</strong></p><blockquote><p>PS：如果操作较多，可以分开创建使用，这样每次操作就不用执行整个main的tasks动作。分开使用，不需要执行在mian文件去除就行，就像调取每个功能一样</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd </span><br><span class="line">/etc/ansible/roles/nfs_server/tasks</span><br><span class="line">$ vim main<span class="selector-class">.yml</span>                         <span class="comment">//编写主文件，调用下面的子文件</span></span><br><span class="line">- include_tasks: copy_info.yml      </span><br><span class="line">- include_tasks: create_dir.yml</span><br><span class="line">- include_tasks: boot_server.yml</span><br><span class="line"></span><br><span class="line">$ vim copy_info.yml </span><br><span class="line">- name: <span class="number">01</span>-copy conf file</span><br><span class="line">  copy: src=exports dest=/etc</span><br><span class="line">  notify: restart nfs server</span><br><span class="line"></span><br><span class="line">$ vim create_dir.yml</span><br><span class="line">- name: <span class="number">02</span>-create data dir</span><br><span class="line">  file: path=&#123;&#123; Data_dir &#125;&#125; state=directory owner=nfsnobody group=nfsnobody </span><br><span class="line"></span><br><span class="line">$ vim boot_server.yml</span><br><span class="line">- name: <span class="number">03</span>-boot server</span><br><span class="line">  service: name=&#123;&#123; item &#125;&#125; state=started enabled=yes</span><br><span class="line">  with_items:</span><br><span class="line">    - rpcbind</span><br><span class="line">    - nfs</span><br></pre></td></tr></table></figure><h2 id="template目录说明"><a href="#template目录说明" class="headerlink" title="template目录说明"></a><strong>template目录说明</strong></h2><p>template是一个模板，可以将相应的配置文件放入到template，然后在从template模块调用，在调用template模块时，可以不用把配置放入files目录中，就可以直接推送到被管理端。也可以在template写入变量（如果只是在vars目录下写变量信息，每次有变化都需要在配置文件上修改），在template下修改移动来的配置文件，就不需要去配置文件修改，而是直接在vars目录下的文件进行修改就行。</p><blockquote><ol><li><p>把相应的配置文件放入到template目录中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/ansible/rsync_dir/rsync_server/* /etc/ansible/roles/rsync/template/</span><br><span class="line">$ ls </span><br><span class="line">rsyncd.conf  rsync.password</span><br></pre></td></tr></table></figure></li><li><p>tasks动作目录配置信息使用template模块,可以使用相对路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template: src=rsyncd.conf  dest=/etc/ </span><br></pre></td></tr></table></figure><p>#PS：使用这模块可以不用把配置文件放入到files目录中，可以直接推送到被管理端</p></li><li><p>定义vars目录配置文件中的变量信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim rsyncd.conf</span><br><span class="line">  <span class="selector-tag">Port_info</span>: 873</span><br></pre></td></tr></table></figure></li><li><p>template目录中的配置文件定义变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim rsync.conf</span><br><span class="line">port= &#123;&#123; Port_info &#125;&#125;</span><br></pre></td></tr></table></figure><p>#PS：修改端口就可以直接到vars目录中的变量文件进行修改，而不需要在去配置文件修改</p></li></ol></blockquote><h2 id="编写roles-实现自动化部署rsync"><a href="#编写roles-实现自动化部署rsync" class="headerlink" title="编写roles-实现自动化部署rsync"></a>编写roles-实现自动化部署rsync</h2><h3 id="rsync-server"><a href="#rsync-server" class="headerlink" title="rsync_server"></a>rsync_server</h3><p><strong>1. 编写tasks目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cat tasks/main.yml </span><br><span class="line">- name: <span class="number">01</span>-install rsync service</span><br><span class="line">  yum: name=rsync state=installed</span><br><span class="line">- name: <span class="number">02</span>-create user rsync</span><br><span class="line">  user: name=rsync create_home=no shell=/sbin/nologin</span><br><span class="line">- name: <span class="number">03</span>-create dir backup</span><br><span class="line">  file: name=&#123;&#123; Data_dir &#125;&#125; state=directory owner=rsync group=rsync</span><br><span class="line">- name: <span class="number">04</span>-push file info to remote</span><br><span class="line">  copy: src=&#123;&#123; item.src &#125;&#125; dest=&#123;&#123; item.dest &#125;&#125; mode=&#123;&#123; item.mode &#125;&#125;</span><br><span class="line">  notify: if file is change it restart rsync server</span><br><span class="line">  with_items:</span><br><span class="line">    - &#123; src: <span class="string">&#x27;rsyncd.conf&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;644&#x27;</span> &#125;</span><br><span class="line">    - &#123; src: <span class="string">&#x27;rsync.password&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;600&#x27;</span>&#125; </span><br><span class="line">- name: <span class="number">05</span>-start rsync service</span><br><span class="line">  service: name=rsyncd state=started enabled=yes</span><br></pre></td></tr></table></figure><p><strong>2. 编写vars目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat vars/main.yml </span><br><span class="line">Data_dir: /backup</span><br><span class="line">Port_info: <span class="number">876</span></span><br></pre></td></tr></table></figure><p><strong>3. 编写files目录中的文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/ansible/rsync_dir/rsync_server/* ./</span><br></pre></td></tr></table></figure><p><strong>4. 编写handlers目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat handlers/main.yml </span><br><span class="line">- name: restart rsync server</span><br><span class="line">  service: name=rsync state=restarted</span><br></pre></td></tr></table></figure><p><strong>5. 通过template目录实现变量转换</strong></p><blockquote><ol><li><p>将配置文件拷贝至templates目录</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/ansible/rsync_dir/rsync_server/* /template/</span><br><span class="line">$ ll /etc/ansible/roles/rsync_server/templates/</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 467 <span class="selector-tag">Dec</span>  7 15<span class="selector-pseudo">:45</span> <span class="selector-tag">rsyncd</span><span class="selector-class">.conf</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span>  20 <span class="selector-tag">Dec</span>  7 15<span class="selector-pseudo">:45</span> <span class="selector-tag">rsync</span><span class="selector-class">.password</span></span><br></pre></td></tr></table></figure></li><li><p>tasks/main.yml文件修改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat tasks/main.yml </span><br><span class="line">template: src=&#123;&#123; item.src &#125;&#125; dest=&#123;&#123; item.dest &#125;&#125; mode=&#123;&#123; item.mode &#125;&#125;     //使用template模块</span><br><span class="line"><span class="selector-tag">notify</span>: <span class="selector-tag">if</span> <span class="selector-tag">file</span> <span class="selector-tag">is</span> <span class="selector-tag">change</span> <span class="selector-tag">it</span> <span class="selector-tag">restart</span> <span class="selector-tag">rsync</span> <span class="selector-tag">server</span></span><br><span class="line"><span class="selector-tag">with_items</span>:</span><br><span class="line">    <span class="selector-tag">-</span> &#123; <span class="attribute">src</span>: <span class="string">&#x27;rsyncd.conf&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;644&#x27;</span> &#125;</span><br><span class="line">    <span class="selector-tag">-</span> &#123; <span class="attribute">src</span>: <span class="string">&#x27;rsync.password&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;600&#x27;</span>&#125; </span><br></pre></td></tr></table></figure><p>#PS：将copy模块改成template</p></li><li><p>vars/main.yml文件修改</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat vars/main.yml </span><br><span class="line"><span class="selector-tag">Data_dir</span>: /<span class="selector-tag">backup</span></span><br><span class="line"><span class="selector-tag">Port_info</span>: 876</span><br></pre></td></tr></table></figure></li><li><p>rsync的配置文件修改</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#x27;port&#x27; templates/rsyncd.conf </span><br><span class="line">port = &#123;&#123; Port_info &#125;&#125;                        //改成vars/main.yml变量的参数</span><br></pre></td></tr></table></figure></li><li><p>编写主剧本文件，写入rsync_server执行</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ pwd </span><br><span class="line">/<span class="selector-tag">etc</span>/<span class="selector-tag">ansible</span>/<span class="selector-tag">roles</span></span><br><span class="line">$ vim rsync_site.yml </span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">hosts</span>: <span class="selector-tag">rsync_server</span>                    //主机清单</span><br><span class="line">  <span class="selector-tag">roles</span>: </span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">rsync_server</span> </span><br><span class="line"></span><br><span class="line">$ ansible-playbook --syntax-check rsync_site.yml       //检查语法</span><br><span class="line">$ ansible-playbook -C rsync_site.yml                   //模拟执行</span><br><span class="line">$ ansible-playbook rsync_site.yml                      //执行</span><br></pre></td></tr></table></figure></li><li><p>客户端查看结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &#x27;port&#x27; /etc/rsyncd.conf </span><br><span class="line">port = 876</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="rsync-client"><a href="#rsync-client" class="headerlink" title="rsync_client"></a>rsync_client</h3><p><strong>编写tasks目录中的main.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat rsync_client/tasks/main.yml</span><br><span class="line">- name: <span class="number">01</span>-install rsync service</span><br><span class="line">  yum: name=rsync state=installed</span><br><span class="line">- name: <span class="number">02</span>-create password file</span><br><span class="line">  copy: content=<span class="number">123456</span> dest=/etc/rsync.password mode=<span class="number">600</span></span><br><span class="line">- name: <span class="number">03</span>-create test file</span><br><span class="line">  file: dest=/tmp/test.txt state=touch</span><br><span class="line">- name: <span class="number">04</span>-check test</span><br><span class="line">  shell: rsync -az /tmp/test.txt rsync_backup@<span class="number">10.0</span>.<span class="number">0.212</span>::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible-playbook(剧本)</title>
      <link href="2021/02/03/ansible-playbook/"/>
      <url>2021/02/03/ansible-playbook/</url>
      
        <content type="html"><![CDATA[<h1 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h1><h2 id="剧本介绍"><a href="#剧本介绍" class="headerlink" title="剧本介绍"></a>剧本介绍</h2><p>playbook（也成为剧本） 是一个不同于ad-hoc命令行执行方式的模型，其功能更为强大灵活。它是一个非常简单的配置管理和多主机部署系统。playbook是由一个或多个<code>“play”</code>组成的列表。play的主要功能是将事先归一组的主机装扮成通过ansible中的task事先定义好的角色。从根本上来讲，所谓的task就是调用ansible的一个module将多个play组织一个playbook中，将通过连通起来，完整整个演员剧本。</p><h2 id="编写剧本的方法和规范"><a href="#编写剧本的方法和规范" class="headerlink" title="编写剧本的方法和规范"></a>编写剧本的方法和规范</h2><h3 id="编写剧本的规范"><a href="#编写剧本的规范" class="headerlink" title="编写剧本的规范"></a>编写剧本的规范</h3><p><strong>剧本编写规范:</strong></p><blockquote><ol><li><p>合理的信息缩进  两个空格表示一个缩进关系</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">标题一</span><br><span class="line">    标题二</span><br><span class="line">        标题三</span><br></pre></td></tr></table></figure><p>#PS: 在ansible中一定不能用tab进行缩进</p></li><li><p>冒号的使用方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hosts</span>: 172.16.1.41</span><br><span class="line"><span class="selector-tag">tasks</span>:</span><br><span class="line">yum: name=xx</span><br></pre></td></tr></table></figure><p>#PS: 使用冒号时后面要有空格信息,以冒号结尾，冒号信息出现在注释说明中，后面不需要加上空格</p></li><li><p>短横线应用 -(列表功能)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> 张三</span><br><span class="line">  男</span><br><span class="line">    <span class="selector-tag">-</span> 打游戏</span><br><span class="line">   <span class="selector-tag">-</span> 运动</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> 李四</span><br><span class="line">  女</span><br><span class="line">    学习</span><br><span class="line">       湖南</span><br><span class="line"><span class="selector-tag">-</span> 王五</span><br><span class="line">  男</span><br><span class="line">    运动</span><br><span class="line">       深圳</span><br></pre></td></tr></table></figure><p>#PS: 使用短横线构成列表信息，短横线后面需要有空格 </p></li></ol></blockquote><h3 id="Ad-hoc部署rsync服务"><a href="#Ad-hoc部署rsync服务" class="headerlink" title="Ad-hoc部署rsync服务"></a>Ad-hoc部署rsync服务</h3><p><strong>服务端</strong></p><blockquote><ol><li><p>第一个历程：安装软件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m yum -a &quot;name=rsync state=installed&quot;</span><br></pre></td></tr></table></figure></li><li><p>第二个历程：编写配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m copy -a &quot;src=/etc/rsyncd.conf dest=/etc/&quot;</span><br></pre></td></tr></table></figure></li><li><p>第三个历程：创建虚拟用户：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m user -a &quot;name=rsync create_home=no shell=/sbin/nologin&quot;</span><br></pre></td></tr></table></figure></li><li><p>第四个历程：创建目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m file -a &quot;dest=/bakcup state=directory owner=rsync group=rsync&quot;</span><br></pre></td></tr></table></figure></li><li><p>第五个历程：创建密码文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m copy -a &quot;content=rsync_backup:123456 dest=/etc/rsync.password mode=600&quot;</span><br></pre></td></tr></table></figure></li><li><p>第六个历程：启动服务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m service -a &quot;name=rsync state=started enbaled=yes&quot;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>客户端</strong></p><blockquote><ol><li><p>第一个历程：安装软件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m yum -a &quot;name=rsync state=installed&quot;</span><br></pre></td></tr></table></figure></li><li><p>第二个历程：创建验证服务端的密码文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;content=123456 dest=/etc/rsync.password mode=600&quot;</span><br></pre></td></tr></table></figure></li><li><p>第三个历程：创建一个文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/tmp/test.txt state=touch&quot;</span><br></pre></td></tr></table></figure></li><li><p>将文件备份到服务端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m shell -a &quot;rsync -az /tmp/test.txt rsync_backup@10.0.0.212::backup --password-filel=/etc/rsync.password&quot;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="编写剧本前奏"><a href="#编写剧本前奏" class="headerlink" title="编写剧本前奏"></a>编写剧本前奏</h3><blockquote><ol><li><p>创建剧本文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /etc/ansible/ansible-playbook</span><br><span class="line">$ cd /etc/ansible/ansible-playbook</span><br><span class="line">$ vim rsync_service.yaml</span><br></pre></td></tr></table></figure><p>#PS：剧本扩展名尽量写为yaml</p></li><li><p>如何执行剧本：</p><p>第一个步骤：检查剧本的语法格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ansible-playbook</span> <span class="selector-tag">--syntax-check</span> <span class="selector-tag">rsync_service</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><p>第二个步骤：模拟执行剧本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ansible-playbook</span> <span class="selector-tag">-C</span> <span class="selector-tag">rsync_service</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure><p>第三个步骤：直接执行剧本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ansible-playbook</span> <span class="selector-tag">rsync_service</span><span class="selector-class">.yaml</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="playbook–rsync自动部署"><a href="#playbook–rsync自动部署" class="headerlink" title="playbook–rsync自动部署"></a>playbook–rsync自动部署</h3><p>通过playbook设置多个定制好的tasks，可以执行一键自动化部署，但是还有许多重复的设置，这些重复的设置或多于的设置是没有必要的，所以我们可以简化这段自动部署代码（比如：可以使用变量、循环、判断、标签等功能进行优化）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/etc/ansible/ansible-playbook</span><br><span class="line">$ cat rsync_service<span class="selector-class">.yaml</span></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="number">01</span>-install rsync service</span><br><span class="line">      yum: name=rsync state=installed</span><br><span class="line">    - name: <span class="number">02</span>-push config file</span><br><span class="line">      copy: src=/etc/ansible/rsync_dir/rsync_server/rsyncd.conf dest=/etc/</span><br><span class="line">    - name: <span class="number">03</span>-create user rsync</span><br><span class="line">      user: name=rsync create_home=no shell=/sbin/nologin</span><br><span class="line">    - name: <span class="number">04</span>-create dir backup</span><br><span class="line">      file: name=/backup state=directory owner=rsync group=rsync</span><br><span class="line">    - name: <span class="number">05</span>-create password file info</span><br><span class="line">      copy: content=rsync_backup:<span class="number">123456</span> dest=/etc/rsync.password mode=<span class="number">600</span></span><br><span class="line">    - name: <span class="number">06</span>-start rsync service</span><br><span class="line">      service: name=rsyncd state=started enabled=yes</span><br><span class="line"></span><br><span class="line">- hosts: rsync_client</span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="number">01</span>-install rsync service</span><br><span class="line">      yum: name=rsync state=installed</span><br><span class="line">    - name: <span class="number">02</span>-create password file</span><br><span class="line">      copy: content=<span class="number">123456</span> dest=/etc/rsync.password mode=<span class="number">600</span></span><br><span class="line">    - name: <span class="number">03</span>-create test file</span><br><span class="line">      file: dest=/tmp/test.txt state=touch</span><br><span class="line">    - name: <span class="number">04</span>-check test</span><br><span class="line">      shell: rsync -az /tmp/test.txt rsync_backup@<span class="number">10.0</span>.<span class="number">0.212</span>::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure><h2 id="编写剧本的重要功能介绍"><a href="#编写剧本的重要功能介绍" class="headerlink" title="编写剧本的重要功能介绍"></a>编写剧本的重要功能介绍</h2><h3 id="剧本中设置变量信息"><a href="#剧本中设置变量信息" class="headerlink" title="剧本中设置变量信息"></a>剧本中设置变量信息</h3><p><strong>方法一：直接在剧本文件编写</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">  wuwei01: data01</span><br><span class="line">  wuwei02: data02</span><br></pre></td></tr></table></figure><p><strong>方法二：在命令行进行制定</strong></p><blockquote><p>-e：简写，在命令行添加变量只是临时操作</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook --extra-vars=wuwei01=data01</span><br><span class="line">$ ansible-playbook Backup=/data -e Passfile=rsync.password rsync_variable.yaml</span><br></pre></td></tr></table></figure><p><strong>方法三：在主机清单文件编写</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[rsync_server]</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.211</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[rsync_server:vars]</span></span><br><span class="line">Backup=/backup</span><br><span class="line">Passfile=rsync.password</span><br></pre></td></tr></table></figure><p><strong>三种方式的优先级</strong></p><blockquote><ul><li><p>最优先：命令行变量设置</p></li><li><p>次优先：剧本编写的变量设置</p></li><li><p>最后：主机清单配置的变量设置</p></li></ul></blockquote><h3 id="剧本中设置注册信息"><a href="#剧本中设置注册信息" class="headerlink" title="剧本中设置注册信息"></a>剧本中设置注册信息</h3><p><strong>编辑剧本</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim rsync_service<span class="selector-class">.yaml</span></span><br><span class="line">- name: <span class="number">07</span>-check port info</span><br><span class="line">  shell: netstat -lntup|grep <span class="number">873</span>                 //端口信息</span><br><span class="line">  register: result                               //注册端口信息,名称可以自己起</span><br><span class="line">- name: display port info</span><br><span class="line">  debug: var=result.stdout verbosity=<span class="number">0</span>           //调用注册信息（stdout_lines以标准的方式输出）</span><br></pre></td></tr></table></figure><p><strong>操作显示结果</strong></p><blockquote><p>显示进程信息,便是服务已经正常启动</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TASK</span> <span class="selector-attr">[display port info]</span> ***************************************************************************************************</span><br><span class="line">ok: [172.16.1.41] =&gt; &#123;</span><br><span class="line">&quot;msg&quot;: [</span><br><span class="line">    &quot;<span class="selector-tag">tcp</span>        0      0 0.0.0.0<span class="selector-pseudo">:873</span>             0.0.0.0:*               <span class="selector-tag">LISTEN</span>      24042/<span class="selector-tag">rsync</span>         &quot;, </span><br><span class="line">    &quot;<span class="selector-tag">tcp6</span>       0      0 :<span class="selector-pseudo">::873</span>                  :::*                    <span class="selector-tag">LISTEN</span>      24042/<span class="selector-tag">rsync</span>         &quot;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剧本中设置判断信息"><a href="#剧本中设置判断信息" class="headerlink" title="剧本中设置判断信息"></a>剧本中设置判断信息</h3><p><strong>setup模块中显示被管理主机系统的详细信息</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -m setup</span><br></pre></td></tr></table></figure><p><strong>剧本信息</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/etc/ansible/ansible-playbook</span><br><span class="line">$ cat rsync_service<span class="selector-class">.yaml</span></span><br><span class="line"></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="number">01</span>-install rsync service</span><br><span class="line">      yum: name=rsync state=installed</span><br><span class="line">.......................省略........................</span><br><span class="line"></span><br><span class="line">- hosts: rsync_client</span><br><span class="line">  tasks:</span><br><span class="line">.......................省略........................</span><br><span class="line">    - name: <span class="number">04</span>-check test</span><br><span class="line">      shell: rsync -az /tmp/test.txt rsync_backup@<span class="number">10.0</span>.<span class="number">0.212</span>::backup --password-file=/etc/rsync.password</span><br><span class="line">      when: (ansible_hostname == <span class="string">&quot;nfs&quot;</span>)    //判断，如果是nfs主机，才push(推送）文件</span><br><span class="line">    - name: <span class="number">05</span>-check test</span><br><span class="line">      shell: rsync -az /tmp/test.txt rsync_backup@<span class="number">10.0</span>.<span class="number">0.212</span>::web --password-file=/etc/rsync.password</span><br><span class="line">      when: (ansible_hostname == <span class="string">&quot;web01&quot;</span>)  //判断，如果是web01主机，才push（推送）文件</span><br></pre></td></tr></table></figure><blockquote><p>//获取内置变量方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -m setup -a &quot;filter=ansible_hostname&quot;</span><br></pre></td></tr></table></figure><p>//获取子信息方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -m setup -a &quot;filter=ansible_eth0[Ipv4]&quot;</span><br></pre></td></tr></table></figure></blockquote><p><strong>常见主机信息</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ansible_all_ipv4_address           <span class="comment">//仅显示Ipv4的信息</span></span><br><span class="line">ansible_derices<span class="comment">//仅显示磁盘设备信息</span></span><br><span class="line">ansible_distribution <span class="comment">//显示是什么系统.例：centos ,sues等.</span></span><br><span class="line">ansible_distribution_major_version<span class="comment">//显示是系统主版本</span></span><br><span class="line">ansible_distribution_version        <span class="comment">//仅显示系统版本</span></span><br><span class="line">ansible_machine<span class="comment">//显示系统类型.例：32位,还是64位</span></span><br><span class="line">ansible_eth0<span class="comment">//仅显示eth0的信息</span></span><br><span class="line">ansible_hostname<span class="comment">//仅显示主机名</span></span><br><span class="line">ansible_kernel<span class="comment">//仅显示内核版本</span></span><br><span class="line">ansible_lvm<span class="comment">//显示lvm相关信息</span></span><br><span class="line">ansible_memtotal_mb        <span class="comment">//显示系统总内存</span></span><br><span class="line">ansible_memfreee_mb<span class="comment">//显示可用系统内存</span></span><br><span class="line">ansible_memory_mb<span class="comment">//详细显示内存情况</span></span><br><span class="line">ansible_swaptotal_mb<span class="comment">//显示总的swap内存</span></span><br><span class="line">ansible_swapfree_mb<span class="comment">//显示swap内存大可用内存</span></span><br><span class="line">ansible_mounts<span class="comment">//显示系统磁盘挂载情况</span></span><br><span class="line">ansible_processor<span class="comment">//显示CPU个数（具体显示每个CPU的型号）</span></span><br><span class="line">ansible_processor_vcpus<span class="comment">//显示CPU个数（只显示总的个数）</span></span><br></pre></td></tr></table></figure><h3 id="剧本中设置循环信息"><a href="#剧本中设置循环信息" class="headerlink" title="剧本中设置循环信息"></a>剧本中设置循环信息</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ cat rsync_service_循环信息<span class="selector-class">.yaml</span></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">    - name: <span class="number">01</span>-install rsync service</span><br><span class="line">      yum: name=rsync state=installed</span><br><span class="line">    - name: <span class="number">02</span>-create user rsync</span><br><span class="line">      user: name=rsync create_home=no shell=/sbin/nologin</span><br><span class="line">    - name: <span class="number">03</span>-create dir backup</span><br><span class="line">      file: name=/backup state=directory owner=rsync group=rsync</span><br><span class="line">    - name: <span class="number">04</span>-start rsync service</span><br><span class="line">      service: name=rsyncd state=restarted enabled=yes</span><br><span class="line">    - name: <span class="number">05</span>-push file info to remote</span><br><span class="line">      copy: src=/etc/ansible/rsync_dir/rsync_server/&#123;&#123; item.src &#125;&#125; dest=&#123;&#123; item.dest &#125;&#125; mode=&#123;&#123; item.mode &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; src: <span class="string">&#x27;rsyncd.conf&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;644&#x27;</span> &#125;</span><br><span class="line">        - &#123; src: <span class="string">&#x27;rsync.password&#x27;</span>, dest: <span class="string">&#x27;/etc/&#x27;</span>, mode: <span class="string">&#x27;600&#x27;</span>&#125;  </span><br></pre></td></tr></table></figure><blockquote><p><strong>#PS：通过循环只使用了一条copy即可</strong></p></blockquote><h3 id="剧本中设置忽略错误"><a href="#剧本中设置忽略错误" class="headerlink" title="剧本中设置忽略错误"></a>剧本中设置忽略错误</h3><p><strong>默认playbook会检查命令和模块的返回状态，如遇到错误的终端playbook执行，可以加入ignore_errors:yes忽略错误</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: <span class="number">03</span>-create user rsync</span><br><span class="line">  user: ame=rsync create_home=no shell=/sbin/nologin</span><br><span class="line">  ignore_errors: yes</span><br><span class="line"></span><br><span class="line"> TASK [<span class="number">03</span>-create user rsync] ************************************************************************************************</span><br><span class="line"> fatal: [<span class="number">172.16</span>.<span class="number">1.41</span>]: FAILED! =&gt; &#123;<span class="string">&quot;changed&quot;</span>: false, <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Unsupported parameters for (user) module: ame Supported parameters include: append, authorization, comment, create_home, expires, force, generate_ssh_key, group, groups, hidden, home, local, login_class, move_home, name, non_unique, password, password_lock, profile, remove, role, seuser, shell, skeleton, ssh_key_bits, ssh_key_comment, ssh_key_file, ssh_key_passphrase, ssh_key_type, state, system, uid, update_password&quot;</span>&#125;</span><br><span class="line"> ...ignoring</span><br></pre></td></tr></table></figure><h3 id="剧本中设置标签功能"><a href="#剧本中设置标签功能" class="headerlink" title="剧本中设置标签功能"></a>剧本中设置标签功能</h3><blockquote><p>指定执行那个标签任务：ansible-playbook –tags=t2 test05.yaml</p><p>跳过指定标签任务：ansible-playbook –skip-tags=t2 test05.yaml</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- name: <span class="number">05</span>-create password file info</span><br><span class="line">  copy: content=rsync_backup:<span class="number">123456</span> dest=/etc/rsync.password mode=<span class="number">600</span></span><br><span class="line">  tags: <span class="number">05in</span>fo</span><br></pre></td></tr></table></figure><h3 id="剧本功能设置触发功能"><a href="#剧本功能设置触发功能" class="headerlink" title="剧本功能设置触发功能"></a>剧本功能设置触发功能</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ cat rsync_service_触发<span class="selector-class">.yaml</span></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  tasks:</span><br><span class="line">..............省略.....................</span><br><span class="line">    - name: <span class="number">02</span>-push config file</span><br><span class="line">      copy: src=/etc/ansible/rsync_dir/rsync_server/rsyncd.conf dest=/etc/</span><br><span class="line">      notify: restart rsync server              //通知</span><br><span class="line">..............省略.....................</span><br><span class="line">  </span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart rsync server               //触发</span><br><span class="line">      service: name=rsyncd state=restarted</span><br></pre></td></tr></table></figure><blockquote><p><strong>#PS：如果步骤2出现改动，则触发重启</strong></p></blockquote><h2 id="将多个剧本进行整合"><a href="#将多个剧本进行整合" class="headerlink" title="将多个剧本进行整合"></a>将多个剧本进行整合</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include_tasks: f1.yml  </span><br><span class="line">     - hosts: all</span><br><span class="line">       remote_user: root</span><br><span class="line">       tasks:</span><br><span class="line">         - include_tasks: f1.yml</span><br><span class="line">         - include_tasks: f2.yml</span><br></pre></td></tr></table></figure><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include: f1.yml</span><br><span class="line">      - include：f1.yml</span><br><span class="line">      - include：f2.yml</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/etc/ansible/ansible-playbook</span><br><span class="line">$ cat main<span class="selector-class">.yml</span> </span><br><span class="line">  - import_playbook: base.yml     </span><br><span class="line">  - import_playbook: rsync.yml    </span><br><span class="line">  - import_playbook: nfs.yml      </span><br><span class="line">  - import_playbook: oxxx.yml</span><br><span class="line">  - import_playbook: rsync.yml</span><br><span class="line">  - import_playbook: nfs.yml</span><br></pre></td></tr></table></figure><h2 id="编写NFS服务剧本"><a href="#编写NFS服务剧本" class="headerlink" title="编写NFS服务剧本"></a>编写NFS服务剧本</h2><p><strong>1. 创建几个目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p nfs_dir/&#123;nfs_client,nfs_server&#125;</span><br><span class="line">$ tree nfs_dir/</span><br><span class="line">nfs_dir/</span><br><span class="line">├── nfs_client</span><br><span class="line">└── nfs_server</span><br></pre></td></tr></table></figure><p><strong>2. 编写hosts文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ awk &#x27;NR==28,NR==32&#x27; /etc/ansible/hosts </span><br><span class="line"><span class="selector-attr">[nfs_client]</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.213</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[nfs_server]</span></span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.211</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[nfs:children]</span></span><br><span class="line">nfs_client</span><br><span class="line">nfs_server</span><br></pre></td></tr></table></figure><p><strong>3. 编写配置文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ pwd /etc/ansible/nfs_dir/nfs_server</span><br><span class="line">$ cat nfs_deploy<span class="selector-class">.yaml</span></span><br><span class="line">---</span><br><span class="line">- hosts: nfs:children                          //客户端和服务端都要操作的步骤</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install nfs software package       //第一种yum写法（saltstark写法，另一个自动化工具）</span><br><span class="line">      yum:</span><br><span class="line">        name: [<span class="string">&#x27;nfs-utils&#x27;</span>,<span class="string">&#x27;rpcbind&#x27;</span>]</span><br><span class="line">        state: installed</span><br><span class="line">      </span><br><span class="line">  # - name: install nfs software package      //第二种yum写法（ansible写法）</span><br><span class="line">  #    yum: name=nfs-utils state=installed</span><br><span class="line">  #    yum: name=rpcbind state=installed</span><br></pre></td></tr></table></figure><p><strong>服务端</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">hosts</span>: <span class="selector-tag">nfs_server</span>                     </span><br><span class="line">  <span class="selector-tag">vars</span>:</span><br><span class="line">    <span class="selector-tag">Data_dir</span>: /<span class="selector-tag">data</span></span><br><span class="line">    <span class="selector-tag">Mount_info</span>: /<span class="selector-tag">data</span> 10.0.0.0/24 (<span class="selector-tag">rw</span>,<span class="selector-tag">sync</span>)</span><br><span class="line">  <span class="selector-tag">tasks</span>:</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 01<span class="selector-tag">-write</span> <span class="selector-tag">nfs</span> <span class="selector-tag">mount</span> <span class="selector-tag">file</span> <span class="selector-tag">info</span></span><br><span class="line">      copy: content=&#123;&#123; Mount_info &#125;&#125; dest=/etc/exports</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 02<span class="selector-tag">-push</span> <span class="selector-tag">file</span> <span class="selector-tag">to</span> <span class="selector-tag">nfs</span> <span class="selector-tag">server</span></span><br><span class="line">      copy: src=/etc/ansible/nfs_dir/nfs_server/exports dest=/etc/</span><br><span class="line">      <span class="selector-tag">notify</span>: <span class="selector-tag">restart</span> <span class="selector-tag">nfs</span> <span class="selector-tag">service</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 03<span class="selector-tag">-create</span> <span class="selector-tag">nfs</span> <span class="selector-tag">server</span> <span class="selector-tag">username</span></span><br><span class="line">      user: name=nfsnobody create_home=no shell=/sbin/nologin</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 04<span class="selector-tag">-create</span> <span class="selector-tag">data</span> <span class="selector-tag">directory</span></span><br><span class="line">      file: path=&#123;&#123; Data_dir &#125;&#125; state=directory owner=nfsnobody group=nfsnobody</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 05<span class="selector-tag">-boot</span> <span class="selector-tag">server</span></span><br><span class="line">      service: name=&#123;&#123; item &#125;&#125; state=started enabled=yes</span><br><span class="line">      <span class="selector-tag">with_items</span>:</span><br><span class="line">        <span class="selector-tag">-</span> <span class="selector-tag">rpcbind</span></span><br><span class="line">        <span class="selector-tag">-</span> <span class="selector-tag">nfs</span></span><br><span class="line">  <span class="selector-tag">handlers</span>:</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 06<span class="selector-tag">-trigger</span> <span class="selector-tag">restart</span> <span class="selector-tag">nfs</span> <span class="selector-tag">service</span></span><br><span class="line">      service: name=nfs state=restarted</span><br></pre></td></tr></table></figure><p><strong>客户端</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">hosts</span>: <span class="selector-tag">nfs_client</span>                         </span><br><span class="line">  <span class="selector-tag">vars</span>:</span><br><span class="line">    <span class="selector-tag">Data_dir</span>: /<span class="selector-tag">data</span></span><br><span class="line">  <span class="selector-tag">tasks</span>:</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 01<span class="selector-tag">-create</span> <span class="selector-tag">mount</span> <span class="selector-tag">directory</span></span><br><span class="line">      file: name=/www state=directory </span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 02<span class="selector-tag">-mount</span> <span class="selector-tag">nfs</span> <span class="selector-tag">file</span> <span class="selector-tag">system</span></span><br><span class="line">      mount: src=10.0.0.211:&#123;&#123; Data_dir &#125;&#125; path=/www fstype=nfs state=mounted</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 03<span class="selector-tag">-check</span> <span class="selector-tag">mount</span> <span class="selector-tag">info</span></span><br><span class="line">      shell: df -h |grep /data</span><br><span class="line">      <span class="selector-tag">register</span>: <span class="selector-tag">result</span> </span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">name</span>: 04<span class="selector-tag">-display</span> <span class="selector-tag">mount</span> <span class="selector-tag">info</span></span><br><span class="line">      debug: var=result.stdout verbosity=0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible入门</title>
      <link href="2021/02/03/ansible%E5%85%A5%E9%97%A8/"/>
      <url>2021/02/03/ansible%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible自动化"><a href="#Ansible自动化" class="headerlink" title="Ansible自动化"></a>Ansible自动化</h1><h2 id="Ansible介绍"><a href="#Ansible介绍" class="headerlink" title="Ansible介绍"></a><strong>Ansible介绍</strong></h2><p>Ansible是一款运维自动化工具，其主要功能是帮助运维实现IT工作的自动化，降低人为操作失误，提高业务自动化率、提升运维工作效率，常用于软件部署自动化、配置自动化、管理自动化、系统化系统任务、持续集成、零宕机平滑升级等。它有丰富的内置模块（如：<code>acl、command、shell、cron、yum、copy、file、user</code>等，多大5-6百个）和开放的API接口，同时任何遵循GPL协议的企业或个人都可以随意修改和发布自己的版本</p><p><strong>Ansible的模块应用范围：</strong></p><blockquote><ul><li>系统层：支持的系统有Linux、Windows、AIX等，对应模块有acl、cron、pip、easy install、yum、authorized key等大量的内置模块</li><li>知名第三方平台支持：支持的平台有AWS、Azure、Cloudflare、OpenStack、Google、Linode、Digital、Ocean等，对应的模块有ec2、azure_rm_deployment、couldflare_dns、clc_aa_policy、glance_image、gc_storage、digital_ocean等</li><li>虚拟化：VMware、Docker、Cloudstack、LXC、OpenStack等，对应的模块有vmware_vmkernel、docker、cs_account、lxc_container、glance_image等</li><li>商业化硬件：F5、ASA、Citrix、EOS等，对应的模块有bigip_facts、asa_acl、netscaler、eos_command等</li><li>系统应用层：Apache、Zabbix、Rabbitmq、SVN、GIT等，对应的模块有apache2_module、zabbix_groupreabbimq_binding、subversion、git等</li></ul></blockquote><h2 id="Ansible是如何工作的"><a href="#Ansible是如何工作的" class="headerlink" title="Ansible是如何工作的"></a><strong>Ansible是如何工作的</strong></h2><p>Ansible没有客户端，因此底层通信依赖于系统软件。Linux系统下基本OpenSSH通信，window系统下基于PowerShell。管理端必须是Linux系统，管理者认证通过在管理节点通过Ansible工具调用各应用模块将指令推送至被管理端执行，并在执行完毕后自动删除产生的临时文件。</p><p><strong>根据Ansible使用过程中不同角色，其分为：</strong></p><blockquote><ul><li>使用者</li><li>Ansible工具集</li><li>作用对象</li></ul></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201212151925936.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201212155517979.png"></p><h3 id="使用者"><a href="#使用者" class="headerlink" title="使用者"></a>使用者</h3><blockquote><ul><li>第一种方法：CMDB（Configuretion Management Database，配置管理数据库），CMDB存储和管理者企业IT架构中的各项配置信息，是构建ITIL项目的核心工具，可以组合CMDB和Ansible，通过CMDB直接下发指令调用Ansible工具集完成相应的工作</li><li>第二种方法：PUBLIC/PRIVATE方式，Ansible除了丰富的内置模块外，同时提供丰富的API语言接口，如PHP、Python、Perl等多种语言，基于PUBLIC（公有云）/PRIVATE（私有云，Ansible以API调用的方式运行）</li><li>第三种方法：运维人员直接使用Ad-Hoc临时命令集调用Ansible工具集来完整任务执行</li><li>第四种方法：运维人员预先编写好的Ansible Playbook，通过执行Playbook中预先编排好的任务集按序完成任务执行</li></ul></blockquote><h3 id="Ansible工具集"><a href="#Ansible工具集" class="headerlink" title="Ansible工具集"></a>Ansible工具集</h3><p>Ansible命令是Ansible的核心工具，Ansible命令并非自身完整所有的功能集，其只是Ansible执行任务的调用入口，所有命令通过工具集来最终完整。如：上图绿色框框中的内容</p><blockquote><ul><li>Ansible Playbooks：任务剧本，编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，通常是JSON格式的YML文件</li><li>INVENTORY：Ansible管理主机的清单</li><li>MODULES：Ansible执行的功能模块，多数为内置的核心模块，也可自定义</li><li>PLUGINS：模块功能的补充，如连接类型插件，循环插件、变量插件、过滤插件等</li><li>API：供第三方程序调用的应用程序编程接口</li></ul><p><strong>Ansible：组合INVENTORY、API、MODULES、PLUGINS，其为核心执行工具</strong></p></blockquote><h3 id="作用对象"><a href="#作用对象" class="headerlink" title="作用对象"></a>作用对象</h3><p>Ansible的作用对象，不仅仅是Linux和非Linux操作系统的主机，同样也可以作用于各类公有云/私有云，商业和非商业设备的网络设施</p><h3 id="Ansible执行任务，组件相互调用关系图"><a href="#Ansible执行任务，组件相互调用关系图" class="headerlink" title="Ansible执行任务，组件相互调用关系图"></a>Ansible执行任务，组件相互调用关系图</h3><p>使用Ansible或Ansible-playbook时，在灌流单输入Ansible的Ad-Hoc命令激活Playbook后，Ansible会遵循预先编排的规则将Playbook逐条拆解为Play，再将<code>Play</code>组成Ansible可识别的任务<code>Task</code>，随后调用任务涉及的所有模块<code>Module</code>和插件<code>Plugin</code>，根据<code>Inventory</code>中定义的主机列表通过SSH将任务集以临时文件或命令的形式传输到远程客户端执行并返回执行结果，如果是临时文件则执行完毕后自动删除</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201212154930371.png"></p><h2 id="Ansible通信"><a href="#Ansible通信" class="headerlink" title="Ansible通信"></a><strong>Ansible通信</strong></h2><p>Ansible特点就是无需任务<code>Daemon</code>维护进程即可显示相互间的通信，且通信方式是基于业内统一标准的安全可靠的SSh安全连接。同时因为SSH是每台Linux主机系统必装的软件，所以Ansible无需再远程主机端安装任务额外的进程。实现<code>Agentless</code>（无客户端），以及稳定、快速、安全的SSH连接是Ansible通信的核心</p><h3 id="Ansible-SSH工作机制"><a href="#Ansible-SSH工作机制" class="headerlink" title="Ansible SSH工作机制"></a>Ansible SSH工作机制</h3><p>Ansible执行命令时，通过其底层传输连接模块，将一个或数个文件，或者定义个Play或Command命令传输到远程服务器<code>/tmp</code>目录的临时文件，并在远程执行这些Play/Command命令，然后又删除这些临时文件，同时回传整体命令执行结果。</p><blockquote><p>PS：/tmp目录是/home/.ansible/tmp/</p></blockquote><p><strong>Ansible特点总结：</strong></p><blockquote><ul><li>无客户端，只需要安装SSH、Python即可</li><li>基于OpenSSH通信，底层基于SSH协议</li><li>支持密码和SSH认证，可通过密码认证和密钥对认证</li><li>支持Windows，但仅支持被客户端，服务端必须是Linux系统</li><li>通过YAML语法，基于管理，API简单明了</li><li>能快速入手，设置简单，无需任务第三方软件</li><li>丰富的内置模块，满足日常功能所需，配置管理、应用部署、任务编排等功能集于一身</li><li>没有额外软件包消耗系统性能（高效）</li><li>基于OpenSSH，保证通信的安全可靠性</li></ul></blockquote><h3 id="基于ssh密钥对实现免交互连接"><a href="#基于ssh密钥对实现免交互连接" class="headerlink" title="基于ssh密钥对实现免交互连接"></a>基于ssh密钥对实现免交互连接</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t 秘钥对（dsa|rsa）                            //服务端</span><br><span class="line">$ ssh-copy-id -i /root/.ssh/id_dsa.pub root@10.0.0.211     //发送被动端</span><br></pre></td></tr></table></figure><h2 id="Ansible的安装部署"><a href="#Ansible的安装部署" class="headerlink" title="Ansible的安装部署"></a><strong>Ansible的安装部署</strong></h2><p>Ansible被RedHAT红帽官方收购后，其安装源被收录在<code>epel</code>中，如果已经安装<code>epel</code>可直接使用yum或apt安装，也可以通过pip和easy_install的Python第三方包管理器安装Ansible</p><h3 id="pip方式"><a href="#pip方式" class="headerlink" title="pip方式"></a>pip方式</h3><p>Ansible底层基于Python编写，通过pip方式安装Ansible：</p><blockquote><p>//安装python-pip3程序包及Python-devel</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python-pip3 python3-devel -y</span><br></pre></td></tr></table></figure><p>//安装前确保服务器的gcc、glibc开发环境均已安装，系统几乎所有的软件包编译环境均基于gcc。如果不确认可先执行如下命令：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc glibc-devel zlib-devel rpm-build openssl-devel -y</span><br></pre></td></tr></table></figure><p>//升级本地pip至最新版本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install --upgrade pip3</span><br></pre></td></tr></table></figure><p>//安装Ansible服务</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install ansible --upgrade</span><br></pre></td></tr></table></figure><p>//执行命令ansible –version，查看安装的版本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ansible --version</span><br><span class="line">ansible 2<span class="selector-class">.10</span><span class="selector-class">.3</span></span><br><span class="line">  config file = None</span><br><span class="line">  configured module search path = [&#x27;/root/.ansible/plugins/modules&#x27;, &#x27;/usr/share/ansible/plugins/modules&#x27;]</span><br><span class="line">  ansible python module location = /usr/local/lib/python3.6/site-packages/ansible</span><br><span class="line">  executable location = /usr/local/bin/ansible</span><br><span class="line">  python version = 3.6.8 (default, Nov 16 2020, 16:55:22) [GCC 4.8.5 20150623 (Red Hat 4.8.5-44)]</span><br></pre></td></tr></table></figure></blockquote><h3 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h3><p>Yum（Yellow dog Updater，Modified）是一个在Fedora和RedHAT以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无需繁琐地下载依赖。</p><blockquote><p>//事先要安装epel源，才能找到并安装Ansible（Centos7）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure><p>//安装Ansible</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y ansible</span><br></pre></td></tr></table></figure></blockquote><h3 id="Apt-get"><a href="#Apt-get" class="headerlink" title="Apt-get"></a>Apt-get</h3><p>全程是Advand Package Tool，是一款适合于UNIX和Linux系统的应用程序管理器，适用于Ubuntu、Debian等deb包管理式的操作系统，主要用于自动地从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。</p><blockquote><p>//添加Ansible源</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-add-repository -y ppa:ansible/ansible</span><br></pre></td></tr></table></figure><p>//升级库我呢见</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br></pre></td></tr></table></figure><p>//安装Ansible</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install -y ansible</span><br></pre></td></tr></table></figure></blockquote><h3 id="Git安装方式"><a href="#Git安装方式" class="headerlink" title="Git安装方式"></a>Git安装方式</h3><p>Pip、Yum、Apt-get都是二进制的安装方式，源码安装比较难，但学会源码安装软件方式是一项非常重要的技能。</p><blockquote><p>//安装git客户端，一般服务器都会自带git，如果没有则安装</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y git</span><br></pre></td></tr></table></figure><p>//使用git将拉去指定的Ansible版本至本地当前目录</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ansible/ansible.git</span><br></pre></td></tr></table></figure><p>//切换至程序包目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ./ansible</span><br></pre></td></tr></table></figure><p>//执行env-setup脚本，安装Ansible软件包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./hacking/env-setup</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ansible元素介绍"><a href="#Ansible元素介绍" class="headerlink" title="Ansible元素介绍"></a><strong>Ansible元素介绍</strong></h2><h3 id="Ansible目录结构介绍"><a href="#Ansible目录结构介绍" class="headerlink" title="Ansible目录结构介绍"></a>Ansible目录结构介绍</h3><p>Ansible是开源工具，整个开发过程或二次开发均遵循GPL协议，所以所有源码均可见。</p><blockquote><p>//查看ansible配置文件目录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ql ansible|egrep -v &quot;/usr/share|/usr/lib|/usr/bin&quot; </span><br><span class="line">/etc/ansible             //配置文件目录</span><br><span class="line">/etc/ansible/ansible.cfg //ansible服务配置文件</span><br><span class="line">/etc/ansible/hosts       //主机清单文件，定义可以管理的主机信息</span><br><span class="line">/etc/ansible/roles       //角色目录</span><br></pre></td></tr></table></figure><p>//其他目录文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin           //执行文件目录</span><br><span class="line">/usr/lib/python2.7/site-packages/ansible   //lib库依赖目录</span><br><span class="line">/usr/share/doc/ansible-xx/                 //help文档目录</span><br><span class="line">/usr/share/man/man1                        //man文档目录</span><br></pre></td></tr></table></figure></blockquote><blockquote><ul><li>配置文件目录/etc/ansible/，主要功能为：Inventory主机信息配置、Ansible工具集配置等。所有Ansible的配置均存放在该目录下。</li><li>执行文件目录/usr/bin/，主要功能为：Ansiblle系列命令默认存放目录。Ansible所有的可执行文件存放在该目录下</li><li>在/usr/lib/python.xxx/site-packages/下，该目录时系统当前默认的Python路径，因为ansible是基于Python编写的，所有ansible的所有lib库文件和模块文件也均存放于该目录下</li></ul></blockquote><h3 id="Ansible配置文件解析"><a href="#Ansible配置文件解析" class="headerlink" title="Ansible配置文件解析"></a>Ansible配置文件解析</h3><p>Inventory用于定义Ansible的主机（hosts）列表配置，Ansible的自身配置文件只有一个，即ansible.cfg，ansible.cfg配置文件可以存在多个地方。</p><p><strong>Ansible读取配置文件的顺序依次当前命令执行目录——&gt;用户家目录下的.ansible.cfg——&gt;/etc/ansible.cfg，先找到哪个就使用哪个的配置</strong></p><blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree /etc/ansible/</span><br><span class="line">/etc/ansible/</span><br><span class="line">├── ansible<span class="selector-class">.cfg</span></span><br><span class="line">├── ansible-playbook</span><br><span class="line">│   └── rsync_service<span class="selector-class">.yaml</span></span><br><span class="line">├── hosts</span><br><span class="line">└── roles</span><br></pre></td></tr></table></figure></blockquote><p><strong>查看/etc/ansible/ansible.cfg文件内容</strong></p><blockquote><p>//[default]，日常可能用到的配置，多数保持默认即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[defaults]</span></span><br><span class="line"></span><br><span class="line">#inventory      = /etc/ansible/hosts                    //定义Inventory</span><br><span class="line">#library        = /usr/share/my_modules/                //自定义lib库存放目录</span><br><span class="line">#module_utils   = /usr/share/my_module_utils/</span><br><span class="line">#remote_tmp     = ~/.ansible/tmp                        //远程临时文件本地存放目录</span><br><span class="line">#local_tmp      = ~/.ansible/tmp                        //本地临时文件本地存放目录</span><br><span class="line">#plugin_filters_cfg = /etc/ansible/plugin_filters.yml   //定义插件的yml文件 </span><br><span class="line">#forks          = 5                                     //默认开启的并发数</span><br><span class="line">#poll_interval  = 15                                    //默认轮询时间间隔</span><br><span class="line">#sudo_user      = root                                  //默认sudo用户</span><br><span class="line">#ask_sudo_pass = True                                   //是否需要sudo密码</span><br><span class="line">#ask_pass      = True                                   //是否需要密码</span><br><span class="line">#transport      = smart                                 //传输端口类型                          </span><br><span class="line">#remote_port    = 22                                    //默认远程的端口                       </span><br><span class="line">#module_set_locale = False                              //首次连接是否需要检查key认证，建议设为FALSE</span><br><span class="line">#timeout = 10</span><br><span class="line">#remote_user = root                                     //默认远程用户</span><br><span class="line">#log_path = /var/log/ansible.log                        //存放日志的路径</span><br><span class="line">#module_name = command                                  //默认执行的模块</span><br><span class="line">#action_plugins     = /usr/share/ansible/plugins/action  //action插件的存放目录</span><br><span class="line">#become_plugins     = /usr/share/ansible/plugins/become  //become插件的存放目录</span><br><span class="line">#cache_plugins      = /usr/share/ansible/plugins/cache   //下列插件都是类似</span><br><span class="line">#callback_plugins   = /usr/share/ansible/plugins/callback</span><br><span class="line">#connection_plugins = /usr/share/ansible/plugins/connection</span><br><span class="line">#lookup_plugins     = /usr/share/ansible/plugins/lookup</span><br><span class="line">#inventory_plugins  = /usr/share/ansible/plugins/inventory</span><br><span class="line">#vars_plugins       = /usr/share/ansible/plugins/vars</span><br><span class="line">#filter_plugins     = /usr/share/ansible/plugins/filter</span><br><span class="line">#test_plugins       = /usr/share/ansible/plugins/test</span><br><span class="line">#terminal_plugins   = /usr/share/ansible/plugins/terminal</span><br><span class="line">#strategy_plugins   = /usr/share/ansible/plugins/strategy</span><br><span class="line">#fact_caching = memory                                         //getfact缓存的主机信息存放方式</span><br><span class="line">#fact_caching_connection=/tmp                                  //getfact缓存的主机信息存放目录</span><br><span class="line">#retry_files_enabled = False</span><br><span class="line">#retry_files_save_path = ~/.ansible-retry                      //错误重启文件存放目录         </span><br></pre></td></tr></table></figure><p>//[privilege_escalation]，安全角度考虑，部分公司不希望直接以root的高级管理员权限直接部署应用，往往会开放普通用户权限并给予sudo的权限，该部分配置主要针对sudo用户提权的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#become=True                   //是否sudo</span><br><span class="line">#become_method=sudo            //sudo方式</span><br><span class="line">#become_user=root              //sudo后变成root用户</span><br><span class="line">#become_ask_pass=False         //sudo后是否验证密码</span><br></pre></td></tr></table></figure><p>//[paramiko_connection]，不常用，了解即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#record_host_keys=False        //不记录新主机的key以提升效率</span><br><span class="line">#pty=False                     //禁用sudo功能</span><br></pre></td></tr></table></figure><p>//[ssh_connection]，默认使用SSH协议连接对端主机，多数保持默认即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pipelining = False            //管道加速功能，需配置requiretty使用方可生效</span><br></pre></td></tr></table></figure><p>//[accelerate]，连接加速相关配置。多数保持默认即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#accelerate_port = 5099               //加速连接端口</span><br><span class="line">#accelerate_timeout = 30              //命令执行超时时间，单位秒</span><br><span class="line">#accelerate_connect_timeout = 5.0     //连接超时时间，单位秒</span><br><span class="line">#accelerate_daemon_timeout = 30       //上一个活动连接的时间，单位分钟</span><br><span class="line">#accelerate_multi_key = yes           </span><br></pre></td></tr></table></figure><p>//[selinux]，保持默认配置即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#libvirt_lxc_noseclabel = yes</span><br></pre></td></tr></table></figure><p>//[colors]，对于输出结果的颜色，保持默认即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#highlight = white</span><br><span class="line">#verbose = blue               //蓝色，显示ansible命令的执行过程 </span><br><span class="line">#warn = bright purple         //亮紫色，显示忠告信息  </span><br><span class="line">#error = red                  //红色，报错信息  </span><br><span class="line">#debug = dark gray            //深灰色，调试</span><br><span class="line">#deprecate = purple           //紫色，不在使用</span><br><span class="line">#skip = cyan                  //青色，跳过</span><br><span class="line">#unreachable = red            //红色，不可达</span><br><span class="line">#ok = green                   //绿色，查看主机信息/对主机未作改动</span><br><span class="line">#changed = yellow             //黄色，对主机信息做了改变   </span><br><span class="line">#diff_add = green             //绿色，对比之后添加</span><br><span class="line">#diff_remove = red            //红色，对比之后移除</span><br><span class="line">#diff_lines = cyan            //青色，对比每一行</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ansible系列命令用法详解"><a href="#Ansible系列命令用法详解" class="headerlink" title="Ansible系列命令用法详解"></a><strong>Ansible系列命令用法详解</strong></h2><h3 id="ansible-galaxy"><a href="#ansible-galaxy" class="headerlink" title="ansible-galaxy"></a>ansible-galaxy</h3><p>通过ansible-galaxy命令，可以根据下载量和关注量等信息，查找和安装优秀的Roles。Roles是Ansible非常重要的一项功能。</p><p><strong>ansible-galaxy命令使用格式如下：</strong></p><blockquote><p>ansible-galaxy [-h] [–version] [-v] TYPE</p></blockquote><p><strong>ansible-galaxy命令分三大部分：</strong></p><blockquote><p>init：初始化本地的Roles配置，以备上传Roles至galaxy</p><ul><li>info：列表指定Role的详细信息</li><li>install：下载并安装galaxy指定的Roles到本地</li><li>list：列出本地已下载的Roles</li><li>remove：删除本地已下载的Roles</li></ul></blockquote><p><strong>输入<a href="https://galaxy.ansible.com/%E7%BD%91%E5%9D%80%EF%BC%8C%E9%80%89%E6%8B%A9web%E7%9A%84Roles%EF%BC%8C%E9%80%9A%E8%BF%87ansible-galaxy%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BD%E5%B7%B2%E7%BB%8F%E6%89%93%E5%8C%85%E5%A5%BD%E7%9A%84nginx%EF%BC%88Roles%EF%BC%89">https://galaxy.ansible.com/网址，选择web的Roles，通过ansible-galaxy命令下载已经打包好的nginx（Roles）</a></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201213211107478.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201213211214732.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201213211333420.png"></p><blockquote><p>//下载</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-galaxy install geerlingguy<span class="selector-class">.nginx</span></span><br><span class="line">- downloading role &#x27;nginx&#x27;, owned by geerlingguy</span><br><span class="line">- downloading role from https://github.com/geerlingguy/ansible-role-nginx/archive/<span class="number">2.8</span>.<span class="number">0</span>.tar.gz</span><br><span class="line">- extracting geerlingguy.nginx to /root/.ansible/roles/geerlingguy.nginx</span><br><span class="line">- geerlingguy.nginx (<span class="number">2.8</span>.<span class="number">0</span>) was installed successfully</span><br></pre></td></tr></table></figure><p>//默认Roles存放在</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/.ansible/roles/geerlingguy.nginx</span><br></pre></td></tr></table></figure><p>//配置roles执行文件安装部署nginx</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/.ansible/roles</span><br><span class="line">$ vim nginx_site<span class="selector-class">.yml</span></span><br><span class="line">- hosts: rsync_server</span><br><span class="line">  roles:</span><br><span class="line">    - &#123; role: geerlingguy.nginx &#125;</span><br></pre></td></tr></table></figure><p>//检查并执行roles文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-playbook --syntax-check nginx_site<span class="selector-class">.yml</span>    <span class="comment">//检查语法</span></span><br><span class="line">$ ansible-playbook  nginx_site<span class="selector-class">.yml</span> </span><br></pre></td></tr></table></figure></blockquote><h3 id="ansible-doc"><a href="#ansible-doc" class="headerlink" title="ansible-doc"></a>ansible-doc</h3><p>ansible-doc是Ansible 模块文档说明，针对每个模块都有详细的用法说明及应用案例介绍，功能和Linux系统man命令类似。</p><p><strong>该命令使用方式如下：</strong></p><blockquote><p>ansible-doc [-h] [–version] [-v] [-M MODULE_PATH]</p></blockquote><p><strong>具体示例如下：</strong></p><blockquote><p>//列出支持的模块</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-doc -l</span><br></pre></td></tr></table></figure><p>//模块功能说明</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-doc ping</span><br></pre></td></tr></table></figure></blockquote><h3 id="ansible-vault"><a href="#ansible-vault" class="headerlink" title="ansible-vault"></a>ansible-vault</h3><p>ansible-vault主要用于配置文件加密，如编写的Playbook配置文件中包含敏感信息，不希望其他人随意查看，ansible-vault可加密/解密这个配置文件</p><p><strong>具体使用方法：</strong></p><blockquote><p>ansible-vault [-h] [–version] [-v]<br>              {create,decrypt,edit,view,encrypt,encrypt_string,rekey}</p></blockquote><p><strong>具体示例如下：</strong></p><blockquote><p>//设置如下密码，加密a.yml文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-vault encrypt anaconda-ks<span class="selector-class">.cfg</span> </span><br></pre></td></tr></table></figure><p>//会有以下输入加密密码提示</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New Vault password: </span><br><span class="line">Confirm New Vault password: </span><br><span class="line">Encryption successful</span><br></pre></td></tr></table></figure><p>//这时，再打开a.yml文件后会发现该文件已经加密，只有通过命令才能进行解密</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible-vault decrypt anaconda-ks<span class="selector-class">.cfg</span> </span><br></pre></td></tr></table></figure></blockquote><h3 id="ansible-console"><a href="#ansible-console" class="headerlink" title="ansible-console"></a>ansible-console</h3><p>ansible-console是Ansible为用户提供的一款交换式工具，用户可以在ansible-console虚拟出来的终端上像Shell一样使用Ansible内置的各种命令</p><p><strong>输入ansible-console的显示：</strong></p><blockquote><p>root@all (3)[f:5]$ 是提示符，该提示符表示“当前的使用用户@当前所在的Inventory中定义的组，默认是all分组（Inventory中all组所有主机的数量）[forks:线程数]$”</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/image-20201213213914724.png"></p><p><strong>使用cd命令可切换至指定Hosts或分组，同时提示符也会相应改变，显示如下：</strong></p><blockquote><p>cd切换至rsync-server分组后，在输入命令cat /etc/hosts命令，就能使用shell方式控制分组的主机了。</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201213214238077.png"></p><p><strong>如果需要启动rsyncd服务，可以输入该命令：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ root@rsync_server (1)[f:5]$ service name=rsyncd state=started</span><br></pre></td></tr></table></figure><h2 id="定义主机和组"><a href="#定义主机和组" class="headerlink" title="定义主机和组"></a><strong>定义主机和组</strong></h2><p>Inventory配置文件遵循INI文件风格，中括号中的字符为组名，其支持将同一个主机他同时归并到多个不同的组中，分组的功能能大大提供便利，另外如果主机使用了非默认的SSH端口，可以在主机名之后使用冒号端口号来表明</p><h3 id="简单分组配置主机信息"><a href="#简单分组配置主机信息" class="headerlink" title="简单分组配置主机信息"></a>简单分组配置主机信息</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[web]</span></span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span></span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.8</span></span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.9</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data]</span></span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span></span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.41</span></span><br></pre></td></tr></table></figure><p><strong>操作过程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ansible web -a &quot;hostname&quot;</span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line"></span><br><span class="line">$ ansible data -a &quot;hostname&quot;</span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">nfs01</span></span><br></pre></td></tr></table></figure><h3 id="主机名符号匹配配置"><a href="#主机名符号匹配配置" class="headerlink" title="主机名符号匹配配置"></a>主机名符号匹配配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[web]</span>         </span><br><span class="line">172<span class="selector-class">.16</span><span class="selector-class">.1</span>.<span class="selector-attr">[7:9]</span>   <span class="comment">//以地址方式</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[web]</span></span><br><span class="line">web<span class="selector-attr">[01:03]</span>       <span class="comment">//以主机名方式</span></span><br></pre></td></tr></table></figure><p><strong>操作过程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ansible web01  -a &quot;hostname&quot;      </span><br><span class="line">web01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line"></span><br><span class="line">$ ansible web  -a &quot;hostname&quot;</span><br><span class="line">web01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br></pre></td></tr></table></figure><h3 id="加上远程端口"><a href="#加上远程端口" class="headerlink" title="加上远程端口"></a>加上远程端口</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[web]</span></span><br><span class="line"> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span>:<span class="number">52113</span></span><br><span class="line"> web01:<span class="number">52113</span></span><br></pre></td></tr></table></figure><p><strong>操作过程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ansible web01  -a &quot;hostname&quot;</span><br><span class="line">web01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line"></span><br><span class="line">$ ansible 172.16.1.7  -a &quot;hostname&quot;</span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line"></span><br><span class="line">$ ansible web  -a &quot;hostname&quot;</span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line">web01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br></pre></td></tr></table></figure><h3 id="主机使用特殊的变量"><a href="#主机使用特殊的变量" class="headerlink" title="主机使用特殊的变量"></a>主机使用特殊的变量</h3><p><strong>这种方式不需要使用ssh密钥，可以在主机清单中使用参数指定</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[web]</span></span><br><span class="line">172.16.1.7 ansible_ssh_port=52113 ansible_ssh_user=root ansible_ssh_pass=123456</span><br><span class="line"></span><br><span class="line">//增添了主机名</span><br><span class="line"><span class="selector-attr">[web]</span></span><br><span class="line">web01 ansible_ssh_host=172.16.1.7 ansible_ssh_port=52113 ansible_ssh_user=root ansible_ssh_pass=123456</span><br></pre></td></tr></table></figure><p><strong>操作过程</strong></p><blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ ansible 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span>  -<span class="selector-tag">a</span> &quot;hostname&quot;</span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">web01</span><br><span class="line"></span><br><span class="line">$ ansible web -<span class="selector-tag">a</span> &quot;hostname&quot;</span><br><span class="line">web01 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">web01</span><br></pre></td></tr></table></figure></blockquote><h3 id="主机名嵌入配置"><a href="#主机名嵌入配置" class="headerlink" title="主机名嵌入配置"></a>主机名嵌入配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[rsync:children]</span>  <span class="comment">//包括服务端和客户端端</span></span><br><span class="line">rsync_server</span><br><span class="line">rsync_client</span><br><span class="line"> </span><br><span class="line"><span class="selector-attr">[rsync_client]</span>    <span class="comment">//客户端主机清单</span></span><br><span class="line"> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span></span><br><span class="line"> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.7</span></span><br><span class="line"> <span class="selector-id">#172</span><span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.8</span></span><br><span class="line"> <span class="selector-id">#172</span><span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.9</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-attr">[rsync_server]</span>    <span class="comment">//服务端主机清单</span></span><br><span class="line"> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.41</span></span><br></pre></td></tr></table></figure><p><strong>操作过程</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -a &quot;hostname&quot;</span><br><span class="line">172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">backup</span></span><br><span class="line"></span><br><span class="line">$ ansible rsync_client -a &quot;hostname&quot;</span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">nfs01</span></span><br><span class="line"></span><br><span class="line">$ ansible rsync:children -a &quot;hostname&quot;</span><br><span class="line"><span class="selector-attr">[WARNING]</span>: <span class="selector-tag">Could</span> <span class="selector-tag">not</span> <span class="selector-tag">match</span> <span class="selector-tag">supplied</span> <span class="selector-tag">host</span> <span class="selector-tag">pattern</span>, <span class="selector-tag">ignoring</span>: <span class="selector-tag">children</span></span><br><span class="line">172.16.1.7 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">web01</span></span><br><span class="line">172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">backup</span></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="selector-tag">nfs01</span></span><br></pre></td></tr></table></figure><blockquote><p>//嵌入式变量信息 </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[web:vars]</span>   </span><br><span class="line"> ansible_ssh_host=172.16.1.7 </span><br><span class="line"> ansible_ssh_port=22</span><br><span class="line">ansible_ssh_user=root </span><br><span class="line">ansible_ssh_pass=123456</span><br><span class="line"> </span><br><span class="line"> <span class="selector-attr">[web]</span></span><br><span class="line"> web01</span><br></pre></td></tr></table></figure></blockquote><h3 id="Ansible与正则"><a href="#Ansible与正则" class="headerlink" title="Ansible与正则"></a>Ansible与正则</h3><p>正则表达式（Patterns）是各类高级语言的必定支持的方法一直，Ansible也不例外。其Patterns功能等同于正则表达式，语法使用也和正则类同，大大的提高了Ansible的灵活性。同时也支持Ansible-playbook</p><p><strong>1. ALL（全量）匹配</strong></p><blockquote><p>//匹配所有主机，all或*号功能系统</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -m ping</span><br><span class="line">$ ansible &quot;*&quot; -m ping</span><br></pre></td></tr></table></figure></blockquote><p><strong>2. ‘:’逻辑或（or）匹配</strong></p><blockquote><p>//使用方法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible &quot;rsync_server:rsync_client<span class="string">&quot; -m ping</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>3. 逻辑非(!)匹配</strong></p><blockquote><p>//所有在rsync_server组但不在nfs_clien组的主机</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible &quot;rsync_server!nfs_client&quot; -m ping</span><br></pre></td></tr></table></figure></blockquote><p><strong>4. 逻辑与（&amp;）匹配</strong></p><blockquote><p>//rsync_server组合nfs_client组中同时存在的主机</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible &quot;rsync_server:&amp;nfs_client<span class="string">&quot; -m ping</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>5. 多条件组合</strong></p><blockquote><p>//rsync_server和nginx两个组中的所有主机，在dbserver组中存在，且在nfs_client组中不存在</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible &quot;rsync_server:ngxin:&amp;dbserver:!nfs_client<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>6. 模糊匹配</strong></p><blockquote><p>//所以.myboke.com结尾的主机均符合</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-class">.myboke</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>7. 与切割</strong></p><blockquote><p>//通过[0:1]即可获取数值1</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[webserver]</span></span><br><span class="line">webpong</span><br><span class="line">webping</span><br><span class="line">webclient</span><br></pre></td></tr></table></figure><p>//通过截取数值下标可以获取对应变量值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webservers[0]   # == webpong</span><br><span class="line">webservers[0:1] # == webservers[0],webservers[1]</span><br><span class="line">webservers[-1]  # == webclient</span><br><span class="line">webservers[1:]  # == webpong,webping</span><br></pre></td></tr></table></figure></blockquote><p><strong>8. 正则匹配</strong></p><blockquote><p>//“~”开始表示正则匹配</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~(web|db).*\.example\.com</span><br><span class="line"><span class="comment">//匹配web或db后的所有字符.example.com的域名</span></span><br></pre></td></tr></table></figure><p>//检测beta.example.com、web.example.com、gree.example.com、beta.example.org、web.example.org、green.example.org的存活</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible &quot;~(beat|web|greem)\.example.(com|org)&quot; -m ping</span><br></pre></td></tr></table></figure><p>//检测Inventory中所有以192.168开头的服务器存活信息</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible ~192\<span class="selector-class">.168</span>\.<span class="selector-attr">[0-9]</span>\&#123;\2&#125;.<span class="selector-attr">[0-9]</span>\&#123;2,&#125; -m ping</span><br></pre></td></tr></table></figure></blockquote><h2 id="Ad-Hoc"><a href="#Ad-Hoc" class="headerlink" title="Ad-Hoc"></a>Ad-Hoc</h2><p>Ad-Hoc，是ansible的一种“临时命令”，英文中作为形容词有“特别的，临时”的含义。Ad-Hoc只是官方对Ansible命令的一种称谓。</p><p><strong>其命令用法如下：</strong></p><blockquote><p>ansible [-h] [–version] [-v] [-b] [–become-method BECOME_METHOD]</p></blockquote><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-v,–verbose</td><td>输出更详细的执行过程信息，-vvv可得到执行过程所有信息</td></tr><tr><td>-i PATH，–Inventory=PATH</td><td>指定Inventory信息，默认/etc/ansible/hosts</td></tr><tr><td>-f NUM，–forks=NUM</td><td>并发线程数，默认5个线程</td></tr><tr><td>–private-key=PRIVATE_KEY_FILE</td><td>指定密钥文件</td></tr><tr><td>-m MODULE_NAME, –module-name MODULE_NAME</td><td>指定执行使用的模块</td></tr><tr><td>–M MODULE_PATH, –module-path MODULE_PATH</td><td>指定模块存放路径，默认/usr/share/ansible</td></tr><tr><td>-a MODULE_ARGS，–args MODULE_ARGS</td><td>模块参数</td></tr><tr><td>-o, –one-line</td><td>标准输出至一行</td></tr><tr><td>-s，–sudo</td><td>相当于Linux系统下的sudo命令</td></tr><tr><td>-t TREE, –tree TREE</td><td>输出信息至Directory目录下，结果文件以远程主机命名</td></tr><tr><td>-T TIMEOUT, –timeout TIMEOUT</td><td>指定连接远程主机的最大超时，单位是秒</td></tr><tr><td>-B SECONDS, –background</td><td>后台执行命令，超NUM秒后中止正在执行的任务</td></tr><tr><td>-P POLL_INTERVAL</td><td>定期返回后台任务进度</td></tr><tr><td>-u REMOTE_USER, –user REMOTE_USER</td><td>在孤独不过远程主机以Username运行命令</td></tr><tr><td>-c CONNECTION, –connection CONNECTION</td><td>指定连接方式，可用选项paramiko（ssh)、ssh、local方式</td></tr><tr><td>-l SUBSET, –limit SUBSET</td><td>指定运行主机</td></tr><tr><td>–syntax-check</td><td>检查语法是否出错</td></tr><tr><td>–list-hosts</td><td>列出符合条件的主机列表，不执行任何命令</td></tr></tbody></table><h3 id="ansible模块语法说明"><a href="#ansible模块语法说明" class="headerlink" title="ansible模块语法说明"></a>ansible模块语法说明</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">The <span class="selector-tag">command</span> module takes the <span class="selector-tag">command</span> name followed by <span class="selector-tag">a</span> list of space-delimited arguments.</span><br><span class="line"><span class="comment">//命令模块采用命令名,后面要有空格分隔的参数</span></span><br><span class="line"></span><br><span class="line">The given <span class="selector-tag">command</span> will be executed on all selected nodes.</span><br><span class="line"><span class="comment">//给定的命令将在所有选定的节点上执行</span></span><br><span class="line"></span><br><span class="line">The command(s) will not be processed through the shell, so variables like $HOME and operations like &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;|&quot;, &quot;;&quot; and &quot;&amp;&quot; will not work. Use the shell module if you need these features.</span><br><span class="line"><span class="comment">//输出的命令不会通过shell处理,所以变量名和一些符号将不起作用,如果需要这些特性,请使用shell模块</span></span><br><span class="line"> </span><br><span class="line">To create <span class="selector-tag">command</span> tasks that are easier to read than the ones using space-delimited arguments, pass parameters using the args task keyword or use cmd parameter.</span><br><span class="line"><span class="comment">//若要创建比使用空格分隔的参数更易于读取的命令任务,请使用args task关键字传递参数或使用cmd参数</span></span><br><span class="line"> </span><br><span class="line">Either <span class="selector-tag">a</span> free <span class="selector-tag">form</span> <span class="selector-tag">command</span> or cmd parameter is required, see the examples.</span><br><span class="line"><span class="comment">//需要自由格式命令或cmd输出,请参见示例</span></span><br><span class="line"> </span><br><span class="line">For Windows targets, use the win_command module instead.</span><br><span class="line"><span class="comment">//对Window对象,可以使 用win_command模块代替</span></span><br></pre></td></tr></table></figure><h3 id="ping（检测模块）"><a href="#ping（检测模块）" class="headerlink" title="ping（检测模块）"></a>ping（检测模块）</h3><p><strong>描述</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">Try</span> <span class="selector-tag">to</span> <span class="selector-tag">connect</span> <span class="selector-tag">to</span> <span class="selector-tag">host</span>, <span class="selector-tag">verify</span> <span class="selector-tag">a</span> <span class="selector-tag">usable</span> <span class="selector-tag">python</span> <span class="selector-tag">and</span> <span class="selector-tag">return</span> <span class="selector-tag">pong</span> <span class="selector-tag">on</span> <span class="selector-tag">success</span>  //测试连接的主机，验证一个可用的<span class="selector-tag">python</span>，染回<span class="selector-tag">pong</span>则表示成功</span><br></pre></td></tr></table></figure><p><strong>执行命令：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -f 5 -m ping</span><br><span class="line">10.0.0.212 | SUCCESS =&gt; &#123;</span><br><span class="line"> &quot;<span class="selector-tag">ansible_facts</span>&quot;: &#123;</span><br><span class="line">     &quot;discovered_interpreter_python&quot;: &quot;/usr/bin/python&quot;</span><br><span class="line"> &#125;, </span><br><span class="line"> &quot;<span class="selector-tag">changed</span>&quot;: <span class="selector-tag">false</span>, </span><br><span class="line"> &quot;<span class="selector-tag">ping</span>&quot;: &quot;<span class="selector-tag">pong</span>&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行的详细结果</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible rsync_server -f 5 -m ping -vvv</span><br></pre></td></tr></table></figure><blockquote><p>执行命令——&gt;ssh连接——&gt;生成临时目录——&gt;将/tmp临时脚本移动至$HOME/.ansible/tmp/ansible-tmp-数字/目录下——&gt;执行命令——&gt;返回结果给控制机——&gt;END</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/image-20201214133539759.png"></p><h3 id="command-默认模块"><a href="#command-默认模块" class="headerlink" title="command(默认模块)"></a>command(默认模块)</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">command</span> – Execute commands on targets  <span class="comment">//在目标上执行命令</span></span><br></pre></td></tr></table></figure><p><strong>简单用法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.211</span> -m <span class="selector-tag">command</span> -<span class="selector-tag">a</span> &quot;hostname&quot;</span><br><span class="line">10.0.0.211 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nfs</span><br></pre></td></tr></table></figure><p><strong>扩展应用</strong></p><blockquote><ol><li><p>chdir Change into this directory before running the command.</p><p>//在执行这个命令前对目录进行切换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m command -a &quot;chdir=/tmp touch wuwei1.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>creates A filename or (since 2.0) glob pattern. If it already exists, this step won’t be run.</p><p>//一个文件名称或全局模式，如果这个文件已经存在，不会运行下一步    </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m command -a &quot;creates=/tmp/hosts.bak touch wuwei.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>removes If it already exists, this step will be run.  </p><p>//如果文件已经存在，可以运行下一步(相反不存在，则不运行)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m command -a &quot;removes=/tmp/hosts.bak chdir=/tmp touch wuwei3.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>free_form(required）</p><p>The command module takes a free form command to run. </p><p>There is no actual parameter named ‘free form’.</p><p>//使用command模块的时候，-a参数后面必须写上一个合法Linux命令信息。如果不加合法的Linux命令信息，则显示报错。</p></li></ol></blockquote><h3 id="shell-万能模块）"><a href="#shell-万能模块）" class="headerlink" title="shell(万能模块）"></a>shell(万能模块）</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell  Execute shell commands on targets   <span class="comment">//在目标上执行shell命令</span></span><br></pre></td></tr></table></figure><p><strong>简单用法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.211</span> -m shell-<span class="selector-tag">a</span> &quot;hostname&quot;</span><br><span class="line">  172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">  nfs01</span><br><span class="line"></span><br><span class="line"><span class="comment">//过滤信息shell模块可以，command模块也可以</span></span><br><span class="line">$ ansible 172.16.1.41 -m shell -a &quot;grep -E &#x27;nfs01|lb01&#x27; /etc/hosts&quot;</span><br><span class="line">  172.16.1.41 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">  172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.5</span>      lb01</span><br><span class="line">  172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.31</span>     nfs01</span><br></pre></td></tr></table></figure><p><strong>扩展应用</strong></p><blockquote><ol><li><p>chdir Change into this directory before running the command.</p><p>//在执行这个命令前对目录进行切换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m shell -a &quot;chdir=/tmp touch wuwei.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>creates A filename  If it already exists, this step won’t be run.</p><p>//一个文件名称或全局模式,如果这个文件已经存在,不会运行下一步     </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m shell -a &quot;creates=/tmp/hosts.bak touch wuwei.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>removes A filename, when it does not exist, this step will not be run.</p><p>//如果文件已经存在,可以运行下一步</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m shell -a &quot;removes=/tmp/hosts.bak chdir=/tmp touch wuwei.txt&quot;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>实践应用：利用shell执行脚本</strong></p><blockquote><p>步骤： </p><ol><li>第一个步骤：编写一个脚本</li><li>第二个步骤：将脚本发送到远程主机</li><li>第三个步骤：将脚本权限进行修改（添加执行权限）</li><li>第四个步骤：运行ansible命令执行脚本</li></ol></blockquote><blockquote><ol><li><p>编写一个脚本（ansible端）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim yum_install_software.sh</span><br><span class="line">  #!/<span class="selector-tag">bin</span>/<span class="selector-tag">bash</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#install</span> <span class="selector-tag">top</span> <span class="selector-tag">extend</span> <span class="selector-tag">software</span></span><br><span class="line">  <span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">-y</span> <span class="selector-tag">htop</span></span><br></pre></td></tr></table></figure></li><li><p>修改脚本的权限为执行权限</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod a+x yum_install_software.sh</span><br><span class="line">$ ll yum_install_software.sh </span><br><span class="line">  <span class="selector-tag">-rwxr-xr-x</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 62 <span class="selector-tag">May</span>  3 20<span class="selector-pseudo">:36</span> <span class="selector-tag">yum_install_software</span><span class="selector-class">.sh</span></span><br></pre></td></tr></table></figure></li><li><p>将脚本发送到远程主机</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp -rp yum_install_software.sh 10.0.0.211:/server/scripts/</span><br></pre></td></tr></table></figure></li><li><p>运行ansible命令执行脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m shell -a &quot;/bin/sh /server/scripts/yum_install_software.sh&quot;</span><br><span class="line">  10.0.0.211 | CHANGED | rc=0 &gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>被动端检查</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep htop</span><br><span class="line">  <span class="selector-tag">htop-2</span>.2.0<span class="selector-tag">-3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="script-脚本模块"><a href="#script-脚本模块" class="headerlink" title="script(脚本模块)"></a>script(脚本模块)</h3><p><strong>实践应用：利用script执行脚本</strong></p><blockquote><p>步骤</p><ol><li>第一个步骤：编写一个脚本</li><li>第二个步骤：运行ansible命令执行脚本</li></ol></blockquote><blockquote><ol><li><p>编写脚本</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim yum_install_software.txt</span><br><span class="line">  #!/<span class="selector-tag">bin</span>/<span class="selector-tag">bash</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#install</span> <span class="selector-tag">top</span> <span class="selector-tag">extend</span> <span class="selector-tag">software</span></span><br><span class="line">  <span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">-y</span> <span class="selector-tag">httpd</span></span><br></pre></td></tr></table></figure></li><li><p>使用ansible命令执行脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m script -a &quot;/server/scripts/yum_install_software.txt&quot;</span><br></pre></td></tr></table></figure></li></ol><p><strong>#PS：script模块参数功能和command模块类似</strong></p></blockquote><p><strong><code>提示：相比shell模块而言，script模块步骤更简单，所以不要依靠shell的模块</code></strong></p><h3 id="copy-文件类型模块"><a href="#copy-文件类型模块" class="headerlink" title="copy(文件类型模块)"></a>copy(文件类型模块)</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># copy Copy files to remote locations   <span class="comment">//复制文件信息到远端位置</span></span><br></pre></td></tr></table></figure><p><strong>简单用法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m copy -a &quot;src=/etc/hosts dest=/etc/&quot;</span><br><span class="line">  10.0.0.211 | CHANGED =&gt; &#123;                                     //对那台主机进行变动</span><br><span class="line">     &quot;ansible_facts&quot;: &#123;                                //找到ansible,发现解释器Python</span><br><span class="line">         <span class="string">&quot;discovered_interpreter_python&quot;</span>: <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">     &#125;, </span><br><span class="line">     <span class="string">&quot;changed&quot;</span>: true,                                       //是否对主机信息进行改变,true改变,false不改变</span><br><span class="line">     <span class="string">&quot;checksum&quot;</span>: <span class="string">&quot;8e84ecc450e3d3174259bbd67f342f0986f30c2f&quot;</span>,    //生成一个文件校验码==MD5值</span><br><span class="line">     <span class="string">&quot;dest&quot;</span>: <span class="string">&quot;/etc/hosts&quot;</span>,                                    //显示目录路径信息 </span><br><span class="line">     <span class="string">&quot;gid&quot;</span>: <span class="number">0</span>,           //显示复制后文件gid信息</span><br><span class="line">     <span class="string">&quot;group&quot;</span>: <span class="string">&quot;root&quot;</span>,                  //显示复制后文件的属组</span><br><span class="line">     <span class="string">&quot;md5sum&quot;</span>: <span class="string">&quot;82f4f9d946109b47ab4942e8b1b079fa&quot;</span>,//生成一个文件校验码==MD5值 </span><br><span class="line">     <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;0644&quot;</span>,                           //显示复制后文件的权限</span><br><span class="line">     <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;root&quot;</span>,                 //显示复制后属主信息</span><br><span class="line">     <span class="string">&quot;size&quot;</span>: <span class="number">392</span>,         //显示复制后的大小信息</span><br><span class="line">     <span class="string">&quot;src&quot;</span>: <span class="string">&quot;/root/.ansible/tmp/ansible-tmp-1588510756.79-14298-168554630180666/source&quot;</span>, </span><br><span class="line">     <span class="string">&quot;state&quot;</span>: <span class="string">&quot;file&quot;</span>,                                  //显示文件类型</span><br><span class="line">     <span class="string">&quot;uid&quot;</span>: <span class="number">0</span>        //显示复制否的uid信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>扩展用法</strong></p><blockquote><ol><li><p>在传输文件时修改文件的属主和属组信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;src=/file/rsync/rsync.password dest=/data/ owner=wuwei group=wuwei&quot;</span><br></pre></td></tr></table></figure></li><li><p>在传输文件时修改文件的权限信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;src=/file/rsync/rsync.password dest=/data/ owner=wuwei group=wuwei mode=1777&quot;</span><br></pre></td></tr></table></figure></li><li><p>在传输文件信息时对远程主机源文件进行备份</p><p>管理端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;src=/file/rsync/rsync.password dest=/wuwei/ backup=yes&quot;</span><br></pre></td></tr></table></figure><p>被管理端</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ll /oldboy/</span><br><span class="line"> <span class="selector-tag">-rwxrwxrwt</span> 1 <span class="selector-tag">oldboy</span> <span class="selector-tag">oldboy</span> 7 <span class="selector-tag">May</span>  3 21<span class="selector-pseudo">:18</span> <span class="selector-tag">rsync</span><span class="selector-class">.password</span></span><br><span class="line"> -rwxrwxrwt 1 oldboy oldboy 0 May  3 21:16 rsync.password.10810.2020-05-03@21:18:19~</span><br></pre></td></tr></table></figure></li><li><p>创建一个文件并直接编辑文件的信息</p><p>管理端：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;content=&#x27;wuwei123&#x27; dest=/dat/wuwei01.txt&quot;    </span><br></pre></td></tr></table></figure><p>被管理端：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /data/wuwei.txt </span><br><span class="line"> <span class="selector-tag">wuwei123</span><span class="selector-attr">[root@nfs01 ~]</span>#     //这里已经成功,不过没有换行显示</span><br></pre></td></tr></table></figure></li><li><p>remote_src参数的用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">remote_src</span> <span class="selector-tag">directory_mode</span> <span class="selector-tag">local_follow</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">If</span> <span class="selector-tag">no</span>, <span class="selector-tag">it</span> <span class="selector-tag">will</span> <span class="selector-tag">search</span> <span class="selector-tag">for</span> <span class="selector-tag">src</span> <span class="selector-tag">at</span> <span class="selector-tag">originating</span>/<span class="selector-tag">master</span> <span class="selector-tag">machine</span>.</span><br><span class="line">  <span class="selector-tag">src</span>参数指定文件信息,会在本地管理端服务进行查找</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">If</span> <span class="selector-tag">yes</span> <span class="selector-tag">it</span> <span class="selector-tag">will</span> <span class="selector-tag">go</span> <span class="selector-tag">to</span> <span class="selector-tag">the</span> <span class="selector-tag">remote</span>/<span class="selector-tag">target</span> <span class="selector-tag">machine</span> <span class="selector-tag">for</span> <span class="selector-tag">the</span> <span class="selector-tag">src</span>.</span><br><span class="line">  <span class="selector-tag">src</span>参数指定文件信息,会从远程主机上进行查找</span><br></pre></td></tr></table></figure><p>管理端：第一个no的情况：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo 123 &gt;/wuwei/wuwei01.txt     //no的情况会将管理端文件的内容信息进行传输</span><br><span class="line">$ cat /wuwei/wuwei01.txt </span><br><span class="line"> 123</span><br><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;src=/wuwei/wuwei01.txt dest=/data&quot; </span><br></pre></td></tr></table></figure><p>被管理端：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /data</span><br><span class="line">$ cat /oldgirl/oldboy01.txt </span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>管理端：第二个yes的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m copy -a &quot;src=/data/wuwei01.txt dest=/wuwei remote_src=yes&quot;   </span><br><span class="line">$ cat /wuwei/wuwei01.txt         //yes的情况会将被管理端文件的内容信息进行传输</span><br><span class="line">123 </span><br></pre></td></tr></table></figure><p>被管理端：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo 456 &gt; /data/wuwei01.txt </span><br><span class="line">$ cat /data/wuwei01.txt</span><br><span class="line">456</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p><strong>PS：ansible软件copy模块复制目录信息</strong><br> ansible 172.16.1.31 -m copy -a “src=/data dest=/“<br> //src后面目录没有/：将目录本身以及目录下面的内容都进行远程传输复制</p><p> ansible 172.16.1.31 -m copy -a “src=/data/ dest=/wuwei”<br> //src后面目录有/：将目录下面的内容都进行远程传输复制</p></blockquote><h3 id="file-文件类型模块"><a href="#file-文件类型模块" class="headerlink" title="file(文件类型模块)"></a>file(文件类型模块)</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># file  Manage files and file properties  <span class="comment">//管理文件和文件属性、</span></span><br></pre></td></tr></table></figure><p><strong>简单用法</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改被动端的属主属组和读写执行权限</span></span><br><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/data/wuwei01.txt owner=wuwei group=wuwei mode=666&quot;</span><br></pre></td></tr></table></figure><p><strong>扩展用用法</strong></p><p>可以利用file模块创建数据信息（文件 目录 链接文件）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">state</span>  参数</span><br><span class="line"> <span class="selector-tag">a</span>. <span class="selector-tag">absent</span>      //缺席/删除数据信息</span><br><span class="line"> <span class="selector-tag">b</span>. <span class="selector-tag">directory</span>//创建一个目录信息</span><br><span class="line"> <span class="selector-tag">c</span>. <span class="selector-tag">file</span>        //检查创建的数据信息是否存在 绿色存在 红色不存在</span><br><span class="line"> <span class="selector-tag">d</span>. <span class="selector-tag">link</span>        //创建一个软链接文件</span><br><span class="line"> <span class="selector-tag">e</span>. <span class="selector-tag">hard</span>        //创建一个硬链接文件</span><br><span class="line"> <span class="selector-tag">f</span>. <span class="selector-tag">touch</span>       //创建一个文件信息</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>创建目录信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/wuwei/ state=directory&quot;</span><br><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/wuwei/wuwei1/wuwei2/ state=directory&quot;  </span><br></pre></td></tr></table></figure></li><li><p>创建文件信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/wuwei/wuwei001.txt state=touch&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建链接文件信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m file -a &quot;src=/wuwei/wuwei001.txt dest=/wuwei/wuwei001_hard.txt state=hard&quot;</span><br><span class="line">$ ansible 172.16.1.31 -m file -a &quot;src=/wuwei/wuwei001.txt dest=/wuwei/wuwei001_link.txt state=link&quot;</span><br></pre></td></tr></table></figure></li><li><p>递归修改文件属性 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Recursively</span> <span class="selector-tag">set</span> <span class="selector-tag">the</span> <span class="selector-tag">specified</span> <span class="selector-tag">file</span> <span class="selector-tag">attributes</span> <span class="selector-tag">on</span> <span class="selector-tag">directory</span> <span class="selector-tag">contents</span>.</span><br><span class="line"><span class="selector-tag">This</span> <span class="selector-tag">applies</span> <span class="selector-tag">only</span> <span class="selector-tag">when</span> <span class="selector-tag">state</span> <span class="selector-tag">is</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">directory</span>.</span><br><span class="line">//递归地对目录内容设置指定的文件属性，仅在当前状态设置目录</span><br></pre></td></tr></table></figure><p>管理端：yes的情况：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m file -a &quot;dest=/wuwei/ owner=www group=www recurse=yes&quot;</span><br></pre></td></tr></table></figure><p>被管理端：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//没改变之前</span><br><span class="line">$ ll /wuwei/</span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 01<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 02<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">root</span> <span class="selector-tag">root</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 03<span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//改变之后</span><br><span class="line">$ ll /wuwei/ </span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">www</span> <span class="selector-tag">www</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 01<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">www</span> <span class="selector-tag">www</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 02<span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-rw-r--r--</span> 1 <span class="selector-tag">www</span> <span class="selector-tag">www</span> 0 <span class="selector-tag">May</span>  3 22<span class="selector-pseudo">:02</span> 03<span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>#PS：recurse参数对目录和文件进行递归的改变权限和属性</strong></p></blockquote><h3 id="fetch-文件内容模块"><a href="#fetch-文件内容模块" class="headerlink" title="fetch(文件内容模块)"></a>fetch(文件内容模块)</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Fetch files from remote nodes  <span class="comment">//从远程节点获取文件</span></span><br></pre></td></tr></table></figure><p><strong>简单用法</strong></p><blockquote><p>#PS：注意一点的是fetsh无法拉去目录到管理端</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m fetch -a &quot;src=/data/1.txt dest=/aini/&quot;</span><br><span class="line"><span class="comment">//将被动端目录/data/1.txt拿去到管理端的/aini目录中，/aini目录不需要创建</span></span><br></pre></td></tr></table></figure><h3 id="yum模块"><a href="#yum模块" class="headerlink" title="yum模块"></a>yum模块</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Manages packages with teh yum package mangager  <span class="comment">//管理yum仓库的安装</span></span><br><span class="line"></span><br><span class="line"># name <span class="comment">//指定安装软件名很</span></span><br><span class="line"># state <span class="comment">//指定是否安装软件（状态）</span></span><br><span class="line">         install <span class="comment">//安装软件</span></span><br><span class="line">         present <span class="comment">//确保软件安装</span></span><br><span class="line">         latest  <span class="comment">//更新最新安装包</span></span><br><span class="line">         absent  <span class="comment">//卸载软禁</span></span><br><span class="line">         remove  <span class="comment">//移除        </span></span><br></pre></td></tr></table></figure><p><strong>使用方法</strong></p><blockquote><p>#PS：iotop软件可以查看IO的消耗</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m yum -a &quot;name=iotop state=installed&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被管理端查看</span></span><br><span class="line">$ rpm -qa|grep iotop</span><br><span class="line">iotop-0<span class="selector-class">.6-4</span><span class="selector-class">.el7</span><span class="selector-class">.noarch</span></span><br></pre></td></tr></table></figure><h3 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Manage services <span class="comment">//管理服务器的运行状态，停止，开启，重启</span></span><br><span class="line"></span><br><span class="line"># name   <span class="comment">//指定管理的服务名称</span></span><br><span class="line"># state  <span class="comment">//指定服务状态</span></span><br><span class="line">      started <span class="comment">//启动</span></span><br><span class="line">      stoped  <span class="comment">//停止</span></span><br><span class="line">      restarted <span class="comment">//重启</span></span><br><span class="line"># enabled <span class="comment">//指定服务开机是否重启</span></span><br></pre></td></tr></table></figure><p><strong>使用方法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m service -a &quot;name=httpd state=started&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被动检查</span></span><br><span class="line">$ systemctl status httpd</span><br></pre></td></tr></table></figure><h3 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Manage cron<span class="selector-class">.d</span> and crontab entries   <span class="comment">//管理定时任务</span></span><br><span class="line"></span><br><span class="line">minute：Minute when the job should run ( 0-59, *, */2, etc )</span><br><span class="line"><span class="comment">//设置分钟信息</span></span><br><span class="line"></span><br><span class="line">hour：Hour when the job should run ( 0-23, *, */2, etc )</span><br><span class="line"><span class="comment">//设置小时信息</span></span><br><span class="line"></span><br><span class="line">day：Day of the month the job should run ( 1-31, *, */2, etc )</span><br><span class="line"><span class="comment">//设置日期信息</span></span><br><span class="line"></span><br><span class="line">month：Month of the year the job should run ( 1-12, *, */2, etc )</span><br><span class="line"><span class="comment">//设置月份信息</span></span><br><span class="line"></span><br><span class="line">weekday：Day of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )</span><br><span class="line"><span class="comment">//设置星期信息</span></span><br><span class="line"> </span><br><span class="line">job ：The <span class="selector-tag">command</span> to execute or, if env is set, the value of environment variable.</span><br><span class="line">      The <span class="selector-tag">command</span> should not contain line breaks.</span><br><span class="line"><span class="comment">//用于定义定时任务需要干的事情</span></span><br></pre></td></tr></table></figure><p><strong>基本用法</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m cron -a &quot;minute=0 hour=2 job=&#x27;/usr/bin/netstat ntp1.aliyun.com  &amp;&gt;/dev/null&#x27;&quot;</span><br></pre></td></tr></table></figure><p><strong>扩展用法</strong></p><blockquote><ol><li><p>给定时任务设置注释信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m cron -a &quot;name=&#x27;sync tiem info&#x27; minute=0 hour=2 job=&#x27;/usr/bin/netstat ntp1.aliyun.com  &amp;&gt;/dev/null&#x27;&quot;</span><br></pre></td></tr></table></figure></li><li><p>如何删除指定定时任务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m cron -a &quot;name=&#x27;sync tiem info&#x27; minute=0 hour=2 job=&#x27;/usr/bin/netstat ntp1.aliyun.com  &amp;&gt;/dev/null&#x27; state=absent&quot;</span><br></pre></td></tr></table></figure></li><li><p>如何批量注释定时任务</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m cron -a &quot;name=&#x27;sync tiem info&#x27; minute=0 hour=2 job=&#x27;/usr/bin/netstat nep1.aliyun.com  &amp;&gt;/dev/null&#x27; disabled=yes&quot;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="mount模块"><a href="#mount模块" class="headerlink" title="mount模块"></a>mount模块</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Control active and configured mount points <span class="comment">//管理挂载节点</span></span><br><span class="line"></span><br><span class="line"># mount：   <span class="comment">//批量进行挂载操作</span></span><br><span class="line">     <span class="attribute">src</span>：  <span class="comment">//需要挂载的源设备或文件信息</span></span><br><span class="line"> path： <span class="comment">//指定目标挂载点目录</span></span><br><span class="line"> fstype：<span class="comment">//指定挂载时的文件系统类型</span></span><br><span class="line"> state：<span class="comment">//状态</span></span><br><span class="line"> present/mounted：//进行挂载</span><br><span class="line"> present：<span class="comment">//不会实现立即挂载,而是修改fstab文件,实现开机自动挂载</span></span><br><span class="line"> mounted：<span class="comment">//会实现立即挂载,并且会修改fstab文件,实现开机自动挂载*****</span></span><br><span class="line"> </span><br><span class="line"> absent/umounted：//进行挂载</span><br><span class="line"> absent：<span class="comment">//会实现立即挂载,并且会删除fstab文件信息,禁止开机自动挂载</span></span><br><span class="line"> unmounted：<span class="comment">//会实现立即卸载,但是不会删除fstab文件信息</span></span><br></pre></td></tr></table></figure><p><strong>基本用法</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.41 -m mount -a &quot;src=172.16.1.31:/data path=/mnt fstype=nfs state=present&quot; </span><br><span class="line"><span class="comment">//不会立即挂载,会在文件fstab开机自动挂载</span></span><br><span class="line"></span><br><span class="line">$ ansible 172.16.1.41 -m mount -a &quot;src=172.16.1.31:/data path=/mnt fstype=nfs state=absent&quot;</span><br><span class="line"><span class="comment">//立即卸载,文件fstab内容也会删除,禁止开机自动挂载</span></span><br><span class="line"></span><br><span class="line">$ ansible 172.16.1.41 -m mount -a &quot;src=172.16.1.31:/data path=/mnt fstype=nfs state=mounted&quot;</span><br><span class="line"><span class="comment">//立即挂载,并会在文件fstab实现开机自动挂载</span></span><br><span class="line"></span><br><span class="line">$ ansible 172.16.1.41 -m mount -a &quot;src=172.16.1.31:/data path=/mnt fstype=nfs state=unmounted&quot;</span><br><span class="line"><span class="comment">//卸载挂载,但不会删除文件fstab的开机自动挂载</span></span><br></pre></td></tr></table></figure><h3 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h3><p><strong>描述</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Manage user acconts         <span class="comment">//用户管理</span></span><br></pre></td></tr></table></figure><p><strong>基本用法</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 10.0.0.211 -m user -a &quot;name=wuwei01&quot;</span><br></pre></td></tr></table></figure><p><strong>扩展用法</strong></p><blockquote><ol><li><p>指定用户uid信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31  -m user -a &quot;name=wuwei02 uid=6666&quot;</span><br></pre></td></tr></table></figure></li><li><p>指定用户组信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &quot;name=wuwei02 group=wuwei01&quot;</span><br></pre></td></tr></table></figure></li><li><p>改变用户组信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &quot;name=wuwei02 groups=wuwei01&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &quot;name=rsync create_home=no shell=/sbin/nologin&quot;</span><br><span class="line">  <span class="selector-tag">create_home</span>  // 指定家目录<span class="selector-tag">yes</span>为有家目录,<span class="selector-tag">no</span>取消家目录</span><br><span class="line">  <span class="selector-tag">shell</span>        // 指定登录方式</span><br></pre></td></tr></table></figure></li><li><p>给指定用户创建密码(直接定义密码信息,只会显示明文的密码)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &quot;name=wuwei04 password=123456&quot;</span><br><span class="line">$ tail -1 /etc/shadow</span><br><span class="line"><span class="selector-tag">wuwei04</span><span class="selector-pseudo">:123456</span><span class="selector-pseudo">:18386</span><span class="selector-pseudo">:0</span><span class="selector-pseudo">:99999</span><span class="selector-pseudo">:7</span>:::</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>利用ansible程序user模块设置用户密码信息,需要将密码明文信息转换成密文信息进行设置生成密文密码信息方法：</p><blockquote><ul><li><p>方法一：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ansible all -i localhost, -m debug -a &quot;msg=&#123;&#123; &#x27;mypassword&#x27; | password_hash(&#x27;sha512&#x27;, &#x27;mysecretsalt&#x27;) &#125;&#125;&quot;</span><br><span class="line"></span><br><span class="line">$ ansible all -i localhost, -m debug -a &quot;msg=&#123;&#123; &#x27;123456&#x27; | password_hash(&#x27;sha512&#x27;, &#x27;mysecretsalt&#x27;) &#125;&#125;&quot;</span><br><span class="line">localhost | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;msg&quot;: &quot;$6$mysecretsalt$ZB9R8AirQYAXhtfhOo2qdJz52FyNI6v3L6Uc3KNRP.arBKIYpcuEyQewT5qBAHoyQFwHkW6Z551Ql.cZ53GeY0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//参数说明</span><br><span class="line"> mypassword == 密码信息 == 123456 </span><br><span class="line"> sha512 == 加密的方式</span><br><span class="line"> mysecretsalt == 校验码信息（防止密码被反推）</span><br><span class="line"> &quot;msg&quot;：xxxx == 生成的密码 </span><br></pre></td></tr></table></figure></li><li><p>方法二：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y expect</span><br><span class="line">$ mkpasswd -l 20 -d 5 -s 3 -C 5</span><br><span class="line"><span class="keyword">@qIf7</span>&#x27;1&#x27;CioAsH38Q4ye</span><br></pre></td></tr></table></figure></li><li><p>方法三：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y python-pip</span><br><span class="line">$ pip install passlib</span><br><span class="line">$ python -c &quot;from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))&quot;</span><br><span class="line"> <span class="selector-tag">Password</span>: </span><br><span class="line"> $6$iHeFVbjorAtftiCG$hFYJueDj61FN3HkTULjlI1uwegJ74RmJpHz7EfWrZWmhZHVX2Z3ir9j9i4IkeFtUMXjh5rQcCBn9w9G2sWzNE1</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>添加用户，使用密文</p><blockquote><ul><li><p>错误传输方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &quot;name=wuwei05 password=$6$iHeFVbjorAtftiCG$hFYJueDj61FN3HkTULjlI1uwegJ74RmJpHz7EfWrZWmhZHVX2Z3ir9j9i4IkeFtUMXjh5rQcCBn9w9G2sWzNE1&quot;</span><br><span class="line">$ tail -1 /etc/shadow</span><br><span class="line"><span class="selector-tag">wuwei05</span><span class="selector-pseudo">::18386</span><span class="selector-pseudo">:0</span><span class="selector-pseudo">:99999</span><span class="selector-pseudo">:7</span>:::</span><br></pre></td></tr></table></figure></li><li><p>正确的传输方式：需要使’’单引号括起来,不能使用””双引号（在shell命令行中,使用””里面有$符号，就转换成变量，执行时候是显示空）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ansible 172.16.1.31 -m user -a &#x27;name=wuwei06 password=$6$iHeFVbjorAtftiCG$hFYJueDj61FN3HkTULjlI1uwegJ74RmJpHz7EfWrZWmhZHVX2Z3ir9j9i4IkeFtUMXjh5rQcCBn9w9G2sWzNE1&#x27;</span><br><span class="line"> $ tail -1 /etc/shadow</span><br><span class="line"> wuwei:$6$iHeFVbjorAtftiCG$hFYJueDj61FN3HkTULjlI1uwegJ74RmJpHz7EfWrZWmhZHVX2Z3ir9j9i4IkeFtUMXjh5rQcCBn9w9G2sWzNE1:18386:0:99999:7:::</span><br></pre></td></tr></table></figure></li><li><p>登录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su - wuwei</span><br><span class="line"> $ su - wuwei06</span><br><span class="line"> <span class="selector-tag">Password</span>: </span><br><span class="line"> [wuwei@nfs01 ~]$ </span><br></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix服务深入扩展</title>
      <link href="2021/01/26/zabbix%E6%9C%8D%E5%8A%A1%E6%B7%B1%E5%85%A5%E6%89%A9%E5%B1%95/"/>
      <url>2021/01/26/zabbix%E6%9C%8D%E5%8A%A1%E6%B7%B1%E5%85%A5%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix服务深入扩展"><a href="#zabbix服务深入扩展" class="headerlink" title="zabbix服务深入扩展"></a>zabbix服务深入扩展</h1><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><h3 id="Grafana介绍"><a href="#Grafana介绍" class="headerlink" title="Grafana介绍"></a>Grafana介绍</h3><p>Grafana是一个跨平台的开源的度量分析和可视化工具，可以通过将采集的数据查询然后可视化的展示，并及时通知。它主要有以下六大特点</p><blockquote><ol><li><p>展示方式：快速灵活的客户端图表，面板插件有许多不同方式的可视化指标和日志，官方库中具有丰富的仪表盘插件，比如热图、折线图、图表等多种展示方式；</p></li><li><p>数据源：Graphite，InfluxDB，OpenTSDB，Prometheus，Elasticsearch，CloudWatch和KairosDB等；</p></li><li><p>通知提醒：以可视方式定义最重要指标的警报规则，Grafana将不断计算并发送通知，在数据达到阈值时通过Slack、PagerDuty等获得通知；</p></li><li><p>混合展示：在同一图表中混合使用不同的数据源，可以基于每个查询指定数据源，甚至自定义数据源；</p></li><li><p>注释：使用来自不同数据源的丰富事件注释图表，将鼠标悬停在事件上会显示完整的事件元数据和标记；</p></li><li><p>过滤器：Ad-hoc过滤器允许动态创建新的键/值过滤器，这些过滤器会自动应用于使用该数据源的所有查询。</p></li></ol></blockquote><h3 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h3><blockquote><p>官方下载地址：<a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.grafana.com/oss/release/grafana-7.1.5-1.x86_64.rpm</span><br><span class="line">$ yum localinstall grafana-6.3.2-1.x86_64.rpm -y</span><br><span class="line">$ systemctl start grafana-server.service   </span><br><span class="line">$ systemctl enable grafana-server.service</span><br><span class="line">$ netstat -lntup|grep 3000</span><br><span class="line"><span class="selector-tag">tcp6</span>       0      0 :<span class="selector-pseudo">::3000</span>                 :::*                    <span class="selector-tag">LISTEN</span>      67196/<span class="selector-tag">grafana-serve</span></span><br></pre></td></tr></table></figure><p><strong>浏览访问gragana:http//10.0.0.61:3000，账号密码:admin admin</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181830.png"></p><h3 id="安装并激活zabbix插件"><a href="#安装并激活zabbix插件" class="headerlink" title="安装并激活zabbix插件"></a>安装并激活zabbix插件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ grafana-cli plugins list-remote|grep zabbix</span><br><span class="line"><span class="selector-tag">id</span>: <span class="selector-tag">alexanderzobnin-zabbix-app</span> <span class="selector-tag">version</span>: 3.10.4</span><br><span class="line">$ grafana-cli plugins install alexanderzobnin-zabbix-app</span><br><span class="line"></span><br><span class="line">$ systemctl restart grafana-server.service</span><br></pre></td></tr></table></figure><p><strong>web操作-激活zabbix插件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181831.png"></p><p><strong>web操作-添加zabbix数据源</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181832.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181833.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181834.png"></p><p><strong>web操作-导入模板</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181835.png"></p><h3 id="数据展示"><a href="#数据展示" class="headerlink" title="数据展示"></a>数据展示</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181836.png"></p><h2 id="percona导入mysql模板"><a href="#percona导入mysql模板" class="headerlink" title="percona导入mysql模板"></a>percona导入mysql模板</h2><h3 id="Percona介绍"><a href="#Percona介绍" class="headerlink" title="Percona介绍"></a>Percona介绍</h3><p>Percona Server由领先的MySQL咨询公司Percona发布。 Percona Server是一款独立的数据库产品，其可以完全与MySQL兼容，可以在不更改代码的情况了下将存储引擎更换成XtraDB</p><p>Percona团队的最终声明是“Percona Server是由Oracle发布的最接近官方MySQL Enterprise发行版的版本”，因此与其他更改了大量基本核心MySQL代码的分支有所区别。 Percona Server的一个缺点是他们自己管理代码，不接受外部开发人员的贡献，以这种方式确保他们对产品中所包含功能的控制</p><p>Percona提供了高性能XtraDB引擎，还提供PXC高可用解决方案，并且附带了perconatoolkit等DBA管理工具箱</p><h3 id="安装PHP环境"><a href="#安装PHP环境" class="headerlink" title="安装PHP环境"></a>安装PHP环境</h3><p><strong>Percona需要PHP环境</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install php php-mysql -y     //如果有安装则不需要此步骤</span><br></pre></td></tr></table></figure><h3 id="下载软件位置"><a href="#下载软件位置" class="headerlink" title="下载软件位置"></a>下载软件位置</h3><blockquote><p>官方下载地址：<a href="https://www.percona.com/downloads/percona-monitoring-plugins/">https://www.percona.com/downloads/percona-monitoring-plugins/</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181837.png">    </p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181838.png"></p><blockquote><p><strong>注意：安装完成后会有提示模板的路径位置</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt/soft/</span><br><span class="line">$ wget https://www.percona.com/downloads/percona-monitoring-plugins/percona-monitoring-plugins-1.1.8/binary/redhat/7/x86_64/percona-zabbix-templates-1.1.8-1.noarch.rpm</span><br><span class="line">$ rpm -ivh percona-zabbix-templates-1.1.8-1.noarch.rpm </span><br><span class="line">警告：<span class="selector-tag">percona-zabbix-templates-1</span>.1.8<span class="selector-tag">-1</span><span class="selector-class">.noarch</span><span class="selector-class">.rpm</span>: 头<span class="selector-tag">V4</span> <span class="selector-tag">DSA</span>/<span class="selector-tag">SHA1</span> <span class="selector-tag">Signature</span>, 密钥 <span class="selector-tag">ID</span> <span class="selector-tag">cd2efd2a</span>: <span class="selector-tag">NOKEY</span></span><br><span class="line">准备中...                          ################################# <span class="selector-attr">[100%]</span></span><br><span class="line">正在升级/安装...</span><br><span class="line">  1<span class="selector-pseudo">:percona-zabbix-templates-1.1.8-1</span> ################################# <span class="selector-attr">[100%]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Scripts</span> <span class="selector-tag">are</span> <span class="selector-tag">installed</span> <span class="selector-tag">to</span> /<span class="selector-tag">var</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">zabbix</span>/<span class="selector-tag">percona</span>/<span class="selector-tag">scripts</span>                              //文件的脚本位置</span><br><span class="line"><span class="selector-tag">Templates</span> <span class="selector-tag">are</span> <span class="selector-tag">installed</span> <span class="selector-tag">to</span> /<span class="selector-tag">var</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">zabbix</span>/<span class="selector-tag">percona</span>/<span class="selector-tag">templates</span>                          //文件的<span class="selector-tag">MySQL</span>模板位置</span><br></pre></td></tr></table></figure><h3 id="查看目录"><a href="#查看目录" class="headerlink" title="查看目录"></a>查看目录</h3><p><strong>进入安装目录会发现有2个目录，一个是脚本目录，一个是模板目录</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /var/lib/zabbix/percona</span><br><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── <span class="selector-tag">scripts</span></span><br><span class="line">│   ├── <span class="selector-tag">get_mysql_stats_wrapper</span><span class="selector-class">.sh</span></span><br><span class="line">│   └── <span class="selector-tag">ss_get_mysql_stats</span><span class="selector-class">.php</span></span><br><span class="line">└── <span class="selector-tag">templates</span></span><br><span class="line">    ├── <span class="selector-tag">userparameter_percona_mysql</span><span class="selector-class">.conf</span></span><br><span class="line">    └── <span class="selector-tag">zabbix_agent_template_percona_mysql_server_ht_2</span>.0.9<span class="selector-tag">-sver1</span>.1.8<span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure><p><strong>其中脚本目录里有2个脚本，用来获取数据信息</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd scripts/</span><br><span class="line">$ ls</span><br><span class="line">get_mysql_stats_wrapper<span class="selector-class">.sh</span>  ss_get_mysql_stats<span class="selector-class">.php</span></span><br></pre></td></tr></table></figure><h3 id="修改get-mysql-stats-warpper-sh文件"><a href="#修改get-mysql-stats-warpper-sh文件" class="headerlink" title="修改get_mysql_stats_warpper.sh文件"></a>修改get_mysql_stats_warpper.sh文件</h3><p><strong>编辑get_mysql_stats_warpper.sh增加用户和密码</strong></p><blockquote><p>mysql -e xxx 改成  mysql -uroot -p123456 -e xxx</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;RES&quot; get_mysql_stats_wrapper.sh </span><br><span class="line">    RES=`HOME=~zabbix mysql -uroot -p123456 -e &#x27;SHOW SLAVE STATUS\G&#x27; | egrep &#x27;(Slave_IO_Running|Slave_SQL_Running):&#x27; | awk -F: &#x27;&#123;print $2&#125;&#x27; | tr &#x27;\n&#x27; &#x27;,&#x27;`</span><br></pre></td></tr></table></figure><h3 id="编辑ss-get-mysql-stats-php"><a href="#编辑ss-get-mysql-stats-php" class="headerlink" title="编辑ss_get_mysql_stats.php"></a>编辑ss_get_mysql_stats.php</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -E &quot;mysql_user|mysql_pass&quot; ss_get_mysql_stats.php </span><br><span class="line">  $mysql_user = &#x27;root&#x27;;</span><br><span class="line">  $mysql_pass = &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h3 id="复制自定义监控项配置文件到zabbix目录"><a href="#复制自定义监控项配置文件到zabbix目录" class="headerlink" title="复制自定义监控项配置文件到zabbix目录"></a>复制自定义监控项配置文件到zabbix目录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">var</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">zabbix</span>/<span class="selector-tag">percona</span>/<span class="selector-tag">templates</span></span><br><span class="line">$ cp -a userparameter_percona_mysql.conf /etc/zabbix/zabbix_agentd.d/</span><br></pre></td></tr></table></figure><p><strong>查看文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/zabbix/zabbix_agentd.d/</span><br><span class="line">$ ls</span><br><span class="line">userparameter_mysql<span class="selector-class">.conf</span>  userparameter_percona_mysql<span class="selector-class">.conf</span></span><br></pre></td></tr></table></figure><h3 id="重启zabbix-agent"><a href="#重启zabbix-agent" class="headerlink" title="重启zabbix-agent"></a>重启zabbix-agent</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="测试key"><a href="#测试key" class="headerlink" title="测试key"></a>测试key</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 127.0.0.1 -k MySQL.rows-read</span><br><span class="line">18825</span><br><span class="line">$ zabbix_get -s 127.0.0.1 -k MySQL.lock-system-memory</span><br><span class="line">337760</span><br></pre></td></tr></table></figure><h3 id="导入模板"><a href="#导入模板" class="headerlink" title="导入模板"></a>导入模板</h3><blockquote><p><strong>官方自带的模板有点问题,需要先装在2.x版本然后导出来，只好使用网友修改好的模板:<a href="http://pan.baidu.com/s/1pL1wDYj">http://pan.baidu.com/s/1pL1wDYj</a></strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181839.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181840.png" alt="    "></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181841.png"></p><h3 id="主机链接模板"><a href="#主机链接模板" class="headerlink" title="主机链接模板"></a>主机链接模板</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181842.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181843.png"></p><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><p>查看监控发现没有数据，显示不支持类型，再查看zabbix-server发现因为tmp的文件没有权限，因为刚才手动执行了脚本，所以文件属性是root，将文件删除后由zabbix自己创建解决问题</p><p><strong>报错日志如下：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2846<span class="selector-pseudo">:20190811</span><span class="selector-pseudo">:202708.785</span> <span class="selector-tag">item</span> &quot;<span class="selector-tag">Zabbix</span> <span class="selector-tag">server</span><span class="selector-pseudo">:MySQL.State-init&quot;</span> <span class="selector-tag">became</span> <span class="selector-tag">not</span> <span class="selector-tag">supported</span>: <span class="selector-tag">Value</span> &quot;<span class="selector-tag">rm</span>: 无法删除&quot;/<span class="selector-tag">tmp</span>/<span class="selector-tag">localhost-mysql_cacti_stats</span><span class="selector-class">.txt</span>&quot;: 不允许的操作</span><br><span class="line">0&quot; <span class="selector-tag">of</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">string</span>&quot; <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">suitable</span> <span class="selector-tag">for</span> <span class="selector-tag">value</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">Numeric</span> (<span class="selector-tag">float</span>)&quot;</span><br><span class="line">2843<span class="selector-pseudo">:20190811</span><span class="selector-pseudo">:202709.787</span> <span class="selector-tag">item</span> &quot;<span class="selector-tag">Zabbix</span> <span class="selector-tag">server</span><span class="selector-pseudo">:MySQL.State-locked&quot;</span> <span class="selector-tag">became</span> <span class="selector-tag">not</span> <span class="selector-tag">supported</span>: <span class="selector-tag">Value</span> &quot;<span class="selector-tag">rm</span>: 无法删除&quot;/<span class="selector-tag">tmp</span>/<span class="selector-tag">localhost-mysql_cacti_stats</span><span class="selector-class">.txt</span>&quot;: 不允许的操作</span><br><span class="line">0&quot; <span class="selector-tag">of</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">string</span>&quot; <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">suitable</span> <span class="selector-tag">for</span> <span class="selector-tag">value</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">Numeric</span> (<span class="selector-tag">float</span>)&quot;</span><br><span class="line">2844<span class="selector-pseudo">:20190811</span><span class="selector-pseudo">:202710.788</span> <span class="selector-tag">item</span> &quot;<span class="selector-tag">Zabbix</span> <span class="selector-tag">server</span><span class="selector-pseudo">:MySQL.State-login&quot;</span> <span class="selector-tag">became</span> <span class="selector-tag">not</span> <span class="selector-tag">supported</span>: <span class="selector-tag">Value</span> &quot;<span class="selector-tag">rm</span>: 无法删除&quot;/<span class="selector-tag">tmp</span>/<span class="selector-tag">localhost-mysql_cacti_stats</span><span class="selector-class">.txt</span>&quot;: 不允许的操作</span><br><span class="line">0&quot; <span class="selector-tag">of</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">string</span>&quot; <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">suitable</span> <span class="selector-tag">for</span> <span class="selector-tag">value</span> <span class="selector-tag">type</span> &quot;<span class="selector-tag">Numeric</span> (<span class="selector-tag">float</span>)&quot;</span><br></pre></td></tr></table></figure><h2 id="自动发现和自动注册"><a href="#自动发现和自动注册" class="headerlink" title="自动发现和自动注册"></a>自动发现和自动注册</h2><h3 id="自动发现"><a href="#自动发现" class="headerlink" title="自动发现"></a>自动发现</h3><p><strong>web页面操作</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181844.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181845.png"></p><p><strong>动作中开启自动发现</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181846.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181847.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181848.png"></p><p><strong>配置web主机agent配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf</span><br><span class="line">PidFile&#x3D;&#x2F;var&#x2F;run&#x2F;zabbix&#x2F;zabbix_agentd.pid</span><br><span class="line">LogFile&#x3D;&#x2F;var&#x2F;log&#x2F;zabbix&#x2F;zabbix_agentd.log</span><br><span class="line">LogFileSize&#x3D;0</span><br><span class="line">Server&#x3D;10.0.0.71</span><br><span class="line">ServerActive&#x3D;10.0.0.71</span><br><span class="line">Hostname&#x3D;web01</span><br><span class="line">Include&#x3D;&#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;*.conf</span><br></pre></td></tr></table></figure><p><strong>设置web主机的/etc/hosts文件,对IP地址进行解析</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.71</span>       zabbix</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span>        web01</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span>        web02</span><br><span class="line"></span><br><span class="line">$ vi /etc/hosts</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.71</span>       zabbix</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span>        web01</span><br><span class="line">10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span>        web02</span><br></pre></td></tr></table></figure><p><strong>最后刷新页面查看</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181849.png"></p><h3 id="自动注册"><a href="#自动注册" class="headerlink" title="自动注册"></a>自动注册</h3><p><strong>web页面操作</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181850.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181851.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181852.png"></p><p><strong>刷新页面看到的结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181853.png"></p><h2 id="主动模式和被动模式"><a href="#主动模式和被动模式" class="headerlink" title="主动模式和被动模式"></a>主动模式和被动模式</h2><blockquote><ol><li><p>默认为被动模式：100个监控项要100来回，客户端执行一个返回一个</p></li><li><p>主动模式：100个监控项1个回合，将所有需要的100个打包，然后一次发过去给客户端，客户端全部执行完再一次返回给服务端</p></li></ol></blockquote><h3 id="克隆模板"><a href="#克隆模板" class="headerlink" title="克隆模板"></a>克隆模板</h3><p><strong>完全克隆原来被动模式的模板为主动模式</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181854.png"></p><h3 id="修改克隆后的模板为主动模式"><a href="#修改克隆后的模板为主动模式" class="headerlink" title="修改克隆后的模板为主动模式"></a>修改克隆后的模板为主动模式</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181855.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181856.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181857.png"></p><h3 id="修改监控主机关联的模板为主动模式"><a href="#修改监控主机关联的模板为主动模式" class="headerlink" title="修改监控主机关联的模板为主动模式"></a>修改监控主机关联的模板为主动模式</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181858.png"></p><h3 id="查看最新数据"><a href="#查看最新数据" class="headerlink" title="查看最新数据"></a>查看最新数据</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181859.png"></p><h2 id="低级自动发现"><a href="#低级自动发现" class="headerlink" title="低级自动发现"></a>低级自动发现</h2><blockquote><p>应用于</p><ul><li>mysql多实例 3307 3308</li><li>磁盘多个分区  /  /swap</li><li>网卡 eth0  eth1 有几块网卡我就监控几块网卡的流量</li><li>端口 80 3306</li></ul></blockquote><h3 id="查看系统自带分区自动发现"><a href="#查看系统自带分区自动发现" class="headerlink" title="查看系统自带分区自动发现"></a>查看系统自带分区自动发现</h3><p><strong>1. 系统知道的自动发现会显示红字，比如自带的磁盘分区发现规则</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Free disk space on &#123;#FSNAME&#125;</span><br><span class="line"><span class="selector-tag">Mounted</span> <span class="selector-tag">filesystem</span> <span class="selector-tag">discovery</span>: <span class="selector-tag">Free</span> <span class="selector-tag">disk</span> <span class="selector-tag">space</span> <span class="selector-tag">on</span> /</span><br><span class="line"><span class="selector-tag">Mounted</span> <span class="selector-tag">filesystem</span> <span class="selector-tag">discovery</span>: <span class="selector-tag">Free</span> <span class="selector-tag">disk</span> <span class="selector-tag">space</span> <span class="selector-tag">on</span> /<span class="selector-tag">boot</span></span><br><span class="line"><span class="selector-tag">Mounted</span> <span class="selector-tag">filesystem</span> <span class="selector-tag">discovery</span>: <span class="selector-tag">Free</span> <span class="selector-tag">disk</span> <span class="selector-tag">space</span> <span class="selector-tag">on</span> /<span class="selector-tag">mount01</span></span><br><span class="line"><span class="selector-tag">Mounted</span> <span class="selector-tag">filesystem</span> <span class="selector-tag">discovery</span>: <span class="selector-tag">Free</span> <span class="selector-tag">disk</span> <span class="selector-tag">space</span> <span class="selector-tag">on</span> /<span class="selector-tag">mount02</span></span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181900.png"></p><p><strong>2. 点击红色字符</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181901.png"></p><p><strong>3. 查看文件系统的过滤器</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181902.png"></p><p><strong>4. 查看到zabbix使用正则表达式过滤的文件系统只有这些类型</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|usf|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126182924.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181904.png"></p><p><strong>5. 查看系统mount命令下的所有挂载的文件系统</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ mount |awk &#x27;&#123;print $5,$3&#125;&#x27;</span><br><span class="line"><span class="selector-tag">sysfs</span> /<span class="selector-tag">sys</span></span><br><span class="line"><span class="selector-tag">proc</span> /<span class="selector-tag">proc</span></span><br><span class="line"><span class="selector-tag">devtmpfs</span> /<span class="selector-tag">dev</span></span><br><span class="line"><span class="selector-tag">securityfs</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">kernel</span>/<span class="selector-tag">security</span></span><br><span class="line"><span class="selector-tag">tmpfs</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">shm</span></span><br><span class="line"><span class="selector-tag">devpts</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">pts</span></span><br><span class="line"><span class="selector-tag">tmpfs</span> /<span class="selector-tag">run</span></span><br><span class="line"><span class="selector-tag">tmpfs</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">systemd</span></span><br><span class="line"><span class="selector-tag">pstore</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">pstore</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">blkio</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">memory</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">net_cls</span>,<span class="selector-tag">net_prio</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">cpu</span>,<span class="selector-tag">cpuacct</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">perf_event</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">freezer</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">devices</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">cpuset</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">pids</span></span><br><span class="line"><span class="selector-tag">cgroup</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">cgroup</span>/<span class="selector-tag">hugetlb</span></span><br><span class="line"><span class="selector-tag">configfs</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">kernel</span>/<span class="selector-tag">config</span></span><br><span class="line"><span class="selector-tag">xfs</span> /</span><br><span class="line"><span class="selector-tag">autofs</span> /<span class="selector-tag">proc</span>/<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">binfmt_misc</span></span><br><span class="line"><span class="selector-tag">hugetlbfs</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">hugepages</span></span><br><span class="line"><span class="selector-tag">mqueue</span> /<span class="selector-tag">dev</span>/<span class="selector-tag">mqueue</span></span><br><span class="line"><span class="selector-tag">debugfs</span> /<span class="selector-tag">sys</span>/<span class="selector-tag">kernel</span>/<span class="selector-tag">debug</span></span><br><span class="line"><span class="selector-tag">iso9660</span> /<span class="selector-tag">media</span>/<span class="selector-tag">cdrom</span></span><br><span class="line"><span class="selector-tag">xfs</span> /<span class="selector-tag">boot</span></span><br><span class="line"><span class="selector-tag">rpc_pipefs</span> /<span class="selector-tag">var</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">nfs</span>/<span class="selector-tag">rpc_pipefs</span></span><br><span class="line"><span class="selector-tag">tmpfs</span> /<span class="selector-tag">run</span>/<span class="selector-tag">user</span>/0</span><br><span class="line"><span class="selector-tag">binfmt_misc</span> /<span class="selector-tag">proc</span>/<span class="selector-tag">sys</span>/<span class="selector-tag">fs</span>/<span class="selector-tag">binfmt_misc</span></span><br></pre></td></tr></table></figure><p><strong>6. 说明:在zabbix显示的并没有那么多，原因是使用正则表达式过滤了</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|usf|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</span><br></pre></td></tr></table></figure><p> <strong>7. zabbix低自动发现分区过程</strong></p><blockquote><ol><li>自动发现客户端上的所有分区</li><li>根据条件过滤掉不需要的分区类型</li><li>将剩下的符合条件的分区类型自动添加到监控项</li><li>使用宏变量替换不同的地址</li></ol></blockquote><p><strong>8. 查看zabbix所有的key过滤后展示</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_agentd -p|grep vfs.fs.discovery</span><br><span class="line"><span class="selector-tag">vfs</span><span class="selector-class">.fs</span><span class="selector-class">.discovery</span>                              <span class="selector-attr">[s|&#123;<span class="string">&quot;data&quot;</span>:[&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;rootfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;sysfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/proc&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;proc&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/dev&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;devtmpfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/kernel/security&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;securityfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/dev/shm&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;tmpfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/dev/pts&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;devpts&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/run&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;tmpfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;tmpfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/systemd&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/pstore&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;pstore&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/blkio&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/memory&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/net_cls,net_prio&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/cpu,cpuacct&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/perf_event&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/freezer&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/devices&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/cpuset&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/pids&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/fs/cgroup/hugetlb&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;cgroup&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/kernel/config&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;configfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;xfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/proc/sys/fs/binfmt_misc&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;autofs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/dev/hugepages&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;hugetlbfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/dev/mqueue&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;mqueue&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/sys/kernel/debug&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;debugfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/media/cdrom&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;iso9660&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/boot&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;xfs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/var/lib/nfs/rpc_pipefs&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;rpc_pipefs&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#FSNAME&#125;&quot;</span>:<span class="string">&quot;/run/user/0&quot;</span>,<span class="string">&quot;&#123;#FSTYPE&#125;&quot;</span>:<span class="string">&quot;tmpfs&quot;</span>&#125;]</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>9. 解析成json后的格式:<a href="https://www.sojson.com/">https://www.sojson.com/</a></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;data&quot;: [&#123;</span><br><span class="line">&quot;&#123;#FSNAME&#125;&quot;: &quot;/&quot;,</span><br><span class="line">&quot;&#123;#FSTYPE&#125;&quot;: &quot;rootfs&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;&#123;#FSNAME&#125;&quot;: &quot;/sys&quot;,</span><br><span class="line">&quot;&#123;#FSTYPE&#125;&quot;: &quot;sysfs&quot;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">&quot;&#123;#FSNAME&#125;&quot;: &quot;/proc&quot;,</span><br><span class="line">&quot;&#123;#FSTYPE&#125;&quot;: &quot;proc&quot;</span><br><span class="line">&#125;</span><br><span class="line">    .......................省略</span><br><span class="line">&#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p><strong>10. 使用zabbix_get获取key</strong></p><p> 因为根据过滤规则，只发现了一个xfs的key，使用zabbix_get可以查看到这个key</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_agentd -p|grep vfs.fs.size</span><br><span class="line"><span class="selector-tag">vfs</span><span class="selector-class">.fs</span><span class="selector-class">.size</span><span class="selector-attr">[/,free]</span>                           <span class="selector-attr">[u|3967389696]</span></span><br><span class="line">$ zabbix_get -s 10.0.0.8 -k vfs.fs.size[/,free]  </span><br><span class="line">3500814336</span><br></pre></td></tr></table></figure><h3 id="查看系统自带的网卡自动发现"><a href="#查看系统自带的网卡自动发现" class="headerlink" title="查看系统自带的网卡自动发现"></a>查看系统自带的网卡自动发现</h3><p><strong>1. 查看网络自动发现规则</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181905.png"></p><p><strong>2. 过滤规则</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181906.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181907.png"></p><p><strong>3. 命令行过滤</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_agentd -p|grep net.if.discovery</span><br><span class="line"><span class="selector-tag">net</span><span class="selector-class">.if</span><span class="selector-class">.discovery</span>                              <span class="selector-attr">[s|&#123;<span class="string">&quot;data&quot;</span>:[&#123;<span class="string">&quot;&#123;#IFNAME&#125;&quot;</span>:<span class="string">&quot;eth0&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#IFNAME&#125;&quot;</span>:<span class="string">&quot;eth1&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#IFNAME&#125;&quot;</span>:<span class="string">&quot;lo&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#IFNAME&#125;&quot;</span>:<span class="string">&quot;virbr0-nic&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#IFNAME&#125;&quot;</span>:<span class="string">&quot;virbr0&quot;</span>&#125;]</span>&#125;]</span><br><span class="line">^Czabbix_agentd [56290]: Warning: Got signal [signal:2(SIGINT),sender_pid:0,sender_uid:0,reason:128</span><br></pre></td></tr></table></figure><p><strong>4. 查看自动添加的监控项</strong></p><blockquote><p>2个eth0<br>2个eth1</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181908.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181909.png"></p><p><strong>5. 查看key的值</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 10.0.0.8 -k net.if.in[eth0]</span><br><span class="line">5767491</span><br><span class="line">$ zabbix_get -s 10.0.0.8 -k net.if.in[eth1]</span><br><span class="line">3120</span><br></pre></td></tr></table></figure><h3 id="监控mysql多实例"><a href="#监控mysql多实例" class="headerlink" title="监控mysql多实例"></a>监控mysql多实例</h3><p><strong>1. 复制并修改数据库配置文件(3307 3308）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/my.cnf /etc/my3307.cnf</span><br><span class="line">$ vim /etc/my3307.cnf</span><br><span class="line">$ cat /etc/my3307.cnf                                              //编写配置文件</span><br><span class="line"><span class="selector-attr">[mysqld]</span></span><br><span class="line">datadir=/data/3307/</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">port=3307</span><br><span class="line">user=mysql</span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="selector-attr">[mysqld_safe]</span></span><br><span class="line">log-error=/data/3307/mysqld.log</span><br><span class="line">pid-file=/data/3307/mysqld.pid</span><br><span class="line"></span><br><span class="line">$ cp /etc/my3307.cnf /etc/my3308.cnf </span><br><span class="line">$sed -i &#x27;s#3307#3308#g&#x27; /etc/my3308.cnf</span><br></pre></td></tr></table></figure><p><strong>2. 创建数据目录并初始化</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /data/&#123;3307,3308&#125; -p</span><br><span class="line">$ chown -R mysql:mysql /data/330*                                   //修改权限</span><br><span class="line">$ mysql_install_db --user=mysql --defaults-file=/etc/my3307.cnf     //初始化，指定用户和默认配置文件位置</span><br><span class="line">$ mysql_install_db --user=mysql --defaults-file=/etc/my3308.cnf</span><br></pre></td></tr></table></figure><p><strong>3. 启动多实例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mysqld_safe --defaults-file=/etc/my3307.cnf &amp;</span><br><span class="line">$ mysqld_safe --defaults-file=/etc/my3308.cnf &amp;</span><br></pre></td></tr></table></figure><p><strong>4. 检查端口</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -lntup|grep mysql</span><br><span class="line"><span class="selector-tag">tcp</span>        0      0 0.0.0.0<span class="selector-pseudo">:3306</span>            0.0.0.0:*               <span class="selector-tag">LISTEN</span>      69432/<span class="selector-tag">mysqld</span>        </span><br><span class="line"><span class="selector-tag">tcp</span>        0      0 0.0.0.0<span class="selector-pseudo">:3307</span>            0.0.0.0:*               <span class="selector-tag">LISTEN</span>      73414/<span class="selector-tag">mysqld</span>        </span><br><span class="line"><span class="selector-tag">tcp</span>        0      0 0.0.0.0<span class="selector-pseudo">:3308</span>            0.0.0.0:*               <span class="selector-tag">LISTEN</span>      73809/<span class="selector-tag">mysqld</span>  </span><br></pre></td></tr></table></figure><p><strong>5. 创建自动发现多实例脚本</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cat /server/scritps/mysql_discovery.sh </span><br><span class="line">#!/bin/bash </span><br><span class="line"><span class="selector-id">#mysql</span> low-level discovery </span><br><span class="line">res=$(netstat -lntp|awk -F &quot;[ :\t]+&quot; &#x27;/mysqld/&#123;print$5&#125;&#x27;)</span><br><span class="line">port=($res) </span><br><span class="line">printf &#x27;&#123;&#x27; </span><br><span class="line">printf &#x27;&quot;data&quot;:[&#x27; </span><br><span class="line">for key in $&#123;!port<span class="selector-attr">[@]</span>&#125; </span><br><span class="line">do </span><br><span class="line">        if <span class="selector-attr">[[ &quot;$&#123;#port[@]</span>&#125;&quot; -gt 1 &amp;&amp; &quot;$&#123;key&#125;&quot; -ne &quot;$(($&#123;<span class="selector-id">#port</span><span class="selector-attr">[@]</span>&#125;-1))&quot; ]];then </span><br><span class="line">                printf &#x27;&#123;&#x27; </span><br><span class="line">                printf &quot;\&quot;&#123;<span class="selector-id">#MYSQLPORT</span>&#125;\&quot;:\<span class="string">&quot;$&#123;port[$&#123;key&#125;]&#125;\&quot;&#125;,&quot;</span> </span><br><span class="line">        else [[ <span class="string">&quot;$&#123;key&#125;&quot;</span> -eq <span class="string">&quot;(($&#123;#port[@]&#125;-1))&quot;</span> ]] </span><br><span class="line">                printf <span class="string">&#x27;&#123;&#x27;</span> </span><br><span class="line">                printf <span class="string">&quot;\&quot;&#123;#MYSQLPORT&#125;\&quot;:\&quot;$&#123;port[$&#123;key&#125;]&#125;\&quot;&#125;&quot;</span> </span><br><span class="line">        fi </span><br><span class="line">done </span><br><span class="line">printf <span class="string">&#x27;]&#x27;</span> </span><br><span class="line">printf <span class="string">&#x27;&#125;\n&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>6. 创建自动发现配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/zabbix/zabbix_agentd.d/mysql_discovery.conf</span><br><span class="line">UserParameter=mysql.discovery,/bin/bash /server/scripts/mysql_discovery.sh</span><br></pre></td></tr></table></figure><p><strong>7. 测试自动发现脚本</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bash /server/scritps/mysql_discovery.sh </span><br><span class="line">&#123;&quot;data&quot;:[&#123;&quot;&#123;#MYSQLPORT&#125;&quot;:&quot;3306&quot;&#125;,&#123;&quot;&#123;#MYSQLPORT&#125;&quot;:&quot;3307&quot;&#125;,&#123;&quot;&#123;#MYSQLPORT&#125;&quot;:&quot;3308&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure><p><strong>8. 重启zabbix-agent</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl restart zabbix-agent.service </span><br></pre></td></tr></table></figure><p><strong>9. zabbix_get测试取key</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 127.0.0.1 -k mysql.discovery</span><br><span class="line">(<span class="selector-tag">Not</span> <span class="selector-tag">all</span> <span class="selector-tag">processes</span> <span class="selector-tag">could</span> <span class="selector-tag">be</span> <span class="selector-tag">identified</span>, <span class="selector-tag">non-owned</span> <span class="selector-tag">process</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">will</span> <span class="selector-tag">not</span> <span class="selector-tag">be</span> <span class="selector-tag">shown</span>, <span class="selector-tag">you</span> <span class="selector-tag">would</span> <span class="selector-tag">have</span> <span class="selector-tag">to</span> <span class="selector-tag">be</span> <span class="selector-tag">root</span> <span class="selector-tag">to</span> <span class="selector-tag">see</span> <span class="selector-tag">it</span> <span class="selector-tag">all</span>.)</span><br><span class="line">&#123;&quot;data&quot;:[]&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>发现问题:原因是zabbix用户不能使用netstat的-p参数</p></li><li><p>解决方法为给netstat命令添加权限</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ which netstat</span><br><span class="line">/usr/bin/netstat</span><br><span class="line">$ chmod u+s /usr/bin/netstat</span><br><span class="line">$ ll /usr/bin/netstat</span><br><span class="line">-rwsr-xr-x. 1 root root 155008 Aug  9  2019 /usr/bin/netstat</span><br></pre></td></tr></table></figure></li><li><p>重新测试</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> -k mysql<span class="selector-class">.discovery</span></span><br><span class="line">&#123;&quot;data&quot;:[&#123;<span class="string">&quot;&#123;#MYSQLPORT&#125;&quot;</span>:<span class="string">&quot;3306&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#MYSQLPORT&#125;&quot;</span>:<span class="string">&quot;3307&quot;</span>&#125;,&#123;<span class="string">&quot;&#123;#MYSQLPORT&#125;&quot;</span>:<span class="string">&quot;3308&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>10. web页面创建自动发现规则模板</strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181910.png">    </p><p><strong>11. 创建自动发现</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181911.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181912.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181913.png"></p><p><strong>12. 创建正则表达式</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181914.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181915.png"></p><p><strong>13. 模仿zabbix自带的mysql监控配置修改监控项</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf    </span><br><span class="line">UserParameter=mysql.status[*],echo &quot;show global status where Variable_name=&#x27;$1&#x27;;&quot; | HOME=/var/lib/zabbix mysql -uroot -p123456 -P $2 -N | awk &#x27;&#123;print $$2&#125;&#x27;</span><br><span class="line"></span><br><span class="line">$systemctl restart zabbix-agent.service</span><br></pre></td></tr></table></figure><p><strong>14. 测试访问监控项</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 127.0.0.1 -k mysql.status[Uptime,3307]</span><br><span class="line">15180</span><br><span class="line">$ zabbix_get -s 127.0.0.1 -k mysql.status[Uptime,3308]</span><br><span class="line">15184</span><br><span class="line">$ zabbix_get -s 127.0.0.1 -k mysql.status[Uptime,3306]</span><br><span class="line">15189</span><br></pre></td></tr></table></figure><p><strong>15. web页面添加监控项原型</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181916.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181917.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181918.png"></p><p><strong>16. web页面设置主机关联模板</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181919.png"></p><p><strong>17. 查看是否已经自动添加成功</strong></p><blockquote><p>PS：注意自己搭建的数据库服务器的主机，不要添加错了</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126181920.png"></p><p><strong>18. 整体步骤</strong></p><blockquote><ol><li>创建mysql多实例3307,3308，并启动</li><li>创建自动发现多实例脚本 </li><li>创建自动发现配置文件                                                 //这个配置文件是调用自动发现多实例脚本</li><li>测试自动发现脚本是否能够获取key                                //这个测试是测试上述创建的多实例脚本，使用bash执行</li><li>重启zabbix-agent</li><li>zabbix-get测试取key                                                 //这个是服务端测试客户端自动发现配置文件</li><li>web页面创建自动发现规则模板</li><li>web页面创建自动发现规则</li><li>将zabbix自带的mysql监控配置修改成监控项                    //这个主要是添加mysql的账户和密码，以及端口</li><li>服务端测试访问客户端监控项</li><li>web页面添加监控项原型                                              //不要添加监控项，而是添加监控项原型，因为是自动检测</li><li>web页面设置主机关联模板                                          //这个主机是创建mysql多实例，不要关联错主机，否则没有效果</li><li>web页面查看是否已经自动添加成功</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix故障处理</title>
      <link href="2021/01/26/zabbix%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/"/>
      <url>2021/01/26/zabbix%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix故障处理"><a href="#zabbix故障处理" class="headerlink" title="zabbix故障处理"></a>zabbix故障处理</h1><h2 id="故障1：zabbix-server-is-not-running"><a href="#故障1：zabbix-server-is-not-running" class="headerlink" title="故障1：zabbix server is not running"></a>故障1：zabbix server is not running</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126170721.png"></p><h3 id="故障原因"><a href="#故障原因" class="headerlink" title="故障原因:"></a>故障原因:</h3><p>zabbix-server的配置文件里配有数据库密码，需要配置对密码</p><p><strong>查看报错的日志</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">54912:<span class="number">20190807</span>:<span class="number">202215.171</span> database is down: reconnecting in <span class="number">10</span> seconds</span><br><span class="line"><span class="number">54913</span>:<span class="number">20190807</span>:<span class="number">202225.172</span> [Z3001] connection to database <span class="string">&#x27;zabbix&#x27;</span> failed: [<span class="number">1045</span>] Access denied for user <span class="string">&#x27;zabbix&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (using password: NO)</span><br></pre></td></tr></table></figure><h3 id="故障解决："><a href="#故障解决：" class="headerlink" title="故障解决："></a>故障解决：</h3><p><strong>添加正确的数据库账号密码信息</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;^DB&quot; /etc/zabbix/zabbix_server.conf     </span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure><h2 id="故障2：no-module-named-requests"><a href="#故障2：no-module-named-requests" class="headerlink" title="故障2：no module named requests"></a>故障2：no module named requests</h2><p><strong>故障现象：微信报警失败</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Original problem ID: <span class="number">51</span></span><br><span class="line"><span class="string">&#x27;&quot;: Traceback (most recent call last):</span></span><br><span class="line"><span class="string">File &quot;/usr/lib/zabbix/alertscripts/weixin.py&quot;, line 7, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    import requests</span></span><br><span class="line"><span class="string">ImportError: No module named requests</span></span><br></pre></td></tr></table></figure><h3 id="故障原因-1"><a href="#故障原因-1" class="headerlink" title="故障原因"></a>故障原因</h3><p>缺少模块 requests</p><h3 id="故障解决"><a href="#故障解决" class="headerlink" title="故障解决"></a>故障解决</h3><p><strong>安装缺失的依赖包</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python-pip</span><br><span class="line">$ pip install --upgrade pip</span><br><span class="line">$ pip install requests</span><br></pre></td></tr></table></figure><h2 id="故障3：zabbix-get测试提示警告：No-route-to-host"><a href="#故障3：zabbix-get测试提示警告：No-route-to-host" class="headerlink" title="故障3：zabbix_get测试提示警告：No route to host"></a>故障3：zabbix_get测试提示警告：No route to host</h2><p><strong>故障现象：在server端使用zabbix_get命令测试键值命令时提示警告</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span> -k ESTABLISHED</span><br><span class="line">zabbix_get <span class="selector-attr">[65069]</span>: Get value error: cannot connect to [[<span class="number">10.0</span>.<span class="number">0.8</span>]:<span class="number">10050</span>]: [<span class="number">113</span>] No route to host</span><br></pre></td></tr></table></figure><h3 id="故障原因-2"><a href="#故障原因-2" class="headerlink" title="故障原因"></a>故障原因</h3><p>主机开启了防火墙或者是SELinux</p><h3 id="故障解决-1"><a href="#故障解决-1" class="headerlink" title="故障解决"></a>故障解决</h3><p>关闭防火墙和SELinux</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ grep &#x27;disabled&#x27; /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h2 id="故障4：zabbix-get测试提示警告：Not-all-processes-could-be-identified"><a href="#故障4：zabbix-get测试提示警告：Not-all-processes-could-be-identified" class="headerlink" title="故障4：zabbix_get测试提示警告：Not all processes could be identified"></a>故障4：zabbix_get测试提示警告：Not all processes could be identified</h2><p><strong>故障现象：在server端使用zabbix_get命令测试键值命令时提示警告</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ zabbix_get -s 10.0.0.7 -k ESTABLISHED  </span><br><span class="line">(<span class="selector-tag">Not</span> <span class="selector-tag">all</span> <span class="selector-tag">processes</span> <span class="selector-tag">could</span> <span class="selector-tag">be</span> <span class="selector-tag">identified</span>, <span class="selector-tag">non-owned</span> <span class="selector-tag">process</span> <span class="selector-tag">info</span></span><br><span class="line"><span class="selector-tag">will</span> <span class="selector-tag">not</span> <span class="selector-tag">be</span> <span class="selector-tag">shown</span>, <span class="selector-tag">you</span> <span class="selector-tag">would</span> <span class="selector-tag">have</span> <span class="selector-tag">to</span> <span class="selector-tag">be</span> <span class="selector-tag">root</span> <span class="selector-tag">to</span> <span class="selector-tag">see</span> <span class="selector-tag">it</span> <span class="selector-tag">all</span>.)</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="故障原因-3"><a href="#故障原因-3" class="headerlink" title="故障原因"></a>故障原因</h3><p>zabbix_agent是以普通用户zabbix运行的，而普通用户执行netstat -antp时会有警告，网上查找发现只要不是用p参数就可以普通用户运行</p><h3 id="故障解决-2"><a href="#故障解决-2" class="headerlink" title="故障解决"></a>故障解决</h3><p>监控脚本里的命令修改为netstat -ant</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix监控服务基础</title>
      <link href="2021/01/26/zabbix%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/"/>
      <url>2021/01/26/zabbix%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix监控服务"><a href="#zabbix监控服务" class="headerlink" title="zabbix监控服务"></a>zabbix监控服务</h1><h2 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h2><table><thead><tr><th>主机名</th><th>外网IP</th><th>内网IP</th><th>服务器</th><th>服务安装</th></tr></thead><tbody><tr><td>zabbix</td><td>10.0.0.71</td><td>172.16.1.71</td><td>zabbix服务</td><td>zabbix-server-mysql、zabbix-web-mysql、mariadb-server</td></tr><tr><td>web01</td><td>10.0.0.7</td><td>172.16.1.7</td><td>nginx服务</td><td>zabbix-agent</td></tr></tbody></table><h2 id="zabbix监控基础架构"><a href="#zabbix监控基础架构" class="headerlink" title="zabbix监控基础架构"></a>zabbix监控基础架构</h2><p><strong>zabbix-agent(数据采集) –&gt; zabbix-server(数据分析|报警) –&gt; 数据库(数据存储) &lt;–zabbix-web(数据显示)</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160150.png"></p><h2 id="监控概述"><a href="#监控概述" class="headerlink" title="监控概述"></a>监控概述</h2><h3 id="Zabbix介绍"><a href="#Zabbix介绍" class="headerlink" title="Zabbix介绍"></a>Zabbix介绍</h3><blockquote><ol><li>zabbix是一个企业级分布式开源监控解决方案。能够监控众多网络参数和服务器的健康度、完整性。</li><li>zabbix使用灵活的告警机制，允许用户为几乎任何事件配置基于邮件的告警、可以快速响应服务器问题。</li><li>zabbix基于存储的数据提供出色的报表和数据可视化功能</li><li>zabbix server可以通过SNMP，zabbix agent，ping，端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux，Solaris，HP-UX，AIX，Free BSD，Open BSD，OS X等平台上</li></ol></blockquote><h3 id="为什么要使用监控"><a href="#为什么要使用监控" class="headerlink" title="为什么要使用监控"></a>为什么要使用监控</h3><blockquote><ol><li>对系统不断的进行实时监控</li><li>实时反馈系统当前状态</li><li>保证服务可靠性安全性</li><li>保证业务持续稳定运行</li></ol></blockquote><h3 id="监控服务常用的命令"><a href="#监控服务常用的命令" class="headerlink" title="监控服务常用的命令"></a>监控服务常用的命令</h3><p><strong>1. CPU：top、htop、glances(万能命令)</strong></p><blockquote><p>监控什么：</p><ul><li>us: user state         — 用户态信息</li><li>sy: system state       — 内核态信息</li><li>id: idle               — 空闲状态</li><li>wa: wait               — 等待处理信息</li></ul></blockquote><p><strong>2. 内存：top、htop、free</strong></p><blockquote><p>监控什么：</p><ul><li>内存可用率</li><li>swap空间使用情况</li></ul></blockquote><p><strong>3. 磁盘：df、iotop(检查磁盘Io消耗)、glances</strong></p><blockquote><p>监控什么：</p><ul><li>磁盘的使用情况</li><li>磁盘的io消耗</li><li>可用使用命令测试：dd if=/dev/zero of=/tmp/1G bs=100M count=10</li></ul></blockquote><p><strong>4. 网络：iftop、glances</strong></p><blockquote><p>监控什么：</p><ul><li>网络带宽使用情况</li></ul></blockquote><p><strong>5. 进程：top、htop、ps、glances</strong></p><blockquote><p>监控什么：</p><ul><li>占用内存情况 Tomcat（Java）— 内存占满（内存可能会溢出）— 服务就会出现僵死（重启服务）</li><li>占用CPU情况：mysql服务较占用CPU资源 </li></ul></blockquote><p><strong>6. 负载：w、top、uptime、glances</strong></p><blockquote><p>监控什么：</p><ul><li>10分钟负载&lt;CPU内核数</li><li>15分钟负载</li></ul></blockquote><h3 id="如何入手监控"><a href="#如何入手监控" class="headerlink" title="如何入手监控"></a>如何入手监控</h3><blockquote><ol><li>硬件监控：路由器，交换机，防火墙</li><li>系统监控:CPU，内容，磁盘，网络，进程，TCP</li><li>服务监控：nginx、php、tomcat、Redis、memcache、MySQL</li><li>web监控：请求时间，响应时间，加载时间</li><li>日志监控：ELK（收集、存储、分析、展示）</li><li>安全监控：Friewalld、WAF(nginx+lua)、安全宝、牛盾云、安全狗</li><li>网络监控：smokeping多机房</li><li>业务监控：活动引入多少流量，产生多少注册量，带来多大价值</li></ol></blockquote><h3 id="如何使用shell来实现服务器的监控"><a href="#如何使用shell来实现服务器的监控" class="headerlink" title="如何使用shell来实现服务器的监控"></a>如何使用shell来实现服务器的监控</h3><p><strong>1. 如何监控内存使用情况：</strong></p><blockquote><p>正常使用情况：内存使用率高于80%<br>异常使用情况：内存使用率低于20%，则发送报警<br>使用命令测试：free -m |awk ‘NR==2{print int($NF/$2*100)”%”}’</p></blockquote><p><strong>2. 编写脚本:</strong></p><blockquote><p>编写脚本之前需要配置邮件服务，路径：/etc/mail.rc；配置以下参数，smtp需要自行去qq邮箱中开启 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/mail.rc           </span><br><span class="line">set from=qq邮箱 smtp=smtp.qq.com    </span><br><span class="line">set smtp-auth-user=qq邮箱 smtp-auth-password=授权码（不是密码） smtp-auth=login</span><br></pre></td></tr></table></figure><p>配置脚本文件：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat check_memory<span class="selector-class">.sh</span></span><br><span class="line">#!/bin/bash</span><br><span class="line">num=`free -m |awk &#x27;NR==2&#123;print int($NF/$2*100)&quot;%&quot;&#125;&#x27;`</span><br><span class="line">if <span class="selector-attr">[ &quot;$num -lt 20%&quot; ]</span>;then</span><br><span class="line">   echo &quot;memory error&quot;|mail -s memory-appear-abnormal qq邮箱</span><br><span class="line">fi </span><br></pre></td></tr></table></figure></blockquote><p><strong>3. 收到的报警邮箱如图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126152833.png"></p><h2 id="zabbix部署"><a href="#zabbix部署" class="headerlink" title="zabbix部署"></a>zabbix部署</h2><h3 id="配置zabbix-yum-仓库"><a href="#配置zabbix-yum-仓库" class="headerlink" title="配置zabbix(yum)仓库"></a>配置zabbix(yum)仓库</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//这里使用清华源</span><br><span class="line">$ rpm -ivh https://mirror.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-agent-4.0.11-1.el7.x86_64.rpm</span><br><span class="line">$ sed -i &#x27;s#repo.zabbix.com#mirrors.tuna.tsinghua.edu.cn/zabbix#g&#x27; /etc/yum.repos.d/zabbix.repo</span><br></pre></td></tr></table></figure><h3 id="安装zabbix-服务端-、Msyql、zabbix-agent-客户端"><a href="#安装zabbix-服务端-、Msyql、zabbix-agent-客户端" class="headerlink" title="安装zabbix(服务端)、Msyql、zabbix-agent(客户端)"></a>安装zabbix(服务端)、Msyql、zabbix-agent(客户端)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y zabbix-server-mysql zabbix-web-mysql zabbix-agent mariadb-server</span><br><span class="line">$ systemctl start mariadb.service &amp;&amp; systemctl enable mariadb.service</span><br></pre></td></tr></table></figure><h3 id="创建zabbix数据库以及用户"><a href="#创建zabbix数据库以及用户" class="headerlink" title="创建zabbix数据库以及用户"></a>创建zabbix数据库以及用户</h3><p><strong>创建用户密码</strong></p><blockquote><ol><li>第一种选择，初始化设置：mysql_secure_installation (初始化可以设置密码，也可以去除MySQL多余的用户和库)</li><li>第二种选择，直接设置密码：mysqladmin password 123456</li></ol></blockquote><p><strong>创建mysql中的库和用户</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -p123456</span><br><span class="line">&gt; create database zabbix character set utf8 collate utf8_bin;  <span class="comment">//创建zabbix库</span></span><br><span class="line">&gt; grant all privileges on zabbix.* to zabbix<span class="keyword">@localhost</span> identified by <span class="string">&#x27;zabbix&#x27;</span>;              <span class="comment">//创建用户</span></span><br><span class="line">&gt; flush privileges;    <span class="comment">//刷新</span></span><br></pre></td></tr></table></figure><h3 id="导入数据值到数据库中"><a href="#导入数据值到数据库中" class="headerlink" title="导入数据值到数据库中"></a>导入数据值到数据库中</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zcat /usr/share/doc/zabbix-server-mysql-4.0.24/create.sql.gz | mysql -uzabbix -pzabbix zabbix</span><br></pre></td></tr></table></figure><h3 id="编辑-etc-zabbix-zabbix-server-conf文件，修改数据库配置"><a href="#编辑-etc-zabbix-zabbix-server-conf文件，修改数据库配置" class="headerlink" title="编辑/etc/zabbix/zabbix-server.conf文件，修改数据库配置"></a>编辑/etc/zabbix/zabbix-server.conf文件，修改数据库配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;^DB&quot; /etc/zabbix/zabbix_server.conf </span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=zabbix</span><br><span class="line">DBPassword=zabbix</span><br></pre></td></tr></table></figure><h3 id="启动zabbix服务进程，并加入开机自动"><a href="#启动zabbix服务进程，并加入开机自动" class="headerlink" title="启动zabbix服务进程，并加入开机自动"></a>启动zabbix服务进程，并加入开机自动</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start zabbix-server.service </span><br><span class="line">$ systemctl enable zabbix-server.service</span><br></pre></td></tr></table></figure><h3 id="配置Apache的配置文件-etc-httpd-conf-d-zabbix-conf，修改时区并重启Apache"><a href="#配置Apache的配置文件-etc-httpd-conf-d-zabbix-conf，修改时区并重启Apache" class="headerlink" title="配置Apache的配置文件/etc/httpd/conf.d/zabbix.conf，修改时区并重启Apache"></a>配置Apache的配置文件/etc/httpd/conf.d/zabbix.conf，修改时区并重启Apache</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;Shanghai&quot; /etc/httpd/conf.d/zabbix.conf </span><br><span class="line"><span class="selector-tag">php_value</span> <span class="selector-tag">date</span><span class="selector-class">.timezone</span> <span class="selector-tag">Asia</span>/<span class="selector-tag">Shanghai</span>             //修改的位置</span><br><span class="line"></span><br><span class="line">$ systemctl start httpd &amp;&amp; systemctl enable httpd</span><br></pre></td></tr></table></figure><h2 id="WEB安装步骤"><a href="#WEB安装步骤" class="headerlink" title="WEB安装步骤"></a>WEB安装步骤</h2><h3 id="浏览器打开地址：10-0-0-71-zabbix-setup-php"><a href="#浏览器打开地址：10-0-0-71-zabbix-setup-php" class="headerlink" title="浏览器打开地址：10.0.0.71/zabbix/setup.php"></a>浏览器打开地址：10.0.0.71/zabbix/setup.php</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126154515.png"></p><h3 id="检查依赖项是否存在异常"><a href="#检查依赖项是否存在异常" class="headerlink" title="检查依赖项是否存在异常"></a>检查依赖项是否存在异常</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126154533.png"></p><h3 id="配置zabbix连接数据库"><a href="#配置zabbix连接数据库" class="headerlink" title="配置zabbix连接数据库"></a>配置zabbix连接数据库</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126154549.png"></p><h3 id="配置zabbix-server服务器的信息，并确认检查"><a href="#配置zabbix-server服务器的信息，并确认检查" class="headerlink" title="配置zabbix-server服务器的信息，并确认检查"></a>配置zabbix-server服务器的信息，并确认检查</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126154606.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160124.png"></p><h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><p><strong>提示已经安装了zabbix。配置文件/etc/zabbix/web/zabbix.conf.php已被创建</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160129.png"></p><h3 id="登录zabbix"><a href="#登录zabbix" class="headerlink" title="登录zabbix"></a>登录zabbix</h3><p><strong>默认登录zabbix-web的用户名Admin，密码zabbix</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160132.png"></p><h3 id="调整字符集为中文"><a href="#调整字符集为中文" class="headerlink" title="调整字符集为中文"></a>调整字符集为中文</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160135.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160146.png"></p><h3 id="修复中文乱码"><a href="#修复中文乱码" class="headerlink" title="修复中文乱码"></a>修复中文乱码</h3><p><strong>打开图形之后发现语言为乱码，原因是缺少了字体</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160147.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160148.png"></p><p><strong>解决方法，安装字体并替换现有字体</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install wqy-microhei-fonts -y      <span class="comment">//默认情况下Centos7是安装的</span></span><br><span class="line">$ cp /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/zabbix/assets/fonts/graphfont.ttf</span><br></pre></td></tr></table></figure><p><strong>刷新之后，就会变成中文了</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160149.png"></p><h2 id="zabbix快速监控主机"><a href="#zabbix快速监控主机" class="headerlink" title="zabbix快速监控主机"></a>zabbix快速监控主机</h2><h3 id="安装zabbix-agent"><a href="#安装zabbix-agent" class="headerlink" title="安装zabbix-agent"></a>安装zabbix-agent</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -ivh https://mirror.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-agent-4.0.11-1.el7.x86_64.rpm</span><br><span class="line">$ yum install -y zabbix-agent</span><br></pre></td></tr></table></figure><h3 id="编写zabbix-agent配置文件"><a href="#编写zabbix-agent配置文件" class="headerlink" title="编写zabbix-agent配置文件"></a>编写zabbix-agent配置文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/zabbix/zabbix_agentd.conf</span><br><span class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_agentd.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">Server=10.0.0.71</span><br><span class="line">ServerActive=10.0.0.71</span><br><span class="line">Hostname=web01</span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br></pre></td></tr></table></figure><h3 id="启动zabbix-agent并检查"><a href="#启动zabbix-agent并检查" class="headerlink" title="启动zabbix-agent并检查"></a>启动zabbix-agent并检查</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start zabbix-agent.service </span><br><span class="line">$ systemctl enable zabbix-agent.service</span><br><span class="line">$ netstat -lntup|grep 10050</span><br><span class="line"><span class="selector-tag">tcp</span>        0      0 0.0.0.0<span class="selector-pseudo">:10050</span>           0.0.0.0:*               <span class="selector-tag">LISTEN</span>      5468/<span class="selector-tag">zabbix_agentd</span>  </span><br><span class="line"><span class="selector-tag">tcp6</span>       0      0 :<span class="selector-pseudo">::10050</span>                :::*                    <span class="selector-tag">LISTEN</span>      5468/<span class="selector-tag">zabbix_agentd</span> </span><br></pre></td></tr></table></figure><h2 id="zabbix-web界面，添加主机"><a href="#zabbix-web界面，添加主机" class="headerlink" title="zabbix-web界面，添加主机"></a>zabbix-web界面，添加主机</h2><p><strong>创建主机</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160151.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160152.png"></p><p><strong>添加默认的模板，Template OS Linux</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160153.png"></p><p><strong>检查是否正常启动</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160154.png"></p><h2 id="自定义监控主机"><a href="#自定义监控主机" class="headerlink" title="自定义监控主机"></a>自定义监控主机</h2><h3 id="监控TCP11种状态集"><a href="#监控TCP11种状态集" class="headerlink" title="监控TCP11种状态集"></a>监控TCP11种状态集</h3><p><strong>命令行实现</strong></p><blockquote><ul><li><p>第一种方法：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ant|grep -c LISTEN</span><br><span class="line">  21</span><br><span class="line">$ netstat -ant|grep -c  ESTABLISHED</span><br><span class="line">  2</span><br><span class="line">$ netstat -ant|grep -c TIME_WAIT</span><br><span class="line">  0</span><br></pre></td></tr></table></figure></li><li><p>第二种方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;ESTABLISHED&quot;|wc -l</span><br><span class="line">$ netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;LISTEN&quot;|wc -l</span><br><span class="line">$ netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;TIME_WAIT&quot;|wc -l</span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="编写zabbix监控文件（传参形式）"><a href="#编写zabbix监控文件（传参形式）" class="headerlink" title="编写zabbix监控文件（传参形式）"></a>编写zabbix监控文件（传参形式）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/zabbix/zabbix_agentd.d/tcp.status.conf                                     //自己创建</span><br><span class="line">UserParameter=ESTABLISHED,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;ESTABLISHED&quot;|wc -l</span><br><span class="line">UserParameter=LISTEN,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;LISTEN&quot;|wc -l</span><br><span class="line">UserParameter=TIME_WAIT,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;TIME_WAIT&quot;|wc -l</span><br></pre></td></tr></table></figure><h3 id="zabbix-server端命令行进行测试"><a href="#zabbix-server端命令行进行测试" class="headerlink" title="zabbix-server端命令行进行测试"></a>zabbix-server端命令行进行测试</h3><blockquote><p><strong>PS：如果在server端使用zabbix-get测试成功了，那么在web页面也就可以成功</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum install zabbix-get.x86_64 -y </span><br><span class="line">$ zabbix_get -s 10.0.0.7 -k LISTEN</span><br><span class="line">21</span><br><span class="line">$ zabbix_get -s 10.0.0.7 -k ESTABLISHED</span><br><span class="line">3</span><br><span class="line">$ zabbix_get -s 10.0.0.7 -k TIME_WAIT</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="web01主机中各个选项说明"><a href="#web01主机中各个选项说明" class="headerlink" title="web01主机中各个选项说明"></a>web01主机中各个选项说明</h3><blockquote><ul><li>应用集：模板中的标签</li><li>监控项：你要监控的内容（项目1，项目2）</li><li>触发器：设定某个监控项报警的阈值条件</li><li>图形：方便查看</li><li>聚集图形：把多个图形放在一起展示</li><li>模板：将一类的监控项汇总在一起，单独保存成一个集合，可以直接被其他主机调用</li></ul></blockquote><h3 id="web界面添加，创建新监控项ESTABLISHED、LISTEN、TIME-WAIT"><a href="#web界面添加，创建新监控项ESTABLISHED、LISTEN、TIME-WAIT" class="headerlink" title="web界面添加，创建新监控项ESTABLISHED、LISTEN、TIME_WAIT"></a>web界面添加，创建新监控项ESTABLISHED、LISTEN、TIME_WAIT</h3><p><strong>创建ESTABLISHED监控项，其余可以使用克隆监控项</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160155.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160156.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160157.png"></p><h3 id="克隆监控项"><a href="#克隆监控项" class="headerlink" title="克隆监控项"></a>克隆监控项</h3><p><strong>由于TCP有多种状态，需要添加多个监控项，所以我们可以选择使用克隆快速创建</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160158.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160159.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160200.png"></p><blockquote><p><strong>PS：其他状态监控项依次添加即可</strong></p></blockquote><h3 id="创建图形"><a href="#创建图形" class="headerlink" title="创建图形"></a>创建图形</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160201.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160202.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160203.png"></p><p><strong>查看图形</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160204.png"></p><h3 id="设置触发器"><a href="#设置触发器" class="headerlink" title="设置触发器"></a>设置触发器</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160205.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160206.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160207.png"></p><p><strong>刷新多几次，报警就会出现了</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160208.png"></p><h3 id="聚合图形"><a href="#聚合图形" class="headerlink" title="聚合图形"></a>聚合图形</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160209.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160210.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160211.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160212.png"></p><h2 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h2><h3 id="定义发件人"><a href="#定义发件人" class="headerlink" title="定义发件人"></a>定义发件人</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160213.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160214.png"></p><h3 id="定义收件人"><a href="#定义收件人" class="headerlink" title="定义收件人"></a>定义收件人</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160215.png"></p><p><strong>配置只需要开启动作即可</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160216.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160217.png"></p><p><strong>收到邮件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160218.png"></p><h3 id="自定义报警内容"><a href="#自定义报警内容" class="headerlink" title="自定义报警内容"></a>自定义报警内容</h3><p><strong>定制报警内容：报警邮件标题可以使用默认信息，也可使用如何中文报警内容</strong></p><blockquote><p>zabbix官网：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location">https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location</a></p></blockquote><p><strong>发送警告：</strong></p><blockquote><p>名称：Action-Email<br>默认标题：故障{TRIGGER.STATUS},服务器:{HOSTNAME1}发生: {TRIGGER.NAME}故障!<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}　</p></blockquote><p><strong>恢复警告：</strong></p><blockquote><p>恢复标题：恢复{TRIGGER.STATUS}, 服务器:{HOSTNAME1}: {TRIGGER.NAME}已恢复!<br>恢复信息：<br>告警主机:{HOSTNAME1}<br>告警时间:{EVENT.DATE} {EVENT.TIME}<br>告警等级:{TRIGGER.SEVERITY}<br>告警信息: {TRIGGER.NAME}<br>告警项目:{TRIGGER.KEY1}<br>问题详情:{ITEM.NAME}:{ITEM.VALUE}<br>当前状态:{TRIGGER.STATUS}:{ITEM.VALUE1}<br>事件ID:{EVENT.ID}</p></blockquote><p><strong>收到的内容</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160219.png"></p><h2 id="微信报警"><a href="#微信报警" class="headerlink" title="微信报警"></a>微信报警</h2><h3 id="查看配置文件里的脚本目录路径"><a href="#查看配置文件里的脚本目录路径" class="headerlink" title="查看配置文件里的脚本目录路径"></a>查看配置文件里的脚本目录路径</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ grep &quot;^AlertScriptsPath&quot; /etc/zabbix/zabbix_server.conf </span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br></pre></td></tr></table></figure><p><strong>将wenxin.py放在zabbix特定目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod u+x weixin<span class="selector-class">.py</span> </span><br><span class="line">$ ll weixin<span class="selector-class">.py</span></span><br><span class="line">-rwxr--r-- 1 root root 1114 Aug 28 10:<span class="number">37</span> weixin.py</span><br></pre></td></tr></table></figure><p><strong>脚本内容</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ cat weixin.py </span><br><span class="line">#!/<span class="selector-tag">usr</span>/<span class="selector-tag">bin</span>/<span class="selector-tag">env</span> <span class="selector-tag">python</span></span><br><span class="line"><span class="selector-id">#-</span>*<span class="selector-tag">-</span> <span class="selector-tag">coding</span>: <span class="selector-tag">utf-8</span> <span class="selector-tag">-</span>*<span class="selector-tag">-</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">requests</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">sys</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">os</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">json</span></span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">logging</span></span><br><span class="line"> </span><br><span class="line">logging.basicConfig(level = logging.DEBUG, format = &#x27;%(asctime)s, %(filename)s, %(levelname)s, %(message)s&#x27;,</span><br><span class="line">       datefmt = &#x27;%a, %d %b %Y %H:%M:%S&#x27;,</span><br><span class="line">       filename = os.path.join(&#x27;/tmp&#x27;,&#x27;weixin.log&#x27;),</span><br><span class="line">       filemode = &#x27;a&#x27;)</span><br><span class="line"></span><br><span class="line">corpid=&#x27;微信企业号corpid&#x27;</span><br><span class="line">appsecret=&#x27;应用的Secret&#x27;</span><br><span class="line">agentid=应用的id</span><br><span class="line"></span><br><span class="line">#获取<span class="selector-tag">accesstoken</span></span><br><span class="line">token_url=&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#x27; + corpid + &#x27;&amp;corpsecret=&#x27; + appsecret</span><br><span class="line">req=requests.get(token_url)</span><br><span class="line">accesstoken=req.json()[&#x27;access_token&#x27;]</span><br><span class="line"></span><br><span class="line">#发送消息</span><br><span class="line">msgsend_url=&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#x27; + accesstoken</span><br><span class="line"></span><br><span class="line">touser=sys.argv[1]</span><br><span class="line">subject=sys.argv[2]</span><br><span class="line">#toparty=&#x27;3|4|5|6&#x27;</span><br><span class="line">message=sys.argv[2] + &quot;\n\n&quot; +sys.argv[3]</span><br><span class="line"></span><br><span class="line">params=&#123;</span><br><span class="line">    &quot;<span class="selector-tag">touser</span>&quot;: <span class="selector-tag">touser</span>,</span><br><span class="line">    #&quot;<span class="selector-tag">toparty</span>&quot;: <span class="selector-tag">toparty</span>,</span><br><span class="line">    &quot;<span class="selector-tag">msgtype</span>&quot;: &quot;<span class="selector-tag">text</span>&quot;,</span><br><span class="line">    &quot;<span class="selector-tag">agentid</span>&quot;: <span class="selector-tag">agentid</span>,</span><br><span class="line">    &quot;<span class="selector-tag">text</span>&quot;: &#123;</span><br><span class="line">         &quot;content&quot;: message</span><br><span class="line">     &#125;,</span><br><span class="line">    &quot;<span class="selector-tag">safe</span>&quot;<span class="selector-pseudo">:0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req=requests.post(msgsend_url, data=json.dumps(params))</span><br><span class="line"></span><br><span class="line">logging.info(&#x27;sendto:&#x27; + touser + &#x27;;;subject:&#x27; + subject + &#x27;;;message:&#x27; + message)</span><br></pre></td></tr></table></figure><h3 id="配置发信人"><a href="#配置发信人" class="headerlink" title="配置发信人"></a>配置发信人</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160220.png">    </p><p><strong>脚本参数</strong></p><blockquote><p>  {ALERT.SENDTO}<br>  {ALERT.SUBJECT}<br>  {ALERT.MESSAGE}</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160221.png"></p><h3 id="登录企业微信公众号添加账号"><a href="#登录企业微信公众号添加账号" class="headerlink" title="登录企业微信公众号添加账号"></a>登录企业微信公众号添加账号</h3><p><strong>1. 注册账号</strong></p><blockquote><p>路径：<a href="https://work.weixin.qq.com/wework_admin/loginpage_wx">https://work.weixin.qq.com/wework_admin/loginpage_wx</a></p></blockquote><p><strong>2. 登录后在应用管理创建新应用</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160222.png"></p><p><strong>3. 上传logo，填写应用名称，应用介绍等</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160223.png"></p><p><strong>4. 查看启动应用</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160224.png"></p><p><strong>4. 接口调用测试</strong></p><blockquote><p>路径：<a href="http://work.weixin.qq.com/api/devtools/devtool.php">http://work.weixin.qq.com/api/devtools/devtool.php</a><br>corpid：填写的是企业ID，位置–&gt;我的企业–&gt;企业信息–&gt;往下拉到最后就可看到<br>corpsecret：填写之前创建应用得到的Secret值</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160225.png"></p><h3 id="添加成员"><a href="#添加成员" class="headerlink" title="添加成员"></a>添加成员</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160226.png"></p><h3 id="查看自己的账号"><a href="#查看自己的账号" class="headerlink" title="查看自己的账号"></a>查看自己的账号</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160227.png"></p><h3 id="修改脚本里的信息"><a href="#修改脚本里的信息" class="headerlink" title="修改脚本里的信息"></a>修改脚本里的信息</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat weixin.py </span><br><span class="line">corpid=&#x27;微信企业号corpid&#x27;</span><br><span class="line">appsecret=&#x27;应用的Secret&#x27;</span><br><span class="line">agentid=应用的id</span><br></pre></td></tr></table></figure><h3 id="发信息测试"><a href="#发信息测试" class="headerlink" title="发信息测试"></a>发信息测试</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/<span class="selector-tag">usr</span>/<span class="selector-tag">lib</span>/<span class="selector-tag">zabbix</span>/<span class="selector-tag">alertscripts</span></span><br><span class="line">$ python weixin.py 你的账号 &#x27;发信测试&#x27;  ‘微信测试消息’</span><br></pre></td></tr></table></figure><p><strong>如果出现以下报错，则需要安装python-pip，接着安装request模块</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126163319.png"></p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install python-pip -y</span><br><span class="line">$ pip install requests</span><br></pre></td></tr></table></figure><h3 id="微信号查看"><a href="#微信号查看" class="headerlink" title="微信号查看"></a>微信号查看</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160229.png"></p><h3 id="发送到整个微信组"><a href="#发送到整个微信组" class="headerlink" title="发送到整个微信组"></a>发送到整个微信组</h3><p><strong>1. 导出通讯录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160230.png"></p><p><strong>2. 将导出Excel表格中的的账号，写入文件中</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/usr/lib/zabbix/alertscripts</span><br><span class="line">$ cat test<span class="selector-class">.txt</span></span><br><span class="line">FanW</span><br><span class="line">FanXig</span><br></pre></td></tr></table></figure><p><strong>3. 编写for.sh脚本</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat for<span class="selector-class">.sh</span> </span><br><span class="line">#!/bin/bash</span><br><span class="line">for <span class="selector-tag">i</span> in $(cat test<span class="selector-class">.txt</span>)</span><br><span class="line">do</span><br><span class="line">   ./weixin.py $&#123;i&#125; $1 $2 </span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>4. 查看微信信息</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160231.png"></p><h3 id="zabbix-web配置收信人"><a href="#zabbix-web配置收信人" class="headerlink" title="zabbix-web配置收信人"></a>zabbix-web配置收信人</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160232.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160233.png"></p><p><strong>查看微信信息</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160234.png"></p><h2 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h2><h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160235.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160236.png"></p><h3 id="创建各个选项"><a href="#创建各个选项" class="headerlink" title="创建各个选项"></a>创建各个选项</h3><p><strong>创建应用集,监控项,触发器,图形都跟上面讲解的一样,只是现在定义模板来给其他主机使用,这样可以方便许多</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160237.png"></p><h3 id="应用模板"><a href="#应用模板" class="headerlink" title="应用模板"></a>应用模板</h3><blockquote><ol><li><p>创建另一台web主机，命名为web02，地址10.0.0.8</p></li><li><p>设置yum源: rpm -ivh <a href="https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/5/x86_64/zabbix-release-4.0-1.el5.noarch.rpm">https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/5/x86_64/zabbix-release-4.0-1.el5.noarch.rpm</a></p></li><li><p>下载客户端: yum install -y zabbix-agent</p></li><li><p>创建监控项</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat tcp<span class="selector-class">.status</span><span class="selector-class">.conf</span> </span><br><span class="line">UserParameter=ESTABLISHED,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;ESTABLISHED&quot;|wc -l</span><br><span class="line">UserParameter=LISTEN,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;LISTEN&quot;|wc -l</span><br><span class="line">UserParameter=TIME_WAIT,netstat -ant|awk &#x27;NR&gt;2&#123;print $6&#125;&#x27;|grep &quot;TIME_WAIT&quot;|wc -l</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="创建新的主机导入模板"><a href="#创建新的主机导入模板" class="headerlink" title="创建新的主机导入模板"></a>创建新的主机导入模板</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160238.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160239.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160240.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160241.png"></p><h2 id="声音报警"><a href="#声音报警" class="headerlink" title="声音报警"></a>声音报警</h2><h3 id="web页面提示声音报警"><a href="#web页面提示声音报警" class="headerlink" title="web页面提示声音报警"></a>web页面提示声音报警</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210126160242.png"></p><h3 id="修改报警铃声"><a href="#修改报警铃声" class="headerlink" title="修改报警铃声"></a>修改报警铃声</h3><blockquote><ol><li>找到文件所在目录</li></ol><ul><li><p>首先在页面按F12—用箭头–选中模式Elements(元素)–再点击页面中的alarm_disaster.mp3</p></li><li><p>使用find命令</p>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find / -type f -name &#x27;alarm_average.mp3&#x27;</span><br><span class="line">/<span class="selector-tag">usr</span>/<span class="selector-tag">share</span>/<span class="selector-tag">zabbix</span>/<span class="selector-tag">audio</span>/<span class="selector-tag">alarm_average</span><span class="selector-class">.mp3</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p>将原有声音文件做替换</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv yingyue<span class="selector-class">.mp3</span> alarm_disaster<span class="selector-class">.mp3</span></span><br></pre></td></tr></table></figure></li><li><p>需要清除浏览器缓存，再进行测试</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建静态博客</title>
      <link href="2021/01/25/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>2021/01/25/hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用melody主题搭建博客"><a href="#Hexo使用melody主题搭建博客" class="headerlink" title="Hexo使用melody主题搭建博客"></a>Hexo使用melody主题搭建博客</h1><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo是一个快速、简洁且高效的博客框架，可以通过Markdown解析语法，生成对应的html。安装Hexo只需要几分钟时间，如果只是单单写自己的文章，很推荐使用Hexo</p><p>Hexo搭建很简易，只需要几个步骤，但后续添加的功能（如：评论设置、搜索设置以及搬迁到自己的个人域名等…）还是需要花一些时间去操作。可以说是搭起简易，功能难易</p><p>推荐使用melody，它是简洁美观的主题，而且支持很多功能，只需要跟着文档套用即可。当然Hexo也有好多<a href="https://hexo.io/themes/">主题</a>，不同的主题配置有些不一样，但都是大同小异</p><blockquote><p>hexo-theme-melody主题下载：<a href="https://github.com/Molunerfinn/hexo-theme-melody">https://github.com/Molunerfinn/hexo-theme-melody</a></p><p>hexo-thmem-melody主题文档：<a href="https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html">https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124150916.png"></p><h2 id="下载-git和node"><a href="#下载-git和node" class="headerlink" title="下载 git和node"></a>下载 git和node</h2><p>Hexo是基于与node.js和git来搭建，所以需要安装这些应用程序（下述基于Linux搭建，Windows和Mac都差不多，可以到官网查看安装步骤）</p><p><strong>下载git</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y git</span><br></pre></td></tr></table></figure><p><strong>Linux会默认安装node.js，但版本比较低，不能于hexo兼容，需要移除。所以要去官网下载最新</strong></p><blockquote><p>下载官方地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p></blockquote><p><img src="https://i.loli.net/2021/01/12/hIud9SVUMOB3tRf.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove npm</span><br><span class="line">$ wget https://npm.taobao.org/mirrors/node/v14.<span class="number">15.4</span>/node-v14.<span class="number">15.4</span>-linux-x64.tar.xz</span><br><span class="line">$ tar xf node-v14.<span class="number">15.4</span>-linux-x64.tar.xz           //下载之后解压</span><br><span class="line">$ mv node-v14.<span class="number">15.4</span>-linux-x64 /usr/local           //将解药的包移动到/usr/local</span><br><span class="line">$ cd /usr/local</span><br><span class="line">$ ln -s node-v14.<span class="number">15.4</span>-linux-x64 node              //建立软链接</span><br></pre></td></tr></table></figure><p><strong>做命令的软连接，使其可以在全局上使用</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">$ ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure><p><strong>设置淘宝的cnpm加速源，通过cnpm下载hexo会更加快速</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">$ ln -s /usr/local/node/bin/cnpm /usr/bin/cnpm</span><br></pre></td></tr></table></figure><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p><strong>安装hexo并初始化目录</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install -g hexo-cli</span><br><span class="line">$ ln -s /usr/local/node/bin/hexo /usr/bin/hexo</span><br><span class="line"></span><br><span class="line">$ mkdir /blog</span><br><span class="line">$ hexo init /blog      //初始化文件夹</span><br></pre></td></tr></table></figure><p><strong>初始化目录下的文件如下，文件下的内容可以参考中文官网的解释<a href="https://hexo.io/zh-cn/docs/setup">Setup</a></strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── _config<span class="selector-class">.yml</span></span><br><span class="line">├── package<span class="selector-class">.json</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><blockquote><p>_config.yml：网站的配置信息，大部分配置都会在这个文件</p><p>package.json：应用程序信息，可以移除自己安装的一些插件</p><p>scaffolads：模板目录，可通过模板改变你每次生成的文章内容</p><p>source：用户资源存放的地址，如（文档、分类、标签）</p><p>themes：主题目录，根据不同的主题来生成静态页面</p></blockquote><p><strong>生成一个页面，并发布到本地</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;新的页面&quot;             <span class="comment">//新建一个页面，会放入到source/_posts/下</span></span><br><span class="line">$ hexo g                         <span class="comment">//构建静态文件</span></span><br><span class="line">$ hexo s                         <span class="comment">//启动服务，默认情况下，访问地址为：http://localhost:4000/</span></span><br></pre></td></tr></table></figure><p><strong>浏览器输入http:localhost:4000，搭建成功</strong></p><blockquote><p>我使用的是购买服务器地址来访问，不是在本地localhost，但操作都是一样的</p><p>注意：记得在安全组放通4000端口即可</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124164935.png"></p><h3 id="hexo的命令说明"><a href="#hexo的命令说明" class="headerlink" title="hexo的命令说明"></a>hexo的命令说明</h3><p><strong>这里只列出了一些常用的指令，如果想了解更多指令，可到中文官网查看<a href="https://hexo.io/zh-cn/docs/commands">Commands</a></strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>hexo init [folder]</td><td>初始化一个网站目录，如果没有指明目录，则在当前目录下生成</td></tr><tr><td>hexo new [layout]</td><td>新建一篇文章</td></tr><tr><td>hexo g或generate</td><td>生成静态文件</td></tr><tr><td>hexo s或server</td><td>启动服务，通过浏览器访问地址</td></tr><tr><td>hexo d或deploy</td><td>部署网站，可以部署到GitHub或Coding上</td></tr><tr><td>hexo clean</td><td>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</td></tr><tr><td>hexo publish [layout] <filename></td><td>发表草稿</td></tr><tr><td>hexo list</td><td>列出网站资料</td></tr><tr><td>hexo version</td><td>显示hexo版本</td></tr></tbody></table><h2 id="使用melody主题"><a href="#使用melody主题" class="headerlink" title="使用melody主题"></a>使用melody主题</h2><p><strong>下载melody主题和渲染插件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ clone -<span class="selector-tag">b</span> master https://github.com/Molunerfinn/hexo-theme-melody themes/melody</span><br><span class="line">$ cnpm install hexo-renderer-pug hexo-renderer-stylus</span><br><span class="line"></span><br><span class="line">$ vim /blog/_config.xml     //hexo初始的目录修改配置文件</span><br><span class="line">theme: melody               //改成melody</span><br></pre></td></tr></table></figure><p><strong>主题有两个hexo版本，对应你的版本进行下载和生成对应的文件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124170458.png"></p><blockquote><p>如果是跟着我操作部署的，那么版本应该是4.2.0版本</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br><span class="line">hexo-cli: <span class="number">4.2</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><p>按照文档的配置说明，Hexo低于5.0的，推荐将<code>./node_modules/hexo-theme-melody/_config.yml</code>复制到hexo工作目录下<code>source/_data/melody.yml</code>，如果不存在<code>source/_data</code>目录，则自己创建一个</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog/source/</span><br><span class="line">$ mkdir _data</span><br><span class="line">$ cp ./node_modules/hexo-theme-melody/_config.yml /blog/source/_data/melody.yml</span><br></pre></td></tr></table></figure><h3 id="主题页面和主题功能配置"><a href="#主题页面和主题功能配置" class="headerlink" title="主题页面和主题功能配置"></a>主题页面和主题功能配置</h3><p>melody主题设置标签页、分类页、幻听片Slides页面、相册、404页面配置，可以通过作者<a href="https://molunerfinn.com/hexo-theme-melody-doc/theme-pages.html">主题文档</a>来一步步操作，添加自己需要的页面，过程很简单只需要跟着操作就行</p><p>主题功能配置有语言、社交图标、导航菜单、文章版权、友链、鼠标点击特效等，需要自己花时间去操作添加，因为每个人的需求都不一样，所以这里就不再操作演示</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p><strong>点击右上角的+，选择New repository（创建一个仓库）。仓库名称为：用户名+github.io，这样github才知道你是要部署静态页面</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124170624.png"></p><p><strong>编辑初始目录下的_config.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git                                                        </span><br><span class="line">  repo: https://github.com/zsjmal2316/zsjmal2316.github.io.git      </span><br><span class="line">  branch: master                                                 </span><br></pre></td></tr></table></figure><blockquote><p>type：部署的类型为git</p><p>repo：仓库地址</p><p>branch：分支默认为master即可</p></blockquote><p><strong>通过命令部署上github</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d          <span class="comment">//因为设置了_config.yml文件，所以会自动部署到github</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>如果出现部署错误，可能是没有定义用户邮箱和用户名（邮箱不是随意的，而是绑定你的github，可以充当账号登录的邮箱）</p><ul><li><p>git config –global user.email “用户邮箱”</p></li><li><p>git config –global user.name “用户名”</p></li></ul></li><li><p>如果已经设置，此时会让你输入账号和密码，输入之后即部署上你的仓库中</p></li></ol></blockquote><p><strong>查看自己GitHub的仓库，可以看到已经部署上去了</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124231724.png"></p><h2 id="通过SSH免密钥部署Github"><a href="#通过SSH免密钥部署Github" class="headerlink" title="通过SSH免密钥部署Github"></a>通过SSH免密钥部署Github</h2><p>上述将自己的博客内容部署到Github，但是每次上传都要需要账号和密码。如果频繁的提交，自己都会觉得不耐烦。所以通过SSH免密要进行部署可以简便，就不需要每次部署都输入账号和密码</p><p><strong>生成非对称密钥rsa</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-<span class="selector-tag">keygen</span> -t rsa -D &quot;随意写&quot;        </span><br><span class="line"><span class="comment">//-D参数可加可不加，确定之后，全部回车就可</span></span><br></pre></td></tr></table></figure><p><strong>查看密钥生成的公钥</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124171727.png"></p><p><strong>点击自己的仓库，进入之后选择settings–&gt;Deploy keys（Add deploy key），然后复制公钥到仓库中</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124171930.png"></p><blockquote><p>Title：可以自己随意起</p><p>Allow write access：需要勾选</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124172039.png"></p><p><strong>编辑初始目录下的_config.yml文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:zsjmal2316/zsjmal2316.github.io.git    //改成ssh地址即可</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><blockquote><p><strong>PS：后续的部署就不需要再输入用户名和密码了</strong></p></blockquote><h2 id="个人域名托管至GitHub"><a href="#个人域名托管至GitHub" class="headerlink" title="个人域名托管至GitHub"></a>个人域名托管至GitHub</h2><p>个人域名可以托管到GitHub中，然后就可以通过自己的购买的域名进行访问。当然不使用自己的域名，用GitHub上的（用户名.github.io）访问自己的博客。但如果有自己域名的还是推荐使用自己的域名，方便记忆</p><p>我的域名是在腾讯云买的，所以下述的域名解析是腾讯云的，当然其他平台购买的域名也都是这么操作</p><p><strong>域名解析，通过CNAME记录将github默认的域名指向自己的域名</strong></p><blockquote><p>注意：添加解析之后，需要一段时间才能访问自己的网站，可能要4-48个小时或更久，如果你网页显示的是503错误（表示：服务器当前忙，暂时无法响应服务器），代表是服务解析的还没成功，需要等待！</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124204240.png"></p><p><strong>在初始目录下source目录中添加CNAME文件</strong></p><blockquote><p>CNAME：内容是自己的域名</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd source/</span><br><span class="line">$ ls</span><br><span class="line">404  categories  CNAME  _posts  tags</span><br><span class="line"></span><br><span class="line">$ cat CNAME </span><br><span class="line">myboke<span class="selector-class">.ink</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>清除缓存，重新部署上github</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>查看是否部署成功，点击仓库–&gt;settings。如果显示Your site is published at xxx就代表部署成功。下拉还需要勾选Enforce HTTPS</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124205127.png"></p><h2 id="分享系统"><a href="#分享系统" class="headerlink" title="分享系统"></a>分享系统</h2><p>通过Share.js进行分享链接，可参考文档<a href="https://github.com/overtrue/share.js/">Share.js</a></p><p><strong>安装Share.js</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install social-share<span class="selector-class">.js</span></span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启sharejs</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  disabled_sites:   //过滤不分享的站点</span><br></pre></td></tr></table></figure><p><strong>浏览结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124230345.png"></p><h2 id="评论系统Gitalk"><a href="#评论系统Gitalk" class="headerlink" title="评论系统Gitalk"></a>评论系统Gitalk</h2><p>melody主题（第三方）支持很多评论系统，我选择的是<a href="https://github.com/gitalk/gitalk">Gitalk</a>系统，也是部署在GitHub上，通过github Oauth应用的client id和secret值进行连接.</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124205524.png"></p><p><strong>进入个人设置，选择Developer settings–&gt;OAuth Apps–&gt;New OAuth APP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210228.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210432.png"></p><blockquote><p>Application name：可以自己随意起名</p><p>Homepage URL：填写github默认的域名</p><p>Application description：应用描述，可以自己随意</p><p>Authorization callback URL：回调的网址，就写自己的个人域名</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124210538.png"></p><p><strong>在source/_data/melody.yml下开启Gitalk</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /blog/source/_data</span><br><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  client_id: <span class="string">&#x27;创建的client_id&#x27;</span></span><br><span class="line">  client_secret: <span class="string">&#x27;创建的client_secret&#x27;</span></span><br><span class="line">  repo: <span class="string">&#x27;你的网站仓库名&#x27;</span></span><br><span class="line">  owner: <span class="string">&#x27;用户名&#x27;</span></span><br><span class="line">  admin: [ <span class="string">&#x27;用户名&#x27;</span> ]</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211239.png"></p><p><strong>浏览自己的网站进行测试，登录成功之后，没有报错则成功部署Gitalk</strong></p><blockquote><p>PS：如果出现Not found或其他问题，请确认自己域名设置和仓库名以及用户名有没有填写错误</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211501.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124211845.png"></p><h2 id="搜索功能Algolia与Local-search"><a href="#搜索功能Algolia与Local-search" class="headerlink" title="搜索功能Algolia与Local search "></a>搜索功能Algolia与Local search </h2><p>melody主题提供了两种搜索功能，一个是Algolia，一个是local search。这里推荐使用local search，一是方便且也快速，二是相对简单。Algolia虽也快，但毕竟是国外的，搜索过程中需要初始化一些时间。</p><h3 id="algolia设置"><a href="#algolia设置" class="headerlink" title="algolia设置"></a>algolia设置</h3><p>algolia是一家为网站与移动应用提供托管式搜索API的初创企业，网站或移动应用只需嵌入简单代码数分钟就可以实现搜索功能</p><p>algolia有两种安装，即<a href="https://github.com/oncletom/hexo-algolia">hexo-algolia</a>和<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch</a>，我使用的是后者，其实两者都相差不多</p><p><strong>登录<a href="https://www.algolia.com/users/sign_in%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87github%E5%92%8CGoogle%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95">https://www.algolia.com/users/sign_in，可以通过github和Google账号登录</a></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124220640.png"></p><p><strong>登录后，创建一个index，可以随意起名</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221025.png"></p><p><strong>选择侧边栏的API Keys</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221121.png"></p><p><strong>选择All API Keys，然后新建一个API Key</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124221701.png"></p><p><strong>安装hexo-algoliasearch</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-algoliasearch --save</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加hexo-algoliasearch插件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">plugins:</span><br><span class="line">  - hexo-algoliasearch</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加algolia配置</strong></p><blockquote><p>在你的Your API Keys中，都有以下的参数，其余配置说明可以到<a href="https://github.com/LouisBarranqueiro/hexo-algoliasearch">hexo-algoliasearch</a>查看</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">algolia:</span><br><span class="line">  appId: <span class="string">&quot;Application ID&quot;</span></span><br><span class="line">  apiKey: <span class="string">&quot;选择你创建的API Key&quot;</span></span><br><span class="line">  adminApiKey: <span class="string">&quot;Admin API Key&quot;</span></span><br><span class="line">  chunkSize: <span class="number">5000</span></span><br><span class="line">  indexName: <span class="string">&quot;创建的index名称&quot;</span></span><br><span class="line">  fields:</span><br><span class="line">    - content:strip</span><br><span class="line">    - slug</span><br><span class="line">    - tags</span><br><span class="line">    - title</span><br><span class="line">    - path</span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启algolia</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">algolia_search:</span><br><span class="line">  enable: true                                //开启algolia搜索</span><br><span class="line">  hits:                                       //每次搜索显示的页面</span><br><span class="line">    per_page: <span class="number">10</span></span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts      </span><br><span class="line">    hits_empty: <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> # if there are no result</span><br><span class="line">    hits_stats: <span class="string">&quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span></span><br></pre></td></tr></table></figure><p><strong>部署上algolia，需要将文件的索引上传到algolia，这样才能搜索的到文章标题</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g </span><br><span class="line">$ hexo algolia</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Testing HEXO_ALGOLIA_INDEXING_KEY permissions.</span><br><span class="line">INFO start processing</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> 30 records to index (post, page).</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Indexing chunk 1 of 1 (29 records).</span><br><span class="line">............</span><br><span class="line">INFO <span class="selector-attr">[hexo-algolia]</span> Indexing done.</span><br></pre></td></tr></table></figure><blockquote><p>如果出现报错，则添加HEXO_ALGOLIA_INDEXING_KEY=API Key（你创建的Key）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ export HEXO_ALGOLIA_INDEXING_KEY=API Key</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure></blockquote><p><strong>浏览algolia，查看是否成功</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124223447.png"></p><h3 id="Local-search设置"><a href="#Local-search设置" class="headerlink" title="Local search设置"></a>Local search设置</h3><p>[Local search][<a href="https://github.com/wzpan/hexo-generator-search]%E5%9C%A8%E6%9C%AC%E5%9C%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%90%9C%E7%B4%A2%E7%AB%99%E7%82%B9%E4%B8%8A%E7%9A%84%E6%A0%87%E9%A2%98%E5%86%85%E5%AE%B9%E4%BC%9A%E6%9B%B4%E5%8A%A0%E5%BF%AB%E9%80%9F">https://github.com/wzpan/hexo-generator-search]在本地，所以搜索站点上的标题内容会更加快速</a></p><p><strong>安装hexo-generator-search</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><strong>在初始目录下的_config.yml添加hexo-generator-search参数</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim _config<span class="selector-class">.yml</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: <span class="number">10000</span></span><br><span class="line">  content: true</span><br></pre></td></tr></table></figure><p><strong>在source/_data/melody.yml下开启local search</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim melody<span class="selector-class">.yml</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>部署上网站</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><strong>查看搜索结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210124225045.png"></p><h2 id="解决图片多余的描述名称"><a href="#解决图片多余的描述名称" class="headerlink" title="解决图片多余的描述名称"></a>解决图片多余的描述名称</h2><p>我是通过在本地Typora工具写文章，然后通过PicGo图床工具上传到阿里云OSS，接着写完整了之后才部署上网站。每次复制图片在Typora都会有描述的名称</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210125193508.png"></p><p>上传到网站之后也是有图片的描述名称，看别人博客的文章是直接删除括号里内容[image-xxx]，但是这样太繁琐了，所以自己通过vim的替换方法替换全部的内容（如还有其他简单的方法，可以在留言告知我，谢谢！）</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210125193050.png"></p><p><strong>替换的方法，vim编辑一个文章，然后复制下面的替换方法，就可以批量替换成[]</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim xxx</span><br><span class="line">:%s#\[image.*\](#[](#g</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210125193945.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora+PicGo+图床</title>
      <link href="2021/01/23/Typora-PicGo-%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/01/23/Typora-PicGo-%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora-PicGo-图床"><a href="#Typora-PicGo-图床" class="headerlink" title="Typora+PicGo+图床"></a>Typora+PicGo+图床</h1><h2 id="Typora介绍"><a href="#Typora介绍" class="headerlink" title="Typora介绍"></a>Typora介绍</h2><p>对于Typora的介绍，首先你得知道什么是Markdown？</p><blockquote><p>Markdown是一种轻量标记语言，通过简单的语法，使用普通文本的得到一定的格式，可以很容易就上手写笔记，比如通过#号代表的是一级标题，通过##号代表的是二级标记，现今很多的文章都基于Markdown来写，统一的格式，不管在哪里写文章，都可以完美的呈现出来</p><p>学习Markdown：<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown教程</a></p><p>学习Typora：<a href="https://www.typora.io/">官网</a></p><p>Typora下载地址：<a href="https://www.typora.io/#windows%EF%BC%88%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%AE%89%E8%A3%85%E9%83%BD%E6%98%AF%E5%BE%88%E7%AE%80%E5%8D%95%EF%BC%89">https://www.typora.io/#windows（根据自己的系统下载，安装都是很简单）</a></p></blockquote><p>Typora是一款简洁的Markdown编辑器，它提供了实时预览功能。可以帮助你在写文档的时候专注于内容的本身，支持<a href="https://support.typora.io/Auto-Numbering/">标题自动编号</a>，支持<a href="https://support.typora.io/Resize-Image/">图片缩放</a>，<strong>还有该文章要说明的图床功能，typora都支持</strong>。当然包括你想要的写法，typora几乎都有，可以通过官网去熟悉，这里就不一一介绍了</p><p>Typora除了自带的一些主题，官网上也有许多绚丽的<a href="https://theme.typora.io/">主题</a>，可以根据自己喜欢的主题进行编写文章</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img1/Snipaste_2021-04-28_14-55-13.png"></p><h2 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h2><p>PicGo是一款图床工具，就是可以把本地图片转换成URL链接上传到图床中，它是一款用Electron-vue开发的软件，支持七牛云、腾讯云COS、GitHub、Gitee、SM.MS、阿里云OSS等图床，简洁又易用，功能也十分强大。</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123174143.png"></p><p>PicGo下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases%EF%BC%88%E6%A0%B9%E6%8D%AE%E7%9A%84%E8%87%AA%E5%B7%B1%E7%9A%84%E7%B3%BB%E7%BB%9F%E4%B8%8B%E8%BD%BD%EF%BC%89">https://github.com/Molunerfinn/PicGo/releases（根据的自己的系统下载）</a></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123175343.png"></p><p><strong>注意：安装的第二步，选择位置不要选择默认的位置，否则可能会导致权限的问题</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123175938.png"></p><h2 id="配置SM-MS、GitHub与阿里云OSS图床"><a href="#配置SM-MS、GitHub与阿里云OSS图床" class="headerlink" title="配置SM.MS、GitHub与阿里云OSS图床"></a>配置SM.MS、GitHub与阿里云OSS图床</h2><h3 id="SM-MS图床配置"><a href="#SM-MS图床配置" class="headerlink" title="SM.MS图床配置"></a>SM.MS图床配置</h3><p>PicGo默认的图床，在我看来，SM.MS是最简单的图床，只需要配置一个Token（令牌）就可以了。而且是一个免费的图床，上传的速度一般。图床有5G存储空间，一般的图片也才几十KB或者几百KB，所以图片存储一般足够用了（注意：每张图片大小有5M的限制，每次最多上传10张图片）。</p><p>当然有一个弊端，就是它是国外图床，访问图片需要基于你的网络才能看到（如果网络不好可能会导致看不到图片）。要看你写的文章是在本地，还是在你购买的服务器上。如果你购买的服务器能够访问得到SM.MS，那么观看的文章图片应该是没有问题的</p><p><strong>SM.MS注册：<a href="https://sm.ms/">https://sm.ms/</a></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182052.png"></p><p><strong>进入视图，获取Token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182202.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182230.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182251.png"></p><p><strong>打开PicGo图床工具，将复制的Token粘贴到设定的Token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182438.png"></p><p><strong>接着配置Typora，将本地编写的图片上传到SM.MS</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123182931.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123183401.png"></p><p><strong>点击图片右键上传即可上传到SM.MS图床，当然如果想要全部上传则选择格式–&gt;图像–&gt;上传本地所有图片</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123211805.png"></p><h3 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h3><p>GitHub也可以当做图床使用，同样是一个免费的。配置比SM.MS麻烦些，相信大家在使用GitHub图床时应该折腾不少时间（包括我自己），主要是要在PicGo配置正确，简单是简单，但是出现问题可能就需要花一些时间了</p><p>GitHub也有一个弊端，因为也是在国外的。这里不建议使用，原因是上传的时候可能有些慢。建议可以使用国内的gitee，也跟GitHub一样是一个版本系统，配置相差不多。因为gitee是国内的，所以上传的速度会比GitHub快。</p><p><strong><a href="https://github.com/">https://github.com/</a>  登陆GitHub，创建一个创库</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123200935.png"></p><p><strong>点击自己的头像，选择Settings</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201247.png"></p><p><strong>选择Developer settings，点击Personal Access tokens，然后创建token</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201457.png"></p><p><strong>创建token，名字可以随机起，但是一定要勾选repo可访问的范围</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201610.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123201654.png"></p><p><strong>打开PicGo图床工具，将复制的Token粘贴到设定的Token</strong></p><blockquote><p><strong>设定的仓库名：</strong>用户名/仓库名（一定要知道你的用户名是哪个，别填写错误了，你可以点击自己的头像，就可以看到自己的用户名）</p><p><strong>设定分支名：</strong>默认master就好（当然你也可以自己再创建其他分支，然后填写即可）</p><p><strong>设定的Token：</strong>就是上述创建的token（只有一次显示机会）</p><p><strong>指定存储路径：</strong>可填可不填（如果不填所有图片存储在当前目录/，如果填写img/，PicGo会自动帮你在GitHub上创建img文件夹，并存储在img/下）</p><p><strong>设定自定义域名：</strong><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123202148.png"></p><p><strong>Typora设置与上述SM.MS设置是一样的</strong></p><h3 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h3><p>阿里云的对象存储是收费的，不过价格并不是很贵，价格的计算包括存储费用、流量费用和请求费用。如果不差钱的朋友，对于上述两个图床来说<strong>建议选择OSS</strong>，按套餐来可以选择一年40G也才9快钱。当然也有按量计费，看自己的需求选择</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204119.png"></p><p><strong>购买OSS</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204439.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204605.png"></p><p><strong>支付成功后，移动到自己的头像，选择访问控制</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204709.png"></p><p><strong>创建一个用户，输入登录名称和显示名称，点击确认，要求手机验证</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204856.png"></p><p><strong>选择权限管理，点击授权–&gt;新增授权</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123204947.png"></p><p><strong>选择认证管理，创建AccessKey，会生成AccessKeyID和AccessKeySecret，AccessKeySecret是无法找回的，一定要保存好，后续还要用来配置PicGo</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205052.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205111.png"></p><p><strong>进入到OSS控制台<a href="https://oss.console.aliyun.com/overview%EF%BC%8C%E5%88%9B%E5%BB%BABucket">https://oss.console.aliyun.com/overview，创建Bucket</a></strong></p><blockquote><ol><li>Bucket名称要全局唯一</li><li>区域最好选择离自己近的</li><li>权限选择公有图，图片才能让其他人访问的到</li></ol><p>上传的文件链接格式为：https://[Bucket].[地区].aliyuncs.com/文件目录及名称</p><p>比如我的：<a href="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png">https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png</a></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123205535.png"></p><p><strong>打开PicGo图床工具，将AccessKey复制到阿里云图床中</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123210746.png"></p><h2 id="其他图床"><a href="#其他图床" class="headerlink" title="其他图床"></a>其他图床</h2><p>七牛云存储也是挺好，新用户可以有一个月的体验，提供100年免费10G空间，不过一个月后需要绑定自己的域名，而且是要备案过的，有兴趣的朋友可以去试试</p><p>上述有说Gitee和GitHub差不多，不过还需要安装一个gitee插件，其余的配置跟GitHub差不多</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210123213003.png"></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firewalld应用操作</title>
      <link href="2021/01/21/firewalld%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/21/firewalld%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Firewalld防火墙"><a href="#Firewalld防火墙" class="headerlink" title="Firewalld防火墙"></a>Firewalld防火墙</h1><h2 id="Firewalld基本概述"><a href="#Firewalld基本概述" class="headerlink" title="Firewalld基本概述"></a>Firewalld基本概述</h2><p>RHEL/CentOS系统中继承了多款防火墙管理工具，其中Firewalld（Dynamic Firewall Manager of Linux systems, Linux系统的动态防护墙管理器）服务是Centos7默认的防火墙配置管理工具，它拥有基于CLI（命令行界面）和基于GUI（图形界面）的两种管理方式</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121155052.png"></p><h2 id="Firewalld与Iptables的不同点"><a href="#Firewalld与Iptables的不同点" class="headerlink" title="Firewalld与Iptables的不同点"></a>Firewalld与Iptables的不同点</h2><blockquote><ol><li>Firewalld可以动态修改单挑规则，而不需要想iptables那样，在修改了规则必须得全部刷新才可以生效</li><li>Firewalld在使用上要比iptables人性化很多，即使不明白“四表五链”，且对TCP/IP协议不理解的也可以实现大部分功能</li><li>Firewalld跟iptables比起来，每个服务器都需要去设置才能放行，因为默认是拒绝，而iptables里默认是每个服务是允许，需要拒绝的才去限制</li><li>Firewalld加入了区域（zone）的概念</li></ol></blockquote><h2 id="Firewalld区域概述"><a href="#Firewalld区域概述" class="headerlink" title="Firewalld区域概述"></a>Firewalld区域概述</h2><p>简单说，区域就是Firewalld预先准备了几套防火墙策略集合（策略模板），用户可以根据生产场景不同而选择适合的策略集合，从而实现防火墙策略之间的快速切换</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121155707.png"></p><p><strong>下述是区域默认规则的策略表</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121164357.png"></p><blockquote><p><strong>注意</strong></p><ul><li>一个zone区域仅能绑定一个网卡，设定不同的匹配规则</li><li>一个zone区域又可以针对不同的源地址设定不同的规则</li></ul></blockquote><h2 id="Firewalld的命令参数"><a href="#Firewalld的命令参数" class="headerlink" title="Firewalld的命令参数"></a>Firewalld的命令参数</h2><p><strong>1. 查看firewalld的有哪些配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qc firewalld</span><br><span class="line">/etc/dbus-1/system.d/FirewallD.conf</span><br><span class="line">/etc/firewalld/firewalld.conf</span><br><span class="line">/etc/firewalld/lockdown-whitelist.xml</span><br><span class="line">/etc/sysconfig/firewalld</span><br></pre></td></tr></table></figure><p><strong>2. 查看firewalld区域模板文件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/lib/firewalld/zones/</span><br><span class="line">$ ls</span><br><span class="line">block<span class="selector-class">.xml</span>  drop<span class="selector-class">.xml</span>      home<span class="selector-class">.xml</span>      public<span class="selector-class">.xml</span>   work<span class="selector-class">.xml</span></span><br><span class="line">dmz<span class="selector-class">.xml</span>    external<span class="selector-class">.xml</span>  internal<span class="selector-class">.xml</span>  trusted<span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure><p><strong>3. firewalld的规则分两种状态</strong></p><blockquote><ol><li>runtime（运行时）：修改规则马上生效，但是临时生效（不建议）</li><li>permanent（持久配置）：修改后需要reload重载才会生效（推荐）</li></ol></blockquote><h3 id="Firewalld-cmd命令分类"><a href="#Firewalld-cmd命令分类" class="headerlink" title="Firewalld-cmd命令分类"></a>Firewalld-cmd命令分类</h3><p><strong>zone区域相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–get-default-zone</td><td>查询默认的区域名称</td></tr><tr><td>–set-default-zone=&lt;区域名称&gt;</td><td>设置默认的区域，使其永久生效</td></tr><tr><td>–get-active-zones</td><td>显示当前正在使用的区域与网卡名称</td></tr><tr><td>–get-zones</td><td>显示总共可用的区域</td></tr><tr><td>–new-zone=&lt;区域名称&gt;</td><td>新增区域</td></tr></tbody></table><p><strong>services服务相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–get-services</td><td>显示预先定义的服务</td></tr><tr><td>–add-service=&lt;服务名&gt;</td><td>设置默认区域允许该服务的流量</td></tr><tr><td>–remove-service=&lt;服务名&gt;</td><td>设置默认区域不在允许该服务的流量</td></tr></tbody></table><p><strong>POST端口相关命令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–add-port=&lt;端口号/协议&gt;</td><td>设置默认区域允许端口的流量</td></tr><tr><td>–remove-port=&lt;端口/协议&gt;</td><td>设置默认区域不再允许端口的流量</td></tr></tbody></table><p><strong>Interface网卡相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–add-interface=&lt;网卡名称&gt;</td><td>将源自该网卡的所有流量都导向某个指定区域</td></tr><tr><td>–change-interface=&lt;网卡名称&gt;</td><td>将某个网卡与区域进行关联</td></tr></tbody></table><p><strong>其他相关指令</strong></p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>–list-all</td><td>显示当前区域的网卡配置参数，资源，端口以及服务</td></tr><tr><td>–reload</td><td>让”持久生效”的配置规则立即生效，并覆盖当前的配置规则</td></tr></tbody></table><h2 id="firewalld区域配置策略"><a href="#firewalld区域配置策略" class="headerlink" title="firewalld区域配置策略"></a>firewalld区域配置策略</h2><p>为了能正常使用Firewalld服务和相关工具去管理防护墙，必须启动Firewalld服务，同时关闭以前旧防火墙相关服务</p><p><strong>1. 禁止传统防火墙服务</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="attribute">mask</span> iptables                  <span class="comment">//禁止iptables</span></span><br><span class="line">Created symlink from /etc/systemd/system/iptables.service to /dev/null.</span><br><span class="line">$ systemctl <span class="attribute">mask</span> ip6tables                 <span class="comment">//禁止ip6tables</span></span><br><span class="line">Created symlink from /etc/systemd/system/ip6tables.service to /dev/null.</span><br><span class="line">$ systemctl <span class="attribute">mask</span> ebtables                  <span class="comment">//禁止ebtables</span></span><br><span class="line">Created symlink from /etc/systemd/system/ebtables.service to /dev/null.</span><br></pre></td></tr></table></figure><p><strong>2. 启动Firewalld防火墙，并加入开机自启动服务</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start firewalld</span><br><span class="line">$ systemctl enable firewalld</span><br></pre></td></tr></table></figure><p><strong>3. 备份Firewalld相关配置文件（重要）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -a /etc/firewalld/ /etc/firewalld_backup</span><br></pre></td></tr></table></figure><h3 id="zone区域配置"><a href="#zone区域配置" class="headerlink" title="zone区域配置"></a>zone区域配置</h3><p><strong>1. 查看当前默认区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-default-zone</span><br><span class="line">public</span><br></pre></td></tr></table></figure><p><strong>2. 查看当前活跃的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">public</span><br><span class="line">  interfaces: eth0 eth1</span><br></pre></td></tr></table></figure><h3 id="配置默认区域并设置白名单"><a href="#配置默认区域并设置白名单" class="headerlink" title="配置默认区域并设置白名单"></a>配置默认区域并设置白名单</h3><blockquote><ol><li>设定默认区域为drop（拒绝所有）</li><li>设置白名单IP访问，将源10.0.0.0/24网段加入trusted区域</li></ol></blockquote><p><strong>1. 将当前默认区域修改drop</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --set-default-zone=drop </span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line"><span class="comment">//设置默认区域不需要加--permanent参数，重载之后就可以永久生效</span></span><br></pre></td></tr></table></figure><p><strong>2. 将网络接口关联至drop区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：不指定区域，则默认会加入到public区域</span></span><br><span class="line">$ firewall-cmd --add-interface=eth0 --add-interface=eth1 --zone=drop  --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">//当然如果指定错误，可以使用--change-interface参数指定回其他区域</span></span><br><span class="line">$ firewall-cmd --change-interface=eth0 --zone=drop  --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment">//重新加载才能永久生效</span></span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 将10.0.0.0/24网段加入trusted白名单</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=10.0.0.0/24 --zone=trusted  --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>4. 查看当前处于活动的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">drop</span><br><span class="line">  interfaces: eth0 eth1</span><br><span class="line">trusted</span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="允许IP地址访问http、ssh服务"><a href="#允许IP地址访问http、ssh服务" class="headerlink" title="允许IP地址访问http、ssh服务"></a>允许IP地址访问http、ssh服务</h3><blockquote><ol><li>设定来源IP，172.16.1.0/24网段允许访问http</li><li>设定来源IP，10.0.0.0/24仅允许访问ssh服务</li><li>其他网段走默认区域</li></ol></blockquote><p><strong>1. 允许10.0.0.0/24的IP地址访问ssh</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=10.0.0.0/24 --permanent --zone=public</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 将172.16.1.0/24网段加入白名单</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-source=172.16.1.0/24 --permanent --zone=trusted</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 查看活动的区域</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --get-active-zone</span><br><span class="line">public</span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.1</span>/<span class="number">24</span></span><br><span class="line">trusted</span><br><span class="line">  sources: <span class="number">172.16</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><p><strong><code>PS：设置到了trusted区域是可以访问HTTP的，但是trusted区域还能访问所有的服务，所以设定在trusted区域是可以解决问题，但是安全性却不高了</code></strong></p><blockquote><p>如何实现172.16.1.0/24网段只能访问HTTP</p><ul><li><p>方法一：新建区域（不建议）</p></li><li><p>方法二：使用富规则（推荐，下述章节有讲解）</p></li></ul></blockquote><h3 id="Firewalld端口访问策略"><a href="#Firewalld端口访问策略" class="headerlink" title="Firewalld端口访问策略"></a>Firewalld端口访问策略</h3><p><strong>1. 配置firewalld，访问80/tcp(http)，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=80/tcp --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 访问80/tcp(http)，161/upd(snmp)端口的流量策略，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=80/tcp --add-port=161/udp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-ports       <span class="comment">//查看端口</span></span><br><span class="line">80/tcp 161/udp</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --list-all         <span class="comment">//查看默认区域的全部配置</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br><span class="line">  services: ssh dhcpv6-client</span><br><span class="line">  ports: <span class="number">80</span>/tcp <span class="number">161</span>/udp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><p><strong>3. 允许请求HTTP与 HTTPS协议的流量设置为永久允许，并立即生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-service=http --add-service=https –zone=public</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-services      <span class="comment">//查看服务</span></span><br><span class="line">ssh dhcpv6-client http https</span><br></pre></td></tr></table></figure><p><strong>4. 允许请求php-fpm服务的流量设置为永久允许，并立即生效</strong></p><blockquote><p>方法一：添加端口就可以并重载</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-port=9000/tcp --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>方法二：复制一个service目录的模板，修改名字跟协议</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/usr/lib/firewalld/services </span><br><span class="line"></span><br><span class="line">$ cp http<span class="selector-class">.xml</span> php-fpm<span class="selector-class">.xml</span></span><br><span class="line">$ cat php-fpm<span class="selector-class">.xml</span>                        <span class="comment">//查看修改后的结果</span></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;service&gt;</span><br><span class="line">  &lt;short&gt;php-fpm&lt;/short&gt;</span><br><span class="line">  &lt;description&gt;php-fpm is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. This option is not required for viewing pages locally or developing Web pages.&lt;/description&gt;</span><br><span class="line">  &lt;port protocol=&quot;tcp&quot; port=&quot;9000&quot;/&gt;</span><br><span class="line">&lt;/service&gt;</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=php-fpm --zone=public --permanent   //设定服务php-fpm</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">$ firewall-cmd --list-all                                       <span class="comment">//查看</span></span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: </span><br><span class="line">  sources: <span class="number">10.0</span>.<span class="number">0.0</span>/<span class="number">24</span></span><br><span class="line">  services: ssh dhcpv6-client http https php-fpm</span><br><span class="line">  ports: <span class="number">80</span>/tcp <span class="number">161</span>/udp <span class="number">9000</span>/tcp</span><br></pre></td></tr></table></figure></blockquote><h2 id="Firewalld端口转发策略"><a href="#Firewalld端口转发策略" class="headerlink" title="Firewalld端口转发策略"></a>Firewalld端口转发策略</h2><p>端口转发是指传统的目标地址映射，实现外网访问内网资源</p><p><strong>转发命令格式为</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd -pernanent -zone=&lt;区域&gt; --add-forward-port=port=&lt;源端口&gt;:proto=&lt;协议&gt;:toport=&lt;目标端口号&gt;:toadd=&lt;目标ip地址&gt;</span><br></pre></td></tr></table></figure><p><strong>1. 转发本机555/tcp端口的流量至22/tcp端口，要求当前和长期有效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --add-forward-port=555:proto=tcp:toport=22:toaddr=10.0.0.7 --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 移除本机转发的555/tcp端口策略，要求当前和长期有效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --remove-forward-port=555:proto=tcp:toport=22:toaddr=10.0.0.7 --zone=public --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 如果需要将本地的10.0.0.7:6666端口转发至后端10.0.0.8:22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要开启IP伪装</span></span><br><span class="line">$ firewall-cmd --add-masquerade --permanent</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-forward-port=port=6666:proto=tcp:toport=22:toaddr=10.0.0.8 --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Firewalld富规则策略"><a href="#Firewalld富规则策略" class="headerlink" title="Firewalld富规则策略"></a>Firewalld富规则策略</h2><p>Firewalld中的富规则可以设置的更细致、更详细的策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更优针对性的策略配置</p><p><strong>1. 富规则手册</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//富规则通用结构</span></span><br><span class="line">$ man firewalld<span class="selector-class">.richlanguage</span></span><br><span class="line">rule</span><br><span class="line">    <span class="selector-attr">[source]</span></span><br><span class="line">    <span class="selector-attr">[destination]</span></span><br><span class="line">    service|port|protocol|icmp-block|icmp-type|masquerade|forward-port|source-port</span><br><span class="line">    <span class="selector-attr">[log]</span></span><br><span class="line">    <span class="selector-attr">[audit]</span></span><br><span class="line">    <span class="selector-attr">[accept|reject|drop|mark]</span></span><br><span class="line"></span><br><span class="line">rule <span class="selector-attr">[family=&quot;ipv4|ipv6&quot;]</span></span><br><span class="line">source [not] address=&quot;address[/mask]&quot;|mac=&quot;mac-address&quot;|ipset=&quot;ipset&quot;</span><br><span class="line">destination [not] address=&quot;address[/mask]&quot;</span><br><span class="line">service name=&quot;service name&quot;</span><br><span class="line">protocol value=&quot;protocol value&quot;</span><br><span class="line">icmp-block name=&quot;icmptype name&quot;</span><br><span class="line">forward-port port=&quot;port value&quot; protocol=&quot;tcp|udp&quot; to-port=&quot;port value&quot; to-addr=&quot;address&quot;</span><br><span class="line">log <span class="selector-attr">[prefix=&quot;prefix text&quot;]</span> <span class="selector-attr">[level=&quot;log level&quot;]</span> <span class="selector-attr">[limit value=&quot;rate/duration&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>2. 富规则是按先后顺序配置，按先匹配到的规则生效</strong></p><table><thead><tr><th align="left">参数</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">–add-rich-rule=’<RULE>‘</td><td align="left">在指定的区添加一条富规则</td></tr><tr><td align="left">–remove-rich-rule=’<RULE>‘</td><td align="left">在指定的区删除一条富规则</td></tr><tr><td align="left">–list-rich-rules</td><td align="left">列出指定去里的所有富规则</td></tr><tr><td align="left">–list-all 和 –list-all-zone</td><td align="left">也能列出存在的富规则</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>1. 允许10.0.0.0/24网段中10.0.0.1主机访问http服务，其他网络无法访问，当前和永久生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//10.0.0.0/24所有主机至public区域</span></span><br><span class="line">$ firewall-cmd --permanent --add-source=10.0.0.0/24 --zone=public</span><br><span class="line"><span class="comment">//仅允许public中的10.0.0.1主机访问http</span></span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 port port=80 protocol=tcp accept&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>2. 拒绝10.0.0.0/24网段中的10.0.0.8主机发起的ssh请求，当前和永久生效</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.8 port port=22 protocol=tcp drop&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>3. 将远程10.0.0.1主机请求firewalld的5555端口，转发至firewalld防火墙的22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 forward-port port=5555 protocol=tcp to-port=22&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p><strong>4. 将远程10.0.0.1主机请求firewalld的6666端口，转发至后端主机10.0.0.9的22端口</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-rich-rule=&#x27;rule family=ipv4 source address=10.0.0.1/32 forward-port port=6666 protocol=tcp to-port=22 to-addr=10.0.0.9&#x27;</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Firewalld实现共享上网"><a href="#Firewalld实现共享上网" class="headerlink" title="Firewalld实现共享上网"></a>Firewalld实现共享上网</h2><p>指定带有公网IP的实例上操作，启动NAT网关的SNAT源地址转换功能</p><p><strong>Firewalld防火墙开启IP伪装，实现地址转换</strong></p><blockquote><ol><li><p>网卡默认是在public的zones内，也是默认zones，永久添加源地址转换功能</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ firewall-cmd --permanent --add-masquerade</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>客户端配置共享上网</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在配置之前，需要配置DNS，否则无法找到IP地址</span></span><br><span class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-eth1</span><br><span class="line">DNS1=223.5.5.5</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后配置网关</span></span><br><span class="line">route add default gw 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.7</span>                  <span class="comment">//临时配置</span></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth1   //永久配置</span><br><span class="line">  GETEWAY=172.16.1.7</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启网卡</span></span><br><span class="line">$ nmcli connection reload</span><br><span class="line">$ nmcli connection down eth1 &amp;&amp; nmcli connection up eth1</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firewalld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables应用操作</title>
      <link href="2021/01/21/iptables%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>2021/01/21/iptables%E5%BA%94%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="iptables防火墙简介"><a href="#iptables防火墙简介" class="headerlink" title="iptables防火墙简介"></a>iptables防火墙简介</h2><p>Netfilter/iptables（以下简称iptables）是UNIX/Linux自带的一款优秀且开放源代码、完全自由是<strong>基于包过滤的防火墙</strong>工具，功能十分强大，且可以灵活应用，对流入/出服务器的数据报进行精细的控制</p><p>iptables是Linux2.4及2.6内核中继承的服务，主要工作在OSI七层中的二三四层，如果重新编译内核，iptables也可以支持7层控制（squid+iptables）</p><h2 id="iptables应用场景"><a href="#iptables应用场景" class="headerlink" title="iptables应用场景"></a>iptables应用场景</h2><p><strong>iptables（生产中看情况，内网关闭，外网打开）</strong></p><blockquote><p>大并发的情况，不能开iptables，会影响性能，使用硬件防火墙(WAF)</p></blockquote><p><strong>iptables使用场景</strong></p><blockquote><ol><li>主机防火墙（Filter表的INPUT链）</li><li>局域网共享上网（Nat表的POSTROUTING链），NAT功能</li><li>端口/IP映射（Nat表的PREROUTING链）</li><li>IP 一对一映射</li><li>IP 一对多映射</li></ol></blockquote><h2 id="iptables工作流程"><a href="#iptables工作流程" class="headerlink" title="iptables工作流程"></a>iptables工作流程</h2><p><strong>iptables是采用数据包过滤机制工作的，所以它会对请求的数据包的包头进行分析，并根据预先设定的规则进行匹配来决定是否可以被允许进入主机</strong></p><blockquote><ol><li>防护墙是一层层过滤的，实际匹配是从上到下进行过滤</li><li>如果匹配了规则，不管是阻止还是通过，数据包则不会继续往下匹配新的规则</li><li>如果所有规则中没有明确是阻止或通过，则匹配默认规则accept（iptables的默认规则）</li><li>对于防火墙的默认规则，是所有的对应链的规则执行完之后才会执行（是最后执行的规则）</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120141141.png"></p><h2 id="iptables四表五链"><a href="#iptables四表五链" class="headerlink" title="iptables四表五链"></a>iptables四表五链</h2><blockquote><ol><li>什么是表（tables）？<ul><li>表（tables）是链的容器，即所有的链（chains）都属于其对应的表</li></ul></li><li>什么是链（chains）？<ul><li>链（chains）是规则（policy）的容器</li></ul></li><li>什么是规则（policy）？<ul><li>规则（policy）就是iptables一系列过滤信息的规范和具体方法条款</li></ul></li></ol></blockquote><p><strong>iptables包含4张表和五个链，但使用最多两张表示filter和nat表</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120182209.png"></p><h3 id="FILTER表"><a href="#FILTER表" class="headerlink" title="FILTER表"></a>FILTER表</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120183921.png"></p><table><thead><tr><th>filter表</th><th>真正负责主机防火墙功能（过滤流入/出主机的数据包）</th></tr></thead><tbody><tr><td>INPUT链</td><td>负责过滤所有目标进入主机的数据包</td></tr><tr><td>FORWRAD链</td><td>负责转发流经主机的数据包，起转发的作用(net.ipv4.ip_forward=0)</td></tr><tr><td>OUTPUT链</td><td>负责处理从主机发出去的数据包</td></tr></tbody></table><h3 id="NAT表"><a href="#NAT表" class="headerlink" title="NAT表"></a>NAT表</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120183916.png"></p><table><thead><tr><th>NAT表</th><th>负责网络地址转换，即源/目ip地址和端口转换；和主机本身无关，用于局域网共享上网或者特殊的端口转换服务器相关</th></tr></thead><tbody><tr><td>OUTPUT</td><td>和主机放出去的数据包有关，改变主机发出数据包的目的地址</td></tr><tr><td>PREROUTING</td><td>在数据包到达防火墙时，判断路由之前执行的规则，作用是改变数据包的目的地址、目的端口</td></tr><tr><td>POSTROUTING</td><td>在数据包离开防火墙时，判断路由之后执行的规则，作用是改变数据包的源地址，源端口</td></tr></tbody></table><h2 id="iptables表和链工作流程图"><a href="#iptables表和链工作流程图" class="headerlink" title="iptables表和链工作流程图"></a>iptables表和链工作流程图</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210120184054.png"></p><h2 id="iptables环境准备"><a href="#iptables环境准备" class="headerlink" title="iptables环境准备"></a>iptables环境准备</h2><p><strong>查看是否安装iptables</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa|grep iptables</span><br><span class="line">iptables-1<span class="selector-class">.4</span><span class="selector-class">.7-19</span><span class="selector-class">.el6</span><span class="selector-class">.x86_64</span></span><br></pre></td></tr></table></figure><p><strong>如没有，则使用yum进行安装</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install –y iptables-services</span><br></pre></td></tr></table></figure><h2 id="加载防火墙的内核模块"><a href="#加载防火墙的内核模块" class="headerlink" title="加载防火墙的内核模块"></a>加载防火墙的内核模块</h2><p><strong>默认情况下iptables模块是很少的，应该只有四个</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod |egrep &#x27;filter|net|ipt&#x27;</span><br><span class="line">iptable_filter          2793  0 </span><br><span class="line">ip_tables              17895  1 iptable_filter</span><br><span class="line">ip6table_filter         2889  1 </span><br><span class="line">ip6_tables             18828  1 ip6table_filter</span><br></pre></td></tr></table></figure><p><strong>加载模块</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ modprobe ip_tables</span><br><span class="line">$ modprobe iptable_filter</span><br><span class="line">$ modprobe iptable_nat</span><br><span class="line">$ modprobe ip_conntrack</span><br><span class="line">$ modprobe ip_conntrack_ftp</span><br><span class="line">$ modprobe ip_nat_ftp</span><br><span class="line">$ modprobe ipt_state</span><br></pre></td></tr></table></figure><p><strong>重新查看</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ lsmod |egrep &#x27;filter|net|ipt&#x27;</span><br><span class="line">iptable_nat             5923  0 </span><br><span class="line">nf_nat                 22708  2 nf_nat_ftp,iptable_nat</span><br><span class="line">nf_conntrack_ipv4       9218  3 iptable_nat,nf_nat</span><br><span class="line">iptable_filter          2793  0 </span><br><span class="line">ip_tables              17895  2 iptable_nat,iptable_filter</span><br><span class="line">nf_conntrack           79601  7 nf_nat_ftp,nf_conntrack_ftp,iptable_nat,nf_nat,nf_conntrack_ipv4,nf_conntrack_ipv6,xt_state</span><br><span class="line">ip6table_filter         2889  1 </span><br><span class="line">ip6_tables             18828  1 ip6table_filter</span><br></pre></td></tr></table></figure><h2 id="iptable实战"><a href="#iptable实战" class="headerlink" title="iptable实战"></a>iptable实战</h2><p><strong>1. 开启防火墙</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/iptables start</span><br><span class="line">$ chkconfig iptables on </span><br><span class="line">$ chkconfig --list|grep iptables</span><br></pre></td></tr></table></figure><p><strong>2. 查看防火墙规则</strong></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-n，–numeric</td><td>地址和端口以数字显示</td></tr><tr><td>-L，–list</td><td>列表显示表和链</td></tr></tbody></table><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -nL</span><br><span class="line">Chain <span class="selector-tag">INPUT</span> (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           state RELATED,ESTABLISHED </span><br><span class="line">ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0           state NEW tcp dpt:22 </span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">REJECT     all  --  0.0.0.0/0            0.0.0.0/0           reject-with icmp-host-prohibited </span><br><span class="line"></span><br><span class="line">Chain <span class="selector-tag">OUTPUT</span> (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination   </span><br></pre></td></tr></table></figure><p><strong>3. 清除防火墙规则</strong></p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-F，–flush</td><td>清楚所有规则，不会处理默认规则</td></tr><tr><td>-X，–delete-chain</td><td>删除用户自定义的链</td></tr><tr><td>-Z，–zero</td><td>链的计数器清零（数据包计数器与数据包字节计数器）</td></tr></tbody></table><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -F</span><br><span class="line">$ iptables -X</span><br><span class="line">$ iptables -Z</span><br></pre></td></tr></table></figure><h3 id="创建IP与端口规则"><a href="#创建IP与端口规则" class="headerlink" title="创建IP与端口规则"></a>创建IP与端口规则</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-t，–table</td><td>指定表名（默认为：filter）</td></tr><tr><td>-A，–append</td><td>将规则添加到指定的链上，默认添加到最后一样</td></tr><tr><td>-I，–insert</td><td>插入规则，默认插入到第一行</td></tr><tr><td>-j，–jump</td><td>对规则的具体处理动作（ACCEPT为接受，DROP为丢弃，REJECT为拒绝）</td></tr><tr><td>-p，–protocol</td><td>指定的协议</td></tr><tr><td>-i，–in-interface</td><td>指定进入的网络接口</td></tr><tr><td>-o，–out-interface</td><td>指定出去的网络接口</td></tr><tr><td>-s，–source</td><td>指定源地址或网段</td></tr><tr><td>-d，–destination</td><td>指定目的地址</td></tr><tr><td>!</td><td>取反（允许10.0.0.0/24网段进入，其他IP地址则丢弃）</td></tr></tbody></table><p><strong>1. 禁止某个端口访问</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t <span class="attribute">filter</span> -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport 22 -j DROP（测试用）</span><br><span class="line">$ iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport 80 -j DROP </span><br></pre></td></tr></table></figure><blockquote><p><strong>如何恢复刚才断开的SSH连接</strong></p><ul><li>机房重启系统或者登录服务器删除刚才的禁止规则</li><li>让机房人员重启服务器或者让机房人员拿用户密码登录进去</li><li>通过服务器的远程管理卡（推荐）</li><li>写一个定时任务，每5分钟就停止防火墙</li><li>登录虚拟机终端页面删除掉刚才的规则</li></ul></blockquote><p><strong>2. 禁止某个IP访问</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.20</span> -<span class="selector-tag">i</span> eth0 -j DROP</span><br><span class="line">$ iptables –<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> ! -s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.30</span> –<span class="selector-tag">i</span> eth0 –j DROP</span><br><span class="line">$ iptables –I INPUT ! –s 10.0.0.0/24 –i eth0 –j DROP</span><br><span class="line">$ iptables –<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> –s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.20</span> –d 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.10</span> –j DROP</span><br></pre></td></tr></table></figure><h3 id="创建端口范围的与ICMP规则"><a href="#创建端口范围的与ICMP规则" class="headerlink" title="创建端口范围的与ICMP规则"></a>创建端口范围的与ICMP规则</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-P，–policy</td><td>指定默认规则</td></tr><tr><td>-m multiport</td><td>指定多个端口</td></tr><tr><td>–to-source</td><td>需要转换的源地址</td></tr><tr><td>–to-destination</td><td>需要转换的目的地址</td></tr><tr><td>–dport</td><td>指定目标端口（用户请求的端口）</td></tr><tr><td>–sport</td><td>指定的源端口</td></tr><tr><td>–icmp-type 8</td><td>指定icmp的ping包</td></tr></tbody></table><p><strong>1. 匹配端口范围</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport 50:<span class="number">100</span> -j DROP（推荐）</span><br><span class="line">$ iptable –I INPUT –p tcp –dport <span class="number">3306</span>:<span class="number">8809</span> –j ACCEPT</span><br><span class="line">$ iptables –I INPUT –p tcp –m multiport –dport <span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span> –j DROP</span><br></pre></td></tr></table></figure><p><strong>2. 匹配ICMP类型</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> icmp --icmp-type 8 -j DROP</span><br><span class="line">$ iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> icmp -m icmp --icmp-type 8 -j DROP</span><br><span class="line">$ iptables -A FORWARD -s 192.168.1.0/24 -p icmp -m icmp --icmp-type any -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="配置连接状态的规则"><a href="#配置连接状态的规则" class="headerlink" title="配置连接状态的规则"></a>配置连接状态的规则</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-m state，–state</td><td>匹配网络状态</td></tr><tr><td>NEW</td><td>已经或将启动新的连接</td></tr><tr><td>ESTABLISHED</td><td>已建立的连接</td></tr><tr><td>RELATED</td><td>正在启动的新连接</td></tr><tr><td>INVALID</td><td>非法或无法识别的</td></tr></tbody></table><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables –<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> –m state –-state ESTABLISHED,RELATED –j ACCEPT</span><br><span class="line">$ iptables –<span class="selector-tag">A</span> <span class="selector-tag">OUTPUT</span> –m state –-state ESTABLISHED,RELATED –j ACCEPT </span><br></pre></td></tr></table></figure><h3 id="限制指定时间包的允许通过数量及并发数"><a href="#限制指定时间包的允许通过数量及并发数" class="headerlink" title="限制指定时间包的允许通过数量及并发数"></a>限制指定时间包的允许通过数量及并发数</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-m limit，–limit</td><td>限制指定时间包的允许通过数和并发数</td></tr><tr><td>–limit-burst [n]</td><td>在同一时间内允许通过的请求“n”为数字，不指定默认为5</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables –I INPUT –s 10.0.0.0/24 –p icmp –icmp-type 8 –m limit –limit 5/min –limit-burst 2 –j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h3><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>–line-numbers</td><td>查看规则的数列</td></tr><tr><td>-D，delete</td><td>删除链或规则</td></tr></tbody></table><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -nL --line-numbers   <span class="comment">//查看规则的序号</span></span><br><span class="line">$ iptables -D <span class="selector-tag">INPUT</span> 2           <span class="comment">//删除那个链的规则（这里是删除INPUT链的序号规则2）</span></span><br></pre></td></tr></table></figure><h2 id="iptables保存规则"><a href="#iptables保存规则" class="headerlink" title="iptables保存规则"></a>iptables保存规则</h2><p>上述的配置都是临时的，如果永久保存，就需要写入配置文件</p><p><strong>第一种方法（推荐使用）</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/iptables save </span><br><span class="line">iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]</span><br></pre></td></tr></table></figure><p><strong>第二种方法</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables-save &gt; /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p><strong>查看</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/sysconfig/iptables</span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp -m tcp --dport 22 -j ACCEPT </span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">i</span> lo -j ACCEPT </span><br><span class="line">-A INPUT -s 10.0.0.0/24 -j ACCEPT </span><br><span class="line">-A INPUT -s 172.16.1.0/24 -j ACCEPT </span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp -m multiport --dports 80,443 -j ACCEPT </span><br><span class="line">-<span class="selector-tag">A</span> <span class="selector-tag">OUTPUT</span> -o lo -j ACCEPT </span><br></pre></td></tr></table></figure><h2 id="iptables实战案列"><a href="#iptables实战案列" class="headerlink" title="iptables实战案列"></a>iptables实战案列</h2><p>两种思想，针对默认规则而言</p><p><strong>1. 默认规则默认是允许的状态</strong></p><blockquote><p>逛公园：黑名单（默认随便进出，对非法的分支进行拒绝）</p><p>应用：配置上网关路由</p></blockquote><p><strong>2. 默认规则默认是拒绝的状态（更安全）</strong></p><blockquote><p>看电影：白名单（默认没票不能进入，需要花钱买票才能进入</p><p>应用：服务器主机防火墙</p></blockquote><p><strong>实时部署</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iptables –F  </span><br><span class="line">iptables –X</span><br><span class="line">iptables –Z</span><br><span class="line">iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp -m multiport --dport 80,443 -j ACCEPT       <span class="comment">//允许80,433端口</span></span><br><span class="line">iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport 22 -j ACCEPT                        <span class="comment">//允许22端口</span></span><br><span class="line">iptables -A INPUT -s 10.0.0.0/24 -p all -j ACCEPT                    //允许外网网段</span><br><span class="line">iptables -A INPUT -s 172.16.1.0/24 -p all -j ACCEPT                  //允许内网网段</span><br><span class="line">iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">i</span> lo -j ACCEPT                                    <span class="comment">//允许回环接口进（127.0.0.1）</span></span><br><span class="line">iptables -<span class="selector-tag">A</span> <span class="selector-tag">OUTPUT</span> -o lo -j ACCEPT                                   <span class="comment">//允许回环接口出（127.0.0.1）</span></span><br><span class="line">iptables -<span class="selector-tag">P</span> <span class="selector-tag">INPUT</span> DROP                                               <span class="comment">//设置默认INPUT链为DROP（丢弃）</span></span><br><span class="line">iptables -<span class="selector-tag">P</span> FORWARD DROP                                             <span class="comment">//设置默认FORWARD链DROP（丢弃）</span></span><br><span class="line">iptables -<span class="selector-tag">P</span> <span class="selector-tag">OUTPUT</span> ACCEPT                                            <span class="comment">//设置默认OUTPUT链为ACCEPT（接收）</span></span><br></pre></td></tr></table></figure><p><strong>如果遭到10.0.0.10攻击web服务器，则直接封掉IP</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables –<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> –s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.10</span> –j DROP                     <span class="comment">//范围大，外部攻击者</span></span><br><span class="line">$ iptables –<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp –s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.10</span> --dport 80 -j DROP   <span class="comment">//细，范围小</span></span><br></pre></td></tr></table></figure><p><strong>自动封掉IP，监控IP短时间内PV数（下述脚本PV数是5），如果到达则使用防火墙命令进行封掉，并在第二天清空前一天的的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat web_drop_ip3.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line"></span><br><span class="line">Count=5                                //PV，访问次数的缺值，超过5次就禁止条这个ip地址</span><br><span class="line">Path=/server/scripts/access.log        //日志的路径</span><br><span class="line">function ipt()&#123;                        //定义ipt函数，用于iptables的设置</span><br><span class="line">  awk &#x27;&#123;print $1&#125;&#x27; $Path|sort|uniq -c|sort -rn &gt;/tmp/tmp.log  //使用AWK取出IP地址列，进行排序统计</span><br><span class="line">  max_line=$(cat /tmp/tmp.log|wc -l)                          //使用wc统计ip有多少行</span><br><span class="line">  for ((i=1;i&lt;=$max_line;i++)) </span><br><span class="line">    do</span><br><span class="line">        ip=$(awk &#x27;NR==&#x27;&quot;$i&quot;&#x27;&#123;print $2&#125;&#x27; /tmp/tmp.log)         //取出tmp.log中的ip地址</span><br><span class="line">        ip_num=$(awk &#x27;NR==&#x27;&quot;$i&quot;&#x27;&#123;print $1&#125;&#x27; /tmp/tmp.log)     //取出每个ip地址统计了多少个</span><br><span class="line">        iptables_ip_num=$(iptables -nL|grep &quot;$ip&quot;|wc -l)      //过滤iptables表中的IP地址，然后进行统计</span><br><span class="line">        if [ $ip_num -ge $Count -a $iptables_ip_num -lt 1 ]</span><br><span class="line">        then</span><br><span class="line">            iptables -I INPUT -s $ip -j DROP                  //禁掉ip地址</span><br><span class="line">            RETVAL=$?                                         //定义一个返回值</span><br><span class="line">            if [ $RETVAL -eq 0 ]                              //等于0表示执行成功</span><br><span class="line">            then</span><br><span class="line">                action &quot;$ip -j DROP&quot; /bin/true</span><br><span class="line">                echo &quot;$ip&quot; &gt;&gt;/tmp/ip_$(date +%F).log          //把这个ip写进一个ip地址黑名单</span><br><span class="line">            else</span><br><span class="line">                action &quot;$ip -j DROP&quot; /bin/false</span><br><span class="line">            fi</span><br><span class="line">        fi</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function del()&#123;</span><br><span class="line">IP_log=/tmp/ip_$(date +%F -d &#x27;-1 day&#x27;).log </span><br><span class="line">if [ -f $IP_log ];then</span><br><span class="line">cat $IP_log|awk &#x27;&#123;print &quot;iptables -D INPUT -s &quot;$1&quot; -j DROP&quot;&#125;&#x27;|bash  //使用AWK的方法取出地址列，然后通过iptables删除，情况iptables表</span><br><span class="line">else</span><br><span class="line">    echo &quot;log is not exist&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function main()&#123;</span><br><span class="line">flag=0                                                       //计数器</span><br><span class="line">while true</span><br><span class="line">do</span><br><span class="line">sleep 600                                                    //每10分钟运行以下面命令</span><br><span class="line">((flag++))                                                   //每执行一次，计数器自动加上1</span><br><span class="line">    ipt</span><br><span class="line">[ $flag -eq 144 ] &amp;&amp; del &amp;&amp; flag=0                           //超过一天的时候，就把黑名单的ip给释放，并且清空计数器</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="配置服务iptables为网关"><a href="#配置服务iptables为网关" class="headerlink" title="配置服务iptables为网关"></a>配置服务iptables为网关</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121102710.png"></p><h3 id="实验环境配置需求前期准备"><a href="#实验环境配置需求前期准备" class="headerlink" title="实验环境配置需求前期准备"></a>实验环境配置需求前期准备</h3><p><strong>1. 服务器网关（B设备）具备如下条件</strong></p><blockquote><ol><li><p>物理条件是具备双网卡，建议eth0外网地址（10.0.0.10，gw:10.0.0.2）,eth1内网地址（这里是172.16.1.10，内网卡不配GW）</p></li><li><p>确保服务器网关（B设备）可以上网（B设备才能代理别的服务器上网），可以通过ping外网baidu.com测试</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ping www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br><span class="line">PING www<span class="selector-class">.a</span><span class="selector-class">.shifen</span><span class="selector-class">.com</span> (183<span class="selector-class">.232</span><span class="selector-class">.231</span><span class="selector-class">.172</span>) 56(84) bytes of data.</span><br><span class="line">64 bytes from 183<span class="selector-class">.232</span><span class="selector-class">.231</span><span class="selector-class">.172</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">128</span> time=<span class="number">29.0</span> ms</span><br></pre></td></tr></table></figure></li><li><p>内核文件/etc/sysctl.conf修改为net.ipv4.ip_forward=1，然后执行sysctl -p使用修改生效</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line"></span><br><span class="line">$ sysctl -<span class="selector-tag">p</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure></li><li><p>查看iptables的filter表，允许FORWARD链转发</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -nL</span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination   </span><br></pre></td></tr></table></figure></li><li><p>不需要filter防火墙功能，共享上网最好暂时停掉防火墙测试</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/iptables stop</span><br></pre></td></tr></table></figure></li><li><p>加载iptables内核模块，配置网关需要iptables的nat表，PREROUTING，POSTROUTING载入iptables内核模块</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">modprobe ip_tables</span><br><span class="line">modprobe iptable_filter</span><br><span class="line">modprobe iptable_nat</span><br><span class="line">modprobe ip_conntrack</span><br><span class="line">modprobe ip_conntrack_ftp</span><br><span class="line">modprobe ip_nat_ftp</span><br><span class="line">modprobe ipt_state</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>2. 内网服务器（C设备）配置网关</strong></p><blockquote><p>服务器（C设备）主要1张网卡eth0网卡（地址：172.16.1.20）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ifdown eth1                         <span class="comment">//如果有多的网卡，可以占时关闭</span></span><br><span class="line"></span><br><span class="line">$ route add default gw 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.10</span>    <span class="comment">//临时配置网关路由</span></span><br><span class="line">$ route -n</span><br><span class="line">Kernel IP routing <span class="selector-tag">table</span></span><br><span class="line">Destination   Gateway     Genmask     Flags Metric Ref  Use Iface</span><br><span class="line">0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>     172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.10</span>   0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>     UG  0   0    0 eth0</span><br><span class="line"></span><br><span class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-eth0   //永久配置网关路由</span><br><span class="line">GATEWAY 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.20</span></span><br></pre></td></tr></table></figure><p>还需要设置DNS，否则无法查找到主机地址</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/resolv.conf</span><br><span class="line">nameserver 223<span class="selector-class">.5</span><span class="selector-class">.5</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure></blockquote><h3 id="实现共享上网"><a href="#实现共享上网" class="headerlink" title="实现共享上网"></a>实现共享上网</h3><p><strong>实现服务器（B设备）通过网关（A设备）上网</strong></p><blockquote><ol><li><p>设置局域网共享网络的NAT命令</p><ul><li>局域网共享的两条命令方法：</li></ul><p>方法1：适合于有固定外网地址的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -o eth0 -j SNAT --to-source 10.0.0.20</span><br></pre></td></tr></table></figure><p>方法2：适合变化外网地址（ADSL）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure></li><li><p>进行C设备测试</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ping www<span class="selector-class">.baidu</span><span class="selector-class">.com</span></span><br><span class="line">PING www<span class="selector-class">.a</span><span class="selector-class">.shifen</span><span class="selector-class">.com</span> (183<span class="selector-class">.232</span><span class="selector-class">.231</span><span class="selector-class">.172</span>) 56(84) bytes of data.</span><br><span class="line">64 bytes from 183<span class="selector-class">.232</span><span class="selector-class">.231</span><span class="selector-class">.172</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">128</span> time=<span class="number">69.9</span> ms</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="iptables实现端口转换"><a href="#iptables实现端口转换" class="headerlink" title="iptables实现端口转换"></a>iptables实现端口转换</h2><p><strong>外部IP地址及端口映射到内部服务器地址及端口（和共享上网环境一样）</strong></p><blockquote><p>通过访问网关（B设备）10.0.0.10:9000，即可以访问到（C设备）172.16.1.20:80，来自9000的端口的请求会通过iptables转发到后端的服务器</p><ol><li><p>在服务器（C设备）开启web服务，这里演示为Apache</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rpm -qa httpd              <span class="comment">//检查是否有httpd包</span></span><br><span class="line">httpd-2<span class="selector-class">.2</span><span class="selector-class">.15-69</span><span class="selector-class">.el6</span><span class="selector-class">.centos</span><span class="selector-class">.x86_64</span></span><br><span class="line"></span><br><span class="line">$ /etc/init.d/httpd start    </span><br></pre></td></tr></table></figure></li><li><p>在服务器（B设备）具体转换命令</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -<span class="selector-tag">A</span> PREROUTING -d 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.20</span> -<span class="selector-tag">p</span> tcp --dport 9000 -j DNAT --to-destination 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.10</span>:<span class="number">80</span></span><br><span class="line"></span><br><span class="line">$ iptables -nL -t nat       //查看iptables的nat表</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">DNAT       tcp  --  <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>            <span class="number">10.0</span>.<span class="number">0.20</span>           tcp dpt:<span class="number">9000</span> to:<span class="number">172.16</span>.<span class="number">1.10</span>:<span class="number">80</span> </span><br></pre></td></tr></table></figure></li><li><p>在宿主机上测试</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210121142117.png"></p></li></ol></blockquote><h2 id="总结：iptables常用案列"><a href="#总结：iptables常用案列" class="headerlink" title="总结：iptables常用案列"></a>总结：iptables常用案列</h2><p><strong>1. Linux主机防火墙（表：filter，链：INPUT）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp -m multiport --dport 80,443 -j ACCEPT       <span class="comment">//允许80,433端口</span></span><br><span class="line">$ iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp --dport 22 -j ACCEPT                        <span class="comment">//允许22端口</span></span><br><span class="line">$ iptables -A INPUT -s 10.0.0.0/24 -p all -j ACCEPT </span><br></pre></td></tr></table></figure><p><strong>2. 局域网机器共享上网（表：nat，链：POSTROUTING）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -s 172.16.1.0/24 -o eth0 -j SNAT --to-source 10.0.0.20</span><br></pre></td></tr></table></figure><p><strong>3. 外部地址和端口，映射为内部地址和端口（表：nat，链：PREROUING）</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -<span class="selector-tag">A</span> PREROUTING -d 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.20</span> -<span class="selector-tag">p</span> tcp --dport 9000 -j DNAT --to-destination 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.10</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure><h2 id="实现外网IP和内网IP一对一映射"><a href="#实现外网IP和内网IP一对一映射" class="headerlink" title="实现外网IP和内网IP一对一映射"></a>实现外网IP和内网IP一对一映射</h2><p><strong>网关：ip-eth0:124.42.60.109 ip-eth1:10.0.0.254</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -<span class="selector-tag">A</span> PREROUTING –d 124<span class="selector-class">.42</span><span class="selector-class">.34</span><span class="selector-class">.112</span> -j DNAT --to-destination 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span></span><br><span class="line">$ iptables -t nat -<span class="selector-tag">A</span> POSTROUTING -s 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.8</span> –o eth0 -j SNAT --to-source 124<span class="selector-class">.42</span><span class="selector-class">.34</span><span class="selector-class">.112</span></span><br></pre></td></tr></table></figure><p><strong>如果想内网用户都可以转换，可以这样设置</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING –s 10.0.0.0/255.255.240.0 –d 124.42.34.112 –j SNAT –to-source 10.0.0.254</span><br></pre></td></tr></table></figure><h2 id="实现外网IP和内网IP一对多映射"><a href="#实现外网IP和内网IP一对多映射" class="headerlink" title="实现外网IP和内网IP一对多映射"></a>实现外网IP和内网IP一对多映射</h2><p><strong>1. 将10.0.0.0/28位的掩码映射成外网IP1.1.1.1-1.1.1.10范围</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -s 10.0.0.0/28 -o eth0 -j SNAT --to-source 1.1.1.1-1.1.1.10</span><br></pre></td></tr></table></figure><p><strong>2. 将10.0.0.0/24位的掩码映射成外网IP1.1.1.1-1.1.1.10范围</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j SNAT --to-source 1.1.1.1-1.1.1.10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync全网备份</title>
      <link href="2021/01/17/rsync%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD/"/>
      <url>2021/01/17/rsync%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="全网备份"><a href="#全网备份" class="headerlink" title="全网备份"></a>全网备份</h1><h2 id="项目环境准备"><a href="#项目环境准备" class="headerlink" title="项目环境准备"></a>项目环境准备</h2><table><thead><tr><th>主机名</th><th>外网IP</th><th>内网IP</th><th>服务器</th></tr></thead><tbody><tr><td>backup</td><td>10.0.0.203</td><td>172.16.1.203</td><td>rsync服务器</td></tr><tr><td>nfs-1</td><td>10.0.0.204</td><td>172.16.1.204</td><td>nfs服务器</td></tr><tr><td>web-1</td><td>10.0.0.205</td><td>172.16.1.205</td><td>web服务器</td></tr></tbody></table><h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><p><strong>公司中的web集群和nfs服务器都需要进行备份，防止宕机和磁盘损坏，如果一旦服务器和磁盘损坏，将会照成不可挽回的后果</strong></p><blockquote><ol><li>规范统一，所有服务器的备份目录必须都为/backup   </li><li>需要备份的系统配置文件<br>a. 定时任务服务的配置文件（/var/spool/cron/root)<br>b. 开机自启动配置文件（/etc/rc.local)<br>c. 日常脚本目录（/server/scripts)<br>d. 防火墙iptables配置文件（/etc/sysconfig/iptables-config)<br>e. web的站点目录和日志目录（/var/www/html/ /app/log/)…</li><li>web服务器打包保留7天后的备份数据 </li><li>备份服务器上，保留每周日的所有数据副本，其他要保留180天的数据</li><li>备份的数据服务器按IP地址为目录保存，备份的文件使用时间名字保存</li><li>确保备份的数据完整性，在备份服务器上对备份的数据每天检查，并将备份成功及失败的结果发到邮箱</li></ol></blockquote><h2 id="项目步骤"><a href="#项目步骤" class="headerlink" title="项目步骤"></a>项目步骤</h2><h3 id="创建项目所需的目录"><a href="#创建项目所需的目录" class="headerlink" title="创建项目所需的目录"></a>创建项目所需的目录</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /backup        //所有服务器</span><br><span class="line">mkdir /server/scripts   //nfs服务和web服务器</span><br></pre></td></tr></table></figure><h3 id="客户端需要压缩的数据信息"><a href="#客户端需要压缩的数据信息" class="headerlink" title="客户端需要压缩的数据信息"></a>客户端需要压缩的数据信息</h3><p><strong>压缩nfs和web服务需要备份的文件</strong></p><blockquote><p>//nfs服务器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zcvPhf /backup/data_backup.tar.gz_$(date +%F-week%w) /var/spool/cron/root /etc/rc.local /server/scripts</span><br></pre></td></tr></table></figure><p>//web服务器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zcvPhf /backup/web_backup.tar.gz_$(date +%F-week%w) /var/www/html </span><br><span class="line">$ tar -zcvPhf /backup/web_backup.tar.gz_$(date +%F-week%w) /app/log/</span><br><span class="line">$ tar -zcvPhf /backup/file_backup.tar.gz_$(date +%F-week%w) /etc/sysconfig/iptables-config /server/scripts</span><br></pre></td></tr></table></figure><p><strong><code>PS：建议web的站点目录和log目录分开打包，因为不管是哪个目录数据都会很大，打包的时候会很慢，一个一个打包可以提升打包的速率。</code></strong></p></blockquote><p><strong>tar查看并解压确定</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar tf /backup/data_backup.tar.gz_2020-12-22-weeek2</span><br><span class="line">$ tar tf /backup/web_backup.tar.gz_2020-12-22-weeek2</span><br><span class="line"></span><br><span class="line">$ tar xf  /backup/data_backup.tar.gz_2020-12-22-weeek2</span><br><span class="line">$ tar xf /backup/web_backup.tar.gz_2020-12-22-weeek2</span><br></pre></td></tr></table></figure><h3 id="web服务器找出前7天的数据并删除"><a href="#web服务器找出前7天的数据并删除" class="headerlink" title="web服务器找出前7天的数据并删除"></a>web服务器找出前7天的数据并删除</h3><p><strong>创建7天前数据</strong></p><blockquote><p>//创建日期自己设定（这里我创建了9天的数据）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ date -s &quot;20200430&quot;</span><br><span class="line">$ cd /backup</span><br><span class="line">$ ll</span><br><span class="line">total 144</span><br><span class="line">-rw-r--r-- 1 root root 12435 Dec  2 16:<span class="number">55</span> web_backup.tar.gz_2020-<span class="number">12</span>-<span class="number">02</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">12435</span> Dec  <span class="number">2</span> <span class="number">16</span>:<span class="number">55</span> web_backup.tar.gz_2020-<span class="number">12</span>-<span class="number">03</span></span><br><span class="line">.....略.....</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">12435</span> Dec  <span class="number">2</span> <span class="number">16</span>:<span class="number">55</span> web_backup.tar.gz_2020-<span class="number">12</span>-<span class="number">09</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">12435</span> Dec  <span class="number">2</span> <span class="number">16</span>:<span class="number">55</span> web_backup.tar.gz_2020-<span class="number">12</span>-<span class="number">10</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>找出7天前的数据，并删除</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find /backup -type f -mtime +7 |xargs rm -f</span><br></pre></td></tr></table></figure><p><strong>将剩余的数据通过rsync传输到备份服务器，下述是rsync的配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/rsyncd.conf </span><br><span class="line">uid = rsync </span><br><span class="line">gid = rsync</span><br><span class="line">port = 873</span><br><span class="line">fake super = yes</span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 200</span><br><span class="line">timeout = 300</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsync.lock</span><br><span class="line">log file = /var/log/rsyncd.log</span><br><span class="line">ignore errors</span><br><span class="line">read only = false</span><br><span class="line">#list = false</span><br><span class="line">hosts allow = 172.16.1.0/24</span><br><span class="line">hosts deny = 0.0.0.0/24</span><br><span class="line">auth users = rsync_backup</span><br><span class="line">#secrets file = /etc/rsync.password  // 是否使用密码方式传输，文件可自己创建</span><br><span class="line"><span class="selector-attr">[backup]</span></span><br><span class="line">comment = &quot;backup dir by other&quot;</span><br><span class="line">path = /backup</span><br></pre></td></tr></table></figure><p><strong>rsync传输到备份服务端命令</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avz /backup/ rsync_backup@172.16.1.203::backup --password-file=/etc/rsync_password</span><br></pre></td></tr></table></figure><h3 id="备份服务端删除180天的数据，并保留每周日的数据"><a href="#备份服务端删除180天的数据，并保留每周日的数据" class="headerlink" title="备份服务端删除180天的数据，并保留每周日的数据"></a>备份服务端删除180天的数据，并保留每周日的数据</h3><p><strong>设置服务器时间为180天后，在服务端找出180天前的数据并删除，并保留每周日的数据</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ date -s &quot;202105010&quot;</span><br><span class="line">$ find /backup -type f -mtime +180 ! -name &quot;*week7&quot;|xargs rm -f</span><br><span class="line">$ ll /backup/</span><br><span class="line">-rw-r--r-- 1 rsync rsync 12435 Mar  5  2021 web_backup<span class="selector-class">.tar</span><span class="selector-class">.gz_2021-03-08-week7</span></span><br></pre></td></tr></table></figure><h3 id="备份服务端以IP地址目录保存数据，并验证数据完整性"><a href="#备份服务端以IP地址目录保存数据，并验证数据完整性" class="headerlink" title="备份服务端以IP地址目录保存数据，并验证数据完整性"></a>备份服务端以IP地址目录保存数据，并验证数据完整性</h3><p><strong>创建IP地址目录(在web和nfs端创建)，这里以web服务端来演示</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /backup/172.16.1.205</span><br><span class="line">$ cd /backup/</span><br><span class="line">$ ll</span><br><span class="line">drwxr-xr-x 2 root root 6 Oct 20 00:<span class="number">07</span> <span class="number">172.16</span>.<span class="number">1.205</span></span><br></pre></td></tr></table></figure><p><strong>分开打包web服务的文件(nfs服务同理）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /backup/172.16.1.205</span><br><span class="line">$ tar -zcvPhf /backup/web_backup.tar.gz_$(date +%F-week%w) /var/www/html</span><br><span class="line">$ tar -zcvPhf /backup/log_backup.tar.gz_$(date +%F-week%w) /app/log</span><br></pre></td></tr></table></figure><p><strong>通过md5sum命令进行校验</strong></p><blockquote><p>//将校验码导入到指纹文件finger.txt（绝对路径）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum /backup/10.0.0.203/web_backup.tar.gz_2021-03-05-week5 &gt;finger.txt</span><br><span class="line">$ md5sum /backup/10.0.0.203/web_backup.tar.gz_2021-03-05-week5 &gt;&gt;finger.txt</span><br></pre></td></tr></table></figure><p>//查看校验码文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat finger<span class="selector-class">.txt</span></span><br><span class="line">4c570d961fd6c7790e0a2f3f576a8681  /backup/10.0.0.203/web_backup.tar.gz_2021-03-05-week5</span><br><span class="line">4c570d961fd6c7790e0a2f3f576a8681  /backup/10.0.0.203/web_backup.tar.gz_2021-03-05-week5</span><br></pre></td></tr></table></figure><p>//将压缩包和指纹文件发送到备份服务器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avz /backup/172.16.1.205 rsync_backup@172.16.1.203::backup --password-file=/etc/rsync_password  </span><br></pre></td></tr></table></figure><p><strong><code>注意：172.16.1.205后面不要加斜杠，否则只有文件传输过去，目录没有传输</code></strong></p></blockquote><p><strong>进入目录对比指纹文件的校验码（备份服务端）</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ md5sum -c /backup/172.16.1.205/finger.txt  //绝对路径</span><br><span class="line">/backup/172.16.1.205/web_backup.tar.gz_2021-03-05-week5: OK</span><br><span class="line">/backup/172.16.1.205/web_backup.tar.gz_2021-03-05-week5: OK</span><br><span class="line"></span><br><span class="line">$ md5sum -c finger<span class="selector-class">.txt</span>                      <span class="comment">//相对路径</span></span><br><span class="line">/backup/172.16.1.205/web_backup.tar.gz_2021-03-05-week5: OK</span><br><span class="line">/backup/172.16.1.205/web_backup.tar.gz_2021-03-05-week5: OK</span><br></pre></td></tr></table></figure><h3 id="实现发送邮件"><a href="#实现发送邮件" class="headerlink" title="实现发送邮件"></a>实现发送邮件</h3><p><strong>邮件发送流程</strong><br><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117223933.png"></p><p><strong>开启163邮件代理</strong><br><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117223941.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117223950.png"></p><p><strong>编辑邮箱配置文件，添加配置</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tail -2 /etc/mail.rc             </span><br><span class="line">set from=163邮箱账户 smtp=smtp.163.com</span><br><span class="line">set smtp-auth-user=163邮箱账户 smtp-auth-password=上述截图的授权码 smtp-auth=login</span><br></pre></td></tr></table></figure><p><strong>发送邮件</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;邮件发送测试&quot; |mail -s &quot;mail check&quot; qq邮箱账户</span><br><span class="line">$ mail -s  &quot;邮箱测试&quot; qq邮箱账户 &lt; 文件</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find /backup/ -type f -name &quot;finger.txt&quot;|xargs md5sum -c &amp;&gt;/tmp/check.txt</span><br><span class="line">$ echo &quot;邮件发送测试&quot; |mail -s &quot;邮箱测试&quot; qq邮箱账户 &lt;/tmp/check.txt </span><br></pre></td></tr></table></figure><p><strong><code>PS：使用find命令找到指纹文件，通过xargs交给md5sum处理，&#39;&amp;&#39;代表也将错误信息一起写入到文件</code></strong></p><p><strong>收到的邮件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117224013.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117224021.png"></p><h2 id="编写全网备份脚本"><a href="#编写全网备份脚本" class="headerlink" title="编写全网备份脚本"></a>编写全网备份脚本</h2><h3 id="客户端脚本（nfs服务器备份脚本）"><a href="#客户端脚本（nfs服务器备份脚本）" class="headerlink" title="客户端脚本（nfs服务器备份脚本）"></a>客户端脚本（nfs服务器备份脚本）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ cat bak<span class="selector-class">.sh</span> </span><br><span class="line">#!/bin/bash</span><br><span class="line">                                        <span class="comment">//设置目录和IP地址的变量</span></span><br><span class="line">Bak_dir=&quot;/backup&quot;             </span><br><span class="line">Ip_info=$(hostname -i)</span><br><span class="line"></span><br><span class="line"># create dir                  <span class="comment">//创建相应的目录</span></span><br><span class="line">mkdir -p $Bak_dir/$Ip_info</span><br><span class="line"> </span><br><span class="line"># tar system file             <span class="comment">//打包系统的文件</span></span><br><span class="line">tar -cPhf /$Bak_dir/$Ip_info/data_backup.tar.gz_$(date +F%-weeek%w) /var/spool/cron/root /etc/rc.local /server/scripts </span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">del</span> 7 ago data info        <span class="comment">//删除7天的数据</span></span><br><span class="line">find /$Bak_dir/$Ip_info -type f -mtime +7|xargs rm -f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"># create finger file         <span class="comment">//创建指纹文件</span></span><br><span class="line">find /$Bak_dir/$Ip_info -type f -mtime -1 ! -name &quot;finger*&quot;|xargs md5sum &gt;/$Bak_dir/$Ip_info/finger.txt</span><br><span class="line"></span><br><span class="line"># rsync backup push data info           <span class="comment">//rsync推送数据到服务端</span></span><br><span class="line">rsync -az /$Bak_dir/$Ip_info rsync_backup@172.16.1.203::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure><h3 id="客户端脚本（web服务器备份脚本）"><a href="#客户端脚本（web服务器备份脚本）" class="headerlink" title="客户端脚本（web服务器备份脚本）"></a>客户端脚本（web服务器备份脚本）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ cat web_bak<span class="selector-class">.sh</span></span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">Bak_dir=&quot;/backup&quot;</span><br><span class="line">Ip_info=$(hostname -i)</span><br><span class="line"></span><br><span class="line"># create dir </span><br><span class="line">mkdir -p $Bak_dir/$Ip_info</span><br><span class="line"></span><br><span class="line"># tar system file</span><br><span class="line">cd /</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">Bak_dir=&quot;/backup&quot;</span><br><span class="line">Ip_info=$(hostname -i)</span><br><span class="line"></span><br><span class="line"># create dir </span><br><span class="line">mkdir -p $Bak_dir/$Ip_info</span><br><span class="line"></span><br><span class="line"># tar system file</span><br><span class="line">tar -cPhf /$Bak_dir/$Ip_info/web_backup.tar.gz_$(date +%F-week%w) /usr/share/nginx/html</span><br><span class="line">tar -cPhf /$Bak_dir/$Ip_info/log_backup.tar.gz_$(date +%F-week%w) /var/log/nginx</span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">del</span> 7 ago data info</span><br><span class="line">find /$Bak_dir/$Ip_info -type f -mtime +7|xargs rm -f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"># create finger file</span><br><span class="line">find /$Bak_dir/$Ip_info -type f -mtime -1 ! -name &quot;finger*&quot;|xargs md5sum &gt;/$Bak_dir/$Ip_info/finger.txt</span><br><span class="line"></span><br><span class="line"># rsync backup push data info</span><br><span class="line">rsync -az /$Bak_dir/$Ip_info rsync_backup@172.16.1.203::backup --password-file=/etc/rsync.password</span><br></pre></td></tr></table></figure><h3 id="备份服务器端脚本"><a href="#备份服务器端脚本" class="headerlink" title="备份服务器端脚本"></a>备份服务器端脚本</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cat server<span class="selector-class">.sh</span> </span><br><span class="line">#!/bin/bash</span><br><span class="line"><span class="comment">//保留每个星期天的数据，将180天以前的数据删除</span></span><br><span class="line"># The server hold back each week 7 data info and hold back 6 months data info</span><br><span class="line">find /backup -type f -mtime +180 ! -name &quot;*week7&quot; 2&gt;/dev/null </span><br><span class="line"></span><br><span class="line"># check finger info      <span class="comment">//校验指纹信息</span></span><br><span class="line">find /backup -type f -name &quot;finger*&quot;|xargs md5sum -c &amp;&gt;/tmp/check.txt</span><br><span class="line"></span><br><span class="line"># send mail in for myself qq-mail         <span class="comment">//发送邮件到自己邮箱</span></span><br><span class="line">mail -s &quot;check backup info for $(date +%F)&quot; QQ邮箱账号 &lt;/tmp/check.txt</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117224002.png"></p><h2 id="实现定时全网数据备份（定制任务）"><a href="#实现定时全网数据备份（定制任务）" class="headerlink" title="实现定时全网数据备份（定制任务）"></a>实现定时全网数据备份（定制任务）</h2><h3 id="客户端定时任务"><a href="#客户端定时任务" class="headerlink" title="客户端定时任务"></a>客户端定时任务</h3><p><strong>nfs服务器</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"># backup data</span><br><span class="line">0 0 * * * /bin/sh /server/scripts/bak.sh</span><br></pre></td></tr></table></figure><p><strong>web服务器</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"># backup data</span><br><span class="line">0 0 * * * /bin/sh /server/scripts/web_bak.sh</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p><strong>备份服务端</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"># check backup data</span><br><span class="line">0 5 * * * /bin/sh /server/scripts/server.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> rsync </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos6克隆问题</title>
      <link href="2021/01/17/Centos6%E5%85%8B%E9%9A%86%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/17/Centos6%E5%85%8B%E9%9A%86%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS6的克隆问题"><a href="#CentOS6的克隆问题" class="headerlink" title="CentOS6的克隆问题"></a>CentOS6的克隆问题</h1><h2 id="使用VMware克隆新的虚拟机，网络无法访问"><a href="#使用VMware克隆新的虚拟机，网络无法访问" class="headerlink" title="使用VMware克隆新的虚拟机，网络无法访问"></a>使用VMware克隆新的虚拟机，网络无法访问</h2><p><strong>使用VMware软件对Centos6进行克隆虚拟机后，网络无法访问和启动，Centos7中不会出现这种情况</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214941.png"></p><blockquote><p><strong>主要原因是：克隆后产生了重复的网卡信息</strong></p></blockquote><h2 id="解决的办法"><a href="#解决的办法" class="headerlink" title="解决的办法"></a>解决的办法</h2><p><strong>1. 使用ip address查看克隆后的网卡名称，这里显示的是eth2</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215005.png"></p><p><strong>2. 修改/etc/udev/rules.d/70-persistent-net.rules文件内容</strong></p><blockquote><ol><li>克隆后会在/etc/udev/rules.d/70-persistent-net.rules文件中会多出1行网卡信</li><li>先查看没有克隆的70-persistent-net.rules文件，会有两个网卡名称，eth0和eth1（eth1是我的第二张网卡）</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117220734.png"></p><p><strong>再查看克隆过后的70-persistent-net.rules文件，多出了一个eth2</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215057.png"></p><p><strong>在克隆的虚拟机上删除名称为eth0的行，然后将名称为eth2行修改eth0,保存并退出名称为eth1行的继续保留</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215106.png"></p><p><strong>3. 修改配置文件/etc/sysconfig/network-scripts/ifcfg-eth0</strong></p><blockquote><p>修改的物理(MAC)地址要于之前在70-persistent-net.rules文件修改为eth0地址物理(MAC)地址一致. ip地址也要改变，其余可以默认不设置</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215138.png"></p><p><strong>4. reboot重启Linux服务让其加载修改的文件，之后重启network</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br><span class="line">$ systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215200.png"></p><blockquote><p><strong>获取ip地址成功</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装</title>
      <link href="2021/01/17/Centos7%E5%AE%89%E8%A3%85/"/>
      <url>2021/01/17/Centos7%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h1><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213949.png"></p><h2 id="VMware软件安装"><a href="#VMware软件安装" class="headerlink" title="VMware软件安装"></a>VMware软件安装</h2><p><strong>1. 第一步新建一个虚拟机</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214040.png"></p><p><strong>2. 选择自定模式</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214051.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214059.png"></p><p><strong>3. 选择稍后安装操作系统</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214111.png"></p><p><strong>4. 选择Linux操作系统，CentOS7版本</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214122.png"></p><p><strong>5. 设置名称及路径</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214132.png"></p><p><strong>6. 设置CPU，内存，网络，I/O类型，磁盘类型，创建磁盘，磁盘容量，指定磁盘文件（全部选择默认下一步）</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214141.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117221704.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117221657.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214156.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214204.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214209.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214215.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214222.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214227.png"></p><h2 id="创建之后，选择编辑虚拟机设置，放置ISO镜像"><a href="#创建之后，选择编辑虚拟机设置，放置ISO镜像" class="headerlink" title="创建之后，选择编辑虚拟机设置，放置ISO镜像"></a>创建之后，选择编辑虚拟机设置，放置ISO镜像</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214240.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214244.png"></p><h2 id="开启虚拟机安装"><a href="#开启虚拟机安装" class="headerlink" title="开启虚拟机安装"></a>开启虚拟机安装</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214256.png"></p><p><strong>1. 进入到第一个安装页面</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214305.png"></p><blockquote><ul><li>第一行表示：安装CentOS7，选择第一个即可</li><li>第二行表示：测试光盘镜像并安装系统（这个我们都不用光盘了，所以不会选择这个）</li><li>第三行表示：排错模式（修复系统，比如重置系统密码）</li></ul><ul><li>补充：CentOS7的网卡名称和之前CentOS6的网卡名称不一致，（CentOS6网卡名称为eth0开头）CentOS7为ens33开头。而大部分企业服务器都是eth0开头，如果想早点适应企业服务器使用的网卡名称，可该名为eth0(按键盘上tab键—&gt;把光标移到下面一行—&gt;输入命令：net.ifnames=0 bisodevname-0，然后回车，进入安装</li></ul></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214419.png"></p><p><strong>2. 第二个页面，选择语言，默认选择英文，也可选择中文（建议选择英文）</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214431.png"></p><p><strong>3. 第三个页面</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214440.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214446.png"></p><p><strong>4. 设置网络和主机名（NETWORK&amp;HOSTNAME）</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117222532.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214504.png"></p><p><strong>5. 选择Ipv4 Settings进行设置地址</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214513.png"></p><p><strong>6. 设置KDUMP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214525.png"></p><p><strong>7. 设置SECURITY POLICY</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214534.png"></p><p><strong>8. 设置分区（INSTALLA TION DESTINA TION）</strong></p><blockquote><p><strong>如果懒的分区，可以直接选择自动分区（则忽略下面手动分区的内容），如果对分区有要求的可以看下面的手动分区</strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214608.png"></p><p><strong>9. 手动分区</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214616.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214620.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214625.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214630.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214634.png"></p><p><strong>10. 设置软件选择(SOFTWARE SELECTION)</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214646.png"></p><p><strong>11. 设置时钟（DATE&amp;TIME）</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214654.png"></p><p><strong>12. 全部完成，点击下一步</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214701.png"></p><p><strong>13. 第四个画面，设置root密码和普通用户账户密码</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214709.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214713.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214719.png"></p><p><strong>14. 等待安装完成之后点击重启</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214727.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214731.png"></p><p><strong>15. 进入到centos7最小化安装画面（不带桌面），如果选择桌面版，则在第10步选择带桌面的安装，现在输入账户密码就可以操作系统了</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117214741.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> CentOS7 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecureCRT安装与配置方案</title>
      <link href="2021/01/17/SecureCRT%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/"/>
      <url>2021/01/17/SecureCRT%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="SecureCRT加载配色方案"><a href="#SecureCRT加载配色方案" class="headerlink" title="SecureCRT加载配色方案"></a>SecureCRT加载配色方案</h1><h2 id="SecureCRT工具包"><a href="#SecureCRT工具包" class="headerlink" title="SecureCRT工具包"></a>SecureCRT工具包</h2><p>链接：<a href="https://pan.baidu.com/s/15QQSfZyknRga7F2uN3i3ww">https://pan.baidu.com/s/15QQSfZyknRga7F2uN3i3ww</a><br>提取码：n13b</p><h2 id="安装CRT软件"><a href="#安装CRT软件" class="headerlink" title="安装CRT软件"></a>安装CRT软件</h2><p><strong>注意:需要关闭主机上安全措施或其他安全软件，如360等</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212535.png"></p><p><strong>开始安装</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212634.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117221253.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117221258.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212651.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212717.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212722.png"></p><p><strong>等待</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212736.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212742.png"></p><h2 id="打开密钥生成器keygen"><a href="#打开密钥生成器keygen" class="headerlink" title="打开密钥生成器keygen"></a>打开密钥生成器keygen</h2><blockquote><p><strong>注意：打开密钥生成器，需要右键使用管理员的身份打开，否则不能成功</strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117212947.png"></p><p><strong>找到自己安装CRT的路径</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213003.png"></p><p><strong>复制到之前点击Patch打开的窗口</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213040.png"></p><p><strong>要显示出Patch has been done successfuily!，才算成功</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213058.png"></p><p><strong>点击确定之后，选择LicenseHelper，然后打开</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213113.png"></p><p><strong>再次显示出Patch has been done successfuily!，表示成功</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213128.png"></p><p><strong>打开安装好的CRT软件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213158.png"></p><p><strong>点击ok</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213214.png"></p><p><strong>选择Enter License Data</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213229.png"></p><p><strong>选择Enter License Manually</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213251.png"></p><p><strong>将keygen中的值粘贴过去，然后点击下一步</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213308.png"></p><p><strong>同样粘贴过去，然后点击下一步</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213358.png"></p><p><strong>完成</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213358.png"></p><p><strong>会自动打开CRT界面</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213413.png"></p><h2 id="设置配色方案"><a href="#设置配色方案" class="headerlink" title="设置配色方案"></a>设置配色方案</h2><p><strong>点击Options–&gt;Global Options</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213444.png"></p><p><strong>复制CRT的配置文件路径，进入到配置文件路径</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213550.png"></p><p><strong>新建一个目录，为keywords,不能选择其他名字，否则不能成功</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213601.png"></p><p><strong>将配色脚本文件colorful-network.ini移动到keywords目录中，回到CRT的设置窗口，点击Default Session</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213619.png"></p><p><strong>点击Appearance，选择上述移动到keywords目录的配色脚本文件colorful-network</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213634.png"></p><p><strong>选择改变所有会话</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213644.png"></p><h2 id="连接一个主机"><a href="#连接一个主机" class="headerlink" title="连接一个主机"></a>连接一个主机</h2><p><strong>快速连接一个设备，连接一个主机，填写IP地址和用户</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213714.png"></p><p><strong>选择接受并保存</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213724.png"></p><p><strong>查看效果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117213734.png"></p>]]></content>
      
      
      <categories>
          
          <category> 连接工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xshell颜色方案</title>
      <link href="2021/01/17/xshell%E9%A2%9C%E8%89%B2%E6%96%B9%E6%A1%88/"/>
      <url>2021/01/17/xshell%E9%A2%9C%E8%89%B2%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="xshell的配置颜色方案"><a href="#xshell的配置颜色方案" class="headerlink" title="xshell的配置颜色方案"></a>xshell的配置颜色方案</h1><h2 id="xshell配置颜色设置"><a href="#xshell配置颜色设置" class="headerlink" title="xshell配置颜色设置"></a>xshell配置颜色设置</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211332.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211337.png"></p><blockquote><ol><li>将下面配色代码写入到txt文件中，保存修改后缀为.xcs<br>如：ColorForMe.xcs，然后导入到xshell中。</li></ol></blockquote><h2 id="ColorForMe配色"><a href="#ColorForMe配色" class="headerlink" title="ColorForMe配色"></a>ColorForMe配色</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[ColorForMe]</span></span><br><span class="line">text=BDB76B</span><br><span class="line">text(bold)=FFD700</span><br><span class="line">background=002B36</span><br><span class="line">red=CB4B16</span><br><span class="line">red(bold)=E14B16</span><br><span class="line">magenta=6C71C4</span><br><span class="line">magenta(bold)=7684D8</span><br><span class="line">yellow=B58900</span><br><span class="line">yellow(bold)=C99D00</span><br><span class="line">blue=268BD2</span><br><span class="line">blue(bold)=26A0D2</span><br><span class="line">cyan=2AA198</span><br><span class="line">cyan(bold)=2AB5AC</span><br><span class="line">green=639A07</span><br><span class="line">green(bold)=77AE1B</span><br><span class="line">white=eee8d5</span><br><span class="line">white(bold)=F8F2DF</span><br><span class="line">black=143F4A</span><br><span class="line">black(bold)=004954</span><br><span class="line"><span class="selector-attr">[Names]</span></span><br><span class="line">name0=ColorForMe</span><br><span class="line">count=1</span><br></pre></td></tr></table></figure><p><strong>效果展示</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211417.png"></p><h2 id="isayme配色"><a href="#isayme配色" class="headerlink" title="isayme配色"></a>isayme配色</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[isayme]</span></span><br><span class="line">text(bold)=eaeaea</span><br><span class="line">magenta(bold)=ff00ff</span><br><span class="line">text=ffffff</span><br><span class="line">white(bold)=eaeaea</span><br><span class="line">green=00c000</span><br><span class="line">red(bold)=d20000</span><br><span class="line">green(bold)=00ff00</span><br><span class="line">black(bold)=808080</span><br><span class="line">red=c00000</span><br><span class="line">blue=113fcc</span><br><span class="line">black=000000</span><br><span class="line">blue(bold)=0080ff</span><br><span class="line">yellow(bold)=ffff00</span><br><span class="line">cyan(bold)=00ffff</span><br><span class="line">yellow=c0c000</span><br><span class="line">magenta=c000c0</span><br><span class="line">background=222222</span><br><span class="line">white=c0c0c0</span><br><span class="line">cyan=00c0c0</span><br><span class="line"><span class="selector-attr">[Names]</span></span><br><span class="line">count=1</span><br><span class="line">name0=isayme</span><br></pre></td></tr></table></figure><p><strong>效果展示</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211436.png"></p><h2 id="Solarized-Dark配色"><a href="#Solarized-Dark配色" class="headerlink" title="Solarized Dark配色"></a>Solarized Dark配色</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[Solarized Dark]</span></span><br><span class="line">text=839496</span><br><span class="line">cyan(bold)=93a1a1</span><br><span class="line">text(bold)=408080</span><br><span class="line">magenta=dd3682</span><br><span class="line">green=859900</span><br><span class="line">green(bold)=586e75</span><br><span class="line">background=042028</span><br><span class="line">cyan=2aa198</span><br><span class="line">red(bold)=cb4b16</span><br><span class="line">yellow=b58900</span><br><span class="line">magenta(bold)=6c71c4</span><br><span class="line">yellow(bold)=657b83</span><br><span class="line">red=808000</span><br><span class="line">white=eee8d5</span><br><span class="line">blue(bold)=8080ff</span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">black=002b36</span><br><span class="line">blue=268bd2</span><br><span class="line">black(bold)=073642</span><br><span class="line"><span class="selector-attr">[Names]</span></span><br><span class="line">name0=Solarized Dark</span><br><span class="line">count=1</span><br></pre></td></tr></table></figure><p><strong>效果展示</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211458.png"></p><h2 id="SolarizedDarkModify配色"><a href="#SolarizedDarkModify配色" class="headerlink" title="SolarizedDarkModify配色"></a>SolarizedDarkModify配色</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[SolarizedDarkModify]</span></span><br><span class="line">text=839496</span><br><span class="line">cyan(bold)=00ffff</span><br><span class="line">text(bold)=e9e9e9</span><br><span class="line">magenta=c000c0</span><br><span class="line">green=80ff00</span><br><span class="line">green(bold)=3c5a38</span><br><span class="line">background=042028</span><br><span class="line">cyan=00c0c0</span><br><span class="line">red(bold)=ff0000</span><br><span class="line">yellow=c0c000</span><br><span class="line">magenta(bold)=ff00ff</span><br><span class="line">yellow(bold)=ffff00</span><br><span class="line">red=ff4500</span><br><span class="line">white=c0c0c0</span><br><span class="line">blue(bold)=1e90ff</span><br><span class="line">white(bold)=fdf6e3</span><br><span class="line">black=000000</span><br><span class="line">blue=00bfff</span><br><span class="line">black(bold)=808080</span><br><span class="line"><span class="selector-attr">[Names]</span></span><br><span class="line">name0=SolarizedDarkModify</span><br><span class="line">count=1</span><br></pre></td></tr></table></figure><p><strong>效果展示</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211518.png"></p>]]></content>
      
      
      <categories>
          
          <category> 连接工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xshell设置</title>
      <link href="2021/01/17/xshell%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/01/17/xshell%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="xshell安装及优化"><a href="#xshell安装及优化" class="headerlink" title="xshell安装及优化"></a>xshell安装及优化</h1><h2 id="xshll版本说明"><a href="#xshll版本说明" class="headerlink" title="xshll版本说明"></a>xshll版本说明</h2><p><strong>xshell5：</strong>一个进程可以打开多个窗口，没有背景设置<br><strong>xshell6：</strong>一个进程只能打开四个窗口，有背景设置</p><h2 id="xshell安装步骤"><a href="#xshell安装步骤" class="headerlink" title="xshell安装步骤"></a>xshell安装步骤</h2><p>…………..省略</p><h2 id="xshell配置"><a href="#xshell配置" class="headerlink" title="xshell配置"></a>xshell配置</h2><h3 id="xshell属性设置"><a href="#xshell属性设置" class="headerlink" title="xshell属性设置"></a>xshell属性设置</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210251.jpeg"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210431.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210443.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210454.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210503.png"></p><h3 id="xshell选项设置"><a href="#xshell选项设置" class="headerlink" title="xshell选项设置"></a>xshell选项设置</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210517.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210601.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210615.png"></p><h3 id="xshell新建连接"><a href="#xshell新建连接" class="headerlink" title="xshell新建连接"></a>xshell新建连接</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210627.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210642.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210650.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210702.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117220916.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117215948.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211051.jpeg"></p><h3 id="xhsell的透明模式设置"><a href="#xhsell的透明模式设置" class="headerlink" title="xhsell的透明模式设置"></a>xhsell的透明模式设置</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211056.jpeg"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211102.jpeg"></p><h3 id="xshell-6设置背景图片"><a href="#xshell-6设置背景图片" class="headerlink" title="xshell-6设置背景图片"></a>xshell-6设置背景图片</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117210251.jpeg"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117211115.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 连接工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基本原理</title>
      <link href="2021/01/17/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据通信基本原理"><a href="#数据通信基本原理" class="headerlink" title="数据通信基本原理"></a>数据通信基本原理</h1><h2 id="什么是网络协议？"><a href="#什么是网络协议？" class="headerlink" title="什么是网络协议？"></a>什么是网络协议？</h2><blockquote><ol><li>网络协议为计算机网络中进行数据交换而建立的规则\标准或约定的集合,它规定了通信时信息必须采用的格式和这些格式所代表的意义. 网络协议使网络上各种设备能够相互交换信息</li><li>网络中存在着许多协议,接收方和发送方使用的协议必须一致,否则一方将无法识别一方发出的信息</li></ol></blockquote><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h2><blockquote><ol><li>ISO：国际标准化组织（International Organization for Standardization）</li><li>OSI：开放系统互联（open system interconnection）20世纪70年代后期,ISO创建OSI参考模型,希望不同供应商的网络能够相互协同工作</li><li>OSI：模型分为七层,由下到上分别为物理层,数据链路层,网络层,传输层,会话层,表示层和应用层</li><li>OSI：模型目的是为了使两个不同的系统能够较容易地通信,而不需要改变底层的硬件或软件的逻辑. 5. OSI模型并不是协议,它是个灵活的\稳健的和可互操作的模型,用来了解和设计网络体系结构.</li></ol></blockquote><h2 id="OSI参考模型体系结构"><a href="#OSI参考模型体系结构" class="headerlink" title="OSI参考模型体系结构"></a>OSI参考模型体系结构</h2><blockquote><ol><li>OSI模型每层都有自己的功能集</li><li>层与层之间相互独立又相互依靠</li><li>上层依赖于下层,下层为上层提供服务</li></ol></blockquote><blockquote><ol><li>应用层作用：<br>  为应用软件提供接口,是应用程序能够使用网络服务<br>  常见的应用层协议：HTTP（80）,FTP（20,21）,SMTP（25）,POP3（110）,Telnet（23）.SSH（22）,DNS（53）等等.</li><li>表示层的作用：<br>  数据的解码和编码<br>  数据的加密和解密<br>  数据的压缩和解压缩</li><li>会话层的作用：<br>  建立\维护\管理应用程序之间的会话</li><li>传出层的作用：<br>  负责建立端到端的连接,保证报文在端到端之间的传输.<br>  功能：服务端编址\分段与重组\连接控制\流量控制\差错控制</li><li>网络层的作用：<br>  负责将分组数据从源端传到到目的端<br>  功能：为网络设备提供逻辑地址（IP）进行路由选路,分组转发</li><li>数据链路层的作用：<br>  在不可靠的物理链路上,提供可靠的数据传输服务,把帧从一跳（结点）移动到另一跳（结点）<br>  功能：组帧\物理编址\流量控制\差错控制\接入控制</li><li>物理层的作用：<br>  负责把逐个比特流从一跳（结点）移动另一端（结点）<br>  功能：定义接口和媒体的物理特性; 定义比特的表示\数据传输速率\信号传输模式（单工\半双工\全双工）; 定义网络物理拓扑（网状\星型\环型\总线型等拓扑）</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204940.png"></p><h2 id="OSI七层通讯原理"><a href="#OSI七层通讯原理" class="headerlink" title="OSI七层通讯原理"></a>OSI七层通讯原理</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204951.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204956.png"></p><p><strong>封装每一层都把上层的协议包当成数据部分,加上自己的协议头部,组成自己的协议包</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205101.png"></p><h2 id="PDU（协议数据单元）"><a href="#PDU（协议数据单元）" class="headerlink" title="PDU（协议数据单元）"></a>PDU（协议数据单元）</h2><blockquote><ol><li>PDU(protocol data unit):每一层使用自己层的协议和别的系统对应层相互通信,协议层的协议在对等层之间交换的信息叫协议数据单元<ul><li>上层：message（数据）</li><li>Transport layer：segment（段）</li><li>Network layer：packet（包）</li><li>Data-link layer：Frame（帧）</li><li>Physical layer：bit（比特）</li></ul></li></ol></blockquote><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p><strong>物理层标准规定了信号\连接器和电缆要求</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205236.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205242.png"></p><h3 id="物理层设备"><a href="#物理层设备" class="headerlink" title="物理层设备"></a>物理层设备</h3><p><strong>物理层设备-集线器</strong></p><blockquote><ol><li>所有的设备在同一冲突域（collision domain）</li><li>所有的设备都在同一广播域（broadcast domain）</li><li>设备共享宽带</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205301.png"></p><p><strong>终端越多冲突（域）就越大</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205324.png"></p><p><strong>冲突过程</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205333.png"></p><blockquote><p>情况是PCA和PCC都要发送数据,两个刚才都检测到HUB上是空闲的,所以都发送了数据,结果产生了冲突,两人都同时启动BACK OFF（让步）动作,随机的生成一个秒数,等待再发数据包,如果再与其他PC发送的数据包冲突,那么再次进入BACK OFF,BACK OFF一共可以进行15次</p></blockquote><h3 id="CSMA-CD技术"><a href="#CSMA-CD技术" class="headerlink" title="CSMA/CD技术"></a>CSMA/CD技术</h3><blockquote><p>载波侦听多路访问/冲突检测CSMA/CD（carrier sense multiple access/collision detect）:一种介质访问的控制方法,当在同一共享网络中的不同结点同时传送数据包时,不可避免的会产生冲突,而CSMA/CD机制就是用来解决这种中途问题</p></blockquote><p><strong>CSMA/CD工作原理</strong></p><blockquote><p>当一个节点在网络中发送数据时,它首先检查线路上是否有其他主机的信号在传送：如果有,说明其他主机在发送数据,自己则利用退避算法等一会在试图发送；如果线路上没有其他主机的信号,将把自己的数据发送出去,同时不停的监听线路,已确信其他主机没有发送数据,如果检测到有其他信息,自己就发送一个JAM(阻塞)信号,通知网段上的其他节点停止发送数据,这使,其他节点也必须采用退避算法等一会再试图发送</p><p><strong><code>总结:先听后发，边听边发，冲突停发，随机延迟后重发</code></strong></p></blockquote><p><strong>CSMA/CD重要特性</strong></p><blockquote><ul><li>使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）每个站在发送数据之后的一小段时间内,存在着遭遇碰撞的可能性</li><li>集线器（HUB）–10M以太网：半双工通信</li><li>交换机—100M以太网：全双工通信</li></ul></blockquote><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p><strong>数据链路层功能</strong></p><blockquote><p>数据链路层通常拆分成两个子层：上子层和下子层</p><ol><li>逻辑链路层</li><li>介质访问控制</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205529.png"></p><p><strong>数据链路层-创建帧</strong></p><blockquote><p>数据链路层帧格式：</p><ol><li>IEEE assigned：电气和电子工程师协会分配前32位</li><li>供应商 assigned：其余的32位由供应商分配</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205555.png"></p><p><strong>数据链路层设备–网络适配器</strong></p><blockquote><ol><li>网络适配器（网卡）<ul><li>网络适配器属于数据链路层设备</li></ul></li><li>MAC地址<ul><li>每个网卡芯片都会烧录一个全球唯一的MAC地址</li></ul></li><li>网卡速率<ul><li> 10\100\1000M自适应</li></ul></li><li>双工模式<ul><li>支持全双工\半双工\自适应</li></ul></li><li>每个接口都有自己的冲突域</li><li>所有的接口都在同一个广播域</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205655.png"></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p><strong>网络层数功能</strong></p><blockquote><p>网络层（从主机到主机的通信）</p><ol><li>为每个终端设备之间通过网络交换数据的片段提供服务</li><li>基本工程：编址，封装，路由，解封装</li><li>协议：IPv4，IPv6，AppleTalk，IPX等.</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205734.png"></p><h3 id="IP报文"><a href="#IP报文" class="headerlink" title="IP报文"></a>IP报文</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117205813.png"></p><blockquote><ol><li>版本：IP协议的版本，目前的IP协议版本号为4，下一代IP协议版本号为6。</li><li>首部长度：IP报头的长度。固定部分的长度（20字节）和可变部分的长度之和。共占4位。最大为1111，即10进制的15，代表IP报头的最大长度可以为15个32bits（4字节），也就是最长可为15*4=60字节，除去固定部分的长度20字节，可变部分的长度最大为40字节。</li><li>服务类型（TOS）：Type Of Service,只有在有QoS差分服务要求时这个字段才起作用。</li><li>总长度：IP报文的总长度。报头的长度和数据部分的长度之和。</li><li>身份标识：唯一的标识主机发送的每一分数据报。通常每发送一个报文，它的值加一。当IP报文长度超过传输网络的MTU（最大传输单元）时必须分片，这个标识字段的值被复制到所有数据分片的标识字段中，使得这些分片在达到最终目的地时可以依照标识字段的内容重新组成原先的数据。</li><li>标志：共3位。R、DF、MF三位。目前只有后两位有效，DF位：为1表示不分片，为0表示分片。MF：为1表示“更多的片”，为0表示这是最后一片。</li><li>片位移：本分片在原先数据报文中相对首位的偏移位。（需要再乘以8）</li><li>生存时间（TTL）：IP报文所允许通过的路由器的最大数量。每经过一个路由器，TTL减1，当为0时，路由器将该数据报丢弃。TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字 RFC 指定，当前值为 64。发送 ICMP 回显应答时经常把 TTL 设为最大值 255。</li><li>协议号：指出IP报文携带的数据使用的是那种协议，以便目的主机的IP层能知道要将数据报上交到哪个进程（不同的协议有专门不同的进程处理）。和端口号类似，此处采用协议号，TCP的协议号为6，UDP的协议号为17。ICMP的协议号为1，IGMP的协议号为2.</li><li>校验和：计算IP头部的校验和，检查IP报头的完整性。</li><li>源IP地址：标识IP数据报的源端设备。</li><li>目的IP地址：标识IP数据报的目的地址。</li><li>Options (其他参数)，这个是额外的功能，提供包括安全处理机制、路由纪录、时间戳、严格与宽松之来源路由等。</li><li>Padding(补齐项目)Options和Padding一共有32位，由于Options字段不是固定的，所以需要Padding 字段来加以补齐</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ARP实验</title>
      <link href="2021/01/17/ARP%E5%AE%9E%E9%AA%8C/"/>
      <url>2021/01/17/ARP%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP实验"><a href="#ARP实验" class="headerlink" title="ARP实验"></a>ARP实验</h1><h2 id="ARP代理"><a href="#ARP代理" class="headerlink" title="ARP代理"></a>ARP代理</h2><p>proxy ARP就是通过使用一个主机（通常为router），来作为指定的设备对另一设备的ARP请求作出应答</p><h2 id="ARP代理实验"><a href="#ARP代理实验" class="headerlink" title="ARP代理实验"></a>ARP代理实验</h2><p><strong>如图</strong>：有三台路由器，其中两台路由器充当主机，R5不设置网关，通过R6的代理ARP实现能够访问R7</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203248.png"></p><h3 id="路由器充当主机的命令为"><a href="#路由器充当主机的命令为" class="headerlink" title="路由器充当主机的命令为"></a>路由器充当主机的命令为</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R5：</span><br><span class="line">  R5(config)<span class="selector-id">#no</span> ip routing <span class="comment">//关闭路由功能</span></span><br><span class="line"></span><br><span class="line">R7：</span><br><span class="line">  R7(config)<span class="selector-id">#no</span> ip routing <span class="comment">//关闭路由功能</span></span><br><span class="line">  R7(config)<span class="selector-id">#ip</span> default-gateway 172<span class="selector-class">.16</span><span class="selector-class">.2</span><span class="selector-class">.254</span>  <span class="comment">//设置网关</span></span><br></pre></td></tr></table></figure><h3 id="配置完之后，查看是没有路由的"><a href="#配置完之后，查看是没有路由的" class="headerlink" title="配置完之后，查看是没有路由的"></a>配置完之后，查看是没有路由的</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203316.png"></p><h3 id="R6配置"><a href="#R6配置" class="headerlink" title="R6配置"></a>R6配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/0</span><br><span class="line"> ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.2</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"><span class="comment">//默认情况下，路由器是开启代理ARP的，所以R6无须设置其他命令，只需要配置IP地址</span></span><br><span class="line"> #开启ARP命令为R6(config-if)<span class="selector-id">#ip</span> proxy-arp</span><br><span class="line"> #关闭ARP命令为R6(config-if)<span class="selector-id">#no</span> ip proxy-arp</span><br></pre></td></tr></table></figure><h3 id="使用wireshark抓包查看"><a href="#使用wireshark抓包查看" class="headerlink" title="使用wireshark抓包查看"></a>使用wireshark抓包查看</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203354.png"></p><p><strong>请求过程</strong></p><blockquote><p>以自己的源地址172.16.1.2和源MAC地址aa:bb:cc:00:50:00，目的地址为172.16.2.1，MAC地址为00:00:00:00:00:00的ARP广播请求发送给路由器，路由收到了该广播ARP，但是路由器默认不会转发广播的，所以该ARP请求仍然到达不了R7，但是路由器却知道R7位于另外一个子网172.16.2.0，于是路由器应答自己的MAC地址给R5</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203414.png"></p><p><strong>响应过程</strong></p><blockquote><p>包含了源地址地址172.16.2.1，源MAC地址是路由器aa:bb:cc:00:60:00，目的地址172.16.1.1，MAC地址aa:bb:cc:00:50:00，R5接受这个包之后，会将R7的MAC地址缓存在自己的ARP表中，如果再次发送请求，就不需要路由器进行转发，因为R5知道了怎么到达R7。</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203428.png"></p><h3 id="代理ARP的优点"><a href="#代理ARP的优点" class="headerlink" title="代理ARP的优点"></a>代理ARP的优点</h3><blockquote><ol><li>代理ARP的主要优点是它可以添加到网络上的单个路由器，而不会干扰网络上其他路由器的路由表</li><li>如果IP主机没有配置默认网关，或者没有任何路由智能功能，则必须在网络中使用代理ARP。</li></ol></blockquote><h3 id="代理ARP的缺点"><a href="#代理ARP的缺点" class="headerlink" title="代理ARP的缺点"></a>代理ARP的缺点</h3><blockquote><ol><li>它增加了网段中的ARP流量</li><li>主机需要更大的ARP表才能处理IP到MAC地址的映射</li><li>安全性可能遭到破坏。比如APR欺骗</li><li>它不适用于不使用 ARP 进行地址解析的网络。</li><li>不能够概括和推广网络拓扑</li></ol></blockquote><h2 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h2><h3 id="免费ARP基本概念"><a href="#免费ARP基本概念" class="headerlink" title="免费ARP基本概念"></a>免费ARP基本概念</h3><blockquote><ol><li>免费ARP，也叫Gratutious ARP,无故ARP。这种ARP不同于一般的ARP请求，它的Sender IP和Target IP字段是相同的，相当于是请求自己的IP地址对应的MAC地址</li><li>发送免费ARP的主机或者设备，往往并不希望收到一个ARP应答，因为若是收到了，说明网络上有人使用相同的IP，这回照成IP冲突。</li></ol></blockquote><h3 id="免费ARP的作用"><a href="#免费ARP的作用" class="headerlink" title="免费ARP的作用"></a>免费ARP的作用</h3><blockquote><p>免费ARP数据包有以下3个作用：</p><ol><li>该类型报文起到一个宣告作用， 它以广播的形式将数据包发送出去，不需要得到回应，只为了告诉其他计算机自己的IP地址和MAC地址。</li><li>可用于检测IP地址冲突。 当一台主机发送了免费ARP请求报文后，如果收到了ARP响应，则说明网络已经存在使用该IP地址的主机。</li><li>可用于更新其他主机的ARP缓存。 如果该主机更换了网卡，而其他主机的ARP缓存表仍然保留着原来的MAC地址，这时，可以发送免费ARP数据包。其他主机收到该数据包后，将更新ARP缓存表，将原来的MAC地址天魂为新的MAC地址。</li></ol></blockquote><h2 id="免费APR实验"><a href="#免费APR实验" class="headerlink" title="免费APR实验"></a>免费APR实验</h2><p><strong>如图</strong>：核心交换机搭建了一个DHCP服务，接入层交换机作为中继，主机win-xp和主机（路由器）通过中继获取DHCP参数（IP地址，网关，DNS）</p><blockquote><p><strong>注：该实验需要懂DHCP原理</strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203612.png"></p><h3 id="核心层配置"><a href="#核心层配置" class="headerlink" title="核心层配置"></a>核心层配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启DHCP服务功能</span></span><br><span class="line">Switch1(config)<span class="selector-id">#service</span> dhcp</span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置dhcp地址池</span></span><br><span class="line">ip dhcp pool vlan10</span><br><span class="line"> network 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> default-router 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> dns-server 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置核心层与汇聚层互连ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置核心层至汇聚设备用户网段的静态路由</span></span><br><span class="line">ip route 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><h3 id="汇聚层配置"><a href="#汇聚层配置" class="headerlink" title="汇聚层配置"></a>汇聚层配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启汇聚交换机的DHCP服务功能</span></span><br><span class="line">S2(config)<span class="selector-id">#service</span> dhcp</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置vlan及vlan 10的ip地址（用户网关的地址）</span></span><br><span class="line">Switch1(config-if)<span class="selector-id">#vlan</span> 10</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置汇聚层与核心层互连的ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//划分两台终端至vlan10</span></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置汇聚层到外网的默认路由</span></span><br><span class="line">ip route 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//开启汇聚层DHCP relay功能,该地址需要是核心交换机的IP地址，并且路由可达.</span></span><br><span class="line">S2(config)<span class="selector-id">#in</span> vlan 10</span><br><span class="line">S2(config-if)<span class="selector-id">#ip</span> helper-<span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> #接口下开启（推荐）</span><br><span class="line">S2(config)<span class="selector-id">#ip</span> helper-<span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> #全局下开启</span><br></pre></td></tr></table></figure><h3 id="配置win-xp主机地址自动获取"><a href="#配置win-xp主机地址自动获取" class="headerlink" title="配置win-xp主机地址自动获取"></a>配置win-xp主机地址自动获取</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203711.png"></p><h3 id="使用wireshark抓取获取免费ARP包"><a href="#使用wireshark抓取获取免费ARP包" class="headerlink" title="使用wireshark抓取获取免费ARP包"></a>使用wireshark抓取获取免费ARP包</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203736.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203740.png"></p><blockquote><ol><li>当主机win-xp通过收到DHCP回复的ACK，还不会立即拥有地址，而是等DHCP服务通过发送免费ARP广播给其他主机，确定这个IP是否在其他主机上使用，如果没有人回复免费ARP，则win-xp主机才能拥有这个地址。免费ARP不会连续发送，而是发送一个之后，没有人回复才会继续发送免费ARP，默认请求发送完4个免费ARP报文则说明这个ip地址是有效的。</li><li>当DHCP发送免费ARP时，如果有人立刻回复了免费ARP报文，则判断这个IP地址是冲突的，如下图显示</li></ol></blockquote><h3 id="win-xp和主机（路由器）冲突现象"><a href="#win-xp和主机（路由器）冲突现象" class="headerlink" title="win-xp和主机（路由器）冲突现象"></a>win-xp和主机（路由器）冲突现象</h3><p><strong>查看主机获取了什么ip地址</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203813.png"></p><p><strong>win-xp获取了192.168.1.4，我们在路由器上也配置192.168.1.4的地址，然后查看现象</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R1(config-if)<span class="selector-id">#ip</span> add 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.4</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><p><strong>win-xp显示ip地址冲突</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203844.png"></p><blockquote><p><strong>当路由器配置完地址之后，立即回复ARP响应，说明ARP地址已经冲突</strong></p></blockquote><p><strong>wireshark抓取的免费ARP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203909.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117203914.png"></p><h3 id="免费ARP问题"><a href="#免费ARP问题" class="headerlink" title="免费ARP问题"></a>免费ARP问题</h3><blockquote><p>问题1：如何判断一个ARP报文是一个免费ARP报文？<br>问题2：免费ARP如何判断冲突？<br>问题3：免费ARP如何判断不冲突？<br>问题4：为什么要广播回复免费ARP报文？</p><p>答1：查看ARP报文中的目的ip地址和源IP地址相同时，则为免费ARP报文<br>答2：当发送完免费ARP报文后收到免费ARP报文，则判断IP地址冲突，无效<br>答3：默认情况下发送4个免费ARP报文，发送完之后伟收到ARP报文，则ip地址生效<br>答4：为了刷新网络中其他主机的ARP缓存表，使其回复到正确的IP地址与MAC地址映射关系</p></blockquote><h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><h3 id="什么是ARP欺骗"><a href="#什么是ARP欺骗" class="headerlink" title="什么是ARP欺骗"></a>什么是ARP欺骗</h3><p>每台主机上都有一个ARP缓存表，缓存表中记录了局域网主机IP地址与MAC地址的对应关系，而局域网数据传输依靠的是MAC地址。但是并不是想象中的那么安全，在ARP缓存表机制存在一个缺陷，当请求主机win-xp收到linux-kail的ARP应答包后，就直接把这个返回包中的IP地址与MAC地址的对应关系保存到ARP缓存表中，如果原有相同IP对应关系，原有的则会被替换。</p><h2 id="实验-单向ARP欺骗"><a href="#实验-单向ARP欺骗" class="headerlink" title="实验(单向ARP欺骗)"></a>实验(单向ARP欺骗)</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204029.png"></p><p><strong>windows-xp配置IP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204050.png"></p><p><strong>Centos6配置IP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204103.png"></p><p><strong>kail配置IP</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204114.png"><strong>kail使用arpspoof进行攻击命令</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="keyword">@kali</span>:~# arpspoof -i eth0 -t <span class="number">10.0</span>.<span class="number">0.10</span> <span class="number">10.0</span>.<span class="number">0.2</span> </span><br><span class="line">//欺骗windows-xp主机说自己是网关，要求把数据发送给kail，然后从eth转发出去</span><br></pre></td></tr></table></figure><p><strong>kail打开多一个窗口，使用tcpdump抓取windows-xp发送过来的流量</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="keyword">@kali</span>:~# tcpdump tcp src port <span class="number">80</span> <span class="keyword">or</span> src <span class="number">10.0</span>.<span class="number">0.10</span> -i eth0 -n</span><br><span class="line">//抓取tcp协议，源端口为<span class="number">80</span>，源地址<span class="number">10.0</span>.<span class="number">0.10</span>，-i指定要侦听的网卡接口，-n不进行DNS解析</span><br><span class="line">//清楚centos的arp缓存arp -d host(主机)</span><br></pre></td></tr></table></figure><p><strong>windows-xp的http请求</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204215.png"></p><p><strong>kail抓取的流量显示</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204240.png"></p><h2 id="实验4（通过EVE-NG搭建）"><a href="#实验4（通过EVE-NG搭建）" class="headerlink" title="实验4（通过EVE-NG搭建）"></a>实验4（通过EVE-NG搭建）</h2><p><strong>如图</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204325.png"></p><p><strong>Linux以及kail创建IP地址的命令</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一种方法:</span><br><span class="line">添加命令：ip addr add <span class="number">172.16</span>.<span class="number">1</span>.x/<span class="number">24</span> dev eth0</span><br><span class="line">删除命令：ip addr add <span class="number">172.16</span>.<span class="number">1</span>.x/<span class="number">24</span> dev eth0</span><br><span class="line"></span><br><span class="line">第二种方法:</span><br><span class="line">添加命令：ifconfig eth0 <span class="number">172.16</span>.<span class="number">1</span>.x/<span class="number">24</span></span><br><span class="line">删除命令：ifconfig eth0 del <span class="number">172.16</span>.<span class="number">1.1</span> netmask <span class="number">255.255</span>.<span class="number">255.0</span></span><br></pre></td></tr></table></figure><p><strong>Linux以及kail添加路由的命令</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一种方法:</span><br><span class="line">添加路由：ip route add <span class="number">172.16</span>.<span class="number">1.1</span>/<span class="number">24</span> via <span class="number">172.16</span>.<span class="number">1.254</span> dev eth0</span><br><span class="line">删除路由：ip route del <span class="number">172.16</span>.<span class="number">1.1</span>/<span class="number">24</span> via <span class="number">172.16</span>.<span class="number">1.254</span> dev eth0</span><br><span class="line"></span><br><span class="line">第二种方法：</span><br><span class="line">添加路由：ip add -net <span class="number">172.16</span>.<span class="number">1.1</span>/<span class="number">24</span> gw <span class="number">172.16</span>.<span class="number">1.254</span></span><br><span class="line">删除路由：ip del -net <span class="number">172.16</span>.<span class="number">1.1</span>/<span class="number">24</span> gw <span class="number">172.16</span>.<span class="number">1.254</span></span><br></pre></td></tr></table></figure><p><strong>Linux-kail抓取的伪造包</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117204356.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP协议与原理</title>
      <link href="2021/01/17/ARP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/ARP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="ARP协议与原理"><a href="#ARP协议与原理" class="headerlink" title="ARP协议与原理"></a>ARP协议与原理</h1><h2 id="ARP概述"><a href="#ARP概述" class="headerlink" title="ARP概述"></a>ARP概述</h2><blockquote><ol><li>ARP是”Address Resolution Protocol”的缩写，译为”地址解析协议”，它是根据IP地址获取物理（MAC）地址的一个TCP/IP协议.</li><li>由于IP地址和MAC地址定位方式不同，ARP协议成为数据传输的必备协议，主机发送信息前，需要通过ARP协议获取目标IP地址对应的MAC地址，从而现实报文的正常封装与转发.</li></ol></blockquote><h2 id="为什么需要ARP协议"><a href="#为什么需要ARP协议" class="headerlink" title="为什么需要ARP协议"></a>为什么需要ARP协议</h2><blockquote><p>当一台网络设备要与另外一台网络通信时，必须要知道对方的IP地址。但是，仅有IP地址是不够的，因为IP数据报文必须封装成帧才能通过数据链路层进行发送，而数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址。每一个网络设备在数据封装前都需要获取下一跳的MAC地址。IP地址由网络层来提供，MAC地址数据链路层提供，通过ARP协议来获取目标设备的MAC地址，将IP地址与MAC地址进行映射，从而实现数据的可达性</p></blockquote><h2 id="ARP工作机制"><a href="#ARP工作机制" class="headerlink" title="ARP工作机制"></a>ARP工作机制</h2><p><strong>ARP工作流程分为两个阶段，一个是ARP请求过程，另一个是ARP响应过程，如图：</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117202737.png"></p><blockquote><ol><li>初始情况下，没有ARP缓存，当VPC1去pingVPC2是会广播发送一个ARP请求报文，ARP请求报文包含了VPC1的IP地址和MAC地址，目标IP地址和目标MAC地址，其中MAC地址为FF:FF:FF:FF:FF:FF</li><li>VPC2会响应这个请求，并回复给VPC1，其目的IP地址和目的MAC地址为VPC1，源地址和源MAC地址是自己</li><li>VPC1收到回复报文，会将VPC2的MAC地址缓存在自己ARP缓存表中。（默认是动态缓存，会老化）</li></ol></blockquote><p><strong>wireshark抓取的请求报文</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201908.png"></p><p><strong>wireshark抓取的响应报文</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201913.png"></p><h2 id="ARP协议报文格式"><a href="#ARP协议报文格式" class="headerlink" title="ARP协议报文格式"></a>ARP协议报文格式</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201926.png"></p><blockquote><ul><li>硬件类型字段：指明了发送方想知道的硬件接口类型，以太网的值为1；</li><li>协议类型字段：指明了发送方提供的高层协议类型，IP为0800（16进制）；</li><li>硬件地址长度和协议长度：指明了硬件地址和高层协议地址的长度，这样ARP报文就可以在任意硬件和任# # 意协议的网络中使用；</li><li>操作字段：用来表示这个报文的类型，ARP请求为1，ARP响应为2，RARP请求为3，RARP响应为4；</li><li>发送方的硬件地址（0-2字节）：源主机硬件地址的前3个字节；</li><li>发送方的硬件地址（3-5字节）：源主机硬件地址的后3个字节；</li><li>发送方IP（0-1字节）：源主机硬件地址的前2个字节；</li><li>发送方IP（2-3字节）：源主机硬件地址的后2个字节；</li><li>目的硬件地址（0-1字节）：目的主机硬件地址的前2个字节；</li><li>目的硬件地址（2-5字节）：目的主机硬件地址的后4个字节；</li><li>目的IP（0-3字节）：目的主机的IP地址。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP——ping工具</title>
      <link href="2021/01/17/ICMP%E2%80%94%E2%80%94ping%E5%B7%A5%E5%85%B7/"/>
      <url>2021/01/17/ICMP%E2%80%94%E2%80%94ping%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP——ping工具"><a href="#ICMP——ping工具" class="headerlink" title="ICMP——ping工具"></a>ICMP——ping工具</h1><h2 id="tcping工具"><a href="#tcping工具" class="headerlink" title="tcping工具"></a>tcping工具</h2><p><strong>轻便型端口连通性检测软件，方便操作与记录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201419.png"></p><blockquote><p><strong>使用方法，将tcping.exe文件放入到C:\Windows\System32\目录下</strong></p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>1. tcping 10.0.0.20 3389 #ping 3306端口</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201456.png"></p><p><strong>2. tcping -d 10.0.0.20 3389 #ping3306端口并追加时间</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201506.png"></p><p><strong>3. tcping –tee C:\ping.txt -d -t 10.0.0.20 3389 #ping3306端口并保存记录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201521.png"></p><h2 id="PinginfoView工具"><a href="#PinginfoView工具" class="headerlink" title="PinginfoView工具"></a>PinginfoView工具</h2><blockquote><p><strong>批量ping包神器，显示直观，结果保存方便</strong></p></blockquote><p><strong>打开页面，添加ip地址</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201551.png"></p><p><strong>点击确定开始ping</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201559.png"></p><p><strong>可以右键生成HTML的报告</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201606.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201611.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP——tracert与traceroute</title>
      <link href="2021/01/17/ICMP%E2%80%94%E2%80%94tracert%E4%B8%8Etraceroute/"/>
      <url>2021/01/17/ICMP%E2%80%94%E2%80%94tracert%E4%B8%8Etraceroute/</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP——tracert与traceroute"><a href="#ICMP——tracert与traceroute" class="headerlink" title="ICMP——tracert与traceroute"></a>ICMP——tracert与traceroute</h1><h2 id="Tracert-Traceroute介绍"><a href="#Tracert-Traceroute介绍" class="headerlink" title="Tracert/Traceroute介绍"></a>Tracert/Traceroute介绍</h2><blockquote><ol><li>Tracert与Traceroute（跟踪路由）是路由跟踪使用程序，用来确定IP数据包访问目标所经过的路径.</li><li>也是一种常用的网络故障诊断工具.</li></ol></blockquote><h2 id="tracert包回应判断故障点"><a href="#tracert包回应判断故障点" class="headerlink" title="tracert包回应判断故障点"></a>tracert包回应判断故障点</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193739.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193745.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193758.png"></p><h2 id="Tracert-Traceroute区别"><a href="#Tracert-Traceroute区别" class="headerlink" title="Tracert/Traceroute区别"></a>Tracert/Traceroute区别</h2><h3 id="traceroute是基于UDP协议"><a href="#traceroute是基于UDP协议" class="headerlink" title="traceroute是基于UDP协议"></a>traceroute是基于UDP协议</h3><blockquote><p>traceroute是向目的地址的某个端口（大于30000）发送UDP数据报文，典型的源有Linux服务器，macOS，网络设备等</p></blockquote><h4 id="traceroute通讯过程"><a href="#traceroute通讯过程" class="headerlink" title="traceroute通讯过程"></a>traceroute通讯过程</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193847.png"></p><h4 id="tracerout请求报文"><a href="#tracerout请求报文" class="headerlink" title="tracerout请求报文"></a>tracerout请求报文</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193900.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193907.png"></p><h4 id="traceroute响应报文报文"><a href="#traceroute响应报文报文" class="headerlink" title="traceroute响应报文报文"></a>traceroute响应报文报文</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193926.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117193931.png"></p><h4 id="traceroute抓取的报文"><a href="#traceroute抓取的报文" class="headerlink" title="traceroute抓取的报文"></a>traceroute抓取的报文</h4><p><strong>每个请求包会发送三次，回也是三次，所以请求和响应一共有24个包</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194017.png"></p><h3 id="Tracert是基于ICMP协议"><a href="#Tracert是基于ICMP协议" class="headerlink" title="Tracert是基于ICMP协议"></a>Tracert是基于ICMP协议</h3><blockquote><p>tracert向目的地址发送ICMP请求回显数据包，典型的代表是Windows设备</p></blockquote><h4 id="tracert通讯过程"><a href="#tracert通讯过程" class="headerlink" title="tracert通讯过程"></a>tracert通讯过程</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194138.png"></p><h4 id="tracert请求报文"><a href="#tracert请求报文" class="headerlink" title="tracert请求报文"></a>tracert请求报文</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194152.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194200.png"></p><h4 id="tracert响应报文"><a href="#tracert响应报文" class="headerlink" title="tracert响应报文"></a>tracert响应报文</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194214.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194220.png"></p><h4 id="tracert抓取的报文"><a href="#tracert抓取的报文" class="headerlink" title="tracert抓取的报文"></a>tracert抓取的报文</h4><p><strong>每个请求包会发送三次，回也是三次，所以请求和响应一共有24个包</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117194244.png"></p><h2 id="traceroute实验"><a href="#traceroute实验" class="headerlink" title="traceroute实验"></a>traceroute实验</h2><blockquote><ol><li>配置静态路由，使全网互通</li><li>地址按路由器的序号规划</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201038.png"></p><p><strong>1. 中间路由器没有去往目标路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除R4去往目标R1的静态路由</span></span><br><span class="line">no ip route 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 34<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.3</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>显示的结果：中途路径终端并提示！H! H! H!</strong></p></blockquote><p><strong>2. 中间路由器没有返回源的路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除R4往返R6的静态路由</span><br><span class="line">no ip route 56<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 45<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.5</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>显示的结果：中途路径全部超时</strong></p></blockquote><p><strong>3. 中间路由器过滤所有收到的ICMP ttl-exceeded报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp any any ttl-exceeded</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/0  //注意调用的接口（e0/1是没有效果的，因为是UDP报文）</span><br><span class="line"> ip access-group 100 in</span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中途路径全部超时，知道最后一跳恢复</strong></p></blockquote><p><strong>4. 中途路由器过滤指定的地址ICMP ttl-exceeded报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp 34<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.255</span> any ttl-exceeded</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/0  #注意调用的接口（e0/1是没有效果的，因为是UDP报文）</span><br><span class="line"> ip access-group 100 in</span><br><span class="line"><span class="comment">//也可以使用精确控制</span></span><br><span class="line">access-list 100 deny icmp 34<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.3</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.255</span> any ttl-exceeded</span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中途指定的路径超时，其余正常</strong></p></blockquote><p><strong>5. 中间路由器过滤ICMP port-unreachable报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp any any port-unreachable</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/0  #注意调用的接口</span><br><span class="line"> ip access-group 100 in</span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：倒数第二跳开始后面所有路经超时</strong></p></blockquote><p><strong>6. 中间路由器过滤所有的ICMP报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp any any</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/0  #注意调用的接口</span><br><span class="line"> ip access-group 100 in</span><br></pre></td></tr></table></figure><blockquote><p><strong>从调用ACL路由器开始，所有路径超时，同时也无法ping通目标以及沿途任何设备</strong></p></blockquote><p><strong>7. 中间路由器过滤本网段的ICMP报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp host 34<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.3</span> any</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/0  #注意调用的接口</span><br><span class="line"> ip access-group 100 in</span><br></pre></td></tr></table></figure><blockquote><p><strong>中间一跳超时，同时不能ping通这一跳</strong></p></blockquote><p><strong>8. 中间路由器过滤UDP端口33434-33464端口的报文</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny   udp any any range 33434 33464</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> ip access-group 100 in #注意接口是e0/1，因为是过滤UDP端口</span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中途路径终端提示! A! A! A</strong></p></blockquote><h2 id="tracert实验"><a href="#tracert实验" class="headerlink" title="tracert实验"></a>tracert实验</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117201052.png"></p><blockquote><ol><li>配置静态路由，使全网互通</li><li>地址按路由器的序号规划</li><li>win-xp使用桥接连接</li></ol></blockquote><p><strong>1. 中间路由器没有去往目标路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除去往目标R6的路由</span><br><span class="line">no ip route 56<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 34<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.4</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中间的路径显示目标不可达</strong></p></blockquote><p><strong>2. 中间路由器没有往返源的路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">删除往返win-xp的路由</span><br><span class="line">no ip route 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 23<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中间的路径至最后都是显示超时</strong></p></blockquote><p><strong>3. 中间路由器过滤所有收到的ICMP ttl-exceeded报文</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">access-list 100 deny icmp any any ttl-exceeded</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">!</span><br><span class="line">interface  e0/1  #注意调用的接口</span><br><span class="line"> ip access-group 100 in</span><br></pre></td></tr></table></figure><blockquote><p><strong>显示结果：中间的路径全部超时，直到最后一跳恢复</strong></p></blockquote><p><strong>4. 中间路由器过滤所有收到ICMP报文</strong></p><blockquote><p><strong>显示的结果和traceroute是一样的，中间的路径全部超时，而且ping不通目标</strong></p></blockquote><h2 id="超时分析"><a href="#超时分析" class="headerlink" title="超时分析"></a>超时分析</h2><blockquote><ol><li>当我们使用tracert命令追踪一个目标时，到中途请求超时，然后恢复，又超时，这种一般是过滤了ICMMP ttl-exceeded报文或者是过滤ICMP包指定的网段.</li><li>当我们使用tracert命令追踪一个目标时，到中途请求超时，直到30跳都没有追踪到，这种一般是过滤了any any的ICMP报文</li></ol></blockquote><h2 id="MPLS-隐藏traceroute路径"><a href="#MPLS-隐藏traceroute路径" class="headerlink" title="MPLS 隐藏traceroute路径"></a>MPLS 隐藏traceroute路径</h2><p>略……………………………………</p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG镜像转换</title>
      <link href="2021/01/17/EVE-NG%E9%95%9C%E5%83%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>2021/01/17/EVE-NG%E9%95%9C%E5%83%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="EVE-NG镜像转换"><a href="#EVE-NG镜像转换" class="headerlink" title="EVE-NG镜像转换"></a>EVE-NG镜像转换</h1><h2 id="Linux-iso转换为QEMU-qcow2格式"><a href="#Linux-iso转换为QEMU-qcow2格式" class="headerlink" title="Linux.iso转换为QEMU.qcow2格式"></a>Linux.iso转换为QEMU.qcow2格式</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p><strong>第一个步骤：上传ISO文件到qemu目录</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入目录</span></span><br><span class="line">  /opt/unetlab/addons/qemu</span><br><span class="line"><span class="comment">//新建目录</span></span><br><span class="line">  mkdir linux-Centos7  <span class="selector-id">#--</span>&gt;注意前面linux-是固定的，后面的Centos7可以随意写</span><br><span class="line"><span class="comment">//上传CentOS-7-x86_64-DVD-1708.iso镜像至新创建的linux-Centos7目录，并改名为cdrom.iso</span></span><br><span class="line">  上传使用winscp <span class="selector-id">#--</span>&gt;这里忽略</span><br><span class="line"><span class="comment">//查看镜像是否上传</span></span><br><span class="line">  ls CentOS-7-x86_64-DVD-1708<span class="selector-class">.iso</span></span><br><span class="line"><span class="comment">//修改名称</span></span><br><span class="line">  cp CentOS-7-x86_64-DVD-1708<span class="selector-class">.iso</span> cdrom<span class="selector-class">.iso</span></span><br></pre></td></tr></table></figure><p><strong>第二个步骤：新建hda.qcow2虚拟磁盘</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在linux-Centos7目录下创建一块虚拟磁盘，名称为hda.qcow2，大小为40G（根据实际情况判定，不一定要40G）</span></span><br><span class="line">/opt/qemu/bin/qemu-img create -f qcow2 hda.qcow2 40G</span><br></pre></td></tr></table></figure><p><strong>第三个步骤：安装Centos7.0操作系统</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117190826.png"></p><blockquote><ol><li>下面的操作需要自行去完成，这里只写入了步骤<ul><li>在LAB中新增加linux节点</li><li>开机运行，并根据系统安装提示安装操作系统</li><li>安装完成后，系统提示重启之前，停止运行服务器，删掉安装镜像cdrom.iso，因为如果该文件还存在，系统开机后又会自动进行安装界面<br>rm cdrom.iso #–&gt;在linux-Centos目录下删除</li><li>）重新开启linux节点，并在根目录写入一个文件，以做标识 #–&gt;这步可以忽略</li></ul></li></ol></blockquote><p><strong>第四个步骤：压缩并移动had.qcow2镜像</strong></p><blockquote><p>点击自己创建的LAB找到UUID编号</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117190953.png"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在/opt/unetlab/temp/0找到上面对应的UUID编号，进入1目录（1目录就是在LAB标签中创建的第一台linux服务，ID值为1），然后找到hda.qcow2文件</span></span><br><span class="line">  路径：/opt/unetlab/tmp/0/97c93af0-853e-46e5-8bca-60c47f47bd5d/1</span><br><span class="line"><span class="comment">//查看文件是否存在</span></span><br><span class="line">  ls hda<span class="selector-class">.qcow2</span></span><br><span class="line"><span class="comment">//重建hda.qcow2镜像文件并移动到qemu的linux-Centos7目录中</span></span><br><span class="line">  /opt/qemu/bin/qemu-img convert -c –p -O qcow2 hda.qcow2 /opt/unetlab/addons/qemu/linux-Centos7/hda.qcow2 #--&gt;这是一整条命令</span><br><span class="line"><span class="comment">//压缩had.qcow2文件（优化）</span></span><br><span class="line">  路径：/opt/unetlab/addons/qemu/linux-Centos7</span><br><span class="line">  压缩：virt-sparsify --compress hda<span class="selector-class">.qcow2</span> linux<span class="selector-class">.qcow2</span> <span class="selector-id">#--</span>&gt;先随便起一个名字</span><br><span class="line">  移动：mv linux<span class="selector-class">.qcow2</span> had<span class="selector-class">.qcow2</span> <span class="selector-id">#--</span>&gt;在修改名称回来</span><br></pre></td></tr></table></figure><p><strong>第五个步骤：新增一台Linux服务器，并查看优化结果：</strong></p><p>略………………………..</p><h2 id="第二种方式（推荐）"><a href="#第二种方式（推荐）" class="headerlink" title="第二种方式（推荐）"></a>第二种方式（推荐）</h2><h3 id="将VMware中运行的虚拟机转移到EVE中运行"><a href="#将VMware中运行的虚拟机转移到EVE中运行" class="headerlink" title="将VMware中运行的虚拟机转移到EVE中运行"></a>将VMware中运行的虚拟机转移到EVE中运行</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117191038.png"></p><p><strong>第一个步骤：创建一个linux-vmdk目录并在window找到安装虚拟机目录下的.vmdk文件上传至创建的目录中</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建目录并上传文件</span></span><br><span class="line">  路径：/opt/unetlab/addons/qemu</span><br><span class="line">  创建：mkdir linux-vmdk</span><br><span class="line">  上传：使用winscp工具 <span class="selector-id">#--</span>&gt;这里忽略</span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117191055.png"></p><blockquote><p><strong><code>注意一点：这台虚拟机使用的磁盘存储是在单个文件上，而不是多个文件上，如果是多个文件上，需要使用工具合成一个。</code></strong></p></blockquote><p><strong>第二个步骤：将.vmdk的文件转换为qcow2文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换：/opt/qemu/bin/qemu-img convert -f vmdk -O qcow2 CentOS1106.vmdk hda.qcow2</span><br></pre></td></tr></table></figure><p><strong>第三个步骤：压缩并移动hda.qcow2</strong></p><blockquote><ol><li>压缩had.qcow2文件（优化）<ul><li>路径：/opt/unetlab/addons/qemu/linux-vmdk</li><li>压缩：virt-sparsify –compress hda.qcow2 linux.qcow2 #–&gt;先随便起一个名字</li><li> 移动：mv linux.qcow2 had.qcow2 #–&gt;在修改名称回来</li></ul></li></ol></blockquote><p><strong>第四个步骤：查看优化结果</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117191502.png"></p><p><strong>第五个步骤：新建节点，开机测试</strong></p><blockquote><p>使用第二方法好处是，不需要重新安装系统</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117191601.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117191532.png"></p><h2 id="其他类型文件转换为qcow2格式"><a href="#其他类型文件转换为qcow2格式" class="headerlink" title="其他类型文件转换为qcow2格式"></a>其他类型文件转换为qcow2格式</h2><h3 id="img类型文件转换为qcow2"><a href="#img类型文件转换为qcow2" class="headerlink" title="img类型文件转换为qcow2"></a>img类型文件转换为qcow2</h3><blockquote><p>//注意：img使用的raw参数转换<br>/opt/qemu/bin/qemu-img convert -f  raw -O qcow2 win2003.img hda.qcow2</p></blockquote><h3 id="ova类型文件转换为qcow2"><a href="#ova类型文件转换为qcow2" class="headerlink" title="ova类型文件转换为qcow2"></a>ova类型文件转换为qcow2</h3><blockquote><p>使用WinRAR等解压工具打开ova文件，最后会看到.vmdk文件，将vmdk文件转换为qcow2格式文件. 参考第二种方式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EVE-NG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG配置固定ip地址</title>
      <link href="2021/01/17/EVE-NG%E9%85%8D%E7%BD%AE%E5%9B%BA%E5%AE%9Aip%E5%9C%B0%E5%9D%80/"/>
      <url>2021/01/17/EVE-NG%E9%85%8D%E7%BD%AE%E5%9B%BA%E5%AE%9Aip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="EVH-NG配置固定IP地址"><a href="#EVH-NG配置固定IP地址" class="headerlink" title="EVH-NG配置固定IP地址"></a>EVH-NG配置固定IP地址</h1><h2 id="编辑配置文件-etc-network-interfaces"><a href="#编辑配置文件-etc-network-interfaces" class="headerlink" title="编辑配置文件/etc/network/interfaces"></a>编辑配置文件/etc/network/interfaces</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root<span class="keyword">@eve-ng</span>:~# vi /etc/network/interfaces</span><br><span class="line">#修改以下内容</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">iface eth0 inet manual</span><br><span class="line">auto pnet0</span><br><span class="line">iface pnet0 inet static</span><br><span class="line">    bridge_ports eth0</span><br><span class="line">    bridge_stp off</span><br><span class="line">    address <span class="number">10.0</span>.<span class="number">0.200</span></span><br><span class="line">    netmask <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">    gateway <span class="number">10.0</span>.<span class="number">0.2</span></span><br><span class="line">    dns-nameserver <span class="number">223.5</span>.<span class="number">5.5</span></span><br><span class="line">#注意自己VMware使用模式，配置正确的网关</span><br></pre></td></tr></table></figure><h2 id="重启网卡生效"><a href="#重启网卡生效" class="headerlink" title="重启网卡生效"></a>重启网卡生效</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EVE-NG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP——Ping</title>
      <link href="2021/01/17/ICMP%E2%80%94%E2%80%94Ping/"/>
      <url>2021/01/17/ICMP%E2%80%94%E2%80%94Ping/</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP之——ping"><a href="#ICMP之——ping" class="headerlink" title="ICMP之——ping"></a>ICMP之——ping</h1><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p><strong>用法：ping 地址或域名</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117184802.png"></p><h2 id="ping命令的功能"><a href="#ping命令的功能" class="headerlink" title="ping命令的功能"></a>ping命令的功能</h2><blockquote><ol><li>能验证网络是否连通</li><li>会统计响应时间和TTL（ip包中的Time To Live，生成生存周期）</li></ol></blockquote><h2 id="如何验证？"><a href="#如何验证？" class="headerlink" title="如何验证？"></a>如何验证？</h2><blockquote><ol><li>ping命令会先发送一个ICMP Echo Request请求报文给对端</li><li>对端接收到之后，回送一个ICMP Echo Reply响应报文</li><li>如果没有返回，可能会显示超时或目标不可达.</li></ol></blockquote><h2 id="使用wireshark抓取的ICMP报文，如下图"><a href="#使用wireshark抓取的ICMP报文，如下图" class="headerlink" title="使用wireshark抓取的ICMP报文，如下图"></a>使用wireshark抓取的ICMP报文，如下图</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185416.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185428.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185436.png"></p><h2 id="ping包回应判断故障点"><a href="#ping包回应判断故障点" class="headerlink" title="ping包回应判断故障点"></a>ping包回应判断故障点</h2><h3 id="传输失败-常见故障"><a href="#传输失败-常见故障" class="headerlink" title="传输失败. 常见故障"></a>传输失败. 常见故障</h3><p><strong>物理故障居多，如无本地连接，也可能是未获取ip，没有网关等问题</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185515.png"></p><h3 id="目标不可达"><a href="#目标不可达" class="headerlink" title="目标不可达"></a>目标不可达</h3><p><strong>数据包没有发往到目的地，如中间设备没有去往的路由，或者在去往的过程被过滤掉等</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185542.png"></p><h3 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h3><p><strong>数据包有发往的目的地，但是返回的途中出现问题，如主机关机，没有返回路由，数据包被过滤掉等</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185602.png"></p><h2 id="搭建实验演示故障点"><a href="#搭建实验演示故障点" class="headerlink" title="搭建实验演示故障点"></a>搭建实验演示故障点</h2><blockquote><p>地址按路由器的序号规划<br>部署静态路由，实现两边互通<br>win网关：172.16.1.254<br>Linux网关：100.100.100.254</p><p><strong><code>地址：需要自行配置</code></strong></p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185629.png"></p><h3 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h3><p><strong>Linux主机ping</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185656.png"></p><p><strong>win-xp主机ping</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185707.png"></p><h3 id="故障点ping服务器目标不可达"><a href="#故障点ping服务器目标不可达" class="headerlink" title="故障点ping服务器目标不可达"></a>故障点ping服务器目标不可达</h3><p><strong>方法一：配置ACL策略</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置ACL策略</span></span><br><span class="line">access-list 100 deny   icmp any host 100<span class="selector-class">.100</span><span class="selector-class">.100</span><span class="selector-class">.1</span></span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">！</span><br><span class="line"><span class="comment">//调用到e0/0接口，方向为in</span></span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> ip <span class="selector-tag">address</span> 12<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> ip access-group 100 in #注意，这里是IN方向</span><br></pre></td></tr></table></figure><p><strong>方法二：删除去往服务器的路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no ip route 100<span class="selector-class">.100</span><span class="selector-class">.100</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 13<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.3</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>ping目标不可达</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185918.png"></p><p><strong>但是还可以访问网页，这里只是作为演示，网页配置需要搭建服务才行</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117185939.png"></p><h3 id="故障点ping服务器超时"><a href="#故障点ping服务器超时" class="headerlink" title="故障点ping服务器超时"></a>故障点ping服务器超时</h3><p><strong>方法一：配置ACL策略</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置ACL</span></span><br><span class="line">access-list 100 deny   icmp any any</span><br><span class="line">access-list 100 permit ip any any</span><br><span class="line">！</span><br><span class="line"><span class="comment">//调用到e0/0接口，方向为out</span></span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> ip <span class="selector-tag">address</span> 12<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> ip access-group 100 out #注意这里out方向</span><br></pre></td></tr></table></figure><p><strong>方法二：和上述的目标可不达一样，没有往返的路由</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no ip route 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 23<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><strong>ping服务器超时</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117190059.png"></p><h2 id="常见ping包不通的几个问题"><a href="#常见ping包不通的几个问题" class="headerlink" title="常见ping包不通的几个问题"></a>常见ping包不通的几个问题</h2><h3 id="Windows防火墙限制"><a href="#Windows防火墙限制" class="headerlink" title="Windows防火墙限制"></a>Windows防火墙限制</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117190120.png"></p><h3 id="Linux限制"><a href="#Linux限制" class="headerlink" title="Linux限制"></a>Linux限制</h3><p><strong>Linux默认是允许ping响应的，系统是否允许ping由2个因数决定的. A：内核参数 B：防火墙</strong></p><p><strong>A：内核参数设置</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//临时设置：</span></span><br><span class="line">echo 0 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all #--&gt;（0表示允许，1表示禁止）</span><br><span class="line">echo 1 &gt;/proc/sys/net/ipv4/icmp_echo_ignore_all #--&gt;（0表示允许，1表示禁止）</span><br><span class="line"><span class="comment">//永久设置：</span></span><br><span class="line">echo &quot;net.ipv4.icmp_echo_ignore_all=1&quot; &gt;&gt;/etc/sysctl.conf （0表示允许，1表示禁止）</span><br><span class="line">echo &quot;net.ipv4.icmp_echo_ignore_all=0&quot; &gt;&gt;/etc/sysctl.conf （0表示允许，1表示禁止）</span><br><span class="line"><span class="comment">//永久设置需要执行sysctl -p使配置生效</span></span><br><span class="line"><span class="selector-attr">[root@shell-2 ~]</span># sysctl -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><p><strong>B：防火墙</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#PS1</span>：此处的方法的前提是内核配置是默认值，也就是没有禁止ping</span><br><span class="line"><span class="selector-id">#PS2</span>：linux防火墙默认是允许ping通过的，</span><br><span class="line"><span class="comment">//禁止ping设置</span></span><br><span class="line"><span class="selector-id">#--</span>&gt;Centos6版本</span><br><span class="line">iptables -<span class="selector-tag">A</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> icmp --icmp-type 8 -J DROP</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#--</span>&gt;Centos7版本</span><br><span class="line">firewall-cmd --permanent --add-rich-rule=&quot;rule protocol value=icmp drop&quot;</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="云主机限制"><a href="#云主机限制" class="headerlink" title="云主机限制"></a>云主机限制</h3><p><strong>云主机默认是禁止ping包的</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117190230.png"></p><h3 id="网络设备限制"><a href="#网络设备限制" class="headerlink" title="网络设备限制"></a>网络设备限制</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R1(config)<span class="selector-id">#access-list</span> 100 deny icmp any host 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.10</span></span><br><span class="line">R1(config)<span class="selector-id">#access-list</span> 100 permit ip any any</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICMP协议与原理</title>
      <link href="2021/01/17/ICMP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/ICMP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="ICMP协议与原理"><a href="#ICMP协议与原理" class="headerlink" title="ICMP协议与原理"></a>ICMP协议与原理</h1><h2 id="ICMP协议是什么？"><a href="#ICMP协议是什么？" class="headerlink" title="ICMP协议是什么？"></a>ICMP协议是什么？</h2><blockquote><ol><li>控制报文协议（Internet Control Message Protocol，ICMP）是TCP/IP协议族的一个子协议，ICMP协议用于在IP主机和路由器之间传递控制消息，描述网络是否通畅，主机是否可达或超时，路由器是否可用等网络状态</li><li>ICMP报文是基于在IP数据包中，IP报头在ICMP报文的最前面. 一个ICMP报文包括IP报头（至少20字节），ICMP报头（至少八字节）和ICMP报文（属于ICMP报文的数据部分），当IP报头中的协议字段值为<strong>1</strong>时，就说明这个一个ICMP报文. ICMP报头如下图所示</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117175257.png"></p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>类型</td><td>占一字节，表示ICMP报文的类型，从类型值来看ICMP报文可以分为两大类. 第一类是取值为1-127的差错报文，第二类是取值128以上的信息报文</td></tr><tr><td>代码</td><td>占一字节，标识对应ICMP报文的代码. 它与类型字段一起共同标识了ICMP报文的详细类型</td></tr><tr><td>校验和</td><td>这是对包括ICMP报文数据部分在内的整个ICMP数据包的校验和. 以检验报文在传输过程中是否出现了差错</td></tr></tbody></table><h2 id="ICMP类型的代码及含义"><a href="#ICMP类型的代码及含义" class="headerlink" title="ICMP类型的代码及含义"></a>ICMP类型的代码及含义</h2><p><strong>在ICMP报文中，如果类型和代码不同，ICMP数据包报告的消息含义也会不同. 常见的类型和代码的ICMP含义如表所示</strong></p><table><thead><tr><th>类型</th><th>代码</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>回显应答（ping应答）</td></tr><tr><td>3</td><td>0</td><td>网络不可达</td></tr><tr><td>3</td><td>1</td><td>主机不可达</td></tr><tr><td>3</td><td>2</td><td>协议不可达</td></tr><tr><td>3</td><td>3</td><td>端口不可达</td></tr><tr><td>3</td><td>4</td><td>需要进行分片，但设置不分片位</td></tr><tr><td>3</td><td>5</td><td>源站选路失败</td></tr><tr><td>3</td><td>6</td><td>目的网络未知</td></tr><tr><td>3</td><td>7</td><td>目的主机未知</td></tr><tr><td>3</td><td>9</td><td>目的网络被强制禁止</td></tr><tr><td>3</td><td>10</td><td>目的主机被强制禁止</td></tr><tr><td>3</td><td>11</td><td>由于服务类型TOS，网络不可</td></tr><tr><td>3</td><td>12</td><td>由于服务类型TOS，主机不可达</td></tr><tr><td>3</td><td>13</td><td>由于过滤，通信被强制禁止</td></tr><tr><td>3</td><td>14</td><td>主机越权</td></tr><tr><td>3</td><td>15</td><td>优先中止失效</td></tr><tr><td>4</td><td>0</td><td>源端被关闭（基本流控制）</td></tr><tr><td>5</td><td>0</td><td>对网络重定向</td></tr><tr><td>5</td><td>1</td><td>对主机重定向</td></tr><tr><td>5</td><td>2</td><td>对服务类型和网络重定向</td></tr><tr><td>5</td><td>3</td><td>对服务类型和主机重定向</td></tr><tr><td>8</td><td>0</td><td>回显请求（ping请求）</td></tr><tr><td>9</td><td>0</td><td>路由器通告</td></tr><tr><td>10</td><td>0</td><td>路由器请求</td></tr><tr><td>11</td><td>0</td><td>在数据报组装期间生存时间为0</td></tr><tr><td>12</td><td>1</td><td>坏的IP首部</td></tr><tr><td>13</td><td>0</td><td>时间戳请求</td></tr><tr><td>14</td><td>0</td><td>时间戳应答</td></tr><tr><td>17</td><td>0</td><td>地址掩码请求</td></tr><tr><td>18</td><td>0</td><td>地址掩码应答</td></tr></tbody></table><h2 id="常见的请求与应答"><a href="#常见的请求与应答" class="headerlink" title="常见的请求与应答"></a>常见的请求与应答</h2><h3 id="ping请求"><a href="#ping请求" class="headerlink" title="ping请求"></a>ping请求</h3><blockquote><ol><li>我们在操作过程中，用的最多就是ping操作，该操作中包括了相应请求（类型字段为8）和应答（类型字段值为0）ICMP报文.</li><li>如：一台主机向一个节点发送一个类型字段为8的ICMP报文，如果途中（没有异常，路由丢弃，被过滤，目标不回应ICMP或者传输失败等等）.则目标返回类型字段为0的IMCP报文，说明这台主机存在.</li></ol></blockquote><h3 id="时间戳请求"><a href="#时间戳请求" class="headerlink" title="时间戳请求"></a>时间戳请求</h3><blockquote><ol><li>时间戳请求报文（类型值字段13）和时间戳应答报文（类型字段14）用于测试两台主机之间数据包来回一次的传输时间. 传输时，主机填充原始时间戳，接收方收到请求后填充接收时间戳后以类型值字段14的报文格式返回，发送方计算这个时间差</li></ol></blockquote><h3 id="（网络，主机，端口，协议）不可达回应"><a href="#（网络，主机，端口，协议）不可达回应" class="headerlink" title="（网络，主机，端口，协议）不可达回应"></a>（网络，主机，端口，协议）不可达回应</h3><blockquote><ol><li><p>目标不可达报文（类型字段为3）在路由器或者主机不能传递数据时使用.</p></li><li><p>如1：ping一个不存在的主机或者没有该路由，则返回类型字段3，代码字段为0的ICMP报文.</p></li><li><p>如2：连接对方一个不存在的系统端口（端口号小于1024）时，则返回类型字段值3，代码字段值为3的ICMP报文</p></li></ol></blockquote><h3 id="源抑制报文回应"><a href="#源抑制报文回应" class="headerlink" title="源抑制报文回应"></a>源抑制报文回应</h3><blockquote><ol><li>源抑制报文（类型字段值为4，代码字段值为0）则充当一个控制流量的角色，通知主机减少数据包流量. 由于TCP/IP没有回复传输的报文，所以只要停止该报文，主机就会逐渐恢复传输速率.</li></ol></blockquote><h3 id="超时报文回应"><a href="#超时报文回应" class="headerlink" title="超时报文回应"></a>超时报文回应</h3><blockquote><ol><li>长时间在网络游荡而找不到目标，或者拥塞导致主机在规定的时间内无法重组数据报文段，这时就要触发ICMP超时报文的产生. 超时报文（类型字段为11），代码域有两种取值：代码字段值为0表示传输超时，代码字段值为1表示分段重组超时</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP协议与原理</title>
      <link href="2021/01/17/DHCP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/DHCP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP协议与原理"><a href="#DHCP协议与原理" class="headerlink" title="DHCP协议与原理"></a>DHCP协议与原理</h1><h2 id="DHCP介绍"><a href="#DHCP介绍" class="headerlink" title="DHCP介绍"></a>DHCP介绍</h2><p>DHCP（Dynamic Host Configuration Protocol，动态主机配置协议），是一个工作在应用层的局域网网络协议，数据传输时使用UTP不可靠传输协议工作，通常被应用在大型的局域网络环境中，主要作用是集中的管理，分配网络资源. 使网络环境中的主机能够动态获取IP地址，Gateway地址，DNS服务器地址等信息，并能够提升地址的使用率.</p><h2 id="DHCP工作原理（租约四部曲-续租）"><a href="#DHCP工作原理（租约四部曲-续租）" class="headerlink" title="   DHCP工作原理（租约四部曲+续租）"></a>   DHCP工作原理（租约四部曲+续租）</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174418.png"></p><h2 id="DHCP客户机进行IP请求"><a href="#DHCP客户机进行IP请求" class="headerlink" title="DHCP客户机进行IP请求"></a>DHCP客户机进行IP请求</h2><blockquote><p>当一个DHCP客户机启动时，会自动将自己的IP地址配置成0.0.0.0，由于使用0.0.0.0不能进行正常通信，所以客户机就必须通过DHCP服务器来获取一个合法的地址. 由于客户机不知道DHCP服务器的IP地址，所以使用0.0.0.0的地址作为源地址，使用255.255.255.255作为目标地址，使用UDP67端口作为目的端口来广播请求ip地址信息. 广播信息DHCP Discover中包含了DHCP客户机的MAC地址和计算机名，以便使DHCP服务能够确定是哪个客户机发送的请求</p></blockquote><h2 id="DHCP服务器响应请求"><a href="#DHCP服务器响应请求" class="headerlink" title=" DHCP服务器响应请求"></a> DHCP服务器响应请求</h2><blockquote><ol><li>当DHCP 服务器收到客户机请求ip地址的信息时，它就在自己的ip地址池中查找是否有合法的ip地址提供给客户机. 如果有，DHCP服务器就将此ip地址坐上标记，加入到DHCP Offer的报文中，然后DHCP服务器还是以广播发送DHCP Offer报文.</li><li>DHCP客户机的MAC地址；DHCP服务器提供的合法IP地址：子网掩码；默认网关；DNS地址；租约的期限；DHCP服务器的ip地址-MAC.</li><li>因为DHCP客户端还没有IP地址，所以DHCP服务器使用自己的IP地址作为源地址，使用255.255.255.255作为目标地使用UDP 68端口作为源端口来广播DHCP Offer报文</li></ol></blockquote><h2 id="DHCP客户机选择IP"><a href="#DHCP客户机选择IP" class="headerlink" title="DHCP客户机选择IP"></a>DHCP客户机选择IP</h2><blockquote><ol><li>DHCP客户机从接收到的第一个DHCP Offer报文中选择ip地址，发送ip地址的DHCP服务器将该地址保留，这样该地址就不能提供给另一个DHCP客户机. 当客户机从第一个DHCP服务器接收DHCP Offer并选择ip地址后，DHCP租约的第三过程发送. 客户机将DHCP Request报文广播到所有的DHCP服务器，表明它接受提供的内容. DHCP Request报文包括为该客户机提供ip配置的服务器的服务标志符（ip地址），DHCP服务器查看服务器标识符字段，以确定自己是否被选择为指定的客户机提供ip地址，如果哪些DHCP Offer被拒绝，则DHCP服务器会取消提供保留其ip地址以用于下一个ip租约请求.</li><li>在客户机选择ip的过程中，虽然客户机选择了ip地址，但是还没有配置ip地址，而在一个网络中可能有几个DHCP服务器，所以客户机仍然使用0.0.0.0的地址作为源地址，使用255.255.255.255.作为目标地址，使用UDP 67端口作为目的端口来广播DHCP Request报文</li></ol></blockquote><h2 id="DHCP服务器确认租约"><a href="#DHCP服务器确认租约" class="headerlink" title="DHCP服务器确认租约"></a>DHCP服务器确认租约</h2><blockquote><ol><li><p>服务器确认租约：DHCP ACK</p><ul><li>DHCP服务器接收到DHCP Request报文后，以DHCP ACK报文的形式向客户机广播成功的确认，该消息包含有ip地址的有效租约和其他可能配置的信息. 虽然服务器确认了客户机的租约请求，但是客户机还没有收到服务器的DHCP ACK报文，所以服务器仍然使用自己的ip地址作为源地址， 使用255.255.255.255作为目标地址，使用UDP 68端口作为源端口来广播DHCP ACK报文. 当客户机收到DHCP ACK消息时，它就配置了ip地址，完成了TCP/IP的初始化</li></ul></li><li><p>服务器拒绝租约：DHCP NACK（DHCP NAK）</p><ul><li>如果DHCP Request不成功，例如客户机试图租约先前的IP地址，但该ip地址不在可用，或者因为客户机移到其他子网，该ip无效时，DHCP服务器将广播否定确定报文DCHP NACK. 当客户端接收到不成功的确认时，它讲重新开始DHCP 租约过程.</li></ul></li></ol><ul><li><p>PS1：如果DHCP客户机无法找到DHCP服务器，它将从TCP/IP的B类网络169.254.0.0/16挑选一个IP地址作为自己的ip地址，继续每个5分钟尝试与DHCP服务器进行通讯，一旦与DHCP服务器通信成功，则客户机放弃自动配置的ip地址，而使用DHCP服务器分配的ip地址.</p></li><li><p>PS2：DHCP客户机收到DHCP服务器回应的ACK报文后，通过地址冲突检测（ARP）发现服务器分配的地址冲突或者由于其他原因导致不能使用，则发送DECLINE报文，通知服务器所分配至的ip地址不可用</p></li></ul></blockquote><h2 id="DHCP客户机续租"><a href="#DHCP客户机续租" class="headerlink" title="DHCP客户机续租"></a>DHCP客户机续租</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174844.png"></p><blockquote><ol><li>DHCP客户机会在租期过去50%的时候，直接向为其提供ip地址的DHCP服务器发送DHCP Request报文，如果客户机接收到该服务器回应的DHCP ACK报文，则客户机就根据数据包中所提供的新的租期以及其他已经更新的TCP/IP参数，更新自己的配置，IP租用更新完成. 如果没有收到该服务器的回复，则客户机继续使用现有的IP地址，因为当前租期还有50%</li><li>如果在租期过去50%的时候没有更新，则DHCP客户机将在租期过去87.5%的时候再次向为其提供IP地址的DHCP服务器联系，如果还不成功，到租约的100%时候，DHCP客户机必须放弃这个IP地址，重新申请，如果此时无DHCP服务区可用，DHCP客户机使用169.254.0.0/16中随机的一个地址，并且每个5分钟再进行尝试.</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP实验</title>
      <link href="2021/01/17/DHCP%E5%AE%9E%E9%AA%8C/"/>
      <url>2021/01/17/DHCP%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP实验"><a href="#DHCP实验" class="headerlink" title="DHCP实验"></a>DHCP实验</h1><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><blockquote><p>  在核心交换机上开启DHCP Server功能并配置DHCP地址池，配置网关:192.168.1.254、DNS:8.8.8.8、租约（默认为24小时，可无需配置）</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117173651.png"></p><h3 id="核心交换机配置"><a href="#核心交换机配置" class="headerlink" title="核心交换机配置"></a>核心交换机配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启DHCP服务功能</span></span><br><span class="line">Switch1(config)<span class="selector-id">#service</span> dhcp</span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置vlan及网关地址</span></span><br><span class="line">Switch1(config-if)<span class="selector-id">#vlan</span> 10</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置dhcp地址池</span></span><br><span class="line">ip dhcp pool vlan10</span><br><span class="line"> network 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> default-router 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> dns-server 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置核心层与接入层互连接口为trunk模式</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br></pre></td></tr></table></figure><h3 id="接入层交换机配置"><a href="#接入层交换机配置" class="headerlink" title="接入层交换机配置"></a>接入层交换机配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置vlan</span></span><br><span class="line">S2(config)<span class="selector-id">#vlan</span> 10</span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置接入层与核心层互连接口为trunk模式</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line"><span class="comment">//划分两台终端至vlan10</span></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br></pre></td></tr></table></figure><h3 id="配置主机地址自动获取"><a href="#配置主机地址自动获取" class="headerlink" title="配置主机地址自动获取"></a>配置主机地址自动获取</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC3：VPCS&gt; ip dhcp</span><br><span class="line">PC4：VPCS&gt; ip dhcp</span><br></pre></td></tr></table></figure><h2 id="使用show命令查看配置"><a href="#使用show命令查看配置" class="headerlink" title="使用show命令查看配置"></a>使用show命令查看配置</h2><h3 id="核心交换机"><a href="#核心交换机" class="headerlink" title="核心交换机"></a>核心交换机</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117173804.png"></p><h3 id="PC3"><a href="#PC3" class="headerlink" title="PC3"></a>PC3</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117173825.png"></p><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><blockquote><ol><li>在汇聚交换机上开启DHCP relay功能，并且设置用户网关及路由信息，配置网关:192.168.1.254、DNS:8.8.8.8、租约（默认为24小时，可无需配置）</li><li>在核心交换机上开启DHCP Server功能，并且配置DHCP地址池</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117173901.png"></p><h3 id="什么是relay"><a href="#什么是relay" class="headerlink" title="什么是relay?"></a>什么是relay?</h3><blockquote><p> DHCP Relay（DHCPR）DHCP中继是一个小程序（代理），可以实现在不同子网和物理网段之间处理和转发dhcp信息的功能</p></blockquote><h3 id="核心层配置"><a href="#核心层配置" class="headerlink" title="核心层配置"></a>核心层配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启DHCP服务功能</span></span><br><span class="line">Switch1(config)<span class="selector-id">#service</span> dhcp</span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置dhcp地址池</span></span><br><span class="line">ip dhcp pool vlan10</span><br><span class="line"> network 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> default-router 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> dns-server 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置核心层与汇聚层互连ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置核心层至汇聚设备用户网段的静态路由</span></span><br><span class="line">ip route 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><h3 id="汇聚层配置"><a href="#汇聚层配置" class="headerlink" title="汇聚层配置"></a>汇聚层配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启汇聚交换机的DHCP服务功能</span></span><br><span class="line">S2(config)<span class="selector-id">#service</span> dhcp</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置vlan及vlan 10的ip地址（用户网关的地址）</span></span><br><span class="line">Switch1(config-if)<span class="selector-id">#vlan</span> 10</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置汇聚层与核心层互连的ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//划分两台终端至vlan10</span></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置汇聚层到外网的默认路由</span></span><br><span class="line">ip route 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> 0<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//开启汇聚层DHCP relay功能,该地址需要是核心交换机的IP地址，并且路由可达.</span></span><br><span class="line">S2(config)<span class="selector-id">#in</span> vlan 10</span><br><span class="line">S2(config-if)<span class="selector-id">#ip</span> helper-<span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> #接口下开启（推荐）</span><br><span class="line">S2(config)<span class="selector-id">#ip</span> helper-<span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> #全局下开启</span><br></pre></td></tr></table></figure><h3 id="配置主机地址自动获取-1"><a href="#配置主机地址自动获取-1" class="headerlink" title="配置主机地址自动获取"></a>配置主机地址自动获取</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC3：VPCS&gt; ip dhcp</span><br><span class="line">PC4：VPCS&gt; ip dhcp</span><br></pre></td></tr></table></figure><h2 id="使用show查看配置"><a href="#使用show查看配置" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="核心交换机-1"><a href="#核心交换机-1" class="headerlink" title="核心交换机"></a>核心交换机</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174020.png"></p><h3 id="win-xp"><a href="#win-xp" class="headerlink" title="win-xp"></a>win-xp</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174033.png"></p><h2 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h2><p><strong>在交换机S3上配置DHCP中继，对VLAN10内的用户进行中继，使得PC1和PC2用户使用DHCP Relay方式获取IP地址。具体要求如下：</strong></p><blockquote><ol><li>DHCP服务器搭建于EG上，地址池命名为VLAN10，DHCP对外服务使用loopback 0地址</li><li>S3 配置网关:192.168.1.254、DNS:8.8.8.8、租约（默认为24小时，可无需配置）</li><li>为了防御动态环境局域网伪DHCP服务欺骗，在S1、S2交换机部署DHCP Snooping功能；</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174113.png"></p><h3 id="EG配置"><a href="#EG配置" class="headerlink" title="EG配置"></a>EG配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启DHCP服务功能</span></span><br><span class="line">EG(config)<span class="selector-id">#service</span> dhcp #默认不开启，一定要开启此功能</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置lookback0地址</span></span><br><span class="line">interface Loopback0</span><br><span class="line"> ip <span class="selector-tag">address</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.255</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置EG与S3互连的ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.252</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置DHCP地址池</span></span><br><span class="line">ip dhcp pool vlan10</span><br><span class="line"> network 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> default-router 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> dns-server 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置静态路由指向用户网段</span></span><br><span class="line">ip route 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.0</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></span><br></pre></td></tr></table></figure><h3 id="S3配置"><a href="#S3配置" class="headerlink" title="S3配置"></a>S3配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启DHCP服务功能</span></span><br><span class="line">EG(config)<span class="selector-id">#service</span> dhcp #默认不开启，一定要开启此功能</span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置S3与EG互连的ip地址</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> ip <span class="selector-tag">address</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.252</span></span><br><span class="line">！</span><br><span class="line"><span class="comment">//配置vlan及vlan 10的ip地址</span></span><br><span class="line">S3(config)<span class="selector-id">#vlan</span> 10</span><br><span class="line">！</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置S3与S1互连的接口为trunk模式</span></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line"><span class="comment">//配置静态路由指向EG网关的lookback地址</span></span><br><span class="line">ip route 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span> 10<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.2</span></span><br><span class="line">!</span><br><span class="line"><span class="comment">//开启汇聚层DHCP relay功能,该地址需要是核心交换机的IP地址，并且路由可达.</span></span><br><span class="line">S2(config)<span class="selector-id">#in</span> vlan 10</span><br><span class="line">S2(config-if)<span class="selector-id">#ip</span> helper-<span class="selector-tag">address</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><h3 id="S1配置"><a href="#S1配置" class="headerlink" title="S1配置"></a>S1配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置S1与S3互连的接口为trunk模式</span></span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line"><span class="comment">//划分两台终端至vlan10</span></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/2</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">！</span><br><span class="line"><span class="comment">//开启DHCP snooping</span></span><br><span class="line">S1(config)<span class="selector-id">#ip</span> dhcp snooping</span><br><span class="line">S1(config)<span class="selector-id">#ip</span> dhcp snooping trust</span><br><span class="line"><span class="comment">//开启DHCP snooping的交换机所有接口缺省为untrust口，交换机只转发从trust口收到的DHCP响应报文（offer、ACK）</span></span><br></pre></td></tr></table></figure><h2 id="使用show查看配置-1"><a href="#使用show查看配置-1" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="EG"><a href="#EG" class="headerlink" title="EG"></a>EG</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117180827.png"></p><h3 id="PC1及PC2"><a href="#PC1及PC2" class="headerlink" title="PC1及PC2"></a>PC1及PC2</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174216.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117174225.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DHCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP协议与原理</title>
      <link href="2021/01/17/VRRP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/VRRP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="VRRP协议与原理"><a href="#VRRP协议与原理" class="headerlink" title="VRRP协议与原理"></a>VRRP协议与原理</h1><h2 id="VRRP概述"><a href="#VRRP概述" class="headerlink" title="VRRP概述"></a>VRRP概述</h2><blockquote><ol><li>VRRP（Virtual Route Redundancy Protocol）虚拟路由器冗余协议是一种网关备份冗余解决方案，它对Ethernet上的计算机等终端的默认网关进行冗余备份，实现当其中一台网关设备宕机时，备份网关设备能够快速自动切换并接管转发工作，防止因网关设备故障引发转发数据失败，提高了网络服务质量.</li><li>VRRP通过使用虚拟路由器技术实现了主机默认网关的备份，同时也可以通过VRRP来实现网关的负载均衡.</li></ol></blockquote><h2 id="协议版本：VRRPv2-常用）和VRRPv3："><a href="#协议版本：VRRPv2-常用）和VRRPv3：" class="headerlink" title="协议版本：VRRPv2(常用）和VRRPv3："></a>协议版本：VRRPv2(常用）和VRRPv3：</h2><blockquote><p>VRRPv2仅适用于IPv4网络，VRRPv3适用于IPv4和IPv6两种网络.</p></blockquote><h2 id="VRRP原理"><a href="#VRRP原理" class="headerlink" title="VRRP原理"></a>VRRP原理</h2><p><strong>VRRP将局域网内的一组路由器划分在一起，称为一个备份组。备份组由一个Master路由器和多个Backup路由器组成，功能上相当于一台虚拟路由器。</strong></p><blockquote><p>VRRP备份组具有以下特点：</p><ul><li>虚拟路由器具有IP地址，称为虚拟IP地址。局域网内的主机仅需要知道这个虚拟路由器的IP地址，并将其设置为缺省路由的下一跳地址。</li><li>网络内的主机通过这个虚拟路由器与外部网络进行通信。</li><li>备份组内的路由器根据优先级，选举出Master路由器，承担网关功能。其他路由器作为Backup路由器，当Master路由器发生故障时，取代Master继续履行网关职责，从而保证网络内的主机不间断地与外部网络进行通信。</li></ul></blockquote><h2 id="VRRP组"><a href="#VRRP组" class="headerlink" title="VRRP组"></a>VRRP组</h2><blockquote><ol><li>一个VRRP组由多台协同工作的路由器组成，使用相同的VRID（虚拟路由器标识符）进行标识，属于同一个VRRP组的路由器之间交互VRRP协议报文并产生一台虚拟路由器。</li><li>一个VRRP组中只能出现一台Master路由器。</li><li>一个接口可以加入单个VRRP组，也可以加入多个VRRP组。不同的VRRP组需使用不同的VRID进行区分。</li></ol></blockquote><h2 id="虚拟-（路由器-IP-MAC）"><a href="#虚拟-（路由器-IP-MAC）" class="headerlink" title="虚拟 （路由器 IP MAC）"></a>虚拟 （路由器 IP MAC）</h2><blockquote><ol><li><p>虚拟路由器</p><ul><li><p>虚拟路由器的IP地址（虚拟IP地址）由网络管理员在配置VRRP时指定，一台虚拟路由器可以有一个或多个IP地址，而虚拟MAC地址的格式是0000-5e00-01xx”,其中XX为VRID，</p></li><li><p>一个VRRP组只会产生一台虚拟路由器。当Master路由器收到请求虚拟路由器MAC地址的ARP Request时，它在ARP Reply中回应的MAC地址是虚拟MAC地址，而不是其物理接口MAC地址。</p></li><li><p>通常情况下，VRRP路由器接口IP地址不会与虚拟路由器的IP地址重叠，如果使用某个路由器接口的IP地址，则该路由器将无条件的称为Master。</p></li></ul></li><li><p>Ｍaster路由器：</p><ul><li><p>Master路由器是接口处于Master状态，也被称为主路由器。主路由器在一个VRRP组中承担报文转发任务，只有Ｍaster路由器才会响应针对虚拟IP地址的ARP Requeset。</p></li><li><p> Master路由器会以一定的时间间隔周期性地发送VRRP报文，以便通知一个VRRP组中的Backup路由器关于自己的存活情况。</p></li></ul></li><li><p>Backup路由器：</p><ul><li>Backup路由器是接口处于Backup状态，也被称为备份路由器，Backup路由器会实时侦听Master路由器发送出来的VRRP报文，它随时准备接替Master路由器的工作。</li></ul></li><li><p>抢占模式</p><ul><li>VRRP优先级越大的称为主路由器，优先级相同情况下，则接口IP地址最大的成为主路由器。如果Backup激活了抢占功能，当发现Master路由器的优先级比自己更低时，它将立即成为Master状态。而如果Backup路由器没有激活抢占功能，那么即使收到比自己更低的优先级，也只能依然保持Backup状态，直到Master路由器失效。</li></ul></li></ol></blockquote><h2 id="VRRP状态"><a href="#VRRP状态" class="headerlink" title="VRRP状态"></a>VRRP状态</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142114.png"></p><blockquote><ol><li><p>Initialize（初始状态）：</p><ul><li><p>接口配置VRRP后，如果该接口时Down的（例如接口关闭，或者没有连接任何线缆）则该接口的状态停滞在Initialize。</p></li><li><p>当接口UP后，如果其VRRP优先级为255(这种情况发生在接口的实际IP地址是VRRP虚拟IP地址的情况下）那么接口的VRRP状态将由Initialize切换到Master。</p></li><li><p>如果优先级不是255，则进入Backup状态。</p></li></ul></li><li><p>Backup状态：</p><ul><li><p>它会实时监控当前Master路由器的状态，并随时接替工作。</p><p>a. 对关于VRRP虚拟IP地址的ARP请求不响应。</p><p>b. 丢弃目的MAC地址为VRRP虚拟MAC地址的数据帧。</p><p>c. 不接受目的IP地址为VRRP虚拟IP地址的数据包</p><p>d. 实时侦听Master路由器发送的报文。若该VRRP报文的优先级为0（这意味着当前Master路由器希望主动放弃Master状态）</p></li></ul></li><li><p>Master状态：</p><ul><li><p>它承担着数据转发任务</p><p>a. 当收到关于虚拟IP地址的ARP请求时，以虚拟MAC地址进行回应。</p><p>b. 转发目的MAC地址为虚拟MAC地址。</p><p>c. 周期性地发送VRRP报文，时间间隔缺省为1S。</p><p>d. 当收到一个VRRP报文时，若该优先级为０，则继续发送自己的报文，若该VRRP报文优先级不为０，并比本接口的VRRP优先级值更大，或者VRRP优先级相等但是VRRP报文的源IP地址比本接口大，则将接口切换成Backuo状态。若该VRRP报文不为0，并且比本接口优先级更小，则忽略该报文。</p></li></ul></li></ol></blockquote><h2 id="VRRP定时器"><a href="#VRRP定时器" class="headerlink" title="VRRP定时器"></a>VRRP定时器</h2><p><strong>VRRP在运行过程中使用两个定时器用来进行状态检测.</strong></p><blockquote><ol><li>通过定时器（adver-timer）:该定时器在主路由器中使用，用来定于通告间隔（adver-interval）.主路由器以该定时器的间隔定期发送VRRP通告报文，用来告知其他备份路由器自己仍在先.通告间隔默认为1秒，可以通过配置进行修改</li><li>主路由器失效时器（master-down-timer）：该定时器在备份路由器中使用，用来定义主路由器失效（mater-down-interval）/主路由器失效间隔指的是备路由器多长时间没有收到主路由器的通告报文后，将认为主路由器一失效，并开始选举新的主路由器.主路由器失效间隔是通告间隔的3倍，默认为3秒</li></ol></blockquote><h2 id="VRRP报文结构"><a href="#VRRP报文结构" class="headerlink" title="VRRP报文结构"></a>VRRP报文结构</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142259.png"></p><blockquote><p>报文格式：VRRP协议的正常工作以来于VRRP报文的正确收发，VRRP之定义了一种报文格式，即通过报文，它被封装在IP报文中，IP头部的协议号字段值为112，报文的目的IP地址是组播地址224.0.0.18.</p><ol><li><p>各个字段的含义如下：</p><ul><li><p>版本（Version）：对于VRRPv2来说，该字段的值恒为2</p></li><li><p>类型（Type）：VRRP之定义了通告报文这一种报文类型.该字段的值恒为1.</p></li><li><p>虚拟路由器ID（VRID）：虚拟路由器的标识符，取值范围是1~255，属于同一个VRRP组的路由器需使用相同的VRID.</p></li><li><p>优先级（Priority）：取值范围0~255，该值越大，则VRRP优先级越高，路由器也就越有可能成为Master</p></li><li><p>IP地址个数（Count IP Address）：VRRP组中虚拟IP地址的个数.这个字段的值指示了改报文后续的”IP地址”字段的个数</p></li><li><p>认证类型（Authentication Type）：VRRP报文的认证烈性，有以下三种情况. </p><p>a. 当该字段为0时，表示无认证（Non Authentication）；</p><p>b. 当该字段为1时，表示明文认证方式（Simple Text Password）；</p><p>c. 当该字段为2时，表示MD5认证方式（IP Authentication Header）；</p></li><li><p>通告间隔（Advertisement Interval）：VRRP报文的发送时间间隔（单位为秒），缺省情况下，VRRP的报文发送时间间隔为1s.</p></li><li><p>校验和（Checksum）：校验和</p></li><li><p>IP地址（IP address）：VRRP虚拟IP地址</p></li><li><p>认证数据（Authentication Data）：VRRP认证数据，当VRRP明文认证或MD5认证被激活时，该字段则填充相应的数据.</p></li></ul></li></ol></blockquote><h2 id="単网关的缺陷"><a href="#単网关的缺陷" class="headerlink" title="単网关的缺陷"></a>単网关的缺陷</h2><p><strong>当网关路由器R-A出现故障时，本网段内以该设备为网关的主机都不能与Internet进行通信.</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142525.png"></p><h2 id="多网关存在的问题"><a href="#多网关存在的问题" class="headerlink" title="多网关存在的问题"></a>多网关存在的问题</h2><blockquote><ol><li>通过部署多网关的方式实现网关的备份</li><li>但多网关可能会出现一些问题：网关间IP地址冲突；主机会频繁切换网络接口</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142608.png"></p><h2 id="VRRP基本结构"><a href="#VRRP基本结构" class="headerlink" title="VRRP基本结构"></a>VRRP基本结构</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142628.png"></p><h2 id="VRRP主备备份工作过程"><a href="#VRRP主备备份工作过程" class="headerlink" title="VRRP主备备份工作过程"></a>VRRP主备备份工作过程</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142642.png"></p><h3 id="VRRP主备路由器切换过程（1）"><a href="#VRRP主备路由器切换过程（1）" class="headerlink" title="VRRP主备路由器切换过程（1）"></a>VRRP主备路由器切换过程（1）</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142706.png"></p><h3 id="VRRP主备路由器切换过程（2）"><a href="#VRRP主备路由器切换过程（2）" class="headerlink" title="VRRP主备路由器切换过程（2）"></a>VRRP主备路由器切换过程（2）</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142726.png"></p><h2 id="VRRP负载分担工作过程"><a href="#VRRP负载分担工作过程" class="headerlink" title="VRRP负载分担工作过程"></a>VRRP负载分担工作过程</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142812.png"></p><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><p><strong>如图所示：R1与R2分两个组，组1是由R1为主，组2有R2为主，R1与R2各VRRP组中高优先级设置为150，低优先级设置为120.通过VRRP实现负载分担</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142812.png"></p><h3 id="主机地址配置"><a href="#主机地址配置" class="headerlink" title="主机地址配置"></a>主机地址配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC2：VPCS&gt; ip 192.168.1.1/24 192.168.1.254</span><br><span class="line">PC3：VPCS&gt; ip 192.168.1.2/24 192.168.1.253</span><br></pre></td></tr></table></figure><h3 id="R1配置"><a href="#R1配置" class="headerlink" title="R1配置"></a>R1配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/1</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.251</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 1 ip 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 1 priority 150</span><br><span class="line"> vrrp 2 ip 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.253</span></span><br><span class="line"> vrrp 2 priority 120</span><br><span class="line">！</span><br><span class="line">interface Loopback0</span><br><span class="line"> ip <span class="selector-tag">address</span> 1<span class="selector-class">.1</span><span class="selector-class">.1</span><span class="selector-class">.1</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.255</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="R2配置"><a href="#R2配置" class="headerlink" title="R2配置"></a>R2配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/1</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.252</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 1 ip 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 1 priority 120</span><br><span class="line"> vrrp 2 ip 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.253</span></span><br><span class="line"> vrrp 2 priority 150</span><br><span class="line">！</span><br><span class="line">interface Loopback0</span><br><span class="line">ip <span class="selector-tag">address</span> 2<span class="selector-class">.2</span><span class="selector-class">.2</span><span class="selector-class">.2</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.255</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h2 id="使用show查看配置"><a href="#使用show查看配置" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="R1"><a href="#R1" class="headerlink" title="R1"></a>R1</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142932.png"></p><h3 id="R2"><a href="#R2" class="headerlink" title="R2"></a>R2</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142946.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117142957.png"></p><h3 id="PC2-通过追踪显然PC2走VRRP组1"><a href="#PC2-通过追踪显然PC2走VRRP组1" class="headerlink" title="PC2:通过追踪显然PC2走VRRP组1"></a>PC2:通过追踪显然PC2走VRRP组1</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143016.png"></p><h3 id="PC3：通过追踪显然PC3走VRRP组2"><a href="#PC3：通过追踪显然PC3走VRRP组2" class="headerlink" title="PC3：通过追踪显然PC3走VRRP组2"></a>PC3：通过追踪显然PC3走VRRP组2</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143029.png"></p><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><p><strong>如图所示：在S-A和S-B上配置VRRP，实现主机的网关冗余。所配置的参数.S-A、S-B各VRRP组中高优先级设置为150，低优先级设置为120，并设置抢占功能为5秒</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143047.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143058.png"></p><h3 id="主机地址配置-1"><a href="#主机地址配置-1" class="headerlink" title="主机地址配置"></a>主机地址配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PC1：VPCS&gt; ip 192.168.10.1/24 192.168.10.254</span><br><span class="line">PC2：VPCS&gt; ip 192.168.20.1/24 192.168.20.254</span><br><span class="line">PC3：VPCS&gt; ip 192.168.30.1/24 192.168.30.254</span><br><span class="line">PC4：VPCS&gt; ip 192.168.40.1/24 192.168.40.254</span><br></pre></td></tr></table></figure><h3 id="S-A配置"><a href="#S-A配置" class="headerlink" title="S-A配置"></a>S-A配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">S-<span class="selector-tag">A</span>(config)<span class="selector-id">#vlan</span> 10,20,30,40</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.252</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 10 ip 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 10 preempt delay minimum 5</span><br><span class="line"> vrrp 10 priority 150</span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.20</span><span class="selector-class">.252</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 20 ip 192<span class="selector-class">.168</span><span class="selector-class">.20</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 20 preempt delay minimum 5</span><br><span class="line"> vrrp 20 priority 150</span><br><span class="line">!</span><br><span class="line">interface Vlan30</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.30</span><span class="selector-class">.252</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 30 ip 192<span class="selector-class">.168</span><span class="selector-class">.30</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 30 preempt delay minimum 5</span><br><span class="line"> vrrp 30 priority 120</span><br><span class="line">!</span><br><span class="line">interface Vlan40</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.40</span><span class="selector-class">.252</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 40 ip 192<span class="selector-class">.168</span><span class="selector-class">.40</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 40 preempt delay minimum 5</span><br><span class="line"> vrrp 40 priority 120</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="S-B配置"><a href="#S-B配置" class="headerlink" title="S-B配置"></a>S-B配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">S-<span class="selector-tag">B</span>(config)<span class="selector-id">#vlan</span> 10,20,30,40</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.253</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 10 ip 192<span class="selector-class">.168</span><span class="selector-class">.10</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 10 preempt delay minimum 5</span><br><span class="line"> vrrp 10 priority 120</span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.20</span><span class="selector-class">.253</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 20 ip 192<span class="selector-class">.168</span><span class="selector-class">.20</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 20 preempt delay minimum 5</span><br><span class="line"> vrrp 20 priority 120</span><br><span class="line">!</span><br><span class="line">interface Vlan30</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.30</span><span class="selector-class">.253</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 30 ip 192<span class="selector-class">.168</span><span class="selector-class">.30</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 30 preempt delay minimum 5</span><br><span class="line"> vrrp 30 priority 150</span><br><span class="line">!</span><br><span class="line">interface Vlan40</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.40</span><span class="selector-class">.253</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> vrrp 40 ip 192<span class="selector-class">.168</span><span class="selector-class">.40</span><span class="selector-class">.254</span></span><br><span class="line"> vrrp 40 preempt delay minimum 5</span><br><span class="line"> vrrp 40 priority 150</span><br></pre></td></tr></table></figure><h3 id="S-C配置"><a href="#S-C配置" class="headerlink" title="S-C配置"></a>S-C配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">S-C(config)<span class="selector-id">#vlan</span> 10,20,30,40</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport access vlan 10</span><br><span class="line">switchport mode access</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">switchport access vlan 20</span><br><span class="line">switchport mode access</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line"></span><br><span class="line">S-D：</span><br><span class="line">S-D(config)<span class="selector-id">#vlan</span> 10,20,30,40</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport access vlan 30</span><br><span class="line">switchport mode access</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">switchport access vlan 40</span><br><span class="line">switchport mode access</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure><h2 id="使用show查看配置-1"><a href="#使用show查看配置-1" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="S-A"><a href="#S-A" class="headerlink" title="S-A"></a>S-A</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143221.png"></p><h3 id="S-B"><a href="#S-B" class="headerlink" title="S-B"></a>S-B</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143221.png"></p><h3 id="PC1"><a href="#PC1" class="headerlink" title="PC1"></a>PC1</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143234.png"></p><h3 id="PC3"><a href="#PC3" class="headerlink" title="PC3"></a>PC3</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117143244.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VRRP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVLAN</title>
      <link href="2021/01/17/PVLAN/"/>
      <url>2021/01/17/PVLAN/</url>
      
        <content type="html"><![CDATA[<h1 id="PVLAN"><a href="#PVLAN" class="headerlink" title="PVLAN"></a>PVLAN</h1><h2 id="PVLAN应用场景"><a href="#PVLAN应用场景" class="headerlink" title="PVLAN应用场景"></a>PVLAN应用场景</h2><blockquote><ol><li>private vlan的重要功能就是能够实现节约IP地址，隔离广播风暴，病毒攻击，控制端口二层互访.适用于大的二层结构的环境，例如：用户多，vlan多，但是IP地址又是同一个网段，又要实现彼此之间的二层隔离，个别vlan之间又需要访问的情况下，private vlan可以解决上面的问题</li><li>另一种比较典型的PVLAN应用类似于端口隔离功能（switchport protected），即将所有用户端口设置为隔离VLAN(Isolated Port），这样即使同一vlan，同一网段的IP之间的用户也无法访问，可以有效隔离病毒传播。</li></ol></blockquote><h2 id="PVLAN功能介绍"><a href="#PVLAN功能介绍" class="headerlink" title="PVLAN功能介绍"></a>PVLAN功能介绍</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140743.png"></p><blockquote><ol><li>服务提供商如果给每个用户一个VLAN，则由于一台设备支持的VLAN数最大只有4094而限制了服务提供商能支持的用户数；在三层设备上，每个VLAN被分配一个子网地址或一系列地址，这种情况导致IP地址的浪费，对于这个问题我们可以使用private vlan来解决.</li><li>private vlan将一个vlan的二层广播域分成多个子域，每个子域都由一个私有vlan对组成：主vlan（primary vlan）和辅助vlan（secondary vlan）.</li><li>private vlan域中所有的私有vlan共享同一个主vlan</li><li>每个子域的辅助vlan id不同. 一个private vlan域中只有一个主vlan</li></ol></blockquote><p><strong>有两种类型的辅助vlan</strong></p><blockquote><ol><li>隔离vlan（lsolated vlan）：同一个隔离vlan中的端口不可以互相进行二层通信，一个private vlan域中只有一个隔离vlan</li><li>团体vlan（Community vlan）：同一团体vlan中的端口可以互相进行二层通信，但不能与其他群体vlan中的端口进行二层通信，一个private vlan中可以有多个团体vlan</li></ol></blockquote><p><strong>private vlan域内三种常见的端口角色</strong></p><blockquote><ol><li>混杂端口（Promiscuous Port）：混杂端口为主vlan中的端口，可以与任意端口通信，包括同一个Private vlan的隔离端口和团体端口.</li><li>隔离端口（lsolated Port）：隔离vlan中的端口彼此之间不能通信，只能与混杂端口进行通信</li><li>团体端口（Community Port）：属于团体vlan中的端口，同一团体vlan可以进行通信也可以和混杂端口通信，不能与其他团体vlan通信以及隔离端口通信</li><li>只有主vlan可以创建SVI接口，配置IP作为网关使用，辅助vlan不可以创建SVI</li></ol></blockquote><h2 id="SVI接口"><a href="#SVI接口" class="headerlink" title="SVI接口"></a>SVI接口</h2><blockquote><p>SVI（switch virtual interface）交换虚拟接口，即交互三层管理vlan地址，一个由交换端口构成的vlan（其实就是通常所说的vlan接口）用于连接整个vlan。也称为逻辑三层接口. SVI是联系vlan的IP接口，一个SVI只能和一个vlan相联系.</p></blockquote><h2 id="PVLAN实验"><a href="#PVLAN实验" class="headerlink" title="PVLAN实验"></a>PVLAN实验</h2><h3 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h3><p><strong>如图所示：在主vlan中有2个部门，服务器属于主vlan10并配置混杂端口，其中财务部属于隔离vlan20，商务部门属于团体vlan30</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140914.png"></p><h4 id="主机地址配置"><a href="#主机地址配置" class="headerlink" title="主机地址配置"></a>主机地址配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPC1:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC2:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.2</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC3:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.3</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC4:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.4</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC5:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.5</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br></pre></td></tr></table></figure><h4 id="S1配置"><a href="#S1配置" class="headerlink" title="S1配置"></a>S1配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">  private-vlan primary     <span class="selector-id">#--</span>&gt;设置vlan10为主vlan</span><br><span class="line">  private-vlan association 20,30 <span class="selector-id">#--</span>&gt;关联辅助vlan20和vlan30</span><br><span class="line">!</span><br><span class="line">vlan 20</span><br><span class="line">  private-vlan isolated    <span class="selector-id">#--</span>&gt;设置vlan20为隔离vlan</span><br><span class="line">!</span><br><span class="line">vlan 30</span><br><span class="line">  private-vlan community   <span class="selector-id">#--</span>&gt;设置vlan30为团体vlan</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport private-vlan host-association 10 20</span><br><span class="line">                           #--&gt;将e0/1接口加入到隔离vlan</span><br><span class="line"> switchport mode private-vlan host </span><br><span class="line">                           <span class="selector-id">#--</span>&gt;设置模式为private-vlan</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport private-vlan host-association 10 20 </span><br><span class="line">                           #--&gt;将e0/1接口加入到隔离vlan</span><br><span class="line"> switchport mode private-vlan host </span><br><span class="line">                           <span class="selector-id">#--</span>&gt;设置模式为private-vlan</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport private-vlan host-association 10 30 </span><br><span class="line">                           #--&gt;将e0/1接口加入到团体vlan</span><br><span class="line"> switchport mode private-vlan host </span><br><span class="line">                           <span class="selector-id">#--</span>&gt;设置模式为private-vlan</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line"> switchport private-vlan host-association 10 30 </span><br><span class="line">                           #--&gt;将e0/1接口加入到团体vlan</span><br><span class="line"> switchport mode private-vlan host</span><br><span class="line">                           <span class="selector-id">#--</span>&gt;设置模式为private-vlan</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> private-vlan mapping 20,30  </span><br><span class="line">                           <span class="selector-id">#--</span>&gt;将辅助vlan映射到SVI接口</span><br><span class="line">！</span><br><span class="line">interface  Ethernet1/1</span><br><span class="line">switchport private-vlan mapping 10 11-12</span><br><span class="line">switchport mode private-vlan promiscuous</span><br></pre></td></tr></table></figure><blockquote><ol><li>PC1和PC2隔离vlan不能互相ping通，但是能和主vlan10的PC5ping通</li><li>PC3和PC4团体vlan能互相ping通，也能和主vlan10的PC5ping通</li><li>主vlanPC5能和辅助vlan的全部主机ping通</li></ol></blockquote><h3 id="使用show查看配置"><a href="#使用show查看配置" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141012.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141019.png"></p><h3 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h3><p><strong>如图所示：三台交换机，一台三层，两台二层，三台交换机分别有主vlan10和辅助vlan11,12，S-A和S-B之间做trunk，S-A和Swith（三层）做混杂端口，Swith（三层）上配置192.168.1.254/24的网关</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141044.png"></p><h4 id="主机地址配置-1"><a href="#主机地址配置-1" class="headerlink" title="主机地址配置"></a>主机地址配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VPC1:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.1</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC2:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.2</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC3:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.3</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC4:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.4</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br><span class="line">VPC5:VPCS&gt; ip <span class="number">192.168</span>.<span class="number">1.5</span>/<span class="number">24</span> <span class="number">192.168</span>.<span class="number">1.254</span></span><br></pre></td></tr></table></figure><h4 id="S-A配置"><a href="#S-A配置" class="headerlink" title="S-A配置"></a>S-A配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">  private-vlan primary</span><br><span class="line">  private-vlan association 11-12</span><br><span class="line">!</span><br><span class="line">vlan 11</span><br><span class="line">  private-vlan community</span><br><span class="line">!</span><br><span class="line">vlan 12</span><br><span class="line">  private-vlan isolated</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport private-vlan host-association 10 11</span><br><span class="line"> switchport mode private-vlan host</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport private-vlan host-association 10 11</span><br><span class="line"> switchport private-vlan mapping 10 11-12</span><br><span class="line"> switchport mode private-vlan promiscuous</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport private-vlan host-association 10 12</span><br><span class="line"> switchport mode private-vlan host</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet1/0</span><br><span class="line"> switchport private-vlan mapping 10 11-12</span><br><span class="line"> switchport mode private-vlan promiscuous</span><br></pre></td></tr></table></figure><h4 id="S-B配置"><a href="#S-B配置" class="headerlink" title="S-B配置"></a>S-B配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">  private-vlan primary</span><br><span class="line">  private-vlan association 11-12</span><br><span class="line">!</span><br><span class="line">vlan 11</span><br><span class="line">  private-vlan community</span><br><span class="line">!</span><br><span class="line">vlan 12</span><br><span class="line">  private-vlan isolated</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport private-vlan host-association 10 11</span><br><span class="line"> switchport mode private-vlan host</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport private-vlan host-association 10 12</span><br><span class="line"> switchport mode private-vlan host</span><br></pre></td></tr></table></figure><h4 id="Switch1（三层）配置"><a href="#Switch1（三层）配置" class="headerlink" title="Switch1（三层）配置"></a>Switch1（三层）配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vlan 10</span><br><span class="line">  private-vlan primary</span><br><span class="line">  private-vlan association 11-12</span><br><span class="line">!</span><br><span class="line">vlan 11</span><br><span class="line">  private-vlan community</span><br><span class="line">!</span><br><span class="line">vlan 12</span><br><span class="line">  private-vlan isolated</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line"> private-vlan mapping 11-12</span><br><span class="line">！</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport private-vlan mapping 10 11-12</span><br><span class="line"> switchport mode private-vlan promiscuous</span><br></pre></td></tr></table></figure><blockquote><ol><li>PC3和PC5隔离vlan11不能相通，但是ping通主vlan的SVI接口</li><li>PC1，PC2和PC5团体vlan12可以互相ping通，也可以ping通主vlan的SVI接口</li></ol></blockquote><h4 id="使用show查看配置-1"><a href="#使用show查看配置-1" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h4><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141148.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141202.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117141213.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VLAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLAN实验</title>
      <link href="2021/01/17/VLAN%E5%AE%9E%E9%AA%8C/"/>
      <url>2021/01/17/VLAN%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="VLAN实验"><a href="#VLAN实验" class="headerlink" title="VLAN实验"></a>VLAN实验</h1><h2 id="Access链路应用"><a href="#Access链路应用" class="headerlink" title="Access链路应用"></a>Access链路应用</h2><p><strong>划分了两个VLAN</strong></p><blockquote><p>PC1和PC3网段属于VLAN10<br>PC2和PC4网段属于VLAN20<br>主机地址<br>PC1：192.1.1.1<br>PC2：192.1.1.2<br>PC3：192.1.1.3<br>PC4：192.1.1.4</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135816.png"></p><h3 id="S3配置"><a href="#S3配置" class="headerlink" title="S3配置"></a>S3配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int e0/0</span><br><span class="line">swi mo acc</span><br><span class="line">swi acc vlan 10</span><br><span class="line"></span><br><span class="line">int e0/1</span><br><span class="line">swi mo acc</span><br><span class="line">swi acc vlan 20</span><br><span class="line"></span><br><span class="line">int e0/2</span><br><span class="line">swi mo acc</span><br><span class="line">swi acc vlan 10</span><br><span class="line"></span><br><span class="line">int e0/3</span><br><span class="line">swi mo acc</span><br><span class="line">swi acc vlan 20</span><br></pre></td></tr></table></figure><p><strong>PC1和PC3同属于一个vlan,可以ping通，但是和P2和P4不同vlan不能ping通，换过来说P2和P4也一样不能ping通P1和P3</strong></p><h2 id="Trunk链路应用"><a href="#Trunk链路应用" class="headerlink" title="Trunk链路应用"></a>Trunk链路应用</h2><p><strong>还是根据上面的地址和VLAN划分，添加多了一台交换机</strong></p><h3 id="S1和S2的配置"><a href="#S1和S2的配置" class="headerlink" title="S1和S2的配置"></a>S1和S2的配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S1：int e0/0</span><br><span class="line">Swi trunk encapsulation dot1q</span><br><span class="line">Swi mode trunk</span><br><span class="line"></span><br><span class="line">S2：int e0/0</span><br><span class="line">Swi trunk encapsulation dot1q</span><br><span class="line">Swi mode trunk</span><br></pre></td></tr></table></figure><p><strong>终端和交换机之间的access接口配置还是一样，两端的交换机需要封装802.1q协议，封装之后，应用trunk模式，同VLAN之间可以通信，不同VLAN还是不能通信</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135919.png"></p><p><strong>使用wireshark抓取的icmp数据包，turnk封装了802.1q，VLAN-id为10</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135937.png"></p><h2 id="交换机不同模式使用出现的问题"><a href="#交换机不同模式使用出现的问题" class="headerlink" title="交换机不同模式使用出现的问题"></a>交换机不同模式使用出现的问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p><strong>switch1两个接口都是VLAN10，switch2两个接口都是VLAN20，请问它们可以通信么？</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140005.png"></p><h4 id="switch-1配置"><a href="#switch-1配置" class="headerlink" title="switch 1配置"></a>switch 1配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">S1(config)<span class="selector-id">#vlan</span> 10</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport access vlan 10</span><br><span class="line">switchport mode access</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">switchport access vlan 10</span><br><span class="line">switchport mode access</span><br></pre></td></tr></table></figure><h4 id="switch-2配置"><a href="#switch-2配置" class="headerlink" title="switch 2配置"></a>switch 2配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">S2(config)<span class="selector-id">#vlan</span> 20</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport access vlan 20</span><br><span class="line">switchport mode access</span><br><span class="line"></span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">switchport access vlan 20</span><br><span class="line">switchport mode access</span><br></pre></td></tr></table></figure><p><strong>答：不能通信，因为VLAN需要同步</strong></p><p><strong>修改配置：两者交换机同步既可以通信了</strong></p><blockquote><p>switch 1<br>S1(config)#vlan 10<br>S1(config)#vlan 20</p><p>switch 2<br>S2(config)#vlan 10<br>S2(config)#vlan 20</p></blockquote><p><strong>答：两边VLAN同步，两边的接口都是相同的vlan-id，而access接口发送出去的一定是无标记帧</strong></p><blockquote><p>说明：PC1发送数据包给PC2，进入到switch1中，没有标签的数据包会打上vlan-id标签，发现目标是从自己gi0/1接口出去的，查看自己的gi0/1接口vlan-id标签，发现标签是一致，然后剥开vlan-id标签发送给switch2，接着switch2情况也和switch1一样.最终抵达PC2</p></blockquote><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p><strong>switch2的access-VLAN20接口改成trunk-VLAN20，请问PC1能pingPC2么?</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140148.png"></p><h4 id="switch-2的配置"><a href="#switch-2的配置" class="headerlink" title="switch 2的配置"></a>switch 2的配置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport trunk native vlan 20</span><br><span class="line">switchport mode trunk</span><br></pre></td></tr></table></figure><p><strong>答：不能ping通，因为模式不一样，一个是没有封装802.1q，一个没有封装了802.1q，匹配不成功，所以数据不可达</strong></p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p><strong>switch1的g0/1接口设置成为trunk-VLAN10，switch2还是原来的trunk-VLAN20，PC1能否ping通PC2</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140242.png"></p><p><strong>答：不能ping通</strong></p><blockquote><ol><li>不同vlan不能相通</li><li>如果两台通信的交换机配置的native vlan不一致,就会出现mismatch（不匹配）错误，两端的native vlan不匹配的trunk链路,一端的端口会被block住,而不会转发流量.</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140326.png"></p><h2 id="综合实验"><a href="#综合实验" class="headerlink" title="综合实验"></a>综合实验</h2><blockquote><ol><li>s2两端都为access-vlan10，s3连接终端的接口为access-vlan20，连接三层交换机的接口为trunk-vlan20.</li><li>s1三层交换机gi0/1接口为192.168.1.254,gi0/0接口为172.16.1.254.</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117140354.png"></p><h3 id="主机地址配置"><a href="#主机地址配置" class="headerlink" title="主机地址配置"></a>主机地址配置</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PC3</span><br><span class="line">VPCS&gt; ip 192.168.1.1/24 192.168.1.25</span><br><span class="line">PC4</span><br><span class="line">VPCS&gt; ip 172.16.1.1/24 172.16.1.254</span><br></pre></td></tr></table></figure><h3 id="S2配置"><a href="#S2配置" class="headerlink" title="S2配置"></a>S2配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br></pre></td></tr></table></figure><h3 id="S3配置-1"><a href="#S3配置-1" class="headerlink" title="S3配置"></a>S3配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport access vlan 20</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport trunk native vlan 20</span><br><span class="line"> switchport mode trunk</span><br></pre></td></tr></table></figure><h3 id="S1配置"><a href="#S1配置" class="headerlink" title="S1配置"></a>S1配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> no switchport</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><p><strong>上面的配置配置完，PC3可以ping通PC4，为什么可以相通.</strong></p><blockquote><p>答：PC3发送数据包给PC4，中间的access口都是透明，可以找到自己的网关，发现下一跳的路由是172.16.1.0/24，对应的接口是gi0/0，然后从gi0/0接口转发出去给S3的gi0/1接口，gi0/1接收到没有打标签的包，随即打上native标签20转发给gi0/0接口，gi0/0接口检查发送过来native跟自己的native是否一致，一致则剥开标签转发给PC4，数据包抵达目的.</p><p>如果S3的gi0/1接口没有打上native-id20，那么将不能通信，因为跟access的接口native不对应，所以目标不可达</p><p>S3接口设置了native-id20，那么对应上access的native，则查看允许通过列表是否通过，通过则转发数据，不通过则丢弃</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VLAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VLAN原理</title>
      <link href="2021/01/17/VLAN%E5%8E%9F%E7%90%86/"/>
      <url>2021/01/17/VLAN%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="VLAN原理"><a href="#VLAN原理" class="headerlink" title="VLAN原理"></a>VLAN原理</h1><h2 id="广播域过大带来的影响"><a href="#广播域过大带来的影响" class="headerlink" title="广播域过大带来的影响"></a>广播域过大带来的影响</h2><blockquote><ol><li>广播帧泛洪产生大量的数据包（消耗交换机的资源）</li><li>由于都处于一个广播，安全性没有了保障（降低了安全性）</li></ol></blockquote><h2 id="VLAN（虚拟局域网virtual-LAN）"><a href="#VLAN（虚拟局域网virtual-LAN）" class="headerlink" title="VLAN（虚拟局域网virtual LAN）"></a>VLAN（虚拟局域网virtual LAN）</h2><blockquote><ol><li>VLAN的出现减少了广播带来负担，并且提高了安全性</li><li>VLAN号共有4096个，0-4095</li><li>0,4095：这两个号保留，仅限系统使用。用户不能查看。</li><li>CISCO默认VLAN1，不能删除。也同样不能做修改</li><li>2－1001：用于以太网的VLAN，用户可根据这一段号码自己创建VLAN</li><li>1002－1005：用于FDDI和令牌环的默认VLAN，不能删除。</li><li>1006－4094：仅用于以太网的VLAN. 扩展的VLAN，只有3550以上的交换机才能配，且必须将VTP模式设为透明模式。</li></ol></blockquote><h2 id="VLAN的作用"><a href="#VLAN的作用" class="headerlink" title="VLAN的作用"></a>VLAN的作用</h2><blockquote><ol><li>隔离广播域</li><li>VLAN将一个局域网划分成多个虚拟局域网（简单的说把一台交换机划分了多个小型交换机）</li><li>增加了局域网的安全性（不同VLAN之间不能互相通信）</li></ol></blockquote><h2 id="Access接入链路"><a href="#Access接入链路" class="headerlink" title="Access接入链路"></a>Access接入链路</h2><p><strong>Access链路一般应用于终端和交换机之间</strong></p><blockquote><p>一般部署在终端和交换机之间,一个access口属于一个VLAN接收到不带tag的数据帧时会打上接口的native-id后接收</p><ol><li>从access接口发送出去的帧一定是无标记帧</li><li>交换机上接收带tag的数据帧,则对比tag与native-id是否一致,如果相同则接收,如果不同则丢弃.</li><li>交换机发送数据帧与接口的native-id进行对比,一致则剥离tag发送,如果不同,则直接丢弃该数据帧</li></ol></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135130.png"></p><h2 id="Trunk干道链路"><a href="#Trunk干道链路" class="headerlink" title="Trunk干道链路"></a>Trunk干道链路</h2><p><strong>Trunk链路：用于交换机和交换机之间</strong></p><blockquote><ol><li><p>交换机从trunk链路接收数据帧</p><ul><li><p>带Tag,直接对比允许通过列表</p></li><li><p>不带Tag,打上端口的native-id,对比native-id是否在允许通过列表</p></li></ul></li><li><p>交换机将数据帧从trunk链路发送出去</p><ul><li><p>Tag与端口的native-id相同时,剥离Tag后对比允许通过列表</p></li><li><p>Tag与端口的native不同时,则直接将Tag对比允许通过列表</p></li></ul></li><li><p>native（本地vian-id）说明：</p><ul><li>如果两台通信的交换机配置的native vlan不一致,就会出现mismatch（不匹配）错误,两端的native vlan不匹配的trunk链路,一端的端口会被block住,而不会转发流量.</li></ul></li></ol></blockquote><h2 id="802-1Q报文格式"><a href="#802-1Q报文格式" class="headerlink" title="802.1Q报文格式"></a>802.1Q报文格式</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135304.png"></p><p><strong>四个字节的标签头包含了2个字节的标签协议标识（TPID）和2个字节的标签控制信息（TCI）</strong></p><p><strong>TPID（Tag Protocol Identifier）是IEEE定义的新的类型,表明这是一个加了802.1Q标签的帧. TPID包含了一个固定的值0x8100</strong></p><p><strong>TCI是包含的是帧的控制信息,它包含了下面的一些元素：</strong></p><blockquote><ol><li>PRI字段主要用于QOS,默认值为0,范围为0-7,其中数值越大越优先,当交换机发生拥塞时,PRI数据越大的数据帧会达到优先转发</li><li>Canonical Format Indicator(CFI)：CFI值为0说明是规范格式,1为非规范格式,它被用在令牌环/源路由FDDiscard介质访问方法中来指示封装帧中所带地址的比特次序信息</li><li>VLAN的ID,取值范围为0-4095,一共4096个,由于0和4095的协议保留取值,所以VLAN ID的取值范围为1-4094每个支持802.1Q协议的交换机发送出来的数据包都会包含这个域,以指明主机属于哪一个VLAN.</li></ol></blockquote><p><strong><code>注意：终端设备在网卡不支持VLAN id的情况下会直接丢弃携带VLAN Tag的数据帧</code></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117135436.png"></p><h2 id="Hybrid混合链路"><a href="#Hybrid混合链路" class="headerlink" title="Hybrid混合链路"></a>Hybrid混合链路</h2><p><strong>混合链路：华为默认的交换机的端口类型,同时具有access链路与trunk链路,可以部署在任何的交换机链路上</strong></p><blockquote><ol><li>Hybrid端口既可以连接主机,又可以连接交换机</li><li>Hybrid端口可以以Tagged或Untagged方式加入VLAN</li><li>接收报文的处理与trunk接口处理方式一致</li></ol></blockquote><h3 id="发送报文"><a href="#发送报文" class="headerlink" title="发送报文"></a>发送报文</h3><blockquote><p>Port hybrid tagged vlan x:在发送数据帧时允许VLAN x通过,保持tag发送<br>Port hybrid tagged vlan x:在发送数据帧时允许VLAN x 通过,将tag剥离后再发出</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VLAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSTP</title>
      <link href="2021/01/17/MSTP/"/>
      <url>2021/01/17/MSTP/</url>
      
        <content type="html"><![CDATA[<h1 id="MSTP"><a href="#MSTP" class="headerlink" title="MSTP"></a>MSTP</h1><h2 id="MSTP概述"><a href="#MSTP概述" class="headerlink" title="MSTP概述"></a>MSTP概述</h2><p><strong>多生成树协议（Multi spanning tree protocol）</strong></p><blockquote><ol><li>MSTP（多生成树实例）：MSTP生成树不是基于VLAN运行的，而是基于Instance（实例）运行的。可以把一个或多个VLAN映射到Instance，然后Instance计算生成树。基于Instance的生成树被称为MSTI（多生成树实例）。</li><li>MSTP为每个Instance维护独立的MSTI。映射到同一个Instance的VLAN将共享同一棵生成树。</li><li>每个MSTP引入了域的概念，我们可以将一个大型的交换网络划分成多个MST域（多生成域）一个MST域内可以包含一台或者多台交换机。同属一个域的交换机必须配置相同的域名，相同的修订级别，以及相同的VLNA与Instance的映射关系。</li><li>每个MST域内都存在一棵IST（内部生成树）缺省时，交换机上的所有VLNA属于Instance０，而IST则是MST域内的交换机对Instance０计算出的一棵生成树。</li><li>缺省时，MST域名是交换设备主控板上管理网口的MAC地址。</li></ol></blockquote><h2 id="单生成树的弊端-部分VLAN路径不通"><a href="#单生成树的弊端-部分VLAN路径不通" class="headerlink" title="单生成树的弊端-部分VLAN路径不通"></a>单生成树的弊端-部分VLAN路径不通</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117130807.png"></p><h2 id="单生成树的弊端-无法实现流量分担"><a href="#单生成树的弊端-无法实现流量分担" class="headerlink" title="单生成树的弊端-无法实现流量分担"></a>单生成树的弊端-无法实现流量分担</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117130826.png"></p><h2 id="单生成树的弊端-次优二层路径"><a href="#单生成树的弊端-次优二层路径" class="headerlink" title="单生成树的弊端-次优二层路径"></a>单生成树的弊端-次优二层路径</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117130849.png"></p><h2 id="多生成树实例解决单生成树弊端"><a href="#多生成树实例解决单生成树弊端" class="headerlink" title="多生成树实例解决单生成树弊端"></a>多生成树实例解决单生成树弊端</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117130905.png"></p><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><p><strong>如图所示：在数据中心交换机SW1、SW2上配置MSTP防止二层环路；要求VLAN10数据流经过SW1转发，VLAN20数据流经过SW2转发，SW1和SW2其中一台宕机时均可无缝切换至另一台进行转发。switch 是两台PC的网关，所配置的参数要求如下：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">region-name为cisco；</span><br><span class="line">revision版本为1；</span><br><span class="line">实例1，包含VLAN10</span><br><span class="line">实例2，包含VLAN20</span><br><span class="line">SW1作为实例1中的主根，SW2作为实例1的从根；</span><br><span class="line">SW2作为实例2中的主根，SW1作为实例2的从根；</span><br><span class="line">主根优先级为4096，从根优先级为8192；</span><br><span class="line">网关：PC1-192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> PC2-172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.254</span> </span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131008.png"></p><h3 id="配置主机地址"><a href="#配置主机地址" class="headerlink" title="配置主机地址"></a>配置主机地址</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PC1：VPCS&gt; ip 192.168.1.1/24 192.168.1.254</span><br><span class="line">PC2：VPCS&gt; ip 172.16.1.1/24 172.16.1.254</span><br></pre></td></tr></table></figure><h3 id="Switch配置"><a href="#Switch配置" class="headerlink" title="Switch配置"></a>Switch配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Switch(config)<span class="selector-id">#vlan</span> 10,20</span><br><span class="line">interface GigabitEthernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line"> ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.254</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="S1配置"><a href="#S1配置" class="headerlink" title="S1配置"></a>S1配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">S1(config)<span class="selector-id">#vlan</span> 10,20</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">！</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line"> name cisco  <span class="selector-id">#--</span>&gt;域名（同一域必须相同）</span><br><span class="line"> revision 1  <span class="selector-id">#--</span>&gt;修订号</span><br><span class="line"> instance 1 vlan 10  <span class="selector-id">#--</span>&gt;实例1关联vlan10</span><br><span class="line"> instance 2 vlan 20  <span class="selector-id">#--</span>&gt;实例2关联vlan20</span><br><span class="line">!</span><br><span class="line">spanning-tree mst 1 priority 4096 <span class="selector-id">#--</span>&gt;设置实例1优先级为4096</span><br><span class="line">spanning-tree mst 2 priority 8192 <span class="selector-id">#--</span>&gt;设置实例2优先级为8192</span><br></pre></td></tr></table></figure><h3 id="S2配置"><a href="#S2配置" class="headerlink" title="S2配置"></a>S2配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">S2(config)<span class="selector-id">#vlan</span> 10,20</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">！</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line"> name cisco</span><br><span class="line"> revision 1</span><br><span class="line"> instance 1 vlan 10</span><br><span class="line"> instance 2 vlan 20</span><br><span class="line">!</span><br><span class="line">spanning-tree mst 1 priority 8192</span><br><span class="line">spanning-tree mst 2 priority 4096</span><br></pre></td></tr></table></figure><h3 id="S3配置"><a href="#S3配置" class="headerlink" title="S3配置"></a>S3配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">S3(config)<span class="selector-id">#vlan</span> 10,20</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> switchport access vlan 10</span><br><span class="line"> switchport mode access</span><br><span class="line"> spanning-tree portfast edge     <span class="selector-id">#--</span>开启边缘端口</span><br><span class="line"> spanning-tree bpduguard enable  <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line"> switchport access vlan 20</span><br><span class="line"> switchport mode access</span><br><span class="line"> spanning-tree portfast edge</span><br><span class="line"> spanning-tree bpduguard enable</span><br><span class="line">！</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line"> name cisco</span><br><span class="line"> revision 1</span><br><span class="line"> instance 1 vlan 10</span><br><span class="line"> instance 2 vlan 20</span><br></pre></td></tr></table></figure><h2 id="使用show查看配置"><a href="#使用show查看配置" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="S1配置：实例1关联VLAN10"><a href="#S1配置：实例1关联VLAN10" class="headerlink" title="S1配置：实例1关联VLAN10"></a>S1配置：实例1关联VLAN10</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131142.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131153.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131204.png"></p><h3 id="S2：实例2关联VLAN20"><a href="#S2：实例2关联VLAN20" class="headerlink" title="S2：实例2关联VLAN20"></a>S2：实例2关联VLAN20</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131220.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131233.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131241.png"></p><h3 id="S3：实例1关联着VLAN10，所以E0-1接口是AP口，实例2关联着VLAN20，所以E0-0接口是AP口"><a href="#S3：实例1关联着VLAN10，所以E0-1接口是AP口，实例2关联着VLAN20，所以E0-0接口是AP口" class="headerlink" title="S3：实例1关联着VLAN10，所以E0/1接口是AP口，实例2关联着VLAN20，所以E0/0接口是AP口."></a>S3：实例1关联着VLAN10，所以E0/1接口是AP口，实例2关联着VLAN20，所以E0/0接口是AP口.</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131302.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131332.png"></p><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><p><strong>如图所示：某小型办公区域网络由四台电脑，需要将办公区域内的计算机划分成四个区域，分别是vlan10，vlan20，vlan30和vlan40，接入层交换机每个vlan连接一台计算机，要求VLAN10、VLAN20数据流经过S1-1转发，VLAN30、VLAN40数据流经过S1-2转发，S1-1，S1-2其中一台宕机时均可无缝切换至另一台进行转发。所配置的参数要求如下</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">region-name为cisco；</span><br><span class="line">revision版本为1；</span><br><span class="line">实例1，包含VLAN10，VLAN20;</span><br><span class="line">实例2，包含VLAN40，VLAN50;</span><br><span class="line">S1-1作为实例0、1中的主根，S1-2作为实例0、1的从根；</span><br><span class="line">S1-1作为实例2中的主根，S1-2作为实例2的从根；</span><br><span class="line">主根优先级为4096，从根优先级为8192；</span><br><span class="line">地址和网关：</span><br><span class="line">vlan10-192.168.1.1/28，192.168.1.14</span><br><span class="line">vlan20-192.168.1.17/28 ，192.168.1.30</span><br><span class="line">vlan30-172.16.1.1/28，172.16.1.14</span><br><span class="line">vlan40-172.16.1.17/28，172.16.1.30 </span><br></pre></td></tr></table></figure><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131424.png"></p><h3 id="配置主机地址-1"><a href="#配置主机地址-1" class="headerlink" title="配置主机地址"></a>配置主机地址</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PC1：VPCS&gt; ip 192.168.1.1/28 192.168.1.14</span><br><span class="line">PC2：VPCS&gt; ip 192.168.1.17/28 192.168.1.30</span><br><span class="line">PC3：VPCS&gt; ip 172.16.1.1/28 172.16.1.14</span><br><span class="line">PC3：VPCS&gt; ip 172.16.1.17/28 172.16.1.30</span><br></pre></td></tr></table></figure><h3 id="Switch配置-1"><a href="#Switch配置-1" class="headerlink" title="Switch配置"></a>Switch配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface GigabitEthernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface GigabitEthernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">! </span><br><span class="line">interface Vlan10</span><br><span class="line">ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.14</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.240</span></span><br><span class="line">!</span><br><span class="line">interface Vlan20</span><br><span class="line">ip <span class="selector-tag">address</span> 192<span class="selector-class">.168</span><span class="selector-class">.1</span><span class="selector-class">.30</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.240</span></span><br><span class="line">!</span><br><span class="line">interface Vlan30</span><br><span class="line">ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.14</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.240</span></span><br><span class="line">!</span><br><span class="line">interface Vlan40</span><br><span class="line">ip <span class="selector-tag">address</span> 172<span class="selector-class">.16</span><span class="selector-class">.1</span><span class="selector-class">.30</span> 255<span class="selector-class">.255</span><span class="selector-class">.255</span><span class="selector-class">.240</span></span><br></pre></td></tr></table></figure><h3 id="S1-1配置"><a href="#S1-1配置" class="headerlink" title="S1-1配置"></a>S1-1配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line">name cisco</span><br><span class="line">revision 1</span><br><span class="line">instance 1 vlan 10, 20</span><br><span class="line">instance 2 vlan 30, 40</span><br><span class="line">!</span><br><span class="line">spanning-tree mst 0-1 priority 4096</span><br><span class="line">spanning-tree mst 2 priority 8192</span><br></pre></td></tr></table></figure><h3 id="S1-2配置"><a href="#S1-2配置" class="headerlink" title="S1-2配置"></a>S1-2配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line">name cisco</span><br><span class="line">revision 1</span><br><span class="line">instance 1 vlan 10, 20</span><br><span class="line">instance 2 vlan 30, 40</span><br><span class="line">!</span><br><span class="line">spanning-tree mst 0-1 priority 8192</span><br><span class="line">spanning-tree mst 2 priority 4096</span><br></pre></td></tr></table></figure><h3 id="S1-3配置"><a href="#S1-3配置" class="headerlink" title="S1-3配置"></a>S1-3配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport access vlan 10</span><br><span class="line">switchport mode access</span><br><span class="line">spanning-tree portfast edge <span class="selector-id">#--</span>开启边缘端口</span><br><span class="line">spanning-tree bpduguard enable #--&gt;开启BPDU保护&#x27;</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line">switchport access vlan 20</span><br><span class="line">switchport mode access</span><br><span class="line">spanning-tree portfast edge <span class="selector-id">#--</span>开启边缘端口</span><br><span class="line">spanning-tree bpduguard enable <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br><span class="line">!</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line">name cisco</span><br><span class="line">revision 1</span><br><span class="line">instance 1 vlan 10, 20</span><br><span class="line">instance 2 vlan 30, 40</span><br></pre></td></tr></table></figure><h3 id="S1-4配置"><a href="#S1-4配置" class="headerlink" title="S1-4配置"></a>S1-4配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport access vlan 20</span><br><span class="line">switchport mode access</span><br><span class="line">spanning-tree portfast edge <span class="selector-id">#--</span>开启边缘端口</span><br><span class="line">spanning-tree bpduguard enable <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/3</span><br><span class="line">switchport access vlan 10</span><br><span class="line">switchport mode access</span><br><span class="line">spanning-tree portfast edge <span class="selector-id">#--</span>开启边缘端口</span><br><span class="line">spanning-tree bpduguard enable <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br><span class="line">!</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line">name cisco</span><br><span class="line">revision 1</span><br><span class="line">instance 1 vlan 10, 20</span><br><span class="line">instance 2 vlan 30, 40</span><br></pre></td></tr></table></figure><h3 id="主机互ping测试"><a href="#主机互ping测试" class="headerlink" title="主机互ping测试"></a>主机互ping测试</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117131554.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSTP</title>
      <link href="2021/01/17/RSTP/"/>
      <url>2021/01/17/RSTP/</url>
      
        <content type="html"><![CDATA[<h1 id="RSTP"><a href="#RSTP" class="headerlink" title="RSTP"></a>RSTP</h1><h2 id="RSTP对STP的改进"><a href="#RSTP对STP的改进" class="headerlink" title="RSTP对STP的改进"></a>RSTP对STP的改进</h2><p><strong>端口角色发生变化</strong></p><blockquote><ol><li><p>新增 AP（预备端口）和 BP（备份端口）</p><ul><li><p>AP（预备端口）：</p><p>a. 当交换机的RP端口down掉时，AP端口会立刻成为AP端口，并且立刻进入forwarding状态。</p></li><li><p>BP（备份端口）：</p><p>a. 当交换机从一个接口收到一份BPDU报文，包含的发送者桥ID为本身交换机的桥ID同时BPDU比本地接口的BPDU优时，则接口会被选为BP端口。</p><p>b. 当DP端口down掉时，BP端口需要等待18s的时间才会成为DP端口。</p></li></ul></li><li><p>新增边缘端口：</p><ul><li><p>边缘端口（EP）：由网络管理员手工配置，配置在交换机链接终端设备（电脑，AP，服务器等）</p></li><li><p>特性：</p><p>a. 一旦端口被设置为边缘端口，端口立刻进入forwarding状态。</p><p>b. 边缘端口UP/down不会引起RSTP的网络拓扑变化。</p><p>c. RSTP的网络拓扑不会影响边缘端口的通信。</p></li></ul></li></ol></blockquote><p><strong>RSTP增加的快速机制：</strong></p><blockquote><ol><li>RSTP快速收敛机制一：当交换机的RP端口down掉时，AP端口会立刻成为AP端口，并且立刻进入forwarding状态。</li><li>RSTP快速收敛机制二：当端口设置为边缘端口，会立刻进入forwarding状态</li></ol></blockquote><h2 id="边缘端口的机制："><a href="#边缘端口的机制：" class="headerlink" title="边缘端口的机制："></a>边缘端口的机制：</h2><blockquote><ol><li>边缘端口会每2s向外泛洪BPDU。</li><li>当边缘端口收到BPDU时，会丧失边缘端口的特性，成为普通的RSTP端口执行计算。</li></ol></blockquote><h2 id="开启BPDU保护功能："><a href="#开启BPDU保护功能：" class="headerlink" title="开启BPDU保护功能："></a>开启BPDU保护功能：</h2><blockquote><ol><li>在接口视图下：spanning-tree bpduguard enable</li><li>在全局试图下：spanning-tree portfast edge bpduguard default<ul><li>只针对边缘端口生效，边缘端口收到BPDU报文时直接进入error-down的状态。同时产生一份告警日志通知网络管理员。</li><li>error-down的接口需要网络管理员手动开启，从新开启边缘端口，断电之后在接口模式下no shutdown</li></ul></li></ol></blockquote><h2 id="RSTP端口状态："><a href="#RSTP端口状态：" class="headerlink" title="RSTP端口状态："></a>RSTP端口状态：</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117113730.png"></p><h2 id="针对问题一：P-A机制（1）"><a href="#针对问题一：P-A机制（1）" class="headerlink" title="针对问题一：P/A机制（1）"></a>针对问题一：P/A机制（1）</h2><p><strong><code>P/A（proposa/Agreement）提议/同意</code></strong></p><p><strong>P/A机制的基本原理</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117113837.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114100.png"></p><h2 id="针对问题一：P-A机制（2）"><a href="#针对问题一：P-A机制（2）" class="headerlink" title="针对问题一：P/A机制（2）"></a>针对问题一：P/A机制（2）</h2><p><strong>RSTP选举原理和STP本质上相同：选举根交换机-选举非根交换机上的根端口-选举指定端口-选举预备端口和备份端口</strong></p><blockquote><p>但是RSTP在选举的过程中加入了“发起请求-回复同意”（P/A机制）这种确认机制由于每个步骤有确认就不需要依赖计时器来保证网络拓扑无环才去转发只需要考虑BPDU发送报文并计算无环拓扑的时间（一般都是秒级）。</p></blockquote><h2 id="针对问题二：根端口快速切换机制"><a href="#针对问题二：根端口快速切换机制" class="headerlink" title="针对问题二：根端口快速切换机制"></a>针对问题二：根端口快速切换机制</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114321.png"></p><h2 id="针对问题三：次等BPDU处理机制"><a href="#针对问题三：次等BPDU处理机制" class="headerlink" title="针对问题三：次等BPDU处理机制"></a>针对问题三：次等BPDU处理机制</h2><p><strong>S2与S1的直连链路down掉，SWC的AP端口切换成DP端口并进入转发状态秒级时间内完成.</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114341.png"></p><h2 id="针对问题四：边缘端口的引入"><a href="#针对问题四：边缘端口的引入" class="headerlink" title="针对问题四：边缘端口的引入"></a>针对问题四：边缘端口的引入</h2><p><strong>在RSTP中，交换机连接终端的链路可立即进入转发状态</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114404.png"></p><h2 id="RSTP-BDPU保护"><a href="#RSTP-BDPU保护" class="headerlink" title="RSTP-BDPU保护"></a>RSTP-BDPU保护</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114544.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114558.png"></p><h2 id="RSTP-根保护"><a href="#RSTP-根保护" class="headerlink" title="RSTP-根保护"></a>RSTP-根保护</h2><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114616.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114625.png"></p><h2 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h2><p><strong>如图所示，S1，S2和S3组成一个环型的交换网络，为了消除环路对网络的影响，交换机都运行了RSTP，最终将环形网络结构修剪成无环路的树形网络结构.</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114714.png"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PC4：VPCS&gt; ip 192.168.1.1/24</span><br><span class="line">PC5：VPCS&gt; ip 192.168.1.2/24</span><br><span class="line"></span><br><span class="line">S1：</span><br><span class="line">S1(config)<span class="selector-id">#spanning-tree</span> mo rapid-pvst <span class="selector-id">#--</span>&gt;开启快速生成树</span><br><span class="line"></span><br><span class="line">S2：</span><br><span class="line">S2(config)<span class="selector-id">#spanning-tree</span> mo rapid-pvst <span class="selector-id">#--</span>&gt;开启快速生成树</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> spanning-tree portfast edge     <span class="selector-id">#--</span>&gt;开启边缘端口</span><br><span class="line"> spanning-tree bpduguard enable  <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br><span class="line"></span><br><span class="line">S3：</span><br><span class="line">S3(config)<span class="selector-id">#spanning-tree</span> mode rapid-pvst  <span class="selector-id">#--</span>&gt;开启快速生成树</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/2</span><br><span class="line"> spanning-tree portfast edge      <span class="selector-id">#--</span>&gt;开启边缘端口</span><br><span class="line"> spanning-tree bpduguard enable   <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br></pre></td></tr></table></figure><p><strong><code>思科</code>全局下开启BPDU保护（不建议）</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S2(config)<span class="selector-id">#spanning-tree</span> portfast edge bpduguard default</span><br></pre></td></tr></table></figure><h3 id="使用show查看配置"><a href="#使用show查看配置" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h3><p><strong>在相同优先级情况下，比较MAC地址，S1-MAC地址是三台交换机中最小的，所以S1为根桥，而S3地址最大，它的e0/0接口会成为AP接口</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114837.png"></p><h3 id="S1"><a href="#S1" class="headerlink" title="S1"></a>S1</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114904.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114913.png"></p><h3 id="S2"><a href="#S2" class="headerlink" title="S2"></a>S2</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114938.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114928.png"></p><h3 id="S3"><a href="#S3" class="headerlink" title="S3"></a>S3</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114951.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117114959.png"></p><p><strong>当S3关闭e0/1接口，RSTP很快就切换了e0/0端口，PC2:长ping：VPCS&gt; ping 192.168.1.1 -tS3关闭e0/1接口，RSTP很快就切换了e0/0端口，PC2:长ping：VPCS&gt; ping  192.168.1.1 -t</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115022.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115030.png"></p><h2 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h2><p><strong>如图所示，S-A，S-B，S-C，S-D组成一个环型的交换网络，为了消除环路对网络的影响，交换机都运行了RSTP，最终将环形网络结构修剪成无环路的树形网络结构</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115053.png"></p><p><strong>用快速生成树协议实现负载均衡：通过修改桥优先级，控制交换机S-A是人事部的根桥，S-B是人事部的次根桥；控制交换机S-A是研发部的次根桥，S-B是研发部的根桥.</strong></p><p><strong>vlan10-vlan20通过e1/0链路，vlan30-vlan40通过e1/1链路.用快速生成树协议实现负载均衡：通过修改桥优先级，控制交换机S-A是人事部的根桥，S-B是人事部的次根桥；控制交换机S-A是研发部的次根桥，S-B是研发部的根桥，vlan10-vlan20通过e1/0链路，vlan30-vlan40通过e1/1链路.</strong></p><h3 id="开启快速生成树"><a href="#开启快速生成树" class="headerlink" title="开启快速生成树"></a>开启快速生成树</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S-<span class="selector-tag">A</span>(config)<span class="selector-id">#spanning-tree</span> mode rapid-pvst <span class="selector-id">#--</span>&gt;配置快速生成树</span><br><span class="line">S-<span class="selector-tag">B</span>(config)<span class="selector-id">#spanning-tree</span> mode rapid-pvst </span><br><span class="line">S-C(config)<span class="selector-id">#spanning-tree</span> mode rapid-pvst </span><br><span class="line">S-D(config)<span class="selector-id">#spanning-tree</span> mode rapid-pvst </span><br></pre></td></tr></table></figure><h3 id="S-A"><a href="#S-A" class="headerlink" title="S-A"></a>S-A</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S-<span class="selector-tag">A</span>(config)<span class="selector-id">#vlan</span> 10,20,30,40   </span><br><span class="line">S-<span class="selector-tag">A</span>(config)<span class="selector-id">#vtp</span> mode server     <span class="selector-id">#--</span>&gt;开启VTP模式为服务器，思科私有</span><br><span class="line">S-<span class="selector-tag">A</span>(config)<span class="selector-id">#vtp</span> domain 123456   <span class="selector-id">#--</span>&gt;配置一个名字</span><br><span class="line">！</span><br><span class="line">spanning-tree vlan 10,20 priority 4096 </span><br><span class="line">spanning-tree vlan 30,40 priority 8192</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">！</span><br><span class="line">interface Ethernet1/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet1/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br></pre></td></tr></table></figure><h3 id="S-B"><a href="#S-B" class="headerlink" title="S-B"></a>S-B</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">S-<span class="selector-tag">B</span>(config)<span class="selector-id">#vtp</span> mode client          <span class="selector-id">#--</span>&gt;开启VTP模式为客户端</span><br><span class="line">S-<span class="selector-tag">B</span>(config)<span class="selector-id">#vtp</span> domain 123456</span><br><span class="line">！</span><br><span class="line">spanning-tree vlan 10,20 priority 8192</span><br><span class="line">spanning-tree vlan 30,40 priority 4096</span><br><span class="line">interface Ethernet0/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!         </span><br><span class="line">interface Ethernet1/0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet1/1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line"> spanning-tree vlan 30,40 port-priority 64</span><br></pre></td></tr></table></figure><h3 id="S-C"><a href="#S-C" class="headerlink" title="S-C"></a>S-C</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">S-C(config)<span class="selector-id">#vtp</span> mode client <span class="selector-id">#--</span>&gt;开启VTP模式为客户端</span><br><span class="line">S-C(config)<span class="selector-id">#vtp</span> domain 123456</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/1</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！ </span><br><span class="line">interface Ethernet0/0</span><br><span class="line">spanning-tree portfast edge <span class="selector-id">#--</span>&gt;开启边缘端口 </span><br><span class="line">spanning-tree bpduguard enable <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br></pre></td></tr></table></figure><h3 id="S-D"><a href="#S-D" class="headerlink" title="S-D"></a>S-D</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">S-D(config)<span class="selector-id">#vtp</span> mode client <span class="selector-id">#--</span>&gt;开启VTP模式为客户端</span><br><span class="line">S-D(config)<span class="selector-id">#vtp</span> domain 123456</span><br><span class="line">！</span><br><span class="line">interface Ethernet0/0</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0/2</span><br><span class="line">switchport trunk encapsulation dot1q</span><br><span class="line">switchport mode trunk</span><br><span class="line">！ </span><br><span class="line">interface Ethernet0/0</span><br><span class="line">spanning-tree portfast edge    <span class="selector-id">#--</span>&gt;开启边缘端口 </span><br><span class="line">spanning-tree bpduguard enable <span class="selector-id">#--</span>&gt;开启BPDU保护</span><br></pre></td></tr></table></figure><h2 id="使用show查看配置-1"><a href="#使用show查看配置-1" class="headerlink" title="使用show查看配置"></a>使用show查看配置</h2><h3 id="S-A-1"><a href="#S-A-1" class="headerlink" title="S-A"></a>S-A</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115336.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115348.png"></p><h3 id="S-B-1"><a href="#S-B-1" class="headerlink" title="S-B"></a>S-B</h3><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115422.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117115431.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STP</title>
      <link href="2021/01/17/STP/"/>
      <url>2021/01/17/STP/</url>
      
        <content type="html"><![CDATA[<h1 id="STP"><a href="#STP" class="headerlink" title="STP"></a>STP</h1><h2 id="二层环路的影响"><a href="#二层环路的影响" class="headerlink" title="二层环路的影响"></a>二层环路的影响</h2><p>1）广播风暴：数据帧不断的循环发送，导致需要耗费大量的CPU处理<br>2）MAC地址表的震荡：由于交换机的接口不断地收到同一个数据帧导致MAC地址表项不断被覆盖，交换机需要耗费大量的开销维护MAC地址表</p><blockquote><p>总结：如果不解决环路会大量消耗交换机的设备开销带宽资源，当CPU使用率过高很可能导致交换机开启过热保护，导致交换机断点，业务中断</p></blockquote><h2 id="为什么需要生成树"><a href="#为什么需要生成树" class="headerlink" title="为什么需要生成树"></a>为什么需要生成树</h2><p>1）生成树的出现不是真的需要，而是间接的需要<br>2）二层环境中需要备份和冗余</p><p><strong>在这种环境中没有环路，但是缺少了备份</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117111155.png"></p><p><strong>在这种环境中解决了备份，但是不做处理会导致环路，这时STP就有发挥它的作用了</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117111306.png"></p><h2 id="STP作用"><a href="#STP作用" class="headerlink" title="STP作用"></a>STP作用</h2><p><strong>STP在保证网络的冗余性的同时，保证交换机网络中不会出现二层环路</strong></p><blockquote><p>原理：通过在逻辑上阻塞某一些端口，使交换机成为树形网络，破除环路在链路上或设备发生故障时，又重新启动阻塞端口，使网络恢复数据转发.</p></blockquote><h2 id="STP如何计算阻塞端口"><a href="#STP如何计算阻塞端口" class="headerlink" title="STP如何计算阻塞端口"></a>STP如何计算阻塞端口</h2><p><strong>STP选举根桥与端口角色的过程都是由交换机自主完成的，交换机选举中都会发送一种包，这种数据包叫做BPDU(Bridge Protocol Data Unit)网桥协议数据单元</strong></p><blockquote><ol><li><p>通过选举根桥</p><ul><li> 根桥是整个交换网络中心的数据转发</li><li>根桥选举通过桥ID+MAC地址<br> 选举规则：先比较优先级，优先级默认为32768.（可以调整，必须是4096的倍数，数值越小的越优先）如果优先级相同，则比较MAC地址的大小，数值小的优先，从左往右比.</li><li>端口ID：端口的优先级+端口号<br> 选举规则：先比较端口的优先级，默认为128，可调整（只能是16的倍数，数值小的优先）如果优先级相同，则才比较端口编号，数值小的优先</li></ul></li><li><p>每个非根选取一个根端口</p><ul><li> 根端口（RP）：在每一个非根桥交换机上都有，且只有一个，接收最优的BPDU，用于转发数据</li><li>通过根路径开销（cost）：以非根桥交换机的端口为出发点，沿途经过链路去访问根桥交换机的开销值进行累加，其中总开销最小的为根路径开销，则被选择成RP端口.<br> 选举规则：非根桥与根桥交换机相连的接口都为RP端口.</li></ul></li><li><p>选举指定端口</p><ul><li>指定端口（DP）：在这段链路上，转发BPDU包给其他接口的叫做指定端口<br>  选举规则：与根桥ID的比较规则完全一致</li></ul></li><li><p>阻塞非指定端口</p><ul><li>用于逻辑上阻塞数据，不转发数据从而破坏环路.<br>  选举规则：一个端口既不是指定端口也不是根端口，则被选为AP端口</li></ul></li></ol></blockquote><h2 id="STP的端口状态"><a href="#STP的端口状态" class="headerlink" title="STP的端口状态"></a>STP的端口状态</h2><blockquote><ol><li>disable：未启用STP的状态，不接收、不发送、不处理、BPDU报文。</li><li>blocking：阻塞状态，在选择根桥交换机时或者当端口被选为AP端口时停留的状态。发送、接受处理BPDU，不传发数据。</li><li>listeningL：侦听状态，选举端口角色。发送、接收、处理BPDU，不转发数据</li><li>learning：学习状态，学习mac地址表。发送、接收、处理BPDU，不转发数据。</li><li>forwarding：转发状态，学习mac地址表，转发数据，发送、接收、处理BPDU。</li></ol></blockquote><h2 id="STP的计时器"><a href="#STP的计时器" class="headerlink" title="STP的计时器"></a>STP的计时器</h2><blockquote><ol><li>hello：更新计时器，更新计时器默认为２S，DP端口会每２S向外泛洪BPDU报文，实时地监控网络的变化情况。</li><li>max age :最大老化时间20S，端口存放BPDU的时间。当端口在20S内未收到对应的BPDU时，会将端口存放的BPDU丢弃，此时STP也认为网络拓扑发生变化。</li><li>message age:信息延时，规定了网络的直径。<br>端口存放BPDU的时间为：maxage - message age 20s -延时</li><li>forward delay：转发延时，默认的时间为15S，作用是为了防止临时环路。<br>意思：交换机抢占了新的根桥。</li></ol></blockquote><h2 id="STP的不足问题"><a href="#STP的不足问题" class="headerlink" title="STP的不足问题"></a>STP的不足问题</h2><p><strong>问题1：初始化状态需要30秒的时间才能收敛</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117111900.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117111921.png"></p><p><strong>S3与S1的直连链路down掉，AP端口切换成RP端口并进入转发状态至少需要经过30S</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117111940.png"></p><p><strong>问题3：S1与S2直连链路down掉，则S3的AP端口切换成DP端口并进入发状态大约需要50s：</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117112009.png"></p><p><strong>问题4：交换机连接终端的链路进入转发需要经过30s</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117112031.png"></p><p><strong>问题5：STP的拓扑变更机制</strong></p><blockquote><p>TC（Topology change）拓扑改变:先由变更点朝根桥方向发送TCN消息收到该消息的上游交换机就会回复TCA消息进行确认；最后TCN消息到达根桥后，再由根桥发送TC消息通知设备删除桥MAC地址表项，机制复杂，效率低下。</p></blockquote><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117112111.png"></p><p><strong>问题6：STP的其他不足之处–端口状态</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117112130.png"></p>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EVE-NG搭建</title>
      <link href="2021/01/16/EVE-NG%E6%90%AD%E5%BB%BA/"/>
      <url>2021/01/16/EVE-NG%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="EVE模拟器及镜像介绍"><a href="#EVE模拟器及镜像介绍" class="headerlink" title="EVE模拟器及镜像介绍"></a>EVE模拟器及镜像介绍</h1><p>EVE所需的连接工具及镜像.<br><a href="https://pan.baidu.com/s/1KaqNo644ulijjuR4ZWGhFQ">https://pan.baidu.com/s/1KaqNo644ulijjuR4ZWGhFQ</a> 提取码：5571</p><h2 id="EVE-NG介绍"><a href="#EVE-NG介绍" class="headerlink" title="EVE-NG介绍"></a>EVE-NG介绍</h2><p>EVE模拟器跟流行的PacketTracert、GNS3、eNSP安装即可使用的软件不同。EVE本身就是一个系统，和我们日常用的Windows、Mac以及Linux是一个层级的产品，底层使用的是Ubuntu系统，默认账户root，密码eve。默认账户登录进去后，系统开始提示修改密码等，建议密码继续保持eve，其他操作都选默认，有修改需求的后期再改</p><h2 id="镜像简介绍"><a href="#镜像简介绍" class="headerlink" title="镜像简介绍"></a>镜像简介绍</h2><h3 id="Dynamic"><a href="#Dynamic" class="headerlink" title="Dynamic"></a>Dynamic</h3><p>Dynamic用于模拟思科（Cisco）的路由器，基于它演变的模拟器有小凡、工大瑞普、GNS3等。它可以运行标准的IOS镜像，虽然此模拟器比较陈旧，但仍然有很多网工愿意使用。EVE-NG支持Cisco IOS 1710、3725与7206.</p><h3 id="IOL"><a href="#IOL" class="headerlink" title="IOL"></a>IOL</h3><p>IOL为IOS on Linux的简写，IOL是指将思科的路由器、交换机ios系统运行在Linux操作系统之上，二层交换机特性支持丰富，基于它演变的模拟器有WEB-IOU。IOL可以运行在基于x86平台的任意Linux发行版系统上，支持交换机高级特性，占用资源更少，启动快等优点。运行IOL需要两个文件，一个是以bin为后缀的镜像，一个是以iourc为名的license文件，iourc是通过名为CiscoIOUKeygen.py的工具自动生成的</p><h3 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h3><p>QEMU（Quick Emulator）是一套开源产品，可以帮助EVE-NG运行更多的虚拟设备，完成复杂实验，越来越多的设备商开始开发并释放出适配KVM环境的系统，EVE-NG可以协助qcow2镜像运行更多设备，提高可玩性。EVE-NG需要QEMU镜像的后缀名为qcow2，该文件本质是一个操作系统的虚拟硬盘文件，正因如此，可以通过自己手动制作镜像几乎可以模拟任何硬件设备</p><h2 id="VM虚拟机的安装"><a href="#VM虚拟机的安装" class="headerlink" title="VM虚拟机的安装"></a>VM虚拟机的安装</h2><p><strong>搭建EVE-NG使用的是VMware虚拟机，本章不会讲解，请自行上网查询安装VMware</strong></p><h2 id="搭建EVE-NG"><a href="#搭建EVE-NG" class="headerlink" title="搭建EVE-NG"></a>搭建EVE-NG</h2><p><strong>右键EVE压缩包，选择打开方式，选择VMware Workstation</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214054316.png"></p><p><strong>选择存储虚拟机的路径，尽量不要安装在C盘，虚拟机名称默认即可，接着选择导入</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214320101.png"></p><p><strong>等待导入进度</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214320101.png"></p><p><strong>选中EVE，右键选择设置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214354554.png"></p><p><strong>选择内存——按自己的内存情况，8G内存的可以选择4-6G使用，16G可以选择8-12G或更高使用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214438470.png"></p><p><strong>接着选择处理器——勾选处理器数量（P）:4,每个处理器的内核数量（C）:1–&gt;确保是“虚拟化Intel VT -x/EPT 或 AMD-V/RVI(V)”</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214506948.png"></p><p><strong>设置完成，开启虚拟机</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214525123.png"></p><p><strong>开启虚拟机来到第一个页面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214542480.png"></p><p><strong>第二个页面输入用户root，密码eve</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214614717.png"></p><p><strong>第三–四个页面，虚拟机会让你重新设置密码，保持密码还是eve即可，回车</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214710186.png"></p><p><strong>第五页面直到最后都选择默认，按下回车即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zsjmal2316/typora-image/img/image-20210116214731206.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103116.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103131.png"></p><p><strong>接着虚拟机会重新启动，等待虚拟器重启完成，再次输入root用户和之前设置的密码就搭建完成</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103407.png"></p><p><strong>重启的完后页面会多出了一个IP地址，这个IP地址我们可以使用浏览器进行浏览，建议使用firefox及Google浏览器访问. 推荐firefox访问</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103431.png"></p><p><strong>输入IP地址，默认用户admin，密码eve，选择html5 conlose（web方式）登录即可以使用，但是并不推荐，因为web方式站不支持对网络设备进行抓包。在这推荐使用Native console（本地登录）但是必须得安装EVE-NG的客户端。安装的客户端已在上面发的网盘连接中，需自行安装，这里不演示，只需要都下一步即可安装</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103455.png"></p><p><strong>登录之后，可以看一些设置，管理，系统，信息.简单说一下</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117103518.png"></p><p><strong><code>管理</code>：用户管理，创建用户，一般都不怎么需要创建</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104324.png"></p><p><strong><code>系统</code>：可以查看系统日志和系统状态，状态有CPU，内存，swap和磁盘的使用情况，还有自己运行的多少个节点</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104523.png"></p><p><strong><code>信息</code>：关于和论坛，可以让你了解更多的东西</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104530.png"></p><p><strong><code>主页</code>—&gt;新建一个标签标签并保存</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104611.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104630.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104716.png"></p><p><strong>如果没有右键看不到节点选项为蓝色，说明没有该镜像，需要拉去，下述有讲解传输拉去的方法和软件</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104728.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104738.png"></p><h2 id="安装EVE-NG客户端与使用工具导入镜像"><a href="#安装EVE-NG客户端与使用工具导入镜像" class="headerlink" title="安装EVE-NG客户端与使用工具导入镜像"></a>安装EVE-NG客户端与使用工具导入镜像</h2><p>官方提供了一个自带的客户端安装包集，里面内置了Putty、UltraVNC、Wireshark，导入镜像使用WinSCP工具导入会更简单. 两个工具安装时候选择默认安装即可</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104805.png"></p><h3 id="什么是-WinSCP"><a href="#什么是-WinSCP" class="headerlink" title="什么是 WinSCP"></a>什么是 WinSCP</h3><p>WinSCP 是一个 Windows 环境下使用的 SSH 的开源化 SFTP 客户端。同时支持 SCP 协议。它的主要功能是在本地与远程计算机间安全地复制文件，并且可以直接编辑文件</p><h3 id="传输镜像和修改权限"><a href="#传输镜像和修改权限" class="headerlink" title="传输镜像和修改权限"></a>传输镜像和修改权限</h3><p>安装完EVE客户端和winSCP之后，打开winSCPU新建一个站点，输入虚拟机EVE的IP地址，账号和密码，点击登录</p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104927.png"></p><p><strong>选择是，连接成功</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117104950.png"></p><p><strong>找到放置EVE-NG放置镜像的目录</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105013.png"></p><p><strong>在Windows文件下找到IOL镜像，拖动至EVE-NG文件下的<code>/opt/unetlab/addone/iol/bin</code></strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105056.png"></p><p><strong>L2表示是2层交换机，L3表示三层，L2L3都有很多种，其实都差不多，选择一个即可，重要的是圈起来的两个文件CiscoIOUKeygen.py和iourc，必须得一起放置，否者会导致交换机和路由器开不了机</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105119.png"></p><p><strong>这里选择IOL，原因是因为它不需要耗费太多的内存和CPU，开机速度比一般的镜像要快，普通实验已经够用了</strong></p><p><strong>接着设置IOL镜像所有文件的权限，右键属性，将所有权限勾选，避免搭建时候出现问题</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105155.png"></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105218.png"></p><h2 id="通过Native-console登录和使用xshell连接"><a href="#通过Native-console登录和使用xshell连接" class="headerlink" title="通过Native console登录和使用xshell连接"></a>通过Native console登录和使用xshell连接</h2><p><strong>有了EVE-NG客户端，在登录时可以使用Native console模式进行登录，返回登录页面，选择Native console模式</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105325.png"></p><p><strong>可以选择默认的vpcs连接，点击几下交换机就会出现，这是安装了EVE-NG客户端自带的</strong></p><blockquote><p>提示：如果你有安装xshell或SecureCRT软件，此时用firefor浏览会在上方弹出一个选择使用什么连接，这时你可以选择你的xshell或SecureCRT软件就可以连接到交换机了</p></blockquote><p><strong>这里连接EVE-NG模拟器使用的客户端是xshell，点击几下交换机连接到xshell，连接到的名称是ip+端口，可以右键修改自己想要的名称</strong></p><p><img src="https://my-oss-image.oss-cn-guangzhou.aliyuncs.com/img/20210117105408.png"></p><p><strong>如果使用SecureCRT连接，就不需改名，它会自动修改</strong></p><blockquote><p>注意：这里使用的是firefor做演示，使用firefor的好处是可以弹出直接使用xshell连接，Google的需要自己寻找xshell的位置，各有各的好处。希望能帮到大家</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 路由交换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EVE-NG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404.html"/>
      <url>/404.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
